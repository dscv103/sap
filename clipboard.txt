Got it. You want the “create GitHub issues from implementation plan” prompt refactored so that instead of phases in an implementation plan, the issues are created directly from the output artifacts of your spec-driven workflow (requirements.md, design.md, tasks.md). That way, when run, the workflow produces clear, unambiguous GitHub issues that gpt-5-mini can directly implement as coding tasks.

Here’s the refactored version:

⸻

Create GitHub Issues from Spec-Driven Workflow

Create GitHub Issues using the structured outputs (requirements.md, design.md, tasks.md) produced by the Spec-Driven Workflow ￼.

Process
	1.	Parse requirements.md, design.md, and tasks.md.
	•	Extract user stories and acceptance criteria from requirements.
	•	Extract technical architecture, interfaces, and constraints from design.
	•	Extract task breakdowns, dependencies, and deliverables from tasks.
	2.	Check existing issues using search_issues.
	3.	Create one GitHub issue per task from tasks.md, enriched with requirements and design context.
	4.	Use feature_request.yml for feature tasks and chore_request.yml for supporting/infra tasks (fallback to default if missing).
	5.	Ensure traceability by linking each issue back to its source section in requirements.md and design.md.

Requirements
	•	One issue per task defined in tasks.md.
	•	Each issue must be self-contained: all necessary requirements and design references included.
	•	Issues must be clear, unambiguous, and directly implementable by gpt-5-mini.
	•	Verify against existing issues before creation to prevent duplicates.

Issue Content
	•	Title: [Task ID] – [Short Task Name]
	•	Description:
	•	Objective: Directly from tasks.md.
	•	Requirements: Relevant clauses from requirements.md in EARS notation.
	•	Design References: Diagrams, interfaces, or data models from design.md.
	•	Acceptance Criteria: Explicit testable conditions from requirements.md.
	•	Dependencies: Linked tasks or prerequisites.
	•	Labels: feature or chore depending on type.
	•	Traceability: Links to corresponding sections in requirements.md, design.md, tasks.md.

⸻

✅ This way, instead of abstract “phases,” every issue is grounded in the structured workflow outputs and is ready for gpt-5-mini to implement without ambiguity.

Would you like me to generate a sample set of GitHub issue templates (one example each for requirements.md, design.md, tasks.md) so you can see how an actual issue would look after this refactor?