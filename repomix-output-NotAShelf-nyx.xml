This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  assets/
    nix-snowflake-colours.svg
  workflows/
    check.yml.disabled
    cleanup.yml
    fmt.yml
    iso.yml
    labeler.yml
    npins.yml
    packages.yml
    prelude.yml
  CODEOWNERS
  dependabot.yml
  FUNDING.yml
  labeler.yml
  SECURITY.md
docs/
  cheatsheet.md
  installing.md
  LICENSE
homes/
  notashelf/
    misc/
      dconf.nix
      default.nix
      rnnoise.nix
      xdg.nix
    packages/
      cli/
        default.nix
        desktop.nix
        server.nix
        shared.nix
        wayland.nix
      dev/
        default.nix
      gui/
        3dprint.nix
        default.nix
        shared.nix
        wayland.nix
      default.nix
    programs/
      graphical/
        apps/
          chromium/
            default.nix
          discord/
            default.nix
          element/
            default.nix
          librewolf/
            default.nix
          obs/
            default.nix
          office/
            default.nix
          schizofox/
            default.nix
          spotify/
            default.nix
          thunderbird/
            default.nix
            settings.nix
          vscode/
            default.nix
          webcord/
            default.nix
          zathura/
            default.nix
          default.nix
        gaming/
          chess.nix
          default.nix
          mangohud.nix
          minecraft.nix
        launchers/
          anyrun/
            styles/
              dark.scss
            default.nix
          rofi/
            default.nix
          tofi/
            default.nix
            emoji
          default.nix
        misc/
          wlogout/
            default.nix
          default.nix
        screenlock/
          gtklock/
            styles/
              dark.scss
            default.nix
          swaylock/
            default.nix
          default.nix
        wms/
          hyprland/
            config/
              binds.nix
              decorations.nix
              exec.nix
              extraConfig.nix
              general.nix
              gestures.nix
              input.nix
              layout.nix
              misc.nix
              windowrules.nix
            packages/
              wrapper/
                default.nix
                session.sh
              dbus-hyprland-env.nix
              default.nix
              hyprshot.nix
              propaganda.nix
            default.nix
          i3/
            default.nix
          sway/
            config.nix
            default.nix
          default.nix
        default.nix
      media/
        mpv/
          default.nix
          low1k.nix
        ncmpcpp/
          binds.nix
          default.nix
          settings.nix
        beets.nix
        default.nix
        packages.nix
      terminal/
        editors/
          helix/
            default.nix
          neovim/
            lua/
              display/
                mouse.lua
                numbertoggle.lua
                split.lua
                ui.lua
              misc/
                abbrev.lua
                autoread.lua
                declutter.lua
                diagnostics.lua
                handlers.lua
                neovide.lua
                vscode.lua
              plugins/
                notify.lua
              autocmds.lua
              core.lua
              ft.lua
            mappings/
              insert.nix
              normal.nix
              select.nix
              terminal.nix
            plugins/
              settings/
                assistant.nix
                autocomplete.nix
                autopairs.nix
                binds.nix
                comments.nix
                dashboard.nix
                debugger.nix
                filetree.nix
                gestures.nix
                git.nix
                languages.nix
                lsp.nix
                minimap.nix
                notes.nix
                notify.nix
                presence.nix
                projects.nix
                session.nix
                statusline.nix
                tabline.nix
                telescope.nix
                template.nix
                terminal.nix
                theme.nix
                treesitter.nix
                ui.nix
                utility.nix
                visuals.nix
              sources/
                default.nix
              extra.nix
            runtime/
              after/
                ftdetect/
                  gitconfig.lua
                  graphql.lua
                ftplugin/
                  envrc.lua
                  gitcommit.lua
                  go.lua
                  json.lua
                  man.lua
                  markdown.lua
                  qf.lua
                  xml.lua
                queries/
                  go/
                    injections.scm
                  jsx/
                    injections.scm
                  markdown/
                    textobjects.scm
                  markdown_inline/
                    highlights.scm
                  mdx/
                    injections.scm
                  rust/
                    injections.scm
                  typst/
                    highlights.scm
              spell/
                en.utf-8.add
            default.nix
            settings.nix
            wrapper.nix
          default.nix
        emulators/
          foot/
            presets/
              catppuccin-mocha/
                colors.nix
              oxocarbon-dark/
                colors.nix
            default.nix
          kitty/
            default.nix
            settings.nix
          wezterm/
            colorSchemes.nix
            default.nix
          default.nix
        shell/
          zsh/
            rc/
              binds.zsh
              comp.zsh
              fzf-tab.zsh
              misc.zsh
              modules.zsh
              set.zsh
              unset.zsh
            aliases.nix
            default.nix
            init.nix
            plugins.nix
          bash.nix
          default.nix
          starship.nix
        tools/
          bin/
            compilec/
              compilec.sh
            extract/
              extract.sh
            fs-diff/
              fs-diff.sh
            git-peek/
              git-peek.sh
            preview/
              preview.sh
            purge-direnv/
              purge-direnv.sh
            rm-gpucache/
              rm-gpucache.sh
            show-zombie-parents/
              show-zombie-parents.sh
            tzip/
              tzip.sh
            default.nix
          fastfetch/
            default.nix
          git/
            aliases.nix
            default.nix
            ignore.nix
          neomutt/
            binds.nix
            colors.nix
            default.nix
            macros.nix
            settings.nix
          newsboat/
            default.nix
            urls.nix
          vifm/
            config/
              colors/
                .gitkeep
              settings/
                abbr.vifm
                commands.vifm
                favicons.vifm
                ft.vifm
                fv.vifm
                mappings.vifm
              vifmrc
            default.nix
          xplr/
            default.nix
            plugins.nix
          yazi/
            theme/
              icons.nix
              manager.nix
              status.nix
            default.nix
          zellij/
            layouts/
              system.kdl
            default.nix
          bat.nix
          bottom.nix
          default.nix
          dircolors.nix
          editorconfig.nix
          eza.nix
          fzf.nix
          gh.nix
          gpg.nix
          man.nix
          nix-direnv.nix
          nix-index.nix
          nix-init.nix
          ranger.nix
          ripgrep.nix
          ssh.nix
          tealdeer.nix
          thefuck.nix
          transient-services.nix
          zoxide.nix
        default.nix
      default.nix
    services/
      shared/
        dunst/
          assets/
            brightness.svg
            mic-mute.svg
            mic.svg
            notification.svg
            volume-mute.svg
            volume.svg
          default.nix
        media/
          easyeffects/
            default.nix
            quiet.json
          mpd/
            default.nix
          default.nix
          noisetorch.nix
          spotifyd.nix
        default.nix
        kdeconnect.nix
        mail.nix
        nextcloud.nix
        transience.nix
        tray.nix
        udiskie.nix
      wayland/
        ags/
          bin/
            bash/
              hyprctl_swallow
              move_window
              open_window
            python/
              weather
            default.nix
          src/
            services/
              brightness.ts
              directoryMonitorService.ts
              inputMonitor.ts
            style/
              bar/
                modules/
                  _audio.scss
                  _battery.scss
                  _bluetooth.scss
                  _clock.scss
                  _launcher.scss
                  _lock.scss
                  _net.scss
                  _power.scss
                  _swallow.scss
                  _system.scss
                  _tray.scss
                  _weather.scss
                  _workspaces.scss
                _bar.scss
              desktop/
                _desktop.scss
                _desktopIcons.scss
                _desktopMenu.scss
              launcher/
                _launcher.scss
              music/
                _music.scss
              notifications/
                notifications.scss
              popups/
                _brightnessPopup.scss
                _popups.scss
                _volumePopup.scss
              beziers.scss
              colors.scss
              fonts.scss
              main.scss
              mixins.scss
              prelude.scss
            utils/
              appIcon.ts
              audio.ts
              battery.ts
              bluetooth.ts
              desktop.ts
              global.ts
              hyprland.ts
              icons.ts
              launcher.ts
              mpris.ts
              network.ts
              popupWindow.ts
              swallow.ts
              system.ts
              tray.ts
              weather.ts
            variables/
              weather.ts
            windows/
              bar/
                modules/
                  audio.ts
                  battery.ts
                  bluetooth.ts
                  clock.ts
                  launcher.ts
                  lock.ts
                  network.ts
                  power.ts
                  swallow.ts
                  system.ts
                  tray.ts
                  weather.ts
                  workspaces.ts
                index.ts
              desktop/
                modules/
                  icons.ts
                  menu.ts
                index.ts
              launcher/
                index.ts
              music/
                modules/
                  controls.ts
                  cover.ts
                  player_info.ts
                  popup_window.ts
                  time_info.ts
                  title_artists.ts
                index.ts
              notifications/
                index.ts
              popups/
                modules/
                  brightnessPopup.ts
                  volumePopup.ts
                index.ts
            .eslintrc.yml
            .gitignore
            .prettierrc
            .stylelintrc.yml
            imports.ts
            main.ts
            package.json
            style.css
            tsconfig.json
          .envrc
          default.nix
          README.md
          shell.nix
        clipboard/
          default.nix
        gammastep/
          default.nix
        hyprpaper/
          default.nix
        mako/
          default.nix
        swaybg/
          default.nix
        swayidle/
          default.nix
        waybar/
          presets/
            catppuccin-mocha/
              config.nix
              style.nix
            oxocarbon-dark/
              config.nix
              style.nix
          scripts/
            waybar-wttr.py
          default.nix
        default.nix
      x11/
        default.nix
      default.nix
    themes/
      default.nix
      global.nix
      gtk.nix
      qt.nix
    home.nix
  default.nix
hosts/
  apollon/
    host.nix
  artemis/
    host.nix
  atlas/
    fs/
      default.nix
    modules/
      default.nix
      device.nix
      system.nix
      usrEnv.nix
    host.nix
  enyo/
    fs/
      default.nix
      external.nix
    kernel/
      config/
        amd.nix
        base.nix
        low-latency.nix
        security.nix
        unused.nix
      packages/
        xanmod.nix
      default.nix
    modules/
      default.nix
      device.nix
      profiles.nix
      style.nix
      system.nix
      usrEnv.nix
    btrfs.nix
    host.nix
    networking.nix
    wireguard.nix
  epimetheus/
    fs/
      default.nix
    modules/
      default.nix
      device.nix
      system.nix
      usrEnv.nix
    encryption.nix
    host.nix
  erebus/
    image/
      default.nix
    system/
      boot.nix
      default.nix
      desktop.nix
      environment.nix
      fonts.nix
      login.nix
      networking.nix
      nix.nix
      programs.nix
      security.nix
      services.nix
      users.nix
    virtualization/
      default.nix
    host.nix
  gaea/
    system/
      programs/
        neovim/
          config/
            init.vim
            maps.vim
            plugins.vim
          default.nix
        default.nix
        git.nix
      default.nix
    host.nix
  helios/
    fs/
      default.nix
      external.nix
    modules/
      default.nix
      device.nix
      services.nix
      system.nix
      usrEnv.nix
    host.nix
    nftables.nix
  hermes/
    fs/
      default.nix
    modules/
      default.nix
      device.nix
      profiles.nix
      style.nix
      system.nix
      usrEnv.nix
    encryption.nix
    host.nix
    networking.nix
  icarus/
    fs/
      default.nix
    modules/
      default.nix
      device.nix
      system.nix
      usrEnv.nix
    host.nix
  leto/
    fs/
      default.nix
    modules/
      default.nix
      device.nix
      system.nix
      usrEnv.nix
    host.nix
  prometheus/
    fs/
      default.nix
    modules/
      default.nix
      device.nix
      system.nix
      usrEnv.nix
    host.nix
  selene/
    fs/
      default.nix
      external.nix
    modules/
      default.nix
      device.nix
      services.nix
      system.nix
      usrEnv.nix
    host.nix
    nftables.nix
  default.nix
  README.md
modules/
  core/
    common/
      docs/
        module.nix
      secrets/
        module.nix
      system/
        activation/
          module.nix
        containers/
          alpha/
            default.nix
          beta/
            default.nix
          module.nix
        emulation/
          module.nix
        encryption/
          module.nix
        gaming/
          gamemode.nix
          gamescope.nix
          module.nix
          steam.nix
        hardware/
          cpu/
            amd/
              default.nix
            intel/
              default.nix
            default.nix
          gpu/
            amd/
              default.nix
            intel/
              default.nix
            nvidia/
              default.nix
            default.nix
          multimedia/
            sound/
              servers/
                pipewire/
                  wireplumber/
                    default.nix
                    devices.nix
                    settings.nix
                  default.nix
                  low-latency.nix
                  settings.nix
                default.nix
                pulse.nix
              default.nix
              realtime.nix
              rtkit.nix
            video/
              default.nix
            default.nix
          bluetooth.nix
          module.nix
          redistributable.nix
          tpm.nix
          yubikey.nix
        impermanence/
          module.nix
        nix/
          overlays/
            patches/
              0001-nix-default-flake.patch
              0001-nix-make-errors-great.patch
              0001-nix-reject-flake-config.patch
              0002-zsh-completion-remote-files.patch
              0002-zsh-globquote.patch
              0003-nom-print-traces.patch
            default.nix
          transcend/
            default.nix
          builders.nix
          documentation.nix
          module.nix
          nixpkgs.nix
          system.nix
        os/
          boot/
            loaders/
              grub/
                default.nix
              none/
                default.nix
              systemd-boot/
                default.nix
              default.nix
            generic.nix
            module.nix
            plymouth.nix
            secure-boot.nix
          display/
            wayland/
              wms/
                hyprland/
                  default.nix
                default.nix
              default.nix
              environment.nix
              services.nix
              xdg-portals.nix
              xwayland.nix
            xorg/
              default.nix
              environment.nix
              xdg-portals.nix
              xserver.nix
            module.nix
          environment/
            aliases.nix
            etc.nix
            locale.nix
            misc.nix
            module.nix
            packages.nix
            paths.nix
            variables.nix
          fs/
            module.nix
          misc/
            console.nix
            crash.nix
            journald.nix
            module.nix
            xdg-portals.nix
          networking/
            firewall/
              nftables/
                default.nix
                rules.nix
              default.nix
              fail2ban.nix
              tarpit.nix
            tailscale/
              autoconnect.nix
              default.nix
            blocker.nix
            module.nix
            network-manager.nix
            optimize.nix
            resolved.nix
            ssh.nix
            tcpcrypt.nix
            wireless.nix
          programs/
            bash.nix
            direnv.nix
            git.nix
            module.nix
            nano.nix
            zsh.nix
          services/
            systemd/
              brightnessd.nix
              default.nix
              oomd.nix
              timesyncd.nix
            fwupd.nix
            getty.nix
            logrotate.nix
            module.nix
            ntpd.nix
            thermald.nix
            zram.nix
          users/
            builder.nix
            module.nix
            notashelf.nix
            root.nix
          README.md
        security/
          apparmor.nix
          auditd.nix
          clamav.nix
          fprint.nix
          impurity-tracker.nix
          kernel.nix
          memalloc.nix
          module.nix
          pam.nix
          pki.nix
          polkit.nix
          selinux.nix
          sudo.nix
          usbguard.nix
          virtualization.nix
        switch/
          module.nix
        virtualization/
          distrobox.nix
          module.nix
          podman.nix
          qemu.nix
          waydroid.nix
        README.md
    profiles/
      gaming/
        module.nix
      workstation/
        module.nix
    roles/
      graphical/
        system/
          security/
            default.nix
            polkit.nix
          services/
            login/
              default.nix
              greetd.nix
              logind.nix
              pam.nix
              session.nix
            default.nix
            xserver.nix
          environment.nix
          module.nix
      headless/
        system/
          documentation.nix
          environment.nix
          fonts.nix
          module.nix
          nix.nix
          programs.nix
          services.nix
          systemd.nix
          users.nix
          xdg.nix
      iso/
        image/
          module.nix
        system/
          misc/
            console.nix
            default.nix
          services/
            default.nix
            logrotate.nix
            openssh.nix
          boot.nix
          environment.nix
          hardware.nix
          module.nix
          networking.nix
          nix.nix
          security.nix
          users.nix
      laptop/
        system/
          power/
            monitors/
              scripts/
                power_monitor.sh
              auto-cpufreq.nix
              power-profiles.nix
              tlp.nix
            default.nix
          module.nix
          touchpad.nix
      microvm/
        system/
          nix/
            default.nix
          os/
            programs/
              default.nix
              git.nix
              neovim.nix
              tmux.nix
              zsh.nix
            users/
              admin.nix
              default.nix
            default.nix
            environment.nix
            networking.nix
          security/
            default.nix
          default.nix
      server/
        system/
          services/
            bincache/
              atticd.nix
              default.nix
              harmonia.nix
              nix-serve.nix
            databases/
              default.nix
              garage.nix
              mongodb.nix
              mysql.nix
              postgresql.nix
              redis.nix
            monitoring/
              grafana/
                objects/
                  dashboards/
                    dashboard-01.json
                    dashboard-02.json
                dashboards.nix
                default.nix
              default.nix
              loki.nix
              prometheus.nix
              uptime-kuma.nix
            networking/
              headscale/
                acls.nix
                default.nix
                derp.nix
                dns.nix
              wireguard/
                default.nix
                server.nix
                wg-quick.nix
              default.nix
            nginx/
              static/
                gpg.txt
                header.txt
                root.txt
              default.nix
            social/
              default.nix
              mastodon.nix
              matrix.nix
            default.nix
            elasticsearch.nix
            forgejo-runner.nix
            forgejo.nix
            jellyfin.nix
            kanidm.nix
            mailserver.nix
            miniflux.nix
            mkm.nix
            nextcloud.nix
            reposilite.nix
            searxng.nix
            tor.nix
            vaultwarden.nix
          module.nix
      workstation/
        system/
          programs/
            ccache.nix
            default.nix
            flatpak.nix
            java.nix
            misc.nix
            nh.nix
            wine.nix
            xdg-ninja.nix
          security/
            default.nix
            firejail.nix
            tor.nix
          services/
            adb.nix
            dbus.nix
            default.nix
            earlyoom.nix
            gnome.nix
            location.nix
            misc.nix
            printing.nix
            runners.nix
            systemd.nix
            zswap.nix
          fonts.nix
          misc.nix
          module.nix
  extra/
    exported/
      onedev/
        default.nix
    shared/
      home-manager/
        gtklock/
          default.nix
        transience/
          default.nix
        vifm/
          default.nix
        xplr/
          default.nix
        default.nix
      nixos/
        comma/
          default.nix
        reposilite/
          default.nix
        wakapi/
          default.nix
        default.nix
      default.nix
  options/
    device/
      capabilities.nix
      hardware.nix
      module.nix
    docs/
      module.nix
    internal/
      module.nix
      removed.nix
      renamed.nix
    meta/
      module.nix
    profiles/
      module.nix
    style/
      palettes/
        angel-light.nix
        black-metal.nix
        carbon-dark.nix
        catppuccin-frappe.nix
        catppuccin-macchiato.nix
        catppuccin-mocha.nix
        decay-dark.nix
        default-dark.nix
        monochrome.nix
        noelle.nix
        oxocarbon-dark.nix
        tokyo-night.nix
        varda-theme.nix
      colors.nix
      gtk.nix
      module.nix
      qt.nix
    system/
      networking/
        default.nix
        nftables.nix
        tailscale.nix
      programs/
        default.nix
        gaming.nix
      services/
        bincache.nix
        databases.nix
        default.nix
        monitoring.nix
        networking.nix
        social.nix
      activation.nix
      boot.nix
      containers.nix
      emulation.nix
      encryption.nix
      fs.nix
      impermanence.nix
      module.nix
      security.nix
      virtualization.nix
    usrEnv/
      programs/
        default.nix
        gaming.nix
        launchers.nix
        lockers.nix
        media.nix
      services/
        default.nix
        media.nix
      brightness.nix
      desktop.nix
      module.nix
    README.md
parts/
  apps/
    build-all-hosts/
      app.nix
    check-restart/
      app.nix
    check-store-errors/
      app.nix
    mount-local-disks/
      app.nix
    prefetch-url-sha256/
      app.nix
    upgrade-postgresql/
      app.nix
    default.nix
  checks/
    default.nix
  lib/
    aliases.nix
    builders.nix
    ci.nix
    conversion.nix
    dag.nix
    default.nix
    deploy.nix
    firewall.nix
    fs.nix
    hardware.nix
    misc.nix
    modules.nix
    namespacing.nix
    networking.nix
    secrets.nix
    ssh.nix
    systemd.nix
    themes.nix
    validators.nix
    xdg.nix
  modules/
    default.nix
  npins/
    default.nix
    sources.json
  pkgs/
    packages/
      nicksfetch/
        patches/
          0001-nicksfetch.patch
        package.nix
      plymouth-themes/
        package.nix
      schizofox-startpage/
        src/
          .eslintrc.js
          index.html
          README.md
          search.js
          style.css
        package.nix
    default.nix
  pre-commit/
    hooks/
      exiftool.nix
      git-cliff.nix
      prettier.nix
      typos.nix
    default.nix
    utils.nix
  templates/
    c/
      src/
        main.cpp
      .editorconfig
      .gitignore
      default.nix
      flake.nix
      Makefile
      shell.nix
    go/
      cmd/
        main.go
      .envrc
      default.nix
      flake.nix
      shell.nix
    node/
      src/
        index.ts
      .gitignore
      default.nix
      flake.nix
      package.json
      shell.nix
      tsconfig.json
    python/
      .envrc
      default.nix
      flake.nix
      shell.nix
    rust/
      src/
        main.rs
      Cargo.toml
      default.nix
      flake.nix
      shell.nix
    default.nix
  args.nix
  ci.nix
  default.nix
  deployments.nix
  fmt.nix
  hydra.nix
  iso-images.nix
  keys.nix
  shell.nix
.editorconfig
.envrc
.git-blame-ignore-revs
.gitattributes
.gitignore
.luacheckrc
.luarc.json
.neoconf.json
flake.lock
flake.nix
LICENSE
README.md
shell.nix
statix.toml
stylua.toml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/assets/nix-snowflake-colours.svg">
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="535"
   height="535"
   viewBox="0 0 501.56251 501.56249"
   id="svg2"
   version="1.1"
   inkscape:version="1.3.2 (091e20ef0f, 2023-11-25)"
   sodipodi:docname="nix-snowflake-colours.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:dc="http://purl.org/dc/elements/1.1/">
  <defs
     id="defs4">
    <linearGradient
       inkscape:collect="always"
       id="linearGradient5562">
      <stop
         style="stop-color:#699ad7;stop-opacity:1"
         offset="0"
         id="stop5564" />
      <stop
         id="stop5566"
         offset="0.24345198"
         style="stop-color:#7eb1dd;stop-opacity:1" />
      <stop
         style="stop-color:#7ebae4;stop-opacity:1"
         offset="1"
         id="stop5568" />
    </linearGradient>
    <linearGradient
       inkscape:collect="always"
       id="linearGradient5053">
      <stop
         style="stop-color:#415e9a;stop-opacity:1"
         offset="0"
         id="stop5055" />
      <stop
         id="stop5057"
         offset="0.23168644"
         style="stop-color:#4a6baf;stop-opacity:1" />
      <stop
         style="stop-color:#5277c3;stop-opacity:1"
         offset="1"
         id="stop5059" />
    </linearGradient>
    <linearGradient
       inkscape:collect="always"
       xlink:href="#linearGradient5562"
       id="linearGradient4328"
       gradientUnits="userSpaceOnUse"
       gradientTransform="translate(70.650339,-1055.1511)"
       x1="200.59668"
       y1="351.41116"
       x2="290.08701"
       y2="506.18814" />
    <linearGradient
       inkscape:collect="always"
       xlink:href="#linearGradient5053"
       id="linearGradient4330"
       gradientUnits="userSpaceOnUse"
       gradientTransform="translate(864.69589,-1491.3405)"
       x1="-584.19934"
       y1="782.33563"
       x2="-496.29703"
       y2="937.71399" />
  </defs>
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.70904368"
     inkscape:cx="99.429699"
     inkscape:cy="195.33352"
     inkscape:document-units="px"
     inkscape:current-layer="layer3"
     showgrid="false"
     inkscape:window-width="1920"
     inkscape:window-height="1050"
     inkscape:window-x="1920"
     inkscape:window-y="30"
     inkscape:window-maximized="1"
     inkscape:snap-global="true"
     fit-margin-top="0"
     fit-margin-left="0"
     fit-margin-right="0"
     fit-margin-bottom="0"
     inkscape:showpageshadow="2"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:groupmode="layer"
     id="layer3"
     inkscape:label="gradient-logo"
     style="display:inline;opacity:1"
     transform="translate(-156.41121,933.30685)">
    <g
       id="g2"
       transform="matrix(0.99994059,0,0,0.99994059,-0.06321798,33.188377)"
       style="stroke-width:1.00006">
      <path
         sodipodi:nodetypes="cccccccccc"
         inkscape:connector-curvature="0"
         id="path3336-6"
         d="m 309.54892,-710.38827 122.19683,211.67512 -56.15706,0.5268 -32.6236,-56.8692 -32.85645,56.5653 -27.90237,-0.011 -14.29086,-24.6896 46.81047,-80.4901 -33.22946,-57.8257 z"
         style="opacity:1;fill:url(#linearGradient4328);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:3.00018;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
      <use
         height="100%"
         width="100%"
         transform="rotate(60,407.11155,-715.78724)"
         id="use3439-6"
         inkscape:transform-center-y="151.59082"
         inkscape:transform-center-x="124.43045"
         xlink:href="#path3336-6"
         y="0"
         x="0"
         style="stroke-width:1.00006" />
      <use
         height="100%"
         width="100%"
         transform="rotate(-60,407.31177,-715.70016)"
         id="use3445-0"
         inkscape:transform-center-y="75.573958"
         inkscape:transform-center-x="-168.20651"
         xlink:href="#path3336-6"
         y="0"
         x="0"
         style="stroke-width:1.00006" />
      <use
         height="100%"
         width="100%"
         transform="rotate(180,407.41868,-715.7565)"
         id="use3449-5"
         inkscape:transform-center-y="-139.94592"
         inkscape:transform-center-x="59.669705"
         xlink:href="#path3336-6"
         y="0"
         x="0"
         style="stroke-width:1.00006" />
      <path
         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:url(#linearGradient4330);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:3.00018;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate"
         d="m 309.54892,-710.38827 122.19683,211.67512 -56.15706,0.5268 -32.6236,-56.8692 -32.85645,56.5653 -27.90237,-0.011 -14.29086,-24.6896 46.81047,-80.4901 -33.22946,-57.8256 z"
         id="path4260-0"
         inkscape:connector-curvature="0"
         sodipodi:nodetypes="cccccccccc" />
      <use
         height="100%"
         width="100%"
         transform="rotate(120,407.33916,-716.08356)"
         id="use4354-5"
         xlink:href="#path4260-0"
         y="0"
         x="0"
         style="display:inline;stroke-width:1.00006" />
      <use
         height="100%"
         width="100%"
         transform="rotate(-120,407.28823,-715.86995)"
         id="use4362-2"
         xlink:href="#path4260-0"
         y="0"
         x="0"
         style="display:inline;stroke-width:1.00006" />
    </g>
  </g>
</svg>
</file>

<file path=".github/workflows/check.yml.disabled">
name: Check Flake Validity

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "**.nix"
      - "**.lock"
      - ".github/workflows/check.yml"
  push:
    paths:
      - "**.nix"
      - "**.lock"
      - ".github/workflows/check.yml"

jobs:
  flake-check-health:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up QEMU support"
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: "Install nix"
        uses: cachix/install-nix-action@master
        with:
          install_url: "https://nixos.org/nix/install"
          extra_nix_config: |
            experimental-features = nix-command flakes fetch-tree
            allow-import-from-derivation = false
            extra-platforms = aarch64-linux

            # extra substituters
            # my own package set
            extra-substituters = https://nyx.cachix.org
            extra-trusted-public-keys = nyx.cachix.org-1:xH6G0MO9PrpeGe7mHBtj1WbNzmnXr7jId2mCiq6hipE=

            # nix-community
            extra-substituters = https://nix-community.cachix.org
            extra-trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - name: "Nix Magic Cache"
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: "Perform health checks"
        uses: DeterminateSystems/flake-checker-action@main

  flake-check-outputs:
    needs: flake-check-health
    uses: ./.github/workflows/prelude.yml
    secrets:
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    with:
      command: |
        systemd-run --user --scope -p MemoryLimit=4000M -p CPUQuota=90% \
          nix flake check --print-build-logs -Lv
</file>

<file path=".github/workflows/cleanup.yml">
name: Cleanup
on:
  workflow_dispatch:
  schedule:
    - cron: "0 4 1 * *" # 4AM on 1st of every month
    - cron: "0 4 15 * *" # 4AM on the 15th of every month
jobs:
  branches:
    name: Cleanup old branches
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Delete old branches"
        uses: beatlabs/delete-old-branches-action@v0.0.10
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          date: "1 months ago"
          dry_run: false
          delete_tags: false
          exclude_open_pr_branches: true
</file>

<file path=".github/workflows/fmt.yml">
name: Check flake formatting
on:
  workflow_dispatch:
  pull_request:
    paths:
      - "**.nix"
      - ".github/workflows/check.yml"
  push:
    paths:
      - "**.nix"
      - ".github/workflows/check.yml"
jobs:
  check-formatting:
    name: "Check flake formatting"
    uses: ./.github/workflows/prelude.yml
    secrets:
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    with:
      command: |
        system=$(nix eval --raw --impure --expr builtins.currentSystem)

        # Evaluate formatting check to verify tree-wide formatting.
        nix-fast-build --skip-cached --no-nom \
          --flake .#checks."${system}".treefmt
</file>

<file path=".github/workflows/iso.yml">
name: Build & Publish ISO Images
on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * mon" # every monday at 3AM
concurrency: build
jobs:
  build-images:
    name: "Build ISO Images"
    if: github.repository == 'notashelf/nyx'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - erebus
          - gaea
    permissions:
      contents: write
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Install Lix"
        uses: DeterminateSystems/nix-installer-action@v13
        with:
          source-url: "https://install.lix.systems/lix/lix-installer-x86_64-linux"
          diagnostic-endpoint: "" # so eelco can have more personalized self-merges? no thank you
          backtrace: "true"
          extra-conf: |
            # Extra experimental features. fetch-tree is required internally
            experimental-features = nix-command flakes fetch-tree
            allow-import-from-derivation = false
            extra-platforms = aarch64-linux

            # extra substituters
            # my own package set
            extra-substituters = https://nyx.cachix.org
            extra-trusted-public-keys = nyx.cachix.org-1:xH6G0MO9PrpeGe7mHBtj1WbNzmnXr7jId2mCiq6hipE=

            # nix-community
            extra-substituters = https://nix-community.cachix.org
            extra-trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - name: "Nix Magic Cache"
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: "Install nix-fast-build"
        run: nix profile install nixpkgs#nix-fast-build

      - name: "Build ISO Images"
        shell: bash
        run: |
          nix-fast-build --skip-cached --no-nom \
            --flake .#images.${{ matrix.image }} \
            --out-link ${{ matrix.image }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image }}-iso-image
          path: ${{ matrix.image }}-/iso/*.iso # nix-fast-build appends - to the out-link name

  publish-images:
    name: "Build ISO Images"
    runs-on: ubuntu-latest
    needs: build-images
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    steps:
      - name: "Download ISO Artifacts"
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: "Get current date"
        id: get-date
        # output format: 2023-12-30-234559
        run: echo "date=$(date +'%Y-%m-%d-%H%M%S')" >> "${GITHUB_OUTPUT}"

      - name: "Calculate Checksums"
        run: |
          calculate_checksum() {
            sha256sum "$1" | awk '{print $1}'
          }

          iso_files=$(find . -maxdepth 1 -type f -name "*.iso")

          # write checksums
          touch checksums.txt
          for file in $iso_files; do
            checksum=$(calculate_checksum "$file")
            echo "$file $checksum" >> checksums.txt
          done

      - name: "Create Release"
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "iso-${{ steps.get-date.outputs.date }}"
          tag_name: "iso-${{ steps.get-date.outputs.date }}"
          files: |
            *.iso
            checksums.txt
          body: |
            # Weekly Iso Releases (${{ steps.get-date.outputs.date }})

            Weekly automated ISO image releases for my NixOS configurations. Their definitions are as follows

            * **erebus**: Airgapped system for sensitive jobs.
            * **gaea**: Modified installation media

            Both ISO images can be installed simultaneously using the following oneliner

            ```bash
            REPO="notashelf/nyx"; curl -s "https://api.github.com/repos/$REPO/releases/latest" | jq \
              -r '.assets[] | select(.content_type=="application/octet-stream") | .browser_download_url' | head \
              -n 2 | xargs \
              -n 1 wget
            ```

            or, alternatively, you may pick a ISO and download from the section below.

            ## Warning

            Do note that those configurations make assumptions about your setup, and may yield undesirable systems. Use
            at your own risk.
</file>

<file path=".github/workflows/labeler.yml">
name: Labeler
on: [pull_request]
jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: "Assign Labels"
        uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
</file>

<file path=".github/workflows/npins.yml">
name: Update pinned sources
on:
  workflow_dispatch:
  schedule:
    - cron: "0 4 1 * *" # 4AM on 1st of every month
    - cron: "0 4 15 * *" # 4AM on the 15th of every month
jobs:
  update:
    if: github.repository == 'notashelf/nyx'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Install Lix"
        uses: DeterminateSystems/nix-installer-action@v13
        with:
          source-url: "https://install.lix.systems/lix/lix-installer-x86_64-linux"
          diagnostic-endpoint: "" # so eelco can have more personalized self-merges? no thank you
          backtrace: "true"
          extra-conf: |
            experimental-features = nix-command flakes
            allow-import-from-derivation = false

      - name: "Update npins"
        run: |
          cd parts || exit
          nix run nixpkgs#npins update

      - name: "Commit Changes"
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_user_name: GitHub Actions
          commit_message: "[CI]: update npins"
          commit_options: "--no-verify --signoff"
          push_options: "--force"
</file>

<file path=".github/workflows/packages.yml">
name: Build local packages
on:
  pull_request:
  push:
    branches:
      - master
      - main
    paths:
      - "parts/pkgs/packages"
      - "parts/pkgs/default.nix"
jobs:
  generate-nix-matrix:
    name: "Generate CI from flake output"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Install Nix"
        uses: cachix/install-nix-action@master

      - name: "Generate Nix Matrix"
        id: set-matrix
        run: |
          set -Eeu
          matrix="$(nix eval --json '.#githubActions.matrix')"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
  nix-build-from-matrix:
    name: "Build .#${{ matrix.attr }} via Nix"
    needs: generate-nix-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJSON(needs.generate-nix-matrix.outputs.matrix)}}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Install Nix"
        uses: cachix/install-nix-action@master

      - name: "Build packages from generated Matrix"
        run: |
          nix build -L ".#${{ matrix.attr }}"
</file>

<file path=".github/workflows/prelude.yml">
name: Prelude
on:
  workflow_call:
    inputs:
      command:
        required: false
        type: string
      platform:
        default: "ubuntu"
        required: false
        type: string
      optimize-space:
        default: true
        required: false
        type: boolean
    secrets:
      GH_TOKEN:
        required: true
jobs:
  nix:
    runs-on: "${{ inputs.platform }}-latest"
    steps:
      - name: "Maximize build space"
        if: ${{ inputs.optimize-space }}
        uses: easimon/maximize-build-space@v10
        with:
          overprovision-lvm: true
          remove-android: true
          remove-dotnet: true
          remove-haskell: true
          remove-codeql: true

      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          token: "${{ secrets.GH_TOKEN }}"

      - name: "Set up QEMU support"
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: "Install Lix"
        uses: DeterminateSystems/nix-installer-action@v13
        with:
          source-url: "https://install.lix.systems/lix/lix-installer-x86_64-linux"
          diagnostic-endpoint: "" # so eelco can have more personalized self-merges? no thank you
          backtrace: "true"
          extra-conf: |
            # Extra experimental features. fetch-tree is required internally
            experimental-features = nix-command flakes fetch-tree
            allow-import-from-derivation = false
            extra-platforms = aarch64-linux

            # extra substituters
            # my own package set
            extra-substituters = https://nyx.cachix.org
            extra-trusted-public-keys = nyx.cachix.org-1:xH6G0MO9PrpeGe7mHBtj1WbNzmnXr7jId2mCiq6hipE=

            # nix-community
            extra-substituters = https://nix-community.cachix.org
            extra-trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - name: "Nix Magic Cache"
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: "Install nix-fast-build"
        run: nix profile install nixpkgs#nix-fast-build

      - name: "Run Input: ${{ inputs.command }}"
        run: "${{ inputs.command }}"
</file>

<file path=".github/CODEOWNERS">
* @notashelf
</file>

<file path=".github/dependabot.yml">
version: 2
updates:
  - package-ecosystem: github-actions
    directory: "/"
    schedule:
      interval: weekly
      time: "01:00"
    open-pull-requests-limit: 10
    reviewers:
      - NotAShelf
    assignees:
      - NotAShelf
</file>

<file path=".github/FUNDING.yml">
github: NotAShelf
liberapay: notashelf
ko_fi: notashelf
</file>

<file path=".github/labeler.yml">
module-system:
  - changed-files:
      - any-glob-to-any-file: modules/**/*
docs:
  - changed-files:
      - any-glob-to-any-file: docs/*
flake-packages:
  - changed-files:
      - any-glob-to-any-file: parts/pkgs/**/*
secrets:
  - changed-files:
      - any-glob-to-any-file: secrets/**/*
hosts:
  - changed-files:
      - any-glob-to-any-file: hosts/**/*
treewide:
  - changed-files:
      - any-glob-to-any-file: "*"
CI:
  - changed-files:
      - any-glob-to-any-file: .github/workflows/*
</file>

<file path=".github/SECURITY.md">
# Overview

If you have seen the sheer depth of my security-related tweaks within this
repository, then you are probably aware that I consider security a high-priority
goal, and a must-have for my system configurations. If you happen to be browsing
through this repository and will or did take your time to report a
vulnerability, then I owe you a thank you.

## The Process

While reporting a vulnerability, please make sure that you have checked out to
the latest commit to ensure you are not reporting something that has been
already patched and that your personal modifications (if any) are not affecting
the source.

If the issue is something we can fix on a system level (i.e a kernel parameter,
addition/removal of a module or a few lines written to `/etc/`) then there are
two main ways you can disclose a vulnerability. You can either choose privately
report it (via the security tab) or create an issue. You may also choose to
email me directly at `raf [at] notashelf [dot] dev`[^1]. Additionally, if you
are feeling extra generous at the time, you can also provide me a patch that
helps resolve the issue or a pull request resolving it.

That said, I appreciate anyone taking their time to simply report the issue.

[^1]:
    The email address is slightly obfuscated to prevent web-scrapers from
    picking up my email address from the security file. I am not sure if this helps
    but it'll be foolish not to try after the sheer volume of AI startup related
    e-mails.
</file>

<file path="docs/cheatsheet.md">
# Cheat sheet

## Show GC roots

```sh
nix-store --gc --print-roots | grep -v "<hostName>" | column -t | sort -k3 -k1
```

## List all packages

```sh
nix-store -q --requisites /run/current-system | cut -d- -f2- | sort | uniq
```

<!-- deno-fmt-ignore-start -->

> [!TIP]
> You can add a `wc -l` at the end of the above command, but that will not be
> an accurate representation of your package count, as the same package can be
> repeated with different versions.

<!-- deno-fmt-ignore-end -->

## Find biggest packages

```sh
nix path-info -hsr /run/current-system/ | sort -hrk2 | head -n 30
```

## Find biggest closures (packages including dependencies)

```sh
nix path-info -hSr /run/current-system/ | sort -hrk2 | head -n 10
```

## Show package dependencies as tree

> Assuming `hello` is in PATH

```sh
nix-store -q --tree $(realpath $(which hello))
```

## Show package dependencies including size

```sh
nix path-info -hSr nixpkgs#hello
```

## Show the things that will change on reboot

```sh
diff <(nix-store -qR /run/current-system) <(nix-store -qR  /run/booted-system)
```
</file>

<file path="docs/installing.md">
# Installing

[resources]: https://github.com/notAShelf/nyx?tab=readme-ov-file#cool-resources
[interactive pages]: https://github.com/notAShelf/nyx?tab=readme-ov-file#interactive-pages
[NixOS manual]: https://nixos.org/manual/nixos/stable
[Nixpkgs manual]: https://nixos.org/manual/nixpkgs/stable/
[@viperML's blog]: https://ayats.org/

Sorry, but I do not provide installation steps for any of my configurations! I
will recommend, however, a bunch of helpful [resources] to begin with.

<!-- deno-fmt-ignore-start -->

> [!TIP]
> The [NixOS manual] should be your holy book at all times. [Nixpkgs manual]
> will answer your questions on concepts you will become familiar down the line.
> Additionally, [@viperML's blog] can shed some light on workflows with Nix and
> [interactive pages] will allow you to search obscure library functions,
> options or packages.

<!-- deno-fmt-ignore-end -->

I do not provide any installation tips for _this_ repo, but here are my tips to
any beginner that may be looking into starting with NixOS. If you are a hardened
veteran, you might still benefit from checking out the [resources] section for
some lesser-known tips that are only documented in blogs. You learn something
new every day :)

## Personal Tips

[learnxinyminutes.com]: https://learnxinyminutes.com/docs/nix
[noogle.dev]: https://noogle.dev
[module system]: https://nixos.org/manual/nixos/stable/#sec-writing-modules
[search.nixos.org]: https://search.nixos.org
[stop-using-nix-env.privatevoid.net]: https://stop-using-nix-env.privatevoid.net/
[Archwiki]: https://wiki.archlinux.org/
[Gentoo Wiki]: https://wiki.gentoo.org

0. **Do not attempt to boot off this configuration**. Really, you will not have
   a good time. There are much better things you can spend your time on,
   learning Nix being only one of them.

   - Likewise, dissecting other NixOS users' configurations is _not_ a good idea
     until you are comfortable with Nix: you _will_ be confused by the sheer
     number of abstractions and hacks one might feel is adequate when it really
     is not.

1. **Evaluate your choice of distro accordingly**. Nix and NixOS come with a
   very specific set of pros and cons: you will need to carefully consider
   whether you are willing to make the trade.

   - Nix and NixOS will make assumptions about your knowledge about traditional
     concepts that NixOS build upon. A degree of familiarity is expected.
   - Generic distributed binaries will not work, and will likely need specific
     building or patching steps to make sure the program works on NixOS. You
     will need to get familiar with the packaging. Ask yourself if you _really_
     wish to spend your time learning a brand new ecosystem. There are (usually)
     no shortcuts to take.
   - Form your own opinion. I have witnessed a large number of NixOS user making
     the switch because someone who they hold in high regard has told them to.
     Do not make the switch unless you are confident you _truly_ understand the
     pros and cons of the system. An immutable, declarative, "infrastructure as
     code" system may sound cool but it could also be truly redundant if you are
     not planning to make use of its blessings. What good are atomic rollbacks
     for if you get everything from Flatpak repositories?

2. **Use the minimal installer**. Calamares in nixpkgs contains nasty hacks and
   limitations that can severely cripple your installation, or create obscure
   issues. Use the minimal installer to familiarize yourself with the ecosystem,
   and you will have a smoother experience.

   - You may still get the _graphical_ ISO if you prefer to boot from a
     graphical environment. It will contain the command-line tools you can use
     to install NixOS manually, but make sure to **avoid Calamares** regardless
     of your installer ISO.

3. **Try one thing at a time**. Nix and NixOS will throw at you a wide variety
   of concepts that you will need to learn. Some of those concepts are optional,
   some are mandatory and others are good to know. The variety can be
   overwhelming, so learn about the Nix language first to help you learn
   concepts that you will come by later. [learnxinyminutes.com] has a pretty
   sweet page on learning data types in Nix. You will need to know about those.

   - Learn about the custom library. nixpkgs contains its own standard library,
     usually available under `lib` and you will likely need to build your own at
     some point. Check out [noogle.dev] for interactive documentation on
     `builtins` and the standard library (`lib`). It also contains documentation
     on obscure builders in `pkgs` that you might need to use.
   - Leave flakes to later. A lot of Nix users begin under the impression that
     flakes are mandatory - they are not. You do not need to use flakes unless
     you feel comfortable working with them. First understand the NixOS'
     [module system] and I assure you, you will reap its rewards.
   - Ask. NixOS community has been one of the best communities I have been a
     part of. No matter how dumb and obscure my questions may be, I have found
     answers and guidance. While I **will not** provide support for this
     repository, I am happy to answer your questions regarding Nix or NixOS if
     you create an issue under the issues tab. Ask, and ye shall receive.

4. **Source code is the documentation**. NixOS is known for its bad
   documentation and while bad is not the word I would use for it, it is
   certainly disorganized and hard to parse. My recommendation is reading the
   source code - mostly for packages and modules.

   - While the term "source code" may seem daunting, it may not be as difficult
     to navigate as you might anticipate. NixOS modules are _self-documenting_,
     meaning that almost all module options will include a `description` section
     that maintainers use to leave human-readable comments and notes on module
     options. You can browse in [search.nixos.org] will contain useful tips on
     how you may set up certain options.

   - Read the error messages. They are certainly not great, but you would be
     surprised by how much a 5-10 line read gets you. Newer Nix versions have
     also gotten much better at displaying error locations, so this may be a
     non-issue for you.

   - If reading Nix code and derivations still sound difficult, consider that
     Nix _might not_ be for you. There is lots of reading and so little
     hand-holding involved - you will need to adapt.

5. **Use the module system**. I really cannot emphasize this enough: you should
   master the module system. It is your greatest ally while setting up NixOS.

   - First learn to _read_ the module system, then learn to _write_ for it.
     Every option you see in NixOS configurations are provided by the module
     system. For example, `programs.firefox.enable` or
     `services.miniflux.enable` are program and service setups provided by
     Nixpkgs' module system. Generally both of those options handle adding the
     package for the program in question to your package list _in addition_ to
     providing an interface for configuring the program.

   - Sometimes programs will require additional setup, setup that you would not
     get automatically by simply adding the package to
     `environment.systemPackages` or `home.packages`. The module system also
     provides a remedy to this by automating the setup process (and still adding
     the package to your respective `packages` list.) When you see an option
     such as `programs.foo.enable`, choose it over adding `foo` to your system
     packages.

6. **Avoid nix-env if you can help it**. Ad-hoc package management is not Nix's
   strong suit, and on NixOS you do not need it. Better, declarative,
   alternatives are at your disposal.

   - Use `environment.systemPackages` for system-wide package installations,
     `users.users.<your_username>.packages` for user-specific package
     installations or `home.packages` for user-specific package installations
     under Home-Manager. See [stop-using-nix-env.privatevoid.net] for more
     details to why, and how.

   - On non-NixOS systems, prefer using the flake-enabled nix3 commands.
     `nix profile install nixpkgs#foo` would be preferable to its nix-env
     counterpart due to design related reasons.

7. **Avoid starter templates**. The aforementioned lack of good documentation
   has lead to many Nix users producing their own starter templates. While I
   cannot say _all_ templates lack quality, I can _confidently_ say that they
   will almost always contain opinionated defaults, defaults that may confuse
   some users.

   - Use the default configuration, and additional utilities (such as flakes,
     Home-Manager, etc.) one by one as you need them. You _may not_ always want
     the default configurations and options shipped by templates.
   - NixOS moves fast, and breaks. If the template you have decided on is old,
     you may come across obscure error messages that just tell you that
     something is removed - but not how to resolve the issue.

8. **Experiment**. You will find that a lot of times, documentation found in
   commonly cited resources such as [Archwiki] or [Gentoo Wiki] apply with
   varying degrees of tweaking involved. Examples on common setups may still be
   possible to ship on NixOS using the aforementioned module system.

   - One of benefits of NixOS is that you have the luxury to experiment: atomic
     rollbacks will allow you to go back from your mistakes when you eventually
     make one. Use this feature, and tweak your system. Though, remember to keep
     backups. No rollback system is _truly_ infallible.

That concludes my list of "starter" tips and tricks. If you happen to have
stumbled upon this page, but remain curious _please_ do contact me. I am willing
to answer your questions as long as I am free over e-mail via
`raf [at] notashelf [dot] dev` or over Discord, by the handle `@notashelf`. You
may also reach out to me over Mastodon, via `@raf@social.notashelf.dev` or on
Matrix, by shooting me a DM at `https://matrix.to/#/@raf:notashelf.dev`

I also welcome your feedback over those channels, should you wish to provide
any.
</file>

<file path="docs/LICENSE">
Attribution 4.0 International

=======================================================================

Creative Commons Corporation ("Creative Commons") is not a law firm and
does not provide legal services or legal advice. Distribution of
Creative Commons public licenses does not create a lawyer-client or
other relationship. Creative Commons makes its licenses and related
information available on an "as-is" basis. Creative Commons gives no
warranties regarding its licenses, any material licensed under their
terms and conditions, or any related information. Creative Commons
disclaims all liability for damages resulting from their use to the
fullest extent possible.

Using Creative Commons Public Licenses

Creative Commons public licenses provide a standard set of terms and
conditions that creators and other rights holders may use to share
original works of authorship and other material subject to copyright
and certain other rights specified in the public license below. The
following considerations are for informational purposes only, are not
exhaustive, and do not form part of our licenses.

     Considerations for licensors: Our public licenses are
     intended for use by those authorized to give the public
     permission to use material in ways otherwise restricted by
     copyright and certain other rights. Our licenses are
     irrevocable. Licensors should read and understand the terms
     and conditions of the license they choose before applying it.
     Licensors should also secure all rights necessary before
     applying our licenses so that the public can reuse the
     material as expected. Licensors should clearly mark any
     material not subject to the license. This includes other CC-
     licensed material, or material used under an exception or
     limitation to copyright. More considerations for licensors:
     wiki.creativecommons.org/Considerations_for_licensors

     Considerations for the public: By using one of our public
     licenses, a licensor grants the public permission to use the
     licensed material under specified terms and conditions. If
     the licensor's permission is not necessary for any reason--for
     example, because of any applicable exception or limitation to
     copyright--then that use is not regulated by the license. Our
     licenses grant only permissions under copyright and certain
     other rights that a licensor has authority to grant. Use of
     the licensed material may still be restricted for other
     reasons, including because others have copyright or other
     rights in the material. A licensor may make special requests,
     such as asking that all changes be marked or described.
     Although not required by our licenses, you are encouraged to
     respect those requests where reasonable. More considerations
     for the public:
     wiki.creativecommons.org/Considerations_for_licensees

=======================================================================

Creative Commons Attribution 4.0 International Public License

By exercising the Licensed Rights (defined below), You accept and agree
to be bound by the terms and conditions of this Creative Commons
Attribution 4.0 International Public License ("Public License"). To the
extent this Public License may be interpreted as a contract, You are
granted the Licensed Rights in consideration of Your acceptance of
these terms and conditions, and the Licensor grants You such rights in
consideration of benefits the Licensor receives from making the
Licensed Material available under these terms and conditions.


Section 1 -- Definitions.

  a. Adapted Material means material subject to Copyright and Similar
     Rights that is derived from or based upon the Licensed Material
     and in which the Licensed Material is translated, altered,
     arranged, transformed, or otherwise modified in a manner requiring
     permission under the Copyright and Similar Rights held by the
     Licensor. For purposes of this Public License, where the Licensed
     Material is a musical work, performance, or sound recording,
     Adapted Material is always produced where the Licensed Material is
     synched in timed relation with a moving image.

  b. Adapter's License means the license You apply to Your Copyright
     and Similar Rights in Your contributions to Adapted Material in
     accordance with the terms and conditions of this Public License.

  c. Copyright and Similar Rights means copyright and/or similar rights
     closely related to copyright including, without limitation,
     performance, broadcast, sound recording, and Sui Generis Database
     Rights, without regard to how the rights are labeled or
     categorized. For purposes of this Public License, the rights
     specified in Section 2(b)(1)-(2) are not Copyright and Similar
     Rights.

  d. Effective Technological Measures means those measures that, in the
     absence of proper authority, may not be circumvented under laws
     fulfilling obligations under Article 11 of the WIPO Copyright
     Treaty adopted on December 20, 1996, and/or similar international
     agreements.

  e. Exceptions and Limitations means fair use, fair dealing, and/or
     any other exception or limitation to Copyright and Similar Rights
     that applies to Your use of the Licensed Material.

  f. Licensed Material means the artistic or literary work, database,
     or other material to which the Licensor applied this Public
     License.

  g. Licensed Rights means the rights granted to You subject to the
     terms and conditions of this Public License, which are limited to
     all Copyright and Similar Rights that apply to Your use of the
     Licensed Material and that the Licensor has authority to license.

  h. Licensor means the individual(s) or entity(ies) granting rights
     under this Public License.

  i. Share means to provide material to the public by any means or
     process that requires permission under the Licensed Rights, such
     as reproduction, public display, public performance, distribution,
     dissemination, communication, or importation, and to make material
     available to the public including in ways that members of the
     public may access the material from a place and at a time
     individually chosen by them.

  j. Sui Generis Database Rights means rights other than copyright
     resulting from Directive 96/9/EC of the European Parliament and of
     the Council of 11 March 1996 on the legal protection of databases,
     as amended and/or succeeded, as well as other essentially
     equivalent rights anywhere in the world.

  k. You means the individual or entity exercising the Licensed Rights
     under this Public License. Your has a corresponding meaning.


Section 2 -- Scope.

  a. License grant.

       1. Subject to the terms and conditions of this Public License,
          the Licensor hereby grants You a worldwide, royalty-free,
          non-sublicensable, non-exclusive, irrevocable license to
          exercise the Licensed Rights in the Licensed Material to:

            a. reproduce and Share the Licensed Material, in whole or
               in part; and

            b. produce, reproduce, and Share Adapted Material.

       2. Exceptions and Limitations. For the avoidance of doubt, where
          Exceptions and Limitations apply to Your use, this Public
          License does not apply, and You do not need to comply with
          its terms and conditions.

       3. Term. The term of this Public License is specified in Section
          6(a).

       4. Media and formats; technical modifications allowed. The
          Licensor authorizes You to exercise the Licensed Rights in
          all media and formats whether now known or hereafter created,
          and to make technical modifications necessary to do so. The
          Licensor waives and/or agrees not to assert any right or
          authority to forbid You from making technical modifications
          necessary to exercise the Licensed Rights, including
          technical modifications necessary to circumvent Effective
          Technological Measures. For purposes of this Public License,
          simply making modifications authorized by this Section 2(a)
          (4) never produces Adapted Material.

       5. Downstream recipients.

            a. Offer from the Licensor -- Licensed Material. Every
               recipient of the Licensed Material automatically
               receives an offer from the Licensor to exercise the
               Licensed Rights under the terms and conditions of this
               Public License.

            b. No downstream restrictions. You may not offer or impose
               any additional or different terms or conditions on, or
               apply any Effective Technological Measures to, the
               Licensed Material if doing so restricts exercise of the
               Licensed Rights by any recipient of the Licensed
               Material.

       6. No endorsement. Nothing in this Public License constitutes or
          may be construed as permission to assert or imply that You
          are, or that Your use of the Licensed Material is, connected
          with, or sponsored, endorsed, or granted official status by,
          the Licensor or others designated to receive attribution as
          provided in Section 3(a)(1)(A)(i).

  b. Other rights.

       1. Moral rights, such as the right of integrity, are not
          licensed under this Public License, nor are publicity,
          privacy, and/or other similar personality rights; however, to
          the extent possible, the Licensor waives and/or agrees not to
          assert any such rights held by the Licensor to the limited
          extent necessary to allow You to exercise the Licensed
          Rights, but not otherwise.

       2. Patent and trademark rights are not licensed under this
          Public License.

       3. To the extent possible, the Licensor waives any right to
          collect royalties from You for the exercise of the Licensed
          Rights, whether directly or through a collecting society
          under any voluntary or waivable statutory or compulsory
          licensing scheme. In all other cases the Licensor expressly
          reserves any right to collect such royalties.


Section 3 -- License Conditions.

Your exercise of the Licensed Rights is expressly made subject to the
following conditions.

  a. Attribution.

       1. If You Share the Licensed Material (including in modified
          form), You must:

            a. retain the following if it is supplied by the Licensor
               with the Licensed Material:

                 i. identification of the creator(s) of the Licensed
                    Material and any others designated to receive
                    attribution, in any reasonable manner requested by
                    the Licensor (including by pseudonym if
                    designated);

                ii. a copyright notice;

               iii. a notice that refers to this Public License;

                iv. a notice that refers to the disclaimer of
                    warranties;

                 v. a URI or hyperlink to the Licensed Material to the
                    extent reasonably practicable;

            b. indicate if You modified the Licensed Material and
               retain an indication of any previous modifications; and

            c. indicate the Licensed Material is licensed under this
               Public License, and include the text of, or the URI or
               hyperlink to, this Public License.

       2. You may satisfy the conditions in Section 3(a)(1) in any
          reasonable manner based on the medium, means, and context in
          which You Share the Licensed Material. For example, it may be
          reasonable to satisfy the conditions by providing a URI or
          hyperlink to a resource that includes the required
          information.

       3. If requested by the Licensor, You must remove any of the
          information required by Section 3(a)(1)(A) to the extent
          reasonably practicable.

       4. If You Share Adapted Material You produce, the Adapter's
          License You apply must not prevent recipients of the Adapted
          Material from complying with this Public License.


Section 4 -- Sui Generis Database Rights.

Where the Licensed Rights include Sui Generis Database Rights that
apply to Your use of the Licensed Material:

  a. for the avoidance of doubt, Section 2(a)(1) grants You the right
     to extract, reuse, reproduce, and Share all or a substantial
     portion of the contents of the database;

  b. if You include all or a substantial portion of the database
     contents in a database in which You have Sui Generis Database
     Rights, then the database in which You have Sui Generis Database
     Rights (but not its individual contents) is Adapted Material; and

  c. You must comply with the conditions in Section 3(a) if You Share
     all or a substantial portion of the contents of the database.

For the avoidance of doubt, this Section 4 supplements and does not
replace Your obligations under this Public License where the Licensed
Rights include other Copyright and Similar Rights.


Section 5 -- Disclaimer of Warranties and Limitation of Liability.

  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE
     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS
     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF
     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,
     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,
     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR
     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,
     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT
     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT
     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.

  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE
     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,
     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,
     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,
     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR
     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR
     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR
     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.

  c. The disclaimer of warranties and limitation of liability provided
     above shall be interpreted in a manner that, to the extent
     possible, most closely approximates an absolute disclaimer and
     waiver of all liability.


Section 6 -- Term and Termination.

  a. This Public License applies for the term of the Copyright and
     Similar Rights licensed here. However, if You fail to comply with
     this Public License, then Your rights under this Public License
     terminate automatically.

  b. Where Your right to use the Licensed Material has terminated under
     Section 6(a), it reinstates:

       1. automatically as of the date the violation is cured, provided
          it is cured within 30 days of Your discovery of the
          violation; or

       2. upon express reinstatement by the Licensor.

     For the avoidance of doubt, this Section 6(b) does not affect any
     right the Licensor may have to seek remedies for Your violations
     of this Public License.

  c. For the avoidance of doubt, the Licensor may also offer the
     Licensed Material under separate terms or conditions or stop
     distributing the Licensed Material at any time; however, doing so
     will not terminate this Public License.

  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public
     License.


Section 7 -- Other Terms and Conditions.

  a. The Licensor shall not be bound by any additional or different
     terms or conditions communicated by You unless expressly agreed.

  b. Any arrangements, understandings, or agreements regarding the
     Licensed Material not stated herein are separate from and
     independent of the terms and conditions of this Public License.


Section 8 -- Interpretation.

  a. For the avoidance of doubt, this Public License does not, and
     shall not be interpreted to, reduce, limit, restrict, or impose
     conditions on any use of the Licensed Material that could lawfully
     be made without permission under this Public License.

  b. To the extent possible, if any provision of this Public License is
     deemed unenforceable, it shall be automatically reformed to the
     minimum extent necessary to make it enforceable. If the provision
     cannot be reformed, it shall be severed from this Public License
     without affecting the enforceability of the remaining terms and
     conditions.

  c. No term or condition of this Public License will be waived and no
     failure to comply consented to unless expressly agreed to by the
     Licensor.

  d. Nothing in this Public License constitutes or may be interpreted
     as a limitation upon, or waiver of, any privileges and immunities
     that apply to the Licensor or You, including from the legal
     processes of any jurisdiction or authority.


=======================================================================

Creative Commons is not a party to its public licenses.
Notwithstanding, Creative Commons may elect to apply one of its public
licenses to material it publishes and in those instances will be
considered the “Licensor.” The text of the Creative Commons public
licenses is dedicated to the public domain under the CC0 Public Domain
Dedication. Except for the limited purpose of indicating that material
is shared under a Creative Commons public license or as otherwise
permitted by the Creative Commons policies published at
creativecommons.org/policies, Creative Commons does not authorize the
use of the trademark "Creative Commons" or any other trademark or logo
of Creative Commons without its prior written consent including,
without limitation, in connection with any unauthorized modifications
to any of its public licenses or any other arrangements,
understandings, or agreements concerning use of licensed material. For
the avoidance of doubt, this paragraph does not form part of the public
licenses.

Creative Commons may be contacted at creativecommons.org.
</file>

<file path="homes/notashelf/misc/dconf.nix">
{
  dconf.settings = {
    # this is like a system-wide dark mode switch that some apps respect
    # equivalent of the following dconf command:
    # `conf write /org/gnome/desktop/interface/color-scheme "'prefer-dark'"`
    "org/gnome/desktop/interface" = {
      color-scheme = "prefer-dark";
    };

    # tell virt-manager to use the system connection
    "org/virt-manager/virt-manager/connections" = {
      autoconnect = ["qemu:///system"];
      uris = ["qemu:///system"];
    };
  };
}
</file>

<file path="homes/notashelf/misc/default.nix">
{
  imports = [
    ./dconf.nix # dconf settings, courtesy of the dconf module
    ./rnnoise.nix # rnnoise plugin for pipewire
    ./xdg.nix
  ];
}
</file>

<file path="homes/notashelf/misc/rnnoise.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig.modules) device;

  format = pkgs.formats.json {};

  acceptedTypes = ["desktop" "laptop"];
in {
  config = mkIf (builtins.elem device.type acceptedTypes) {
    # Write a PipeWire userspace configuration based on werman's noise-supression-for-voice
    # for usage instructions, see:
    # <https://github.com/werman/noise-suppression-for-voice?tab=readme-ov-file#linux>
    xdg.configFile."pipewire/pipewire.conf.d/99-input-denoising.conf".source = format.generate "99-input-denoising.conf" {
      "context.modules" = [
        {
          "name" = "libpipewire-module-filter-chain";
          "args" = {
            "node.description" = "Noise Canceling source";
            "media.name" = "Noise Canceling source";
            "filter.graph" = {
              "nodes" = [
                {
                  "type" = "ladspa";
                  "name" = "rnnoise";
                  "plugin" = "${pkgs.rnnoise-plugin}/lib/ladspa/librnnoise_ladspa.so";
                  "label" = "noise_suppressor_mono"; # or "noise_suppressor_stereo", consumes twice the resources
                  "control" = {
                    "VAD Threshold (%)" = 50.0;
                    "VAD Grace Period (ms)" = 200;
                    "Retroactive VAD Grace (ms)" = 0;
                  };
                }
              ];
            };
            "audio.position" = ["FL" "FR"];
            "capture.props" = {
              "node.name" = "effect_input.rnnoise";
              "node.passive" = true;
              "audio.rate" = 48000;
            };
            "playback.props" = {
              "node.name" = "effect_output.rnnoise";
              "media.class" = "Audio/Source";
              "audio.rate" = 48000;
            };
          };
        }
      ];
    };
  };
}
</file>

<file path="homes/notashelf/misc/xdg.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  browser = ["Schizofox.desktop"];
  mailer = ["thunderbird.desktop"];
  zathura = ["zathura.desktop"];
  fileManager = ["org.kde.dolphin.desktop"];

  associations = {
    "text/html" = browser;
    "x-scheme-handler/http" = browser;
    "x-scheme-handler/https" = browser;
    "x-scheme-handler/ftp" = browser;
    "x-scheme-handler/about" = browser;
    "x-scheme-handler/unknown" = browser;
    "application/xhtml+xml" = browser;
    "application/x-extension-htm" = browser;
    "application/x-extension-html" = browser;
    "application/x-extension-shtml" = browser;
    "application/x-extension-xhtml" = browser;
    "application/x-extension-xht" = browser;

    "inode/directory" = fileManager;
    "application/x-xz-compressed-tar" = ["org.kde.ark.desktop"];

    "audio/*" = ["mpv.desktop"];
    "video/*" = ["mpv.desktop"];
    "image/*" = ["imv.desktop"];
    "application/json" = browser;
    "application/pdf" = zathura;

    "x-scheme-handler/tg" = ["telegramdesktop.desktop"];
    "x-scheme-handler/spotify" = ["spotify.desktop"];
    "x-scheme-handler/discord" = ["WebCord.desktop"];
    "x-scheme-handler/mailto" = mailer;
  };

  template = import lib.xdgTemplate "home-manager";
in {
  #home.sessionVariables = template.sysEnv;
  xdg = {
    enable = true;
    cacheHome = "${config.home.homeDirectory}/.cache";
    configHome = "${config.home.homeDirectory}/.config";
    dataHome = "${config.home.homeDirectory}/.local/share";
    stateHome = "${config.home.homeDirectory}/.local/state";

    configFile = {
      "npm/npmrc" = template.npmrc;
      "python/pythonrc" = template.pythonrc;
    };

    userDirs = {
      enable = pkgs.stdenv.isLinux;
      createDirectories = true;

      download = "${config.home.homeDirectory}/Downloads";
      desktop = "${config.home.homeDirectory}/Desktop";
      documents = "${config.home.homeDirectory}/Documents";

      publicShare = null;
      templates = null;

      music = "${config.home.homeDirectory}/Media/Music";
      pictures = "${config.home.homeDirectory}/Media/Pictures";
      videos = "${config.home.homeDirectory}/Media/Videos";

      extraConfig = {
        XDG_SCREENSHOTS_DIR = "${config.xdg.userDirs.pictures}/Screenshots";
        XDG_MAIL_DIR = "${config.home.homeDirectory}/Mail";
      };
    };

    mimeApps = {
      enable = true;
      associations.added = associations;
      defaultApplications = associations;
    };
  };
}
</file>

<file path="homes/notashelf/packages/cli/default.nix">
{
  imports = [
    ./shared.nix
    ./desktop.nix
    ./wayland.nix
    ./server.nix
  ];
}
</file>

<file path="homes/notashelf/packages/cli/desktop.nix">
{
  osConfig,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  prg = modules.system.programs;
  dev = modules.device;
  acceptedTypes = ["desktop" "laptop" "lite" "hybrid"];
in {
  config = mkIf ((builtins.elem dev.type acceptedTypes) && prg.cli.enable) {
    home.packages = with pkgs; [
      # CLI
      libnotify
      imagemagick
      bitwarden-cli
      trash-cli
      slides
      brightnessctl
      pamixer
      nix-tree
    ];
  };
}
</file>

<file path="homes/notashelf/packages/cli/server.nix">
{
  pkgs,
  lib,
  osConfig,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  prg = modules.system.programs;
  dev = modules.device;
in {
  config = mkIf (prg.cli.enable && (builtins.elem dev.type ["server" "hybrid"])) {
    home.packages = with pkgs; [
      wireguard-tools
    ];
  };
}
</file>

<file path="homes/notashelf/packages/cli/shared.nix">
{
  osConfig,
  lib,
  pkgs,
  inputs',
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  prg = modules.system.programs;
in {
  config = mkIf prg.cli.enable {
    home.packages = with pkgs; [
      # packages from inputs
      inputs'.agenix.packages.default
      inputs'.nyxexprs.packages.cloneit

      # CLI packages from nixpkgs
      catimg
      duf
      todo
      hyperfine
      fzf
      file
      unzip
      ripgrep
      rsync
      fd
      jq
      figlet
      lm_sensors
      dconf
      nitch
      skim
      p7zip
      btop
    ];
  };
}
</file>

<file path="homes/notashelf/packages/cli/wayland.nix">
{
  osConfig,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;

  dev = osConfig.modules.device;
  env = osConfig.modules.usrEnv;
  acceptedTypes = ["laptop" "desktop" "hybrid" "lite"];
in {
  config = mkIf ((builtins.elem dev.type acceptedTypes) && env.isWayland) {
    home.packages = with pkgs; [
      # CLI
      grim
      slurp
      grim
      wl-clipboard
      pngquant
      wf-recorder
      (pkgs.writeShellApplication {
        name = "ocr";
        runtimeInputs = with pkgs; [tesseract grim slurp coreutils];
        text = ''
          echo "Generating a random ID..."
          id=$(tr -dc 'a-zA-Z0-9' </dev/urandom | fold -w 6 | head -n 1 || true)
          echo "Image ID: $id"

          echo "Taking screenshot..."
          grim -g "$(slurp -w 0 -b eebebed2)" /tmp/ocr-"$id".png

          echo "Running OCR..."
          tesseract /tmp/ocr-"$id".png - | wl-copy
          echo -en "File saved to /tmp/ocr-'$id'.png\n"


          echo "Sending notification..."
          notify-send "OCR " "Text copied!"

          echo "Cleaning up..."
          rm /tmp/ocr-"$id".png -vf

        '';
      })
    ];
  };
}
</file>

<file path="homes/notashelf/packages/dev/default.nix">
{pkgs, ...}: {
  config = {
    home.packages = [
      (pkgs.writeShellApplication {
        name = "pdflatexmk";
        runtimeInputs = [pkgs.texlivePackages.latexmk];
        text = ''
          latexmk -pdf "$@" && latexmk -c "$@"
        '';
      })
    ];
  };
}
</file>

<file path="homes/notashelf/packages/gui/3dprint.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf (prg.gui.enable && sys.printing."3d".enable) {
    home.packages = with pkgs; [
      freecad
      prusa-slicer
    ];
  };
}
</file>

<file path="homes/notashelf/packages/gui/default.nix">
{
  imports = [
    ./shared.nix
    ./wayland.nix
    ./3dprint.nix
  ];
}
</file>

<file path="homes/notashelf/packages/gui/shared.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf (prg.gui.enable && sys.video.enable) {
    home.packages = with pkgs; [
      nextcloud-client
      easyeffects
      qbittorrent
      helvum

      # Electron applications
      # zoom-us # may we never return to online education
      netflix
      bitwarden-desktop

      # Obsidian has a pandoc plugin that allows us to render and export
      # alternative image format, but as the name indicates the plugin
      # requires `pandoc` binary to be accessiblee. Join pandoc derivation
      # to Obsidian to make it available to satisfy the dependency.
      (symlinkJoin {
        name = "Obsidian";
        paths = with pkgs; [
          obsidian
          pandoc
        ];
      })

      # plasma packages
      kdePackages.dolphin
      kdePackages.dolphin-plugins
      kdePackages.ark
      kdePackages.kio
      kdePackages.kio-extras
      kdePackages.kimageformats
      kdePackages.kdegraphics-thumbnailers

      # Okular needs ghostscript to import PostScript files as PDFs
      # so we add ghostscript_headless as a dependency
      (symlinkJoin {
        name = "Okular";
        paths = with pkgs; [
          kdePackages.okular
          ghostscript_headless
        ];
      })

      # gnome packages
      gnome-tweaks
      gnome-calendar
      komikku
    ];
  };
}
</file>

<file path="homes/notashelf/packages/gui/wayland.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules meta;

  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf (prg.gui.enable && (sys.video.enable && meta.isWayland)) {
    home.packages = with pkgs; [
      wlogout
      swappy
    ];
  };
}
</file>

<file path="homes/notashelf/packages/default.nix">
{
  imports = [
    ./gui
    ./cli
    ./dev
  ];
}
</file>

<file path="homes/notashelf/programs/graphical/apps/chromium/default.nix">
{
  lib,
  pkgs,
  osConfig,
  ...
}: let
  inherit (lib) mkIf optionals concatStringsSep;
  inherit (osConfig) modules;

  env = modules.usrEnv;
  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf prg.chromium.enable {
    programs.chromium = {
      enable = true;
      extensions = [
        {id = "mnjggcdmjocbbbhaepdhchncahnbgone";} # sponsor block
        {id = "cjpalhdlnbpafiamejdnhcphjbkeiagm";} # ublock
        {id = "nngceckbapebfimnlniiiahkandclblb";} # bitwarden
        {id = "iaiomicjabeggjcfkbimgmglanimpnae";} # tab manager
      ];

      package = pkgs.ungoogled-chromium.override {
        nss = pkgs.nss_latest;
        commandLineArgs =
          [
            # Ungoogled features
            "--disable-search-engine-collection"
            "--extension-mime-request-handling=always-prompt-for-install"
            "--fingerprinting-canvas-image-data-noise"
            "--fingerprinting-canvas-measuretext-noise"
            "--fingerprinting-client-rects-noise"
            "--popups-to-tabs"
            "--show-avatar-button=incognito-and-guest"

            # Experimental features
            "--enable-features=${
              concatStringsSep "," [
                "BackForwardCache:enable_same_site/true"
                "CopyLinkToText"
                "OverlayScrollbar"
                "TabHoverCardImages"
                "VaapiVideoDecoder"
              ]
            }"

            # Aesthetics
            "--force-dark-mode"

            # Performance
            "--enable-gpu-rasterization"
            "--enable-oop-rasterization"
            "--enable-zero-copy"
            "--ignore-gpu-blocklist"

            # Etc
            # "--gtk-version=4"
            "--disk-cache=$XDG_RUNTIME_DIR/chromium-cache"
            "--no-default-browser-check"
            "--no-service-autorun"
            "--disable-features=PreloadMediaEngagementData,MediaEngagementBypassAutoplayPolicies"
            "--disable-reading-from-canvas"
            "--no-pings"
            "--no-first-run"
            "--no-experiments"
            "--no-crash-upload"
            "--disable-wake-on-wifi"
            "--disable-breakpad"
            "--disable-sync"
            "--disable-speech-api"
            "--disable-speech-synthesis-api"
          ]
          ++ optionals env.isWayland [
            # Wayland

            # Disabled because hardware acceleration doesn't work
            # when disabling --use-gl=egl, it's not gonna show any emoji
            # and it's gonna be slow as hell
            # "--use-gl=egl"

            "--ozone-platform=wayland"
            "--enable-features=UseOzonePlatform"
          ];
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/discord/default.nix">
{
  osConfig,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;

  discord-wrapped =
    (pkgs.discord-canary.override {
      nss = pkgs.nss_latest;
      withOpenASAR = true;
      withVencord = true;
    })
    .overrideAttrs (old: {
      libPath = old.libPath + ":${pkgs.libglvnd}/lib";
      nativeBuildInputs = old.nativeBuildInputs ++ [pkgs.makeWrapper];

      postFixup = ''
        wrapProgram $out/opt/DiscordCanary/DiscordCanary \
          --add-flags "\''${NIXOS_OZONE_WL:+\''${WAYLAND_DISPLAY:+--ozone-platform=wayland}}"
      '';
    });
in {
  config = mkIf prg.discord.enable {
    home.packages = [discord-wrapped];
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/element/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf prg.element.enable {
    home.packages = [pkgs.element-desktop];

    xdg.configFile = {
      "Element/config.json".text = builtins.toJSON {
        default_server_config = {
          "m.homeserver" = {
            base_url = "https://notashelf.dev";
            server_name = "notashelf.dev";
          };

          "m.identity_server" = {base_url = "";};
        };

        show_labs_settings = true;
        default_theme = "dark";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/librewolf/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;
  sys = modules.system;
  prg = sys.programs;
in {
  # TODO: make this use the usrEnv.programs value
  # prg.librewolf.enable
  config = mkIf true {
    programs.librewolf = {
      enable = true;
      package = pkgs.librewolf.override {cfg.speechSynthesisSupport = false;};
      settings = {
        "sidebar.position_start" = false;
        "findbar.highlightAll" = true;

        "webgl.disabled" = false;

        "ui.use_activity_cursor" = true;
        "browser.download.useDownloadDir" = true;
        "browser.tabs.insertAfterCurrent" = true;
        "browser.tabs.warnOnClose" = true;
        "browser.toolbars.bookmarks.visibility" = "never";
        "browser.quitShortcut.disabled" = true;
        "browser.urlbar.suggest.history" = false;

        # Enable HTTPS-Only Mode
        "dom.security.https_only_mode" = true;
        "dom.security.https_only_mode_ever_enabled" = true;

        # Privacy settings
        "privacy.donottrackheader.enabled" = true;
        "privacy.trackingprotection.enabled" = true;
        "privacy.trackingprotection.socialtracking.enabled" = true;
        "privacy.partition.network_state.ocsp_cache" = true;

        # Disable all sorts of telemetry
        "browser.newtabpage.activity-stream.feeds.telemetry" = false;
        "browser.newtabpage.activity-stream.telemetry" = false;
        "browser.fullscreen.autohide" = false;
        "browser.newtabpage.activity-stream.topSitesRows" = 0;
        "browser.urlbar.quickactions.enabled" = true;
        "browser.safebrowsing.malware.enabled" = false;
        "browser.search.hiddenOneOffs" = "Google,Yahoo,Bing,Amazon.com,Twitter";
        "browser.newtabpage.activity-stream.improvesearch.topSiteSearchShortcuts" = false;
        "browser.urlbar.trimURLs" = false;
        "browser.ping-centre.telemetry" = false;
        "browser.urlbar.suggest.bookmark" = false;
        "browser.urlbar.suggest.quicksuggest.nonsponsored" = false;
        "browser.urlbar.suggest.quicksuggest.sponsored" = false;
        "browser.urlbar.suggest.searches" = false;
        "toolkit.telemetry.archive.enabled" = false;
        "toolkit.telemetry.bhrPing.enabled" = false;
        "toolkit.telemetry.enabled" = false;
        "toolkit.telemetry.firstShutdownPing.enabled" = false;
        "toolkit.telemetry.hybridContent.enabled" = false;
        "toolkit.telemetry.newProfilePing.enabled" = false;
        "toolkit.telemetry.reportingpolicy.firstRun" = false;
        "toolkit.telemetry.shutdownPingSender.enabled" = false;
        "toolkit.telemetry.unified" = false;
        "toolkit.telemetry.updatePing.enabled" = false;

        # Allow copy to clipboard
        "middlemouse.paste" = false; # but disable paste on middle click, that's stupid
        "dom.events.asyncClipboard.clipboard Item" = true;
        "trailhead.firstrun.didSeeAboutWelcome" = true;
        "widget.use-xdg-desktop-portal.file-picker" = 1;
        "widget.use-xdg-desktop-portal.location" = 1;
        "widget.use-xdg-desktop-portal.mime-handler" = 1;
        "widget.use-xdg-desktop-portal.open-uri" = 1;
        "widget.use-xdg-desktop-portal.settings" = 1;

        "privacy.donottrackheader.value" = 1;
        "findbar.modalHighlight" = true;
        "datareporting.healthreport.uploadEnabled" = false;
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/obs/default.nix">
{
  lib,
  pkgs,
  osConfig,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf prg.obs.enable {
    programs.obs-studio = {
      enable = true;
      plugins = with pkgs.obs-studio-plugins;
        [
          obs-gstreamer
          obs-pipewire-audio-capture
          obs-vkcapture
        ]
        ++ optional env.isWayland
        pkgs.obs-studio-plugins.wlrobs;
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/office/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf prg.libreoffice.enable {
    home.packages = with pkgs; [
      libreoffice-qt
      hyphen # text hyphenation library
      hunspell
      hunspellDicts.en_US-large
      hunspellDicts.en_GB-large
    ];
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/schizofox/default.nix">
{
  self',
  inputs,
  osConfig,
  lib,
  ...
}: let
  inherit (builtins) listToAttrs;
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  imports = [inputs.schizofox.homeManagerModule];
  config = mkIf prg.firefox.enable {
    programs.schizofox = {
      enable = true;

      theme = {
        font = "Inter";
        colors = {
          background-darker = "181825";
          background = "1e1e2e";
          foreground = "cdd6f4";
        };
      };

      search = rec {
        defaultSearchEngine = "Searxng";
        removeEngines = ["Bing" "Amazon.com" "eBay" "Twitter" "Wikipedia" "LibRedirect" "DuckDuckGo"];
        searxUrl = "https://search.notashelf.dev";
        searxQuery = "${searxUrl}/search?q={searchTerms}&categories=general";
        addEngines = [
          {
            Name = "Searxng";
            Description = "Decentralized search engine";
            Alias = "sx";
            Method = "GET";
            URLTemplate = "${searxQuery}";
          }
        ];
      };

      security = {
        sanitizeOnShutdown = false;
        sandbox = true;
        noSessionRestore = false;
        userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106.0";
      };

      misc = {
        drm.enable = true;
        disableWebgl = false;
        startPageURL = "file://${self'.packages.schizofox-startpage.outPath}/index.html";
        bookmarks = [
          {
            Title = "Noogle";
            URL = "https://noogle.dev";
            Placement = "toolbar";
          }
          {
            Title = "Nixpkgs Manual";
            URL = "https://nixos.org/manual/nixpkgs/stable";
            Placement = "toolbar";
          }
        ];
      };

      extensions = {
        simplefox.enable = true;
        darkreader.enable = true;

        enableDefaultExtensions = true;
        enableExtraExtensions = true;
        extraExtensions = let
          extensions = [
            {
              id = "1018e4d6-728f-4b20-ad56-37578a4de76";
              name = "flagfox";
            }
            {
              id = "{c2c003ee-bd69-42a2-b0e9-6f34222cb046}";
              name = "auto-tab-discard";
            }
            {
              id = "{a4c4eda4-fb84-4a84-b4a1-f7c1cbf2a1ad}";
              name = "refined-github-";
            }
            {
              id = "sponsorBlocker@ajay.app";
              name = "sponsorblock";
            }
            {
              id = "{446900e4-71c2-419f-a6a7-df9c091e268b}";
              name = "bitwarden-password-manager";
            }
            {
              id = "{74145f27-f039-47ce-a470-a662b129930a}";
              name = "clearurls";
            }
            {
              id = "{b86e4813-687a-43e6-ab65-0bde4ab75758}";
              name = "localcdn-fork-of-decentraleyes";
            }
            {
              id = "smart-referer@meh.paranoid.pk";
              name = "smart-referer";
            }
            {
              id = "skipredirect@sblask";
              name = "skip-redirect";
            }
            {
              id = "7esoorv3@alefvanoon.anonaddy.me";
              name = "libredirect";
            }
            {
              id = "DontFuckWithPaste@raim.ist";
              name = "dont-fuck-with-paste";
            }
          ];

          mappedExtensions =
            map (extension: {
              name = extension.id;
              value = {
                # installation_mode = "force_installed";
                install_url = "https://addons.mozilla.org/firefox/downloads/latest/${extension.name}/latest.xpi";
              };
            })
            extensions;
        in
          listToAttrs mappedExtensions;
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/spotify/default.nix">
{
  osConfig,
  inputs,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;

  spicePkgs = inputs.spicetify.legacyPackages.${pkgs.stdenv.system};
in {
  imports = [inputs.spicetify.homeManagerModules.default];
  config = mkIf prg.spotify.enable {
    programs.spicetify = {
      enable = true;
      enabledExtensions = with spicePkgs.extensions; [
        adblock
        powerBar
        hidePodcasts
        songStats
        shuffle
        history
        betterGenres
        fullScreen
      ];
      theme = spicePkgs.themes.catppuccin;
      colorScheme = "mocha";
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/thunderbird/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (lib.meta) getExe';
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf prg.thunderbird.enable {
    home.packages = with pkgs; [birdtray thunderbird];

    programs.thunderbird = {
      enable = true;
      profiles."notashelf" = {
        isDefault = true;
        userChrome = "";
        userContent = "";
        withExternalGnupg = true;
      };
    };

    /*
    systemd.user.services = {
      "birdtray" = {
        Install.WantedBy = ["graphical-session.target"];

        Service = {
          ExecStart = "${getExe' pkgs.birdtray "birdtray"}";
          Restart = "always";
          # runtime
          RuntimeDirectory = "ags";
          ProtectSystem = "strict";
          ProtectHome = "read-only";
        };

        Unit = {
          Description = "mail system tray notification icon for Thunderbird ";
          After = ["graphical-session-pre.target"];
          PartOf = [
            "tray.target"
            "graphical-session.target"
          ];
        };
      };
    };
    */
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/thunderbird/settings.nix">
{lib, ...}: let
  inherit (lib.generators) toJSON;
  extensions = toJSON {} {
    "default-theme@mozilla.org" = "5787f490-29b8-436e-a111-640da8590790";
    "google@search.mozilla.org" = "cc340383-7068-4b32-a10f-9f19334bfebc";
    "ddg@search.mozilla.org" = "0c340210-f7ab-48e8-9778-600ed5d00160";
    "amazondotcom@search.mozilla.org" = "881d8fdf-5772-4e33-81ff-faac2d1fa92c";
    "wikipedia@search.mozilla.org" = "7ea3d39d-3eea-430f-9bd7-f902d8124d45";
    "bing@search.mozilla.org" = "f480cce8-68af-4082-908e-f8996153352b";
    "addon@darkreader.org" = "71d6c69d-55f9-4c56-888c-abdcf6efd73d";
    "lightningcalendartabs@jlx.84" = "12d48e41-412e-4d09-835a-fa6fb8c180eb";
  };
in {
  programs.thunderbird.settings = {
    "calendar.timezone.useSystemTimezone" = true;
    "extensions.ui.locale.hidden" = true;
    "extensions.webextensions.ExtensionStorageIDB.migrated.addon@darkreader.org" = true;
    "extensions.webextensions.uuids" = extensions;
    "mail.account.lastKey" = 5;
    "mail.close_message_window.on_delete.disabled" = false;
    "mail.e2ee.auto_enable" = true;
    "mail.imap.chunk_size" = 106496;
    "mail.imap.min_chunk_size_threshold" = 159744;
    "mail.mdn.report.enabled" = false;
    "mail.openMessageBehavior.version" = 1;
    "mail.pane_config.dynamic" = 2;
    "mail.purge_threshhold_mb" = 20;
    "mail.purge_threshold_migrated" = true;
    "mail.spam.manualMark" = true;
    "mail.spam.version" = 1;
    "mail.startup.enabledMailCheckOnce" = true;
    "mail.chat.play_sound" = false;
    "mailnews.start_page.enabled" = false;
    "mailnews.mark_message_read.delay" = true;
    "mailnews.mark_message_read.delay.interval" = 3;
    "mailnews.wraplength" = 80;

    # Maillist sorting behaviour
    "mailnews.default_sort_order" = 2; # descending, 1 for ascending
    "mailnews.default_sort_type" = 18; # sort by date

    # Label numbers & colors.
    #  1 - Important
    #  2 - Work
    #  3 - Personal
    #  4- To Do
    #  5 - Later
    "mailnews.tags.$label1.tag" = "Important";
    "mailnews.tags.$label1.color" = "#FF0000";
    "mailnews.tags.$label2.tag" = "Work";
    "mailnews.tags.$label2.color" = "#FF9900";
    "mailnews.tags.$label3.tag" = "Personal";
    "mailnews.tags.$label3.color" = "#009900";
    "mailnews.tags.$label4.tag" = "To Do";
    "mailnews.tags.$label4.color" = "#3333FF";
    "mailnews.tags.$label5.tag" = "Later";
    "mailnews.tags.$label5.color" = "#993399";

    # Privacy & Security;
    "network.cookie.cookieBehavior" = 2; # no cookies
    "pdfjs.enabledCache.state" = true;
    "privacy.donottrackheader.enabled" = true;
    "privacy.purge_trackers.date_in_cookie_database" = "0";
    "datareporting.healthreport.uploadEnabled" = false;
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/vscode/default.nix">
{
  lib,
  pkgs,
  osConfig,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf prg.vscode.enable {
    programs.vscode = {
      enable = true;
      enableExtensionUpdateCheck = true;
      enableUpdateCheck = true;
      extensions = with pkgs.vscode-extensions;
        [
          arrterian.nix-env-selector
          bbenoist.nix
          catppuccin.catppuccin-vsc
          christian-kohler.path-intellisense
          dbaeumer.vscode-eslint
          eamodio.gitlens
          esbenp.prettier-vscode
          formulahendry.code-runner
          golang.go
          ibm.output-colorizer
          kamadorueda.alejandra
          ms-azuretools.vscode-docker
          ms-python.python
          ms-python.vscode-pylance
          ms-vscode-remote.remote-ssh
          ms-vscode.cpptools
          naumovs.color-highlight
          svelte.svelte-vscode
          ms-vsliveshare.vsliveshare
          oderwat.indent-rainbow
          pkief.material-icon-theme
          rust-lang.rust-analyzer
          shardulm94.trailing-spaces
          sumneko.lua
          timonwong.shellcheck
          usernamehw.errorlens
          xaver.clang-format
          yzhang.markdown-all-in-one
          james-yu.latex-workshop
          redhat.vscode-yaml
          ms-azuretools.vscode-docker
          irongeek.vscode-env
          github.vscode-pull-request-github
          github.codespaces
          astro-build.astro-vscode
          WakaTime.vscode-wakatime
        ]
        ++ [
          pkgs.vscode-extensions."2gua".rainbow-brackets
        ]
        ++ pkgs.vscode-utils.extensionsFromVscodeMarketplace [
          {
            name = "copilot-nightly";
            publisher = "github";
            version = "1.67.7949";
            sha256 = "sha256-ZtUqQeWjXmTz49DUeYkuqSTdVHRC8OfgWv8fuhlHDVc=";
          }
          {
            name = "volar";
            publisher = "vue";
            version = "1.0.12";
            sha256 = "sha256-D9E3KRUOlNVXH4oMv1W0+/mbqO8Se7+6E2F5P/KvCro=";
          }
          {
            name = "vscode-typescript-vue-plugin";
            publisher = "vue";
            version = "1.0.12";
            sha256 = "sha256-WiL+gc9+U861ubLlY/acR+ZcrFT7TdIDR0K1XNNidX8=";
          }
          {
            name = "decay";
            publisher = "decaycs";
            version = "1.0.6";
            sha256 = "sha256-Jtxj6LmHgF7UNaXtXxHkq881BbuPtIJGxR7kdhKr0Uo=";
          }
          {
            name = "vscode-typescript-next";
            publisher = "ms-vscode";
            version = "5.0.202301100";
            sha256 = "sha256-8d/L9F06ZaS9dTOXV6Q40ivI499nfZLQURcLdHXoTSM=";
          }
          {
            name = "vscode-chromium-vector-icons";
            publisher = "adolfdaniel";
            version = "1.0.2";
            sha256 = "sha256-Meo53e/3jUP6YDEXOA/40xghI77jj4iAQus3/S8RPZI=";
          }
        ];
      userSettings = {
        "workbench.iconTheme" = "material-icon-theme";
        "workbench.colorTheme" = "Catppuccin Macchiato";
        "catppuccin.accentColor" = "mauve";
        "editor.fontFamily" = "JetBrainsMono Nerd Font, Material Design Icons, 'monospace', monospace";
        "editor.fontSize" = 16;
        "editor.fontLigatures" = true;
        "workbench.fontAliasing" = "antialiased";
        "files.trimTrailingWhitespace" = true;
        "terminal.integrated.fontFamily" = "JetBrainsMono Nerd Font Mono";
        "window.titleBarStyle" = "custom";
        "terminal.integrated.automationShell.linux" = "nix-shell";
        "terminal.integrated.defaultProfile.linux" = "zsh";
        "terminal.integrated.cursorBlinking" = true;
        "terminal.integrated.enableBell" = false;
        "editor.formatOnPaste" = true;
        "editor.formatOnSave" = true;
        "editor.formatOnType" = false;
        "editor.minimap.enabled" = false;
        "editor.minimap.renderCharacters" = false;
        "editor.overviewRulerBorder" = false;
        "editor.renderLineHighlight" = "all";
        "editor.inlineSuggest.enabled" = true;
        "editor.smoothScrolling" = true;
        "editor.suggestSelection" = "first";
        "editor.guides.indentation" = true;
        "editor.guides.bracketPairs" = true;
        "editor.bracketPairColorization.enabled" = true;
        "window.nativeTabs" = true;
        "window.restoreWindows" = "all";
        "window.menuBarVisibility" = "toggle";
        "workbench.panel.defaultLocation" = "right";
        "workbench.editor.tabCloseButton" = "left";
        "workbench.startupEditor" = "none";
        "workbench.list.smoothScrolling" = true;
        "security.workspace.trust.enabled" = false;
        "explorer.confirmDelete" = false;
        "breadcrumbs.enabled" = true;
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/webcord/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;

  # Fetching mocha theme from catppuccin/discord actually just fetches
  # a stylesheet that imports this url in typical Catppuccin nonsense.
  # Instead of adding this overhead (and a stupid sheet with a web import)
  # we can simply fetch the stylesheet that is being imported. In the future
  # I hope the Catppuccin team can get their heads out of their asses and
  # start publishing *actual releases* for once.
  # P.S. why does your stupid theme depend on yarn build? It's a stylesheet.
  catppuccin-mocha-css = pkgs.fetchurl {
    url = "https://catppuccin.github.io/discord/dist/catppuccin-mocha.theme.css";
    hash = "sha256-bhHJOsHcZIZ6NzJzdrmeQ0aG6nbYV6Sa92EXdLzgf1s=";
  };

  openasar-git = pkgs.fetchFromGitHub {
    owner = "OpenAsar";
    repo = "arrpc";
    rev = "c62ec6a04c8d870530aa6944257fe745f6c59a24";
    hash = "sha256-wIRr+LnOp9PW7v5xOqpdB6AjqINBlYFkoGRorYkRC2I=";
  };
in {
  config = mkIf prg.webcord.enable {
    home.packages = [
      pkgs.webcord-vencord # webcord with vencord extension installed
    ];

    xdg.configFile = {
      "WebCord/Themes/mocha".source = catppuccin-mocha-css;
    };

    # TODO: maybe this should be under services/global because technically it's not an app
    # however arrpc is useless on its own (i.e. without webcord) and here it's merely a
    # companion app that we enable for rich presence.
    services.arrpc = {
      enable = true;
      package = pkgs.arrpc.overrideAttrs {
        pname = "arrpc";
        version = "0-unstable-2024-04-24";
        src = openasar-git;

        patches = [
          # Improve game detection for Linux
          # <https://github.com/OpenAsar/arrpc/pull/92>
          (pkgs.fetchpatch {
            url = "https://patch-diff.githubusercontent.com/raw/OpenAsar/arrpc/pull/92.patch";
            hash = "sha256-AHa4FzXJn7bcZ+35DdmAHP/4X3g7//mwp/ggIKvalpw=";
          })
        ];
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/zathura/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf prg.zathura.enable {
    xdg = {
      desktopEntries.zathura = {
        name = "zathura";
        type = "Application";
        comment = "A minimalistic PDF viewer";
        categories = ["Office" "Viewer"];
        exec = "zathura --fork %f";
        terminal = false;
        mimeType = ["application/pdf"];
      };

      configFile."zathura/catppuccin-mocha".source = pkgs.fetchurl {
        url = "https://raw.githubusercontent.com/catppuccin/zathura/main/src/catppuccin-mocha";
        hash = "sha256-/HXecio3My2eXTpY7JoYiN9mnXsps4PAThDPs4OCsAk=";
      };
    };

    programs.zathura = {
      enable = true;
      extraConfig = "include catppuccin-mocha";

      options = {
        font = "Iosevka 15";
        selection-clipboard = "clipboard";
        adjust-open = "best-fit";
        pages-per-row = "1";
        scroll-page-aware = "true";
        scroll-full-overlap = "0.01";
        scroll-step = "100";
        smooth-scroll = true;
        zoom-min = "10";
        guioptions = "none";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/apps/default.nix">
{
  imports = [
    ./chromium
    ./discord
    ./element
    ./librewolf
    ./obs
    ./office
    ./schizofox
    ./spotify
    ./thunderbird
    ./vscode
    ./webcord
    ./zathura
  ];
}
</file>

<file path="homes/notashelf/programs/graphical/gaming/chess.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  env = modules.usrEnv;
  prg = env.programs;
in {
  config = mkIf prg.gaming.chess.enable {
    home.packages = with pkgs; [
      kdePackages.knights
      fairymax
      stockfish
      fishnet
    ];
  };
}
</file>

<file path="homes/notashelf/programs/graphical/gaming/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  env = modules.usrEnv;
  prg = env.programs;
in {
  imports = [
    ./minecraft.nix
    ./mangohud.nix
    ./chess.nix
  ];

  config = mkIf prg.gaming.enable {
    home.packages = with pkgs; [
      # runtime
      dotnet-runtime_6 # for running terraria manually, from binary
      mono # general dotnet apps
      winetricks # wine helper utility
    ];
  };
}
</file>

<file path="homes/notashelf/programs/graphical/gaming/mangohud.nix">
{
  osConfig,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  env = modules.usrEnv;
  prg = env.programs;
in {
  config = mkIf prg.gaming.mangohud.enable {
    programs.mangohud = {
      enable = true;
      settings = {
        fps_limit = "60,0";
        vsync = 1;
        cpu_stats = true;
        cpu_temp = true;
        gpu_stats = true;
        gpu_temp = true;
        vulkan_driver = false;
        fps = true;
        frametime = true;
        frame_timing = true;
        enableSessionWide = true;
        font_size = 24;
        position = "top-left";
        engine_version = true;
        wine = true;
        no_display = true;
        background_alpha = "0.5";
        toggle_hud = "Shift_R+F12";
        toggle_fps_limit = "Shift_R+F1";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/gaming/minecraft.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  env = modules.usrEnv;
  prg = env.programs;
in {
  config = mkIf prg.gaming.minecraft.enable {
    home.packages = let
      # java packages that are needed by various versions or modpacks
      # different distributions of java may yield different results in performance
      # and thus I recommend testing them one by one to remove those that you do not
      # need in your configuration
      jdks = with pkgs; [
        # Java 8
        temurin-jre-bin-8
        zulu8

        # Java 11
        temurin-jre-bin-11

        # Java 17
        temurin-jre-bin-17

        # Latest
        temurin-jre-bin
        zulu
        graalvm-ce
      ];

      additionalPrograms = with pkgs; [
        gamemode
        mangohud
        jprofiler
      ];

      glfw =
        if env.isWayland
        then pkgs.glfw-wayland-minecraft
        else pkgs.glfw;
    in [
      # the successor to polyMC, which is now mostly abandoned
      (pkgs.prismlauncher.override {
        # get java versions required by various minecraft versions
        # "write once run everywhere" my ass
        inherit jdks;

        # wrap Prismlauncher with programs in may need for workarounds
        # or client features
        inherit additionalPrograms;

        # wrap Prismlauncher with the nixpkgs glfw, or optionally the wayland patched
        # version of glfw while we're on Wayland.
        inherit glfw;
      })
    ];
  };
}
</file>

<file path="homes/notashelf/programs/graphical/launchers/anyrun/styles/dark.scss">
$fontSize: 1.3rem;
$fontFamily: Lexend;
$transparentColor: transparent;
$rgbaColor: rgba(203, 166, 247, 0.7);
$bgColor: rgba(30, 30, 46, 1);
$borderColor: #28283d;
$borderRadius: 16px;
$paddingValue: 8px;

* {
	transition: 200ms ease;
	font-family: $fontFamily;
	font-size: $fontSize;
}

#window,
#match,
#entry,
#plugin,
#main {
	background: $transparentColor;
}

#match:selected {
	background: $rgbaColor;
}

#match {
	padding: 3px;
	border-radius: $borderRadius;
}

#entry,
#plugin:hover {
	border-radius: $borderRadius;
}

box#main {
	background: $bgColor;
	border: 1px solid $borderColor;
	border-radius: $borderRadius;
	padding: $paddingValue;
}
</file>

<file path="homes/notashelf/programs/graphical/launchers/anyrun/default.nix">
{
  inputs,
  inputs',
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  env = modules.usrEnv;
in {
  imports = [inputs.anyrun.homeManagerModules.default];
  config = mkIf env.programs.launchers.anyrun.enable {
    programs.anyrun = {
      enable = true;
      config = {
        plugins = with inputs'.anyrun.packages; [
          applications
          rink
          translate
          randr
          shell
          symbols
          translate

          inputs'.anyrun-nixos-options.packages.default
        ];

        # the x coordinate of the runner
        #x.relative = 800;
        # the y coordinate of the runner
        #y.absolute = 500.0;
        y.fraction = 0.02;

        # Hide match and plugin info icons
        hideIcons = false;

        # ignore exclusive zones, i.e. Waybar
        ignoreExclusiveZones = false;

        # Layer shell layer: Background, Bottom, Top, Overlay
        layer = "overlay";

        # Hide the plugin info panel
        hidePluginInfo = false;

        # Close window when a click outside the main box is received
        closeOnClick = false;

        # Show search results immediately when Anyrun starts
        showResultsImmediately = false;

        # Limit amount of entries shown in total
        maxEntries = 10;
      };

      extraConfigFiles = {
        "applications.ron".text = ''
          Config(
            // Also show the Desktop Actions defined in the desktop files, e.g. "New Window" from LibreWolf
            desktop_actions: true,
            max_entries: 10,
            // The terminal used for running terminal based desktop entries, if left as `None` a static list of terminals is used
            // to determine what terminal to use.
            terminal: Some("foot"),
          )
        '';

        "randr.ron".text = ''
          Config(
            prefix: ":ra",
            max_entries: 5,
          )
        '';

        "symbols.ron".text = ''
          Config(
            // The prefix that the search needs to begin with to yield symbol results
            prefix: ":sy",

            // Custom user defined symbols to be included along the unicode symbols
            symbols: {
              // "name": "text to be copied"
              "shrug": "¯\\_(ツ)_/¯",
            },

            // The number of entries to be displayed
            max_entries: 5,
          )
        '';

        "translate.ron".text = ''
          Config(
            prefix: ":tr",
            language_delimiter: ">",
            max_entries: 3,
          )
        '';

        "nixos-options.ron".text = let
          nixos-options = osConfig.system.build.manual.optionsJSON + "/share/doc/nixos/options.json";
          nvf-options = inputs'.nvf.packages.docs-json + "/share/doc/nvf/options.json";
          options = builtins.toJSON {
            ":nix" = [nixos-options];
            ":vim" = [nvf-options];
          };
        in ''
          Config(
            options: ${options},
            min_score: 5,
            max_entries: Some(3),
          )
        '';
      };

      # this compiles the SCSS file from the given path into CSS
      # by default, `-t expanded` as the args to the sass compiler
      extraCss = builtins.readFile (lib.compileSCSS pkgs {
        name = "style-dark";
        source = ./styles/dark.scss;
      });
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/launchers/rofi/default.nix">
{
  config,
  lib,
  pkgs,
  osConfig,
  inputs',
  ...
}: let
  inherit (lib) mkIf optionals;
  inherit (osConfig) modules meta;

  env = modules.usrEnv;
  rofiPackage = with pkgs;
    if meta.isWayland
    then rofi-wayland
    else rofi;
in {
  config = mkIf env.programs.launchers.rofi.enable {
    programs.rofi = {
      enable = true;
      package = rofiPackage.override {
        plugins =
          [
            pkgs.rofi-rbw
          ]
          ++ optionals meta.isWayland (with inputs'.nyxexprs.packages; [
            rofi-rbw-wayland
            rofi-calc-wayland
            rofi-emoji-wayland
          ]);
      };
      font = "Iosevka Nerd Font 14";
      extraConfig = {
        modi = "drun,filebrowser,calc,emoji";
        drun-display-format = " {name} ";
        sidebar-mode = true;
        matching = "prefix";
        scroll-method = 0;
        disable-history = false;
        show-icons = true;

        display-drun = " Run";
        display-run = " Run";
        display-filebrowser = " Files";
        display-calc = "󰃬 Calculator";
        display-emoji = "💀 Emoji";
      };

      theme = let
        inherit (osConfig.modules.style.colorScheme) colors;
        inherit (config.lib.formats.rasi) mkLiteral;
      in {
        "*" = {
          background = mkLiteral "#${colors.base02}";
          background-alt = mkLiteral "#${colors.base02}";
          foreground = mkLiteral "#${colors.base05}";
          selected = mkLiteral "#${colors.base00}";
          active = mkLiteral "#${colors.base0D}";
          urgent = mkLiteral "#${colors.base00}";
        };
        "window" = {
          transparency = "real";
          location = mkLiteral "center";
          anchor = mkLiteral "center";
          fullscreen = mkLiteral "false";
          width = mkLiteral "600px";
          x-offset = mkLiteral "0px";
          y-offset = mkLiteral "0px";
          enabled = mkLiteral "true";
          border-radius = mkLiteral "20px";
          border = mkLiteral "4px";
          border-color = mkLiteral "#${colors.base02}";
          cursor = "default";
          background-color = mkLiteral "@background";
        };
        "mainbox" = {
          enabled = true;
          spacing = mkLiteral "0px";
          background-color = mkLiteral "transparent";
          orientation = mkLiteral "vertical";
          children = mkLiteral "[inputbar,listbox]";
        };
        "listbox" = {
          spacing = mkLiteral "10px";
          padding = mkLiteral "10px 10px 10px 15px";
          background-color = mkLiteral "transparent";
          orientation = mkLiteral "vertical";
          children = mkLiteral "[message,listview]";
        };
        "inputbar" = {
          enabled = true;
          spacing = mkLiteral "10px";
          padding = mkLiteral "30px 20px 30px 20px";
          background-color = mkLiteral "@selected";
          text-color = mkLiteral "@foreground";
          orientation = mkLiteral "horizontal";
          children = mkLiteral "[prompt,entry]";
        };
        "entry" = {
          enabled = true;
          expand = true;
          width = mkLiteral "300px";
          padding = mkLiteral "12px 15px";
          border-radius = mkLiteral "15px";
          background-color = mkLiteral "@background-alt";
          text-color = mkLiteral "inherit";
          cursor = mkLiteral "text";
          placeholder = "Search";
          placeholder-color = mkLiteral "inherit";
        };
        "prompt" = {
          width = mkLiteral "64px";
          font = "Iosevka Nerd Font 13";
          padding = mkLiteral "10px 20px 10px 20px";
          border-radius = mkLiteral "15px";
          background-color = mkLiteral "@background-alt";
          text-color = mkLiteral "inherit";
          cursor = mkLiteral "pointer";
        };
        "mode-switcher" = {
          enabled = true;
          spacing = mkLiteral "10px";
          background-color = mkLiteral "transparent";
          text-color = mkLiteral "@foreground";
        };
        "button" = {
          width = mkLiteral "48px";
          font = "Iosevka Nerd Font 14";
          padding = mkLiteral "8px 5px 8px 8px";
          border-radius = mkLiteral "15px";
          background-color = mkLiteral "@background-alt";
          text-color = mkLiteral "inherit";
          cursor = mkLiteral "pointer";
        };
        "button selected" = {
          background-color = mkLiteral "@selected";
          text-color = mkLiteral "@foreground";
        };
        "listview" = {
          enabled = true;
          columns = 2;
          lines = 7;
          cycle = true;
          dynamic = true;
          scrollbar = false;
          layout = mkLiteral "vertical";
          reverse = false;
          fixed-height = true;
          fixed-columns = false;
          spacing = mkLiteral "5px";
          background-color = mkLiteral "transparent";
          text-color = mkLiteral "@foreground";
          cursor = mkLiteral "default";
        };
        "element" = {
          enabled = true;
          spacing = mkLiteral "15px";
          padding = mkLiteral "7px";
          border-radius = mkLiteral "100%";
          background-color = mkLiteral "transparent";
          text-color = mkLiteral "@foreground";
          cursor = mkLiteral "pointer";
        };
        "element normal.normal" = {
          background-color = mkLiteral "inherit";
          text-color = mkLiteral "inherit";
        };
        "element normal.urgent" = {
          background-color = mkLiteral "@urgent";
          text-color = mkLiteral "@foreground";
        };
        "element normal.active" = {
          background-color = mkLiteral "@background";
          text-color = mkLiteral "@active";
        };
        "element selected.normal" = {
          background-color = mkLiteral "@selected";
          text-color = mkLiteral "@foreground";
        };
        "element selected.urgent" = {
          background-color = mkLiteral "@urgent";
          text-color = mkLiteral "@foreground";
        };
        "element selected.active" = {
          background-color = mkLiteral "@urgent";
          text-color = mkLiteral "@active";
        };
        "element-icon" = {
          background-color = mkLiteral "transparent";
          text-color = mkLiteral "inherit";
          size = mkLiteral "32px";
          cursor = mkLiteral "inherit";
        };
        "element-text" = {
          background-color = mkLiteral "transparent";
          text-color = mkLiteral "inherit";
          cursor = mkLiteral "inherit";
          vertical-align = mkLiteral "0.5";
          horizontal-align = mkLiteral "0.0";
        };
        "message" = {background-color = mkLiteral "transparent";};
        "textbox" = {
          padding = mkLiteral "12px";
          border-radius = mkLiteral "100%";
          background-color = mkLiteral "@background-alt";
          text-color = mkLiteral "@foreground";
          vertical-align = mkLiteral "0.5";
          horizontal-align = mkLiteral "0.0";
        };
        "error-message" = {
          padding = mkLiteral "12px";
          border-radius = mkLiteral "20px";
          background-color = mkLiteral "@background";
          text-color = mkLiteral "@foreground";
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/launchers/tofi/default.nix">
{
  config,
  lib,
  pkgs,
  osConfig,
  ...
}: let
  inherit (lib) mkIf getExe;
  inherit (osConfig) modules;

  env = modules.usrEnv;
in {
  config = mkIf env.programs.launchers.tofi.enable {
    home.packages = with pkgs; [
      # for compatibility sake
      (pkgs.writeScriptBin "dmenu" ''exec ${getExe tofi}'')
      tofi
      wtype
    ];

    xdg.configFile."tofi/config".text = let
      inherit (osConfig.modules.style.colorScheme) colors;
    in ''
      font = Iosevka Nerd Font
      font-size = 13
      horizontal = true
      anchor = top
      width = 100%
      height = 40
      outline-width = 0
      border-width = 0
      min-input-width = 120
      result-spacing = 30
      padding-top = 10
      padding-bottom = 10
      padding-left = 20
      padding-right = 0
      margin-top = 0
      margin-bottom = 0
      margin-left = 15
      margin-right = 0
      prompt-text = " "
      prompt-padding = 30
      background-color = ${colors.base00}
      text-color = ${colors.base05}
      prompt-color = ${colors.base00}
      prompt-background = ${colors.base0D}
      prompt-background-padding = 4, 10
      prompt-background-corner-radius = 12
      input-background = ${colors.base02}
      input-background-padding = 4, 10
      input-background-corner-radius = 12
      selection-color = ${colors.base01}
      selection-background = ${colors.base0D}
      selection-background-padding = 4, 10
      selection-background-corner-radius = 12
      selection-match-color = ${colors.base05}
      clip-to-padding = false
    '';
  };
}
</file>

<file path="homes/notashelf/programs/graphical/launchers/tofi/emoji">
😀 grinning face
😃 grinning face with big eyes
😄 grinning face with smiling eyes
😁 beaming face with smiling eyes
😆 grinning squinting face
😅 grinning face with sweat
🤣 rolling on the floor laughing
😂 face with tears of joy
🙂 slightly smiling face
🙃 upside-down face
🫠 melting face
😉 winking face
😊 smiling face with smiling eyes
😇 smiling face with halo
🥰 smiling face with hearts
😍 smiling face with heart-eyes
🤩 star-struck
😘 face blowing a kiss
😗 kissing face
☺️ smiling face
😚 kissing face with closed eyes
😙 kissing face with smiling eyes
🥲 smiling face with tear
😋 face savoring food
😛 face with tongue
😜 winking face with tongue
🤪 zany face
😝 squinting face with tongue
🤑 money-mouth face
🤗 smiling face with open hands
🤭 face with hand over mouth
🫢 face with open eyes and hand over mouth
🫣 face with peeking eye
🤫 shushing face
🤔 thinking face
🫡 saluting face
🤐 zipper-mouth face
🤨 face with raised eyebrow
😐 neutral face
😑 expressionless face
😶 face without mouth
🫥 dotted line face
😏 smirking face
😒 unamused face
🙄 face with rolling eyes
😬 grimacing face
🤥 lying face
😌 relieved face
😔 pensive face
😪 sleepy face
🤤 drooling face
😴 sleeping face
😷 face with medical mask
🤒 face with thermometer
🤕 face with head-bandage
🤢 nauseated face
🤮 face vomiting
🤧 sneezing face
🥵 hot face
🥶 cold face
🥴 woozy face
😵 face with crossed-out eyes
🤯 exploding head
🤠 cowboy hat face
🥳 partying face
🥸 disguised face
😎 smiling face with sunglasses
🤓 nerd face
🧐 face with monocle
😕 confused face
🫤 face with diagonal mouth
😟 worried face
🙁 slightly frowning face
☹️ frowning face
😮 face with open mouth
😯 hushed face
😲 astonished face
😳 flushed face
🥺 pleading face
🥹 face holding back tears
😦 frowning face with open mouth
😧 anguished face
😨 fearful face
😰 anxious face with sweat
😥 sad but relieved face
😢 crying face
😭 loudly crying face
😱 face screaming in fear
😖 confounded face
😣 persevering face
😞 disappointed face
😓 downcast face with sweat
😩 weary face
😫 tired face
🥱 yawning face
😤 face with steam from nose
😡 pouting face
😠 angry face
🤬 face with symbols on mouth
😈 smiling face with horns
👿 angry face with horns
💀 skull
☠️ skull and crossbones
💩 pile of poo
🤡 clown face
👹 ogre
👺 goblin
👻 ghost
👽 alien
👾 alien monster
🤖 robot
😺 grinning cat
😸 grinning cat with smiling eyes
😹 cat with tears of joy
😻 smiling cat with heart-eyes
😼 cat with wry smile
😽 kissing cat
🙀 weary cat
😿 crying cat
😾 pouting cat
🙈 see-no-evil monkey
🙉 hear-no-evil monkey
🙊 speak-no-evil monkey
💋 kiss mark
💌 love letter
💘 heart with arrow
💝 heart with ribbon
💖 sparkling heart
💗 growing heart
💓 beating heart
💞 revolving hearts
💕 two hearts
💟 heart decoration
❣️ heart exclamation
💔 broken heart
❤️ red heart
🧡 orange heart
💛 yellow heart
💚 green heart
💙 blue heart
💜 purple heart
🤎 brown heart
🖤 black heart
🤍 white heart
💯 hundred points
💢 anger symbol
💥 collision
💫 dizzy
💦 sweat droplets
💨 dashing away
🕳️ hole
💣 bomb
💬 speech balloon
🗨️ left speech bubble
🗯️ right anger bubble
💭 thought balloon
💤 zzz
👋 waving hand
🤚 raised back of hand
🖐️ hand with fingers splayed
✋ raised hand
🖖 vulcan salute
🫱 rightwards hand
🫲 leftwards hand
🫳 palm down hand
🫴 palm up hand
👌 OK hand
🤌 pinched fingers
🤏 pinching hand
✌️ victory hand
🤞 crossed fingers
🫰 hand with index finger and thumb crossed
🤟 love-you gesture
🤘 sign of the horns
🤙 call me hand
👈 backhand index pointing left
👉 backhand index pointing right
👆 backhand index pointing up
🖕 middle finger
👇 backhand index pointing down
☝️ index pointing up
🫵 index pointing at the viewer
👍 thumbs up
👎 thumbs down
✊ raised fist
👊 oncoming fist
🤛 left-facing fist
🤜 right-facing fist
👏 clapping hands
🙌 raising hands
🫶 heart hands
👐 open hands
🤲 palms up together
🤝 handshake
🙏 folded hands
✍️ writing hand
💅 nail polish
🤳 selfie
💪 flexed biceps
🦾 mechanical arm
🦿 mechanical leg
🦵 leg
🦶 foot
👂 ear
🦻 ear with hearing aid
👃 nose
🧠 brain
🫀 anatomical heart
🫁 lungs
🦷 tooth
🦴 bone
👀 eyes
👁️ eye
👅 tongue
👄 mouth
🫦 biting lip
👶 baby
🧒 child
👦 boy
👧 girl
🧑 person
👱 person: blond hair
👨 man
🧔 person: beard
👩 woman
🧓 older person
👴 old man
👵 old woman
🙍 person frowning
🙎 person pouting
🙅 person gesturing NO
🙆 person gesturing OK
💁 person tipping hand
🙋 person raising hand
🧏 deaf person
🙇 person bowing
🤦 person facepalming
🤷 person shrugging
👮 police officer
🕵️ detective
💂 guard
🥷 ninja
👷 construction worker
🫅 person with crown
🤴 prince
👸 princess
👳 person wearing turban
👲 person with skullcap
🧕 woman with headscarf
🤵 person in tuxedo
👰 person with veil
🤰 pregnant woman
🫃 pregnant man
🫄 pregnant person
🤱 breast-feeding
👼 baby angel
🎅 Santa Claus
🤶 Mrs. Claus
🦸 superhero
🦹 supervillain
🧙 mage
🧚 fairy
🧛 vampire
🧜 merperson
🧝 elf
🧞 genie
🧟 zombie
🧌 troll
💆 person getting massage
💇 person getting haircut
🚶 person walking
🧍 person standing
🧎 person kneeling
🏃 person running
💃 woman dancing
🕺 man dancing
🕴️ person in suit levitating
👯 people with bunny ears
🧖 person in steamy room
🧗 person climbing
🤺 person fencing
🏇 horse racing
⛷️ skier
🏂 snowboarder
🏌️ person golfing
🏄 person surfing
🚣 person rowing boat
🏊 person swimming
⛹️ person bouncing ball
🏋️ person lifting weights
🚴 person biking
🚵 person mountain biking
🤸 person cartwheeling
🤼 people wrestling
🤽 person playing water polo
🤾 person playing handball
🤹 person juggling
🧘 person in lotus position
🛀 person taking bath
🛌 person in bed
👭 women holding hands
👫 woman and man holding hands
👬 men holding hands
💏 kiss
💑 couple with heart
👪 family
🗣️ speaking head
👤 bust in silhouette
👥 busts in silhouette
🫂 people hugging
👣 footprints
🐵 monkey face
🐒 monkey
🦍 gorilla
🦧 orangutan
🐶 dog face
🐕 dog
🦮 guide dog
🐩 poodle
🐺 wolf
🦊 fox
🦝 raccoon
🐱 cat face
🐈 cat
🦁 lion
🐯 tiger face
🐅 tiger
🐆 leopard
🐴 horse face
🐎 horse
🦄 unicorn
🦓 zebra
🦌 deer
🦬 bison
🐮 cow face
🐂 ox
🐃 water buffalo
🐄 cow
🐷 pig face
🐖 pig
🐗 boar
🐽 pig nose
🐏 ram
🐑 ewe
🐐 goat
🐪 camel
🐫 two-hump camel
🦙 llama
🦒 giraffe
🐘 elephant
🦣 mammoth
🦏 rhinoceros
🦛 hippopotamus
🐭 mouse face
🐁 mouse
🐀 rat
🐹 hamster
🐰 rabbit face
🐇 rabbit
🐿️ chipmunk
🦫 beaver
🦔 hedgehog
🦇 bat
🐻 bear
🐨 koala
🐼 panda
🦥 sloth
🦦 otter
🦨 skunk
🦘 kangaroo
🦡 badger
🐾 paw prints
🦃 turkey
🐔 chicken
🐓 rooster
🐣 hatching chick
🐤 baby chick
🐥 front-facing baby chick
🐦 bird
🐧 penguin
🕊️ dove
🦅 eagle
🦆 duck
🦢 swan
🦉 owl
🦤 dodo
🪶 feather
🦩 flamingo
🦚 peacock
🦜 parrot
🐸 frog
🐊 crocodile
🐢 turtle
🦎 lizard
🐍 snake
🐲 dragon face
🐉 dragon
🦕 sauropod
🦖 T-Rex
🐳 spouting whale
🐋 whale
🐬 dolphin
🦭 seal
🐟 fish
🐠 tropical fish
🐡 blowfish
🦈 shark
🐙 octopus
🐚 spiral shell
🪸 coral
🐌 snail
🦋 butterfly
🐛 bug
🐜 ant
🐝 honeybee
🪲 beetle
🐞 lady beetle
🦗 cricket
🪳 cockroach
🕷️ spider
🕸️ spider web
🦂 scorpion
🦟 mosquito
🪰 fly
🪱 worm
🦠 microbe
💐 bouquet
🌸 cherry blossom
💮 white flower
🪷 lotus
🏵️ rosette
🌹 rose
🥀 wilted flower
🌺 hibiscus
🌻 sunflower
🌼 blossom
🌷 tulip
🌱 seedling
🪴 potted plant
🌲 evergreen tree
🌳 deciduous tree
🌴 palm tree
🌵 cactus
🌾 sheaf of rice
🌿 herb
☘️ shamrock
🍀 four leaf clover
🍁 maple leaf
🍂 fallen leaf
🍃 leaf fluttering in wind
🪹 empty nest
🪺 nest with eggs
🍇 grapes
🍈 melon
🍉 watermelon
🍊 tangerine
🍋 lemon
🍌 banana
🍍 pineapple
🥭 mango
🍎 red apple
🍏 green apple
🍐 pear
🍑 peach
🍒 cherries
🍓 strawberry
🫐 blueberries
🥝 kiwi fruit
🍅 tomato
🫒 olive
🥥 coconut
🥑 avocado
🍆 eggplant
🥔 potato
🥕 carrot
🌽 ear of corn
🌶️ hot pepper
🫑 bell pepper
🥒 cucumber
🥬 leafy green
🥦 broccoli
🧄 garlic
🧅 onion
🍄 mushroom
🥜 peanuts
🫘 beans
🌰 chestnut
🍞 bread
🥐 croissant
🥖 baguette bread
🫓 flatbread
🥨 pretzel
🥯 bagel
🥞 pancakes
🧇 waffle
🧀 cheese wedge
🍖 meat on bone
🍗 poultry leg
🥩 cut of meat
🥓 bacon
🍔 hamburger
🍟 french fries
🍕 pizza
🌭 hot dog
🥪 sandwich
🌮 taco
🌯 burrito
🫔 tamale
🥙 stuffed flatbread
🧆 falafel
🥚 egg
🍳 cooking
🥘 shallow pan of food
🍲 pot of food
🫕 fondue
🥣 bowl with spoon
🥗 green salad
🍿 popcorn
🧈 butter
🧂 salt
🥫 canned food
🍱 bento box
🍘 rice cracker
🍙 rice ball
🍚 cooked rice
🍛 curry rice
🍜 steaming bowl
🍝 spaghetti
🍠 roasted sweet potato
🍢 oden
🍣 sushi
🍤 fried shrimp
🍥 fish cake with swirl
🥮 moon cake
🍡 dango
🥟 dumpling
🥠 fortune cookie
🥡 takeout box
🦀 crab
🦞 lobster
🦐 shrimp
🦑 squid
🦪 oyster
🍦 soft ice cream
🍧 shaved ice
🍨 ice cream
🍩 doughnut
🍪 cookie
🎂 birthday cake
🍰 shortcake
🧁 cupcake
🥧 pie
🍫 chocolate bar
🍬 candy
🍭 lollipop
🍮 custard
🍯 honey pot
🍼 baby bottle
🥛 glass of milk
☕ hot beverage
🫖 teapot
🍵 teacup without handle
🍶 sake
🍾 bottle with popping cork
🍷 wine glass
🍸 cocktail glass
🍹 tropical drink
🍺 beer mug
🍻 clinking beer mugs
🥂 clinking glasses
🥃 tumbler glass
🫗 pouring liquid
🥤 cup with straw
🧋 bubble tea
🧃 beverage box
🧉 mate
🧊 ice
🥢 chopsticks
🍽️ fork and knife with plate
🍴 fork and knife
🥄 spoon
🔪 kitchen knife
🫙 jar
🏺 amphora
🌍 globe showing Europe-Africa
🌎 globe showing Americas
🌏 globe showing Asia-Australia
🌐 globe with meridians
🗺️ world map
🗾 map of Japan
🧭 compass
🏔️ snow-capped mountain
⛰️ mountain
🌋 volcano
🗻 mount fuji
🏕️ camping
🏖️ beach with umbrella
🏜️ desert
🏝️ desert island
🏞️ national park
🏟️ stadium
🏛️ classical building
🏗️ building construction
🧱 brick
🪨 rock
🪵 wood
🛖 hut
🏘️ houses
🏚️ derelict house
🏠 house
🏡 house with garden
🏢 office building
🏣 Japanese post office
🏤 post office
🏥 hospital
🏦 bank
🏨 hotel
🏩 love hotel
🏪 convenience store
🏫 school
🏬 department store
🏭 factory
🏯 Japanese castle
🏰 castle
💒 wedding
🗼 Tokyo tower
🗽 Statue of Liberty
⛪ church
🕌 mosque
🛕 hindu temple
🕍 synagogue
⛩️ shinto shrine
🕋 kaaba
⛲ fountain
⛺ tent
🌁 foggy
🌃 night with stars
🏙️ cityscape
🌄 sunrise over mountains
🌅 sunrise
🌆 cityscape at dusk
🌇 sunset
🌉 bridge at night
♨️ hot springs
🎠 carousel horse
🛝 playground slide
🎡 ferris wheel
🎢 roller coaster
💈 barber pole
🎪 circus tent
🚂 locomotive
🚃 railway car
🚄 high-speed train
🚅 bullet train
🚆 train
🚇 metro
🚈 light rail
🚉 station
🚊 tram
🚝 monorail
🚞 mountain railway
🚋 tram car
🚌 bus
🚍 oncoming bus
🚎 trolleybus
🚐 minibus
🚑 ambulance
🚒 fire engine
🚓 police car
🚔 oncoming police car
🚕 taxi
🚖 oncoming taxi
🚗 automobile
🚘 oncoming automobile
🚙 sport utility vehicle
🛻 pickup truck
🚚 delivery truck
🚛 articulated lorry
🚜 tractor
🏎️ racing car
🏍️ motorcycle
🛵 motor scooter
🦽 manual wheelchair
🦼 motorized wheelchair
🛺 auto rickshaw
🚲 bicycle
🛴 kick scooter
🛹 skateboard
🛼 roller skate
🚏 bus stop
🛣️ motorway
🛤️ railway track
🛢️ oil drum
⛽ fuel pump
🛞 wheel
🚨 police car light
🚥 horizontal traffic light
🚦 vertical traffic light
🛑 stop sign
🚧 construction
⚓ anchor
🛟 ring buoy
⛵ sailboat
🛶 canoe
🚤 speedboat
🛳️ passenger ship
⛴️ ferry
🛥️ motor boat
🚢 ship
✈️ airplane
🛩️ small airplane
🛫 airplane departure
🛬 airplane arrival
🪂 parachute
💺 seat
🚁 helicopter
🚟 suspension railway
🚠 mountain cableway
🚡 aerial tramway
🛰️ satellite
🚀 rocket
🛸 flying saucer
🛎️ bellhop bell
🧳 luggage
⌛ hourglass done
⏳ hourglass not done
⌚ watch
⏰ alarm clock
⏱️ stopwatch
⏲️ timer clock
🕰️ mantelpiece clock
🕛 twelve o’clock
🕧 twelve-thirty
🕐 one o’clock
🕜 one-thirty
🕑 two o’clock
🕝 two-thirty
🕒 three o’clock
🕞 three-thirty
🕓 four o’clock
🕟 four-thirty
🕔 five o’clock
🕠 five-thirty
🕕 six o’clock
🕡 six-thirty
🕖 seven o’clock
🕢 seven-thirty
🕗 eight o’clock
🕣 eight-thirty
🕘 nine o’clock
🕤 nine-thirty
🕙 ten o’clock
🕥 ten-thirty
🕚 eleven o’clock
🕦 eleven-thirty
🌑 new moon
🌒 waxing crescent moon
🌓 first quarter moon
🌔 waxing gibbous moon
🌕 full moon
🌖 waning gibbous moon
🌗 last quarter moon
🌘 waning crescent moon
🌙 crescent moon
🌚 new moon face
🌛 first quarter moon face
🌜 last quarter moon face
🌡️ thermometer
☀️ sun
🌝 full moon face
🌞 sun with face
🪐 ringed planet
⭐ star
🌟 glowing star
🌠 shooting star
🌌 milky way
☁️ cloud
⛅ sun behind cloud
⛈️ cloud with lightning and rain
🌤️ sun behind small cloud
🌥️ sun behind large cloud
🌦️ sun behind rain cloud
🌧️ cloud with rain
🌨️ cloud with snow
🌩️ cloud with lightning
🌪️ tornado
🌫️ fog
🌬️ wind face
🌀 cyclone
🌈 rainbow
🌂 closed umbrella
☂️ umbrella
☔ umbrella with rain drops
⛱️ umbrella on ground
⚡ high voltage
❄️ snowflake
☃️ snowman
⛄ snowman without snow
☄️ comet
🔥 fire
💧 droplet
🌊 water wave
🎃 jack-o-lantern
🎄 Christmas tree
🎆 fireworks
🎇 sparkler
🧨 firecracker
✨ sparkles
🎈 balloon
🎉 party popper
🎊 confetti ball
🎋 tanabata tree
🎍 pine decoration
🎎 Japanese dolls
🎏 carp streamer
🎐 wind chime
🎑 moon viewing ceremony
🧧 red envelope
🎀 ribbon
🎁 wrapped gift
🎗️ reminder ribbon
🎟️ admission tickets
🎫 ticket
🎖️ military medal
🏆 trophy
🏅 sports medal
🥇 1st place medal
🥈 2nd place medal
🥉 3rd place medal
⚽ soccer ball
⚾ baseball
🥎 softball
🏀 basketball
🏐 volleyball
🏈 american football
🏉 rugby football
🎾 tennis
🥏 flying disc
🎳 bowling
🏏 cricket game
🏑 field hockey
🏒 ice hockey
🥍 lacrosse
🏓 ping pong
🏸 badminton
🥊 boxing glove
🥋 martial arts uniform
🥅 goal net
⛳ flag in hole
⛸️ ice skate
🎣 fishing pole
🤿 diving mask
🎽 running shirt
🎿 skis
🛷 sled
🥌 curling stone
🎯 bullseye
🪀 yo-yo
🪁 kite
🎱 pool 8 ball
🔮 crystal ball
🪄 magic wand
🧿 nazar amulet
🪬 hamsa
🎮 video game
🕹️ joystick
🎰 slot machine
🎲 game die
🧩 puzzle piece
🧸 teddy bear
🪅 piñata
🪩 mirror ball
🪆 nesting dolls
♠️ spade suit
♥️ heart suit
♦️ diamond suit
♣️ club suit
♟️ chess pawn
🃏 joker
🀄 mahjong red dragon
🎴 flower playing cards
🎭 performing arts
🖼️ framed picture
🎨 artist palette
🧵 thread
🪡 sewing needle
🧶 yarn
🪢 knot
👓 glasses
🕶️ sunglasses
🥽 goggles
🥼 lab coat
🦺 safety vest
👔 necktie
👕 t-shirt
👖 jeans
🧣 scarf
🧤 gloves
🧥 coat
🧦 socks
👗 dress
👘 kimono
🥻 sari
🩱 one-piece swimsuit
🩲 briefs
🩳 shorts
👙 bikini
👚 woman’s clothes
👛 purse
👜 handbag
👝 clutch bag
🛍️ shopping bags
🎒 backpack
🩴 thong sandal
👞 man’s shoe
👟 running shoe
🥾 hiking boot
🥿 flat shoe
👠 high-heeled shoe
👡 woman’s sandal
🩰 ballet shoes
👢 woman’s boot
👑 crown
👒 woman’s hat
🎩 top hat
🎓 graduation cap
🧢 billed cap
🪖 military helmet
⛑️ rescue worker’s helmet
📿 prayer beads
💄 lipstick
💍 ring
💎 gem stone
🔇 muted speaker
🔈 speaker low volume
🔉 speaker medium volume
🔊 speaker high volume
📢 loudspeaker
📣 megaphone
📯 postal horn
🔔 bell
🔕 bell with slash
🎼 musical score
🎵 musical note
🎶 musical notes
🎙️ studio microphone
🎚️ level slider
🎛️ control knobs
🎤 microphone
🎧 headphone
📻 radio
🎷 saxophone
🪗 accordion
🎸 guitar
🎹 musical keyboard
🎺 trumpet
🎻 violin
🪕 banjo
🥁 drum
🪘 long drum
📱 mobile phone
📲 mobile phone with arrow
☎️ telephone
📞 telephone receiver
📟 pager
📠 fax machine
🔋 battery
🪫 low battery
🔌 electric plug
💻 laptop
🖥️ desktop computer
🖨️ printer
⌨️ keyboard
🖱️ computer mouse
🖲️ trackball
💽 computer disk
💾 floppy disk
💿 optical disk
📀 dvd
🧮 abacus
🎥 movie camera
🎞️ film frames
📽️ film projector
🎬 clapper board
📺 television
📷 camera
📸 camera with flash
📹 video camera
📼 videocassette
🔍 magnifying glass tilted left
🔎 magnifying glass tilted right
🕯️ candle
💡 light bulb
🔦 flashlight
🏮 red paper lantern
🪔 diya lamp
📔 notebook with decorative cover
📕 closed book
📖 open book
📗 green book
📘 blue book
📙 orange book
📚 books
📓 notebook
📒 ledger
📃 page with curl
📜 scroll
📄 page facing up
📰 newspaper
🗞️ rolled-up newspaper
📑 bookmark tabs
🔖 bookmark
🏷️ label
💰 money bag
🪙 coin
💴 yen banknote
💵 dollar banknote
💶 euro banknote
💷 pound banknote
💸 money with wings
💳 credit card
🧾 receipt
💹 chart increasing with yen
✉️ envelope
📧 e-mail
📨 incoming envelope
📩 envelope with arrow
📤 outbox tray
📥 inbox tray
📦 package
📫 closed mailbox with raised flag
📪 closed mailbox with lowered flag
📬 open mailbox with raised flag
📭 open mailbox with lowered flag
📮 postbox
🗳️ ballot box with ballot
✏️ pencil
✒️ black nib
🖋️ fountain pen
🖊️ pen
🖌️ paintbrush
🖍️ crayon
📝 memo
💼 briefcase
📁 file folder
📂 open file folder
🗂️ card index dividers
📅 calendar
📆 tear-off calendar
🗒️ spiral notepad
🗓️ spiral calendar
📇 card index
📈 chart increasing
📉 chart decreasing
📊 bar chart
📋 clipboard
📌 pushpin
📍 round pushpin
📎 paperclip
🖇️ linked paperclips
📏 straight ruler
📐 triangular ruler
✂️ scissors
🗃️ card file box
🗄️ file cabinet
🗑️ wastebasket
🔒 locked
🔓 unlocked
🔏 locked with pen
🔐 locked with key
🔑 key
🗝️ old key
🔨 hammer
🪓 axe
⛏️ pick
⚒️ hammer and pick
🛠️ hammer and wrench
🗡️ dagger
⚔️ crossed swords
🔫 water pistol
🪃 boomerang
🏹 bow and arrow
🛡️ shield
🪚 carpentry saw
🔧 wrench
🪛 screwdriver
🔩 nut and bolt
⚙️ gear
🗜️ clamp
⚖️ balance scale
🦯 white cane
🔗 link
⛓️ chains
🪝 hook
🧰 toolbox
🧲 magnet
🪜 ladder
⚗️ alembic
🧪 test tube
🧫 petri dish
🧬 dna
🔬 microscope
🔭 telescope
📡 satellite antenna
💉 syringe
🩸 drop of blood
💊 pill
🩹 adhesive bandage
🩼 crutch
🩺 stethoscope
🩻 x-ray
🚪 door
🛗 elevator
🪞 mirror
🪟 window
🛏️ bed
🛋️ couch and lamp
🪑 chair
🚽 toilet
🪠 plunger
🚿 shower
🛁 bathtub
🪤 mouse trap
🪒 razor
🧴 lotion bottle
🧷 safety pin
🧹 broom
🧺 basket
🧻 roll of paper
🪣 bucket
🧼 soap
🫧 bubbles
🪥 toothbrush
🧽 sponge
🧯 fire extinguisher
🛒 shopping cart
🚬 cigarette
⚰️ coffin
🪦 headstone
⚱️ funeral urn
🗿 moai
🪧 placard
🪪 identification card
🏧 ATM sign
🚮 litter in bin sign
🚰 potable water
♿ wheelchair symbol
🚹 men’s room
🚺 women’s room
🚻 restroom
🚼 baby symbol
🚾 water closet
🛂 passport control
🛃 customs
🛄 baggage claim
🛅 left luggage
⚠️ warning
🚸 children crossing
⛔ no entry
🚫 prohibited
🚳 no bicycles
🚭 no smoking
🚯 no littering
🚱 non-potable water
🚷 no pedestrians
📵 no mobile phones
🔞 no one under eighteen
☢️ radioactive
☣️ biohazard
⬆️ up arrow
↗️ up-right arrow
➡️ right arrow
↘️ down-right arrow
⬇️ down arrow
↙️ down-left arrow
⬅️ left arrow
↖️ up-left arrow
↕️ up-down arrow
↔️ left-right arrow
↩️ right arrow curving left
↪️ left arrow curving right
⤴️ right arrow curving up
⤵️ right arrow curving down
🔃 clockwise vertical arrows
🔄 counterclockwise arrows button
🔙 BACK arrow
🔚 END arrow
🔛 ON! arrow
🔜 SOON arrow
🔝 TOP arrow
🛐 place of worship
⚛️ atom symbol
🕉️ om
✡️ star of David
☸️ wheel of dharma
☯️ yin yang
✝️ latin cross
☦️ orthodox cross
☪️ star and crescent
☮️ peace symbol
🕎 menorah
🔯 dotted six-pointed star
♈ Aries
♉ Taurus
♊ Gemini
♋ Cancer
♌ Leo
♍ Virgo
♎ Libra
♏ Scorpio
♐ Sagittarius
♑ Capricorn
♒ Aquarius
♓ Pisces
⛎ Ophiuchus
🔀 shuffle tracks button
🔁 repeat button
🔂 repeat single button
▶️ play button
⏩ fast-forward button
⏭️ next track button
⏯️ play or pause button
◀️ reverse button
⏪ fast reverse button
⏮️ last track button
🔼 upwards button
⏫ fast up button
🔽 downwards button
⏬ fast down button
⏸️ pause button
⏹️ stop button
⏺️ record button
⏏️ eject button
🎦 cinema
🔅 dim button
🔆 bright button
📶 antenna bars
📳 vibration mode
📴 mobile phone off
♀️ female sign
♂️ male sign
⚧️ transgender symbol
✖️ multiply
➕ plus
➖ minus
➗ divide
🟰 heavy equals sign
♾️ infinity
‼️ double exclamation mark
⁉️ exclamation question mark
❓ red question mark
❔ white question mark
❕ white exclamation mark
❗ red exclamation mark
〰️ wavy dash
💱 currency exchange
💲 heavy dollar sign
⚕️ medical symbol
♻️ recycling symbol
⚜️ fleur-de-lis
🔱 trident emblem
📛 name badge
🔰 Japanese symbol for beginner
⭕ hollow red circle
✅ check mark button
☑️ check box with check
✔️ check mark
❌ cross mark
❎ cross mark button
➰ curly loop
➿ double curly loop
〽️ part alternation mark
✳️ eight-spoked asterisk
✴️ eight-pointed star
❇️ sparkle
©️ copyright
®️ registered
™️ trade mark
#️⃣ keycap: #
*️⃣ keycap: *
0️⃣ keycap: 0
1️⃣ keycap: 1
2️⃣ keycap: 2
3️⃣ keycap: 3
4️⃣ keycap: 4
5️⃣ keycap: 5
6️⃣ keycap: 6
7️⃣ keycap: 7
8️⃣ keycap: 8
9️⃣ keycap: 9
🔟 keycap: 10
🔠 input latin uppercase
🔡 input latin lowercase
🔢 input numbers
🔣 input symbols
🔤 input latin letters
🅰️ A button (blood type)
🆎 AB button (blood type)
🅱️ B button (blood type)
🆑 CL button
🆒 COOL button
🆓 FREE button
ℹ️ information
🆔 ID button
Ⓜ️ circled M
🆕 NEW button
🆖 NG button
🅾️ O button (blood type)
🆗 OK button
🅿️ P button
🆘 SOS button
🆙 UP! button
🆚 VS button
🈁 Japanese “here” button
🈂️ Japanese “service charge” button
🈷️ Japanese “monthly amount” button
🈶 Japanese “not free of charge” button
🈯 Japanese “reserved” button
🉐 Japanese “bargain” button
🈹 Japanese “discount” button
🈚 Japanese “free of charge” button
🈲 Japanese “prohibited” button
🉑 Japanese “acceptable” button
🈸 Japanese “application” button
🈴 Japanese “passing grade” button
🈳 Japanese “vacancy” button
㊗️ Japanese “congratulations” button
㊙️ Japanese “secret” button
🈺 Japanese “open for business” button
🈵 Japanese “no vacancy” button
🔴 red circle
🟠 orange circle
🟡 yellow circle
🟢 green circle
🔵 blue circle
🟣 purple circle
🟤 brown circle
⚫ black circle
⚪ white circle
🟥 red square
🟧 orange square
🟨 yellow square
🟩 green square
🟦 blue square
🟪 purple square
🟫 brown square
⬛ black large square
⬜ white large square
◼️ black medium square
◻️ white medium square
◾ black medium-small square
◽ white medium-small square
▪️ black small square
▫️ white small square
🔶 large orange diamond
🔷 large blue diamond
🔸 small orange diamond
🔹 small blue diamond
🔺 red triangle pointed up
🔻 red triangle pointed down
💠 diamond with a dot
🔘 radio button
🔳 white square button
🔲 black square button
🏁 chequered flag
🚩 triangular flag
🎌 crossed flags
🏴 black flag
🏳️ white flag
🇦🇨 flag: Ascension Island
🇦🇩 flag: Andorra
🇦🇪 flag: United Arab Emirates
🇦🇫 flag: Afghanistan
🇦🇬 flag: Antigua & Barbuda
🇦🇮 flag: Anguilla
🇦🇱 flag: Albania
🇦🇲 flag: Armenia
🇦🇴 flag: Angola
🇦🇶 flag: Antarctica
🇦🇷 flag: Argentina
🇦🇸 flag: American Samoa
🇦🇹 flag: Austria
🇦🇺 flag: Australia
🇦🇼 flag: Aruba
🇦🇽 flag: Åland Islands
🇦🇿 flag: Azerbaijan
🇧🇦 flag: Bosnia & Herzegovina
🇧🇧 flag: Barbados
🇧🇩 flag: Bangladesh
🇧🇪 flag: Belgium
🇧🇫 flag: Burkina Faso
🇧🇬 flag: Bulgaria
🇧🇭 flag: Bahrain
🇧🇮 flag: Burundi
🇧🇯 flag: Benin
🇧🇱 flag: St. Barthélemy
🇧🇲 flag: Bermuda
🇧🇳 flag: Brunei
🇧🇴 flag: Bolivia
🇧🇶 flag: Caribbean Netherlands
🇧🇷 flag: Brazil
🇧🇸 flag: Bahamas
🇧🇹 flag: Bhutan
🇧🇻 flag: Bouvet Island
🇧🇼 flag: Botswana
🇧🇾 flag: Belarus
🇧🇿 flag: Belize
🇨🇦 flag: Canada
🇨🇨 flag: Cocos (Keeling) Islands
🇨🇩 flag: Congo - Kinshasa
🇨🇫 flag: Central African Republic
🇨🇬 flag: Congo - Brazzaville
🇨🇭 flag: Switzerland
🇨🇮 flag: Côte d’Ivoire
🇨🇰 flag: Cook Islands
🇨🇱 flag: Chile
🇨🇲 flag: Cameroon
🇨🇳 flag: China
🇨🇴 flag: Colombia
🇨🇵 flag: Clipperton Island
🇨🇷 flag: Costa Rica
🇨🇺 flag: Cuba
🇨🇻 flag: Cape Verde
🇨🇼 flag: Curaçao
🇨🇽 flag: Christmas Island
🇨🇾 flag: Cyprus
🇨🇿 flag: Czechia
🇩🇪 flag: Germany
🇩🇬 flag: Diego Garcia
🇩🇯 flag: Djibouti
🇩🇰 flag: Denmark
🇩🇲 flag: Dominica
🇩🇴 flag: Dominican Republic
🇩🇿 flag: Algeria
🇪🇦 flag: Ceuta & Melilla
🇪🇨 flag: Ecuador
🇪🇪 flag: Estonia
🇪🇬 flag: Egypt
🇪🇭 flag: Western Sahara
🇪🇷 flag: Eritrea
🇪🇸 flag: Spain
🇪🇹 flag: Ethiopia
🇪🇺 flag: European Union
🇫🇮 flag: Finland
🇫🇯 flag: Fiji
🇫🇰 flag: Falkland Islands
🇫🇲 flag: Micronesia
🇫🇴 flag: Faroe Islands
🇫🇷 flag: France
🇬🇦 flag: Gabon
🇬🇧 flag: United Kingdom
🇬🇩 flag: Grenada
🇬🇪 flag: Georgia
🇬🇫 flag: French Guiana
🇬🇬 flag: Guernsey
🇬🇭 flag: Ghana
🇬🇮 flag: Gibraltar
🇬🇱 flag: Greenland
🇬🇲 flag: Gambia
🇬🇳 flag: Guinea
🇬🇵 flag: Guadeloupe
🇬🇶 flag: Equatorial Guinea
🇬🇷 flag: Greece
🇬🇸 flag: South Georgia & South Sandwich Islands
🇬🇹 flag: Guatemala
🇬🇺 flag: Guam
🇬🇼 flag: Guinea-Bissau
🇬🇾 flag: Guyana
🇭🇰 flag: Hong Kong SAR China
🇭🇲 flag: Heard & McDonald Islands
🇭🇳 flag: Honduras
🇭🇷 flag: Croatia
🇭🇹 flag: Haiti
🇭🇺 flag: Hungary
🇮🇨 flag: Canary Islands
🇮🇩 flag: Indonesia
🇮🇪 flag: Ireland
🇮🇱 flag: Israel
🇮🇲 flag: Isle of Man
🇮🇳 flag: India
🇮🇴 flag: British Indian Ocean Territory
🇮🇶 flag: Iraq
🇮🇷 flag: Iran
🇮🇸 flag: Iceland
🇮🇹 flag: Italy
🇯🇪 flag: Jersey
🇯🇲 flag: Jamaica
🇯🇴 flag: Jordan
🇯🇵 flag: Japan
🇰🇪 flag: Kenya
🇰🇬 flag: Kyrgyzstan
🇰🇭 flag: Cambodia
🇰🇮 flag: Kiribati
🇰🇲 flag: Comoros
🇰🇳 flag: St. Kitts & Nevis
🇰🇵 flag: North Korea
🇰🇷 flag: South Korea
🇰🇼 flag: Kuwait
🇰🇾 flag: Cayman Islands
🇰🇿 flag: Kazakhstan
🇱🇦 flag: Laos
🇱🇧 flag: Lebanon
🇱🇨 flag: St. Lucia
🇱🇮 flag: Liechtenstein
🇱🇰 flag: Sri Lanka
🇱🇷 flag: Liberia
🇱🇸 flag: Lesotho
🇱🇹 flag: Lithuania
🇱🇺 flag: Luxembourg
🇱🇻 flag: Latvia
🇱🇾 flag: Libya
🇲🇦 flag: Morocco
🇲🇨 flag: Monaco
🇲🇩 flag: Moldova
🇲🇪 flag: Montenegro
🇲🇫 flag: St. Martin
🇲🇬 flag: Madagascar
🇲🇭 flag: Marshall Islands
🇲🇰 flag: North Macedonia
🇲🇱 flag: Mali
🇲🇲 flag: Myanmar (Burma)
🇲🇳 flag: Mongolia
🇲🇴 flag: Macao SAR China
🇲🇵 flag: Northern Mariana Islands
🇲🇶 flag: Martinique
🇲🇷 flag: Mauritania
🇲🇸 flag: Montserrat
🇲🇹 flag: Malta
🇲🇺 flag: Mauritius
🇲🇻 flag: Maldives
🇲🇼 flag: Malawi
🇲🇽 flag: Mexico
🇲🇾 flag: Malaysia
🇲🇿 flag: Mozambique
🇳🇦 flag: Namibia
🇳🇨 flag: New Caledonia
🇳🇪 flag: Niger
🇳🇫 flag: Norfolk Island
🇳🇬 flag: Nigeria
🇳🇮 flag: Nicaragua
🇳🇱 flag: Netherlands
🇳🇴 flag: Norway
🇳🇵 flag: Nepal
🇳🇷 flag: Nauru
🇳🇺 flag: Niue
🇳🇿 flag: New Zealand
🇴🇲 flag: Oman
🇵🇦 flag: Panama
🇵🇪 flag: Peru
🇵🇫 flag: French Polynesia
🇵🇬 flag: Papua New Guinea
🇵🇭 flag: Philippines
🇵🇰 flag: Pakistan
🇵🇱 flag: Poland
🇵🇲 flag: St. Pierre & Miquelon
🇵🇳 flag: Pitcairn Islands
🇵🇷 flag: Puerto Rico
🇵🇸 flag: Palestinian Territories
🇵🇹 flag: Portugal
🇵🇼 flag: Palau
🇵🇾 flag: Paraguay
🇶🇦 flag: Qatar
🇷🇪 flag: Réunion
🇷🇴 flag: Romania
🇷🇸 flag: Serbia
🇷🇺 flag: Russia
🇷🇼 flag: Rwanda
🇸🇦 flag: Saudi Arabia
🇸🇧 flag: Solomon Islands
🇸🇨 flag: Seychelles
🇸🇩 flag: Sudan
🇸🇪 flag: Sweden
🇸🇬 flag: Singapore
🇸🇭 flag: St. Helena
🇸🇮 flag: Slovenia
🇸🇯 flag: Svalbard & Jan Mayen
🇸🇰 flag: Slovakia
🇸🇱 flag: Sierra Leone
🇸🇲 flag: San Marino
🇸🇳 flag: Senegal
🇸🇴 flag: Somalia
🇸🇷 flag: Suriname
🇸🇸 flag: South Sudan
🇸🇹 flag: São Tomé & Príncipe
🇸🇻 flag: El Salvador
🇸🇽 flag: Sint Maarten
🇸🇾 flag: Syria
🇸🇿 flag: Eswatini
🇹🇦 flag: Tristan da Cunha
🇹🇨 flag: Turks & Caicos Islands
🇹🇩 flag: Chad
🇹🇫 flag: French Southern Territories
🇹🇬 flag: Togo
🇹🇭 flag: Thailand
🇹🇯 flag: Tajikistan
🇹🇰 flag: Tokelau
🇹🇱 flag: Timor-Leste
🇹🇲 flag: Turkmenistan
🇹🇳 flag: Tunisia
🇹🇴 flag: Tonga
🇹🇷 flag: Turkey
🇹🇹 flag: Trinidad & Tobago
🇹🇻 flag: Tuvalu
🇹🇼 flag: Taiwan
🇹🇿 flag: Tanzania
🇺🇦 flag: Ukraine
🇺🇬 flag: Uganda
🇺🇲 flag: U.S. Outlying Islands
🇺🇳 flag: United Nations
🇺🇸 flag: United States
🇺🇾 flag: Uruguay
🇺🇿 flag: Uzbekistan
🇻🇦 flag: Vatican City
🇻🇨 flag: St. Vincent & Grenadines
🇻🇪 flag: Venezuela
🇻🇬 flag: British Virgin Islands
🇻🇮 flag: U.S. Virgin Islands
🇻🇳 flag: Vietnam
🇻🇺 flag: Vanuatu
🇼🇫 flag: Wallis & Futuna
🇼🇸 flag: Samoa
🇽🇰 flag: Kosovo
🇾🇪 flag: Yemen
🇾🇹 flag: Mayotte
🇿🇦 flag: South Africa
🇿🇲 flag: Zambia
🇿🇼 flag: Zimbabwe
🏴󠁧󠁢󠁥󠁮󠁧󠁿 flag: England
🏴󠁧󠁢󠁳󠁣󠁴󠁿 flag: Scotland
🏴󠁧󠁢󠁷󠁬󠁳󠁿 flag: Wales
</file>

<file path="homes/notashelf/programs/graphical/launchers/default.nix">
{
  imports = [
    ./rofi
    ./tofi
    ./anyrun
  ];
}
</file>

<file path="homes/notashelf/programs/graphical/misc/wlogout/default.nix">
{pkgs, ...}: {
  xdg.configFile = {
    "wlogout/layout".text = ''
      {
        "label" : "lock",
        "action" : "loginctl lock-session",
        "text" : "Lock",
        "keybind" : "l"
      }
      {
        "label" : "hibernate",
        "action" : "systemctl hibernate",
        "text" : "Hibernate",
        "keybind" : "h"
      }
      {
        "label" : "logout",
        "action" : "loginctl terminate-user $USER",
        "text" : "Logout",
        "keybind" : "e"
      }
      {
        "label" : "shutdown",
        "action" : "systemctl poweroff",
        "text" : "Shutdown",
        "keybind" : "s"
      }
      {
        "label" : "suspend",
        "action" : "systemctl suspend",
        "text" : "Suspend",
        "keybind" : "u"
      }
      {
        "label" : "reboot",
        "action" : "systemctl reboot",
        "text" : "Reboot",
        "keybind" : "r"
      }
    '';
    "wlogout/style.css".text = let
      iconPath = "${pkgs.wlogout}/share/wlogout/icons";
    in ''
      button {
        color: @theme_text_color;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.25);
        background-repeat: no-repeat;
        background-position: center;
        background-size: 24px;
        margin: 5px;
      }

      button:focus, button:active, button:hover {
        box-shadow: 0 0 0 1px @theme_selected_bg_color;
      }

      #lock {
        background-image: image(url("${iconPath}/lock.png"));
      }

      #logout {
        background-image: image(url("${iconPath}/logout.png"));
      }

      #suspend {
        background-image: image(url("${iconPath}/suspend.png"));
      }

      #hibernate {
        background-image: image(url("${iconPath}/hibernate.png"));
      }

      #shutdown {
       background-image: image(url("${iconPath}/shutdown.png"));
      }

      #reboot {
        background-image: image(url("${iconPath}/reboot.png"));
      }

      #firmware {
        background-image: image(url("${iconPath}/reboot.png"));
      }
    '';
  };
}
</file>

<file path="homes/notashelf/programs/graphical/misc/default.nix">
{
  imports = [
    ./wlogout # wlogout configuration
  ];
}
</file>

<file path="homes/notashelf/programs/graphical/screenlock/gtklock/styles/dark.scss">
window {
	background-size: cover;
	background-repeat: no-repeat;
	background-position: center;

	#clock-label {
		margin-bottom: 30px;
		font-size: 800%;
		font-weight: bold;
		color: white;
		text-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
	}

	#body {
		margin-top: 50px;
	}

	#unlock-button {
		all: unset;
		color: transparent;
	}

	entry {
		border-radius: 12px;
		margin: 1px;
		box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.1);
	}

	#input-label {
		color: transparent;
		margin: -20rem;
	}

	#powerbar-box {
		* {
			border-radius: 12px;
			box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.1);
		}
	}
}
</file>

<file path="homes/notashelf/programs/graphical/screenlock/gtklock/default.nix">
{
  self,
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) readFile;
  inherit (lib) compileSCSS;
  inherit (lib.modules) mkIf;

  inherit (osConfig) modules;
  env = modules.usrEnv;
in {
  imports = [self.homeManagerModules.gtklock];
  config = mkIf env.programs.screenlock.gtklock.enable {
    programs.gtklock = {
      enable = true;
      package = pkgs.gtklock;

      config = {
        modules = [
          "${pkgs.gtklock-powerbar-module.outPath}/lib/gtklock/powerbar-module.so"
        ];

        style = readFile (compileSCSS pkgs {
          name = "gtklock-dark";
          path = ./styles/dark.scss;
        });
      };

      extraConfig = {};
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/screenlock/swaylock/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;
  inherit (osConfig.modules.style.colorScheme) colors;

  env = modules.usrEnv;
in {
  config = mkIf env.programs.screenlock.swaylock.enable {
    programs.swaylock = {
      enable = true;
      package = pkgs.swaylock-effects;
      settings = {
        clock = true;
        color = "${colors.base00}";
        font = "Work Sans";
        show-failed-attempts = false;
        indicator = true;
        indicator-radius = 200;
        indicator-thickness = 20;
        line-color = "${colors.base00}";
        ring-color = "${colors.base04}";
        inside-color = "${colors.base00}";
        key-hl-color = "${colors.base0F}";
        separator-color = "00000000";
        text-color = "${colors.base05}";
        text-caps-lock-color = "";
        line-ver-color = "${colors.base0F}";
        ring-ver-color = "${colors.base0F}";
        inside-ver-color = "${colors.base00}";
        text-ver-color = "${colors.base05}";
        ring-wrong-color = "${colors.base08}";
        text-wrong-color = "${colors.base08}";
        inside-wrong-color = "${colors.base00}";
        inside-clear-color = "${colors.base00}";
        text-clear-color = "${colors.base05}";
        ring-clear-color = "${colors.base0B}";
        line-clear-color = "${colors.base00}";
        line-wrong-color = "${colors.base00}";
        bs-hl-color = "${colors.base08}";
        line-uses-ring = false;
        grace = 3;
        grace-no-mouse = true;
        grace-no-touch = true;
        datestr = "%d/%m/%Y";
        fade-in = "0.1";
        ignore-empty-password = true;
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/screenlock/default.nix">
{
  imports = [
    ./gtklock
    ./swaylock
  ];
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/config/binds.nix">
{
  inputs',
  osConfig,
  defaults,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.meta) getExe;
  inherit (osConfig) modules;
  env = modules.usrEnv;

  # nix advantages
  inherit (import ../packages {inherit inputs' pkgs;}) propaganda;

  terminal =
    if (defaults.terminal == "foot")
    then "foot"
    else "${defaults.terminal}";

  locker = getExe env.programs.screenlock.package;
in {
  wayland.windowManager.hyprland.settings = {
    # define the mod key
    "$MOD" = "SUPER";

    # keyword to toggle "monocle" - a.k.a no_gaps_when_only
    "$kw" = "dwindle:no_gaps_when_only";
    "$disable" = ''act_opa=$(hyprctl getoption "decoration:active_opacity" -j | jq -r ".float");inact_opa=$(hyprctl getoption "decoration:inactive_opacity" -j | jq -r ".float");hyprctl --batch "keyword decoration:active_opacity 1;keyword decoration:inactive_opacity 1"'';
    "$enable" = ''hyprctl --batch "keyword decoration:active_opacity $act_opa;keyword decoration:inactive_opacity $inact_opa"'';
    #"$screenshotarea" = ''hyprctl keyword animation "fadeOut,0,0,default"; grimblast --notify copysave area; hyprctl keyword animation "fadeOut,1,4,default"''

    bind = [
      # Misc
      "$MODSHIFT, Escape, exec, wlogout -p layer-shell" # logout menu
      "$MODSHIFT, L, exec, ${locker}" # lock the screen with swaylock
      "$MODSHIFT,E,exit," # exit Hyprland session
      ''$MODSHIFT,H,exec,cat ${propaganda} | ${pkgs.wl-clipboard}/bin/wl-copy && ${pkgs.libnotify}/bin/notify-send "Propaganda" "ready to spread!" && sleep 0.3 && ${lib.getExe pkgs.wtype} -M ctrl -M shift -k v -m shift -m ctrl -s 300 -k Return'' # spread hyprland propaganda

      # Daily Applications
      "$MOD,F1,exec,firefox" # browser
      ''$MOD,F2,exec,run-as-service "${defaults.fileManager}"'' # file manager
      ''$MOD,RETURN,exec,run-as-service "${terminal}"'' # terminal
      ''$MODSHIFT,RETURN,exec,run-as-service "${terminal}"'' # floating terminal (TODO)
      ''$MOD,D,exec, killall rofi || run-as-service $(rofi -show drun)'' # application launcher
      "$MOD,equal,exec, killall rofi || rofi -show calc" # calc plugin for rofi
      "$MOD,period,exec, killall rofi || rofi -show emoji" # emoji plugin for rofi
      ''$MOD,R,exec, killall tofi || run-as-service $(tofi-drun --prompt-text "  Run")'' # alternative app launcher
      ''$MODSHIFT,R,exec, killall anyrun || run-as-service $(anyrun)'' # alternative application launcher with more features

      # window operators
      "$MODSHIFT,Q,killactive," # kill focused window
      "$MOD,T,togglegroup," # group focused window
      "$MODSHIFT,G,changegroupactive," # switch within the active group
      "$MOD,V,togglefloating," # toggle floating for the focused window
      "$MOD,P,pseudo," # pseudotile focused window
      "$MOD,F,fullscreen," # fullscreen focused window
      "$MOD,M,exec,hyprctl keyword $kw $(($(hyprctl getoption $kw -j | jaq -r '.int') ^ 1))" # toggle no_gaps_when_only

      # workspace controls
      "$MODSHIFT,right,movetoworkspace,+1" # move focused window to the next ws
      "$MODSHIFT,left,movetoworkspace,-1" # move focused window to the previous ws
      "$MOD,mouse_down,workspace,e+1" # move to the next ws
      "$MOD,mouse_up,workspace,e-1" # move to the previous ws

      # focus controls
      "$MOD, left, movefocus, l" # move focus to the window on the left
      "$MOD, right, movefocus, r" # move focus to the window on the right
      "$MOD, up, movefocus, u" # move focus to the window above
      "$MOD, down, movefocus, d" # move focus to the window below

      # screenshot and receording binds
      ''$MODSHIFT,P,exec,$disable; grim - | wl-copy --type image/png && notify-send "Screenshot" "Screenshot copied to clipboard"; $enable''
      "$MODSHIFT,S,exec,$disable; hyprshot; $enable" # screenshot and then pipe it to swappy
      "$MOD, Print, exec, grimblast --notify --cursor copysave output" # copy all active outputs
      "$ALTSHIFT, S, exec, grimblast --notify --cursor copysave screen" # copy active screen
      "$ALTSHIFT, R, exec, grimblast --notify --cursor copysave area" # copy selection area

      # OCR
      "$MODSHIFT,O,exec,ocr"

      # Toggle Statusbar
      "$MODSHIFT,B,exec, ags -t bar"

      /*
      , Print, exec, $screenshotarea
      $ALTSHIFT, S, exec, $screenshotarea
      */
    ];

    bindm = [
      "$MOD,mouse:272,movewindow"
      "$MOD,mouse:273,resizewindow"
    ];
    # binds that will be repeated, a.k.a can be held to toggle multiple times
    binde = [
      # volume controls
      ",XF86AudioRaiseVolume, exec, wpctl set-volume -l '1.0' @DEFAULT_AUDIO_SINK@ 6%+"
      ",XF86AudioLowerVolume, exec, wpctl set-volume -l '1.0' @DEFAULT_AUDIO_SINK@ 6%-"

      # brightness controls
      '',XF86MonBrightnessUp,exec,ags --run-js "brightness.screen += 0.05"''
      '',XF86MonBrightnessDown,exec, ags --run-js "brightness.screen -= 0.05"''
    ];

    # binds that are locked, a.k.a will activate even while an input inhibitor is active
    bindl = [
      # media controls
      ",XF86AudioPlay,exec,playerctl play-pause"
      ",XF86AudioPrev,exec,playerctl previous"
      ",XF86AudioNext,exec,playerctl next"

      ", XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
      ", XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"
    ];
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/config/decorations.nix">
{
  wayland.windowManager.hyprland.settings = {
    decoration = {
      # fancy corners
      rounding = 7;

      # blur
      blur = {
        enabled = true;
        size = 5;
        passes = 3;
        ignore_opacity = true;
        new_optimizations = 1;
        xray = true;
        contrast = 0.7;
        brightness = 0.8;
        vibrancy = 0.2;
        special = true; # expensive, but helps distinguish special workspaces
      };

      # shadow config
      drop_shadow = "yes";
      shadow_range = 10;
      shadow_render_power = 3;
      "col.shadow" = "rgba(292c3cee)";
    };

    group = {
      # new windows in a group spawn after current or at group tail
      insert_after_current = true;
      # focus on the window that has just been moved out of the group
      focus_removed_window = true;

      "col.border_active" = "rgba(88888888)";
      "col.border_inactive" = "rgba(00000088)";

      groupbar = {
        # groupbar stuff
        # this removes the ugly gradient around grouped windows - which sucks
        gradients = false;
        font_size = 14;

        # titles look ugly, and I usually know what I'm looking at
        render_titles = false;

        # scrolling in the groupbar changes group active window
        scrolling = true;
      };
    };

    animations = {
      enabled = true; # we want animations, half the reason why we're on Hyprland innit
      first_launch_animation = true; # fade in on first launch

      bezier = [
        "smoothOut, 0.36, 0, 0.66, -0.56"
        "smoothIn, 0.25, 1, 0.5, 1"
        "overshot, 0.4,0.8,0.2,1.2"
      ];

      animation = [
        "windows, 1, 4, overshot, slide"
        "windowsOut, 1, 4, smoothOut, slide"
        "border,1,10,default"

        "fade, 1, 10, smoothIn"
        "fadeDim, 1, 10, smoothIn"
        "workspaces,1,4,overshot,slidevert"
      ];
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/config/exec.nix">
{osConfig, ...}: let
  inherit (osConfig) modules;

  # theming
  inherit (modules.style) pointerCursor;
in {
  wayland.windowManager.hyprland.settings = {
    exec-once = [
      # set cursor for HL itself
      "hyprctl setcursor ${pointerCursor.name} ${toString pointerCursor.size}"
    ];
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/config/extraConfig.nix">
{
  osConfig,
  lib,
  ...
}: let
  inherit (lib) imap0;
  inherit (osConfig) modules;
  inherit (modules.device) monitors;
in {
  wayland.windowManager.hyprland.extraConfig = let
    # divide workspaces between monitors
    mapMonitorsToWs = builtins.concatStringsSep "\n" (
      builtins.genList (
        x: ''
          workspace = ${toString (x + 1)}, monitor:${
            if (x + 1) <= 5
            then "${builtins.elemAt monitors 0} ${
              if (x + 1) == 1
              then ", default:true"
              else ""
            }"
            else "${builtins.elemAt monitors 1}"
          }

        ''
      )
      10
    );

    # generate monitor config strings
    mapMonitors = builtins.concatStringsSep "\n" (imap0 (i: monitor: ''monitor=${monitor},${
        if monitor == "DP-1"
        then "1920x1080@144"
        else "preferred"
      }, ${toString (i * 1920)}x0,1'')
    monitors);
  in ''
    # generate a list of monitors automatically, like so
    #monitor=HDMI-A-1,preferred,0x0,1
    # monitor=DP-1,preferred,1920x0,1
    ${mapMonitors}

    # if I have a second monitor, indicated by the element count of the monitors list, divide the workspaces
    # inbetween two workspaces -> 1-5 on mon1 and 6-10 on mon2
    # if not, then don't divide workspaces
    # P.S. I really don't know what I will do if I get a third monitor
    ${lib.optionalString (builtins.length monitors != 1) "${mapMonitorsToWs}"}

    # a submap for resizing windows
    bind = $MOD, S, submap, resize # enter resize window to resize the active window
    submap=resize
    binde=,right,resizeactive,10 0
    binde=,left,resizeactive,-10 0
    binde=,up,resizeactive,0 -10
    binde=,down,resizeactive,0 10
    bind=,escape,submap,reset
    submap=reset

    # workspace binds
    # binds * (asterisk) to special workspace
    bind = $MOD, KP_Multiply, togglespecialworkspace
    bind = $MODSHIFT, KP_Multiply, movetoworkspace, special

    # and mod + [shift +] {1..10} to [move to] ws {1..10}
    ${
      builtins.concatStringsSep "\n"
      (builtins.genList (
          x: let
            ws = let
              c = (x + 1) / 10;
            in
              builtins.toString (x + 1 - (c * 10));
          in ''
            bind = $MOD, ${ws}, workspace, ${toString (x + 1)}
            bind = $MOD SHIFT, ${ws}, movetoworkspace, ${toString (x + 1)}
          ''
        )
        10)
    }
  '';
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/config/general.nix">
{osConfig, ...}: let
  inherit (osConfig) modules;

  # theming
  inherit (modules.style) colorScheme;
  inherit (colorScheme) colors;
in {
  wayland.windowManager.hyprland.settings = {
    general = {
      # sensitivity of the mouse cursor
      sensitivity = 0.8;

      # gaps
      gaps_in = 4;
      gaps_out = 8;

      # border thiccness
      border_size = 2;

      # active border color
      "col.active_border" = "0xff${colors.base07}";

      # whether to apply the sensitivity to raw input (e.g. used by games where you aim using your mouse)
      apply_sens_to_raw = 0;
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/config/gestures.nix">
{
  wayland.windowManager.hyprland.settings = {
    gestures = {
      workspace_swipe = true;
      workspace_swipe_forever = true;
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/config/input.nix">
{
  wayland.windowManager.hyprland.settings = {
    input = {
      # keyboard layout
      kb_layout = "tr";
      # self explanatory, I hope?
      follow_mouse = 1;
      # do not imitate natural scroll
      touchpad.natural_scroll = "no";
      # ez numlock enable
      numlock_by_default = true;
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/config/layout.nix">
{
  wayland.windowManager.hyprland.settings = {
    dwindle = {
      pseudotile = false;
      preserve_split = "yes";
      no_gaps_when_only = false;
      special_scale_factor = 0.9; # restore old special workspace behaviour
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/config/misc.nix">
{
  wayland.windowManager.hyprland.settings = {
    misc = {
      # Disable redundant renders
      disable_hyprland_logo = true; # wallpaper covers it anyway
      disable_splash_rendering = true; # "

      # Window swallowing
      # (i.e. children window causes parent to be hidden)
      enable_swallow = true; # Enable window swallowing
      swallow_regex = "foot|thunar|nemo|wezterm"; # Windows for which swallowing is applied

      # dpms
      mouse_move_enables_dpms = true; # Enable DPMS on mouse/touchpad action
      key_press_enables_dpms = true; # Enable DPMS on keyboard action
      disable_autoreload = true; # Autoreload is unnecessary on NixOS, because the configuration file is read-only link
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/config/windowrules.nix">
{
  wayland.windowManager.hyprland.settings = {
    windowrulev2 = [
      # only allow shadows for floating windows
      "noshadow, floating:0"

      "float,class:udiskie"

      # wlogout
      "fullscreen,class:wlogout"
      "fullscreen,title:wlogout"
      "noanim, title:wlogout"

      # spotify
      "tile, title:Spotify"
      "tile, class:^(Spotify)$"

      # steam settings window
      "float, title:^(Steam Settings)$"

      # telegram media viewer
      "float, title:^(Media viewer)$"

      # NetworkManager Connection Editor
      "float, class:nm-connection-editor"
      "size 700 500,class:nm-connection-editor"

      # bitwarden
      "float,class:Bitwarden"
      "size 800 600,class:Bitwarden"

      "idleinhibit focus, class:^(mpv)$"
      "idleinhibit focus,class:foot"

      # firefox
      "idleinhibit fullscreen, class:^(firefox)$"
      "float,title:^(Firefox — Sharing Indicator)$"
      "move 0 0,title:^(Firefox — Sharing Indicator)$"
      "float, title:^(Picture-in-Picture)$"
      "pin, title:^(Picture-in-Picture)$"

      # thunderbird
      "workspace special silent, title:^(Write.*- Thunderbird)$"

      # pavucontrol
      "float,class:pavucontrol"
      "float,title:^(Volume Control)$"
      "size 800 600,title:^(Volume Control)$"
      "move 75 44%,title:^(Volume Control)$"
      "float, class:^(imv)$"

      # throw sharing indicators away
      "workspace special silent, title:^(Firefox — Sharing Indicator)$"
      "workspace special silent, title:^(.*is sharing (your screen|a window)\.)$"

      # EA launcher puts a tiny window in the current workspae
      # throw it away
      "workspace special silent, title:^(title:Wine System Tray)$"

      "workspace 3 silent, class:^(Spotify)$"
      "workspace 4, title:^(.*(Disc|WebC)ord.*)$"
      "workspace 10 silent, class:^(Nextcloud)$"
    ];
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/packages/wrapper/default.nix">
{
  hyprland,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.meta) getExe';
in
  pkgs.writeShellScriptBin "hyprland-wrapped" ''
    ${builtins.readFile ./session.sh}
    ${getExe' hyprland.packages.default "Hyprland"} $@
  ''
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/packages/wrapper/session.sh">
# disable shellcheck's shell check
# it'll be provided by writeShellScript
# shellcheck disable=2148

# session
export XDG_SESSION_TYPE=wayland
export XDG_SESSION_DESKTOP=hyprland
export XDG_CURRENT_DESKTOP=hyprland

# firefox
export MOZ_ENABLE_WAYLAND=1
export MOZ_DBUS_REMOTE=1

# qt
export QT_QPA_PLATFORM=wayland
export QT_WAYLAND_DISABLE_WINDOWDECORATION=1

# gtk
export GDK_BACKEND=wayland

# sdl
export SDL_VIDEODRIVER=wayland

# java
export _JAVA_AWT_WM_NONREPARENTING=1
export JDK_JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel"

# other
export CLUTTER_BACKEND=wayland
export XCURSOR_SIZE=24
export NIXOS_OZONE_WL=1

# cursed dbus

dbus-update-activation-environment --systemd MOZ_ENABLE_WAYLAND MOZ_DBUS_REMOTE QT_QPA_PLATFORM QT_QPA_PLATFORMTHEME QT_WAYLAND_DISABLE_WINDOWDECORATION SDL_VIDEODRIVER _JAVA_AWT_WM_NONREPARENTING JDK_JAVA_OPTIONS XCURSOR_SIZE XCURSOR_THEME

# theme in dbus:
# QT_PLUGIN_PATH=<qt5ct>/lib/qt-ver/plugins + breeze will correctly set the theme.
# HOWEVER it won't find thumbnailers. For now the easiest way to deal with this, though definitely not
# the right one, is to just throw $PATH into dbus.
dbus-update-activation-environment --systemd PATH
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/packages/dbus-hyprland-env.nix">
{pkgs, ...}:
pkgs.writeTextFile {
  name = "dbus-hyprland-env";
  destination = "/bin/dbus-hyprland-environment";
  executable = true;
  text = ''
    dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=hyprland
    systemctl --user stop pipewire pipewire-media-session xdg-desktop-portal xdg-desktop-portal-wlr
    systemctl --user start pipewire wireplumber pipewire-media-session xdg-desktop-portal xdg-desktop-portal-hyprland
  '';
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/packages/default.nix">
{
  inputs',
  pkgs,
  ...
}: let
  packages = {
    inherit (inputs'.hyprland-contrib.packages) grimblast;
    inherit (inputs'.hyprpicker.packages) hyprpicker;

    wrapper = pkgs.callPackage ./wrapper {inherit (inputs') hyprland;};
    hyprshot = pkgs.callPackage ./hyprshot.nix {};
    dbus-hyprland-env = pkgs.callPackage ./dbus-hyprland-env.nix {};
    propaganda = pkgs.callPackage ./propaganda.nix {};
  };
in
  packages
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/packages/hyprshot.nix">
{pkgs, ...}:
pkgs.writeShellApplication {
  name = "hyprshot";
  runtimeInputs = with pkgs; [grim slurp swappy];
  text = ''
    hyprctl keyword animation "fadeOut,0,8,slow" && \
      grim -g "$(slurp -w 0 -b 5e81acd2)" - | swappy -f -; \
      hyprctl keyword animation "fadeOut,1,8,slow"
  '';
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/packages/propaganda.nix">
{pkgs, ...}:
pkgs.writeTextFile {
  name = "propaganda";
  text = ''
    ## Nix advantages:
    - Correct and complete packaging
    - Immutable & reproducible results
    - Easy to cross and static compile
    - Source-based (you can alter packages without forking anything)
    - Single package manager to rule them all! (C, Python, Docker, NodeJS, etc)
    - Great for development, easily switches between dev envs with direnv
    - Easy to try out packages without installing using `nix shell` or `nix run`
      - allows to create scripts that can do and depend on anything, so long as the host has nix, it'll download things automatically for them
    - Uses binary caches so you almost never need to compile anything
    - Easy to set up a binary cache
    - Easy to set up remote building
      - Distribute your builds accross an unlimited number of machines, without any hassle
    - Excellent testing infrastructure
    - Portable - runs on Linux and macOS
    - Can be built statically and run anywhere without root permissions
    - Mix and match different package versions without conflicts
      - Want to have a package with openssl1.1 and another with openssl 3.0? No problem!
    - Flakes let you pin versions to specific revisions
      - Various alternatives for Flakes for version pinning, such as npins and niv

    ## NixOS advantages:
    - Declarative configuration
      - Meaning easier to configure your system(s)
      - Easier to change, manage and maintain the configuration
      - Easier to back up and share with people
    - Easy to deploy machines and their configuration
    - Out of the box Rollbacks.
    - Configuration options for many programs & services
    - Free of side effects - Actually uninstalls packages and their dependencies
    - Easy to set up VMs
    - People can test each other's configurations using `nix run` and `nix shell` by just having access to the source
  '';
}
</file>

<file path="homes/notashelf/programs/graphical/wms/hyprland/default.nix">
{
  inputs',
  osConfig,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) filter map toString;
  inherit (lib.filesystem) listFilesRecursive;
  inherit (lib.modules) mkIf;
  inherit (lib.strings) hasSuffix;
  inherit (osConfig) modules;

  inherit (import ./packages {inherit inputs' pkgs;}) grimblast hyprshot dbus-hyprland-env hyprpicker;

  env = modules.usrEnv;
in {
  imports = filter (hasSuffix ".nix") (
    map toString (filter (p: p != ./default.nix) (listFilesRecursive ./config))
  );
  config = mkIf env.desktops.hyprland.enable {
    home.packages = [
      hyprshot
      grimblast
      hyprpicker
      dbus-hyprland-env
    ];

    wayland.windowManager.hyprland = {
      enable = true;
      package = env.desktops.hyprland.package;
      xwayland.enable = true;
      systemd = {
        enable = true;
        variables = ["--all"];
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/i3/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;

  env = modules.usrEnv;
in {
  config = mkIf env.desktops.i3.enable {
    home.packages = [pkgs.maim];

    # enable i3status for the bar
    programs.i3status-rust = {
      enable = true;
      bars = {
        bottom = {
          theme = "modern";
          icons = "awesome6";

          blocks = [
            {
              block = "custom";
              command = "${pkgs.rsstail}/bin/rsstail rsstail -n 1 -1 -N -u https://github.com/nixos/nixpkgs/commits/master.atom";
              interval = 60;
            }
            {
              block = "memory";
              format = " $icon $mem_used_percents ";
              format_alt = " $icon $swap_used_percents ";
            }
            {
              block = "cpu";
              interval = 1;
              format = " CPU $barchart $utilization ";
              format_alt = " CPU $frequency{ $boost|} ";
              merge_with_next = true;
            }
            {
              block = "load";
              format = " Avg $5m ";
              interval = 10;
              merge_with_next = true;
            }
            {
              block = "memory";
              format = " MEM $mem_used_percents ";
              format_alt = " MEM $swap_used_percents ";
            }
            {
              block = "battery";
              device = "BAT1";
              format = " $icon $percentage $time $power ";
            }
            {
              block = "net";
              format = " $icon $ssid $signal_strength $ip ↓$speed_down ↑$speed_up ";
              interval = 2;
            }
            {
              block = "time";
              interval = 1;
              format = " $timestamp.datetime(f:'%F %T') ";
            }
            {
              block = "sound";
            }
          ];
        };
      };
    };

    # use i3 as the window manager
    xsession.windowManager.i3 = let
      mod = "Mod4";
    in {
      enable = true;
      config = {
        # status bar configuration
        bars = [
          {
            position = "bottom";
            statusCommand = "${pkgs.i3status-rust}/bin/i3status-rs ~/.config/i3status-rust/config-bottom.toml";
          }
        ];

        workspaceLayout = "tabbed";

        gaps = let
          gaps_inner = 5;
          gaps_outer = 5;
          gaps_top = 5;
          gaps_bottom = 5;
        in {
          # Set inner/outer gaps
          outer = gaps_outer;
          inner = gaps_inner;
          top = gaps_top;
          bottom = gaps_bottom;
        };

        # keybindings
        keybindings = lib.mkOptionDefault {
          "${mod}+r" = "exec ${pkgs.dmenu}/bin/dmenu_run";
          "${mod}+Return" = "exec ${pkgs.kitty}/bin/kitty";
          "${mod}+p" = "exec sh -c '${pkgs.maim}/bin/maim -s | xclip -selection clipboard -t image/png'";
          "${mod}+Shift+x" = "exec sh -c '${pkgs.i3lock}/bin/i3lock -c 222222 & sleep 5 && xset dpms force of'";

          "${mod}+v" = "floating toggle";
          "${mod}+g" = "sticky toggle";
          "${mod}+f" = "fullscreen";

          # Focus
          "${mod}+h" = "focus left";
          "${mod}+j" = "focus down";
          "${mod}+k" = "focus up";
          "${mod}+l" = "focus right";

          # Move
          "${mod}+Shift+h" = "move left";
          "${mod}+Shift+j" = "move down";
          "${mod}+Shift+k" = "move up";
          "${mod}+Shift+l" = "move right";

          # workspace navigation
          "${mod}+Shift+Right" = "workspace next";
          "${mod}+Shift+Left" = "workspace prev";

          # workspace selection
          "${mod}+1" = "workspace number 1";
          "${mod}+2" = "workspace number 2";
          "${mod}+3" = "workspace number 3";
          "${mod}+4" = "workspace number 4";
          "${mod}+5" = "workspace number 5";
          "${mod}+6" = "workspace number 6";
          "${mod}+7" = "workspace number 7";
          "${mod}+8" = "workspace number 8";
          "${mod}+9" = "workspace number 9";
          "${mod}+0" = "workspace number 0";

          # keybindings for moving windows to different workspaces
          "${mod}+Shift+1" = "move container to workspace number 1";
          "${mod}+Shift+2" = "move container to workspace number 2";
          "${mod}+Shift+3" = "move container to workspace number 3";
          "${mod}+Shift+4" = "move container to workspace number 4";
          "${mod}+Shift+5" = "move container to workspace number 5";
          "${mod}+Shift+6" = "move container to workspace number 6";
          "${mod}+Shift+7" = "move container to workspace number 7";
          "${mod}+Shift+8" = "move container to workspace number 8";
          "${mod}+Shift+9" = "move container to workspace number 9";

          "${mod}+Shift+r" = ''restart; exec notify-send "i3 restarted"'';
          "${mod}+Shif+q" = "kill";
          "${mod}+Shift+e" = "exit";

          # Move the currently focused window to scratchpad
          "${mod}+Shift+BackSpace" = "move scratchpad";

          # Show the first scratchpad window
          "${mod}+BackSpace" = "scratchpad show, move position center";
        };

        startup = [
          /*
          {
            command = "${pkgs.feh}/bin/feh --bg-scale 'some path'";
            always = false;
            notification = false;
          }
          */
        ];

        assigns = let
          w1 = "1:  TSK";
          w2 = "2:  MUS";
          w3 = "3:  CHAT";
          w4 = "4:  VIRT";
          w5 = "5:  TERM";
          w6 = "6:  GFX";
          w7 = "7:  WWW";
          w8 = "8:  TERM";
          w9 = "9:  DEV";
          w0 = "0:  TERM";
        in {
          "${w2}" = [{class = "Spotify";}];
          "${w3}" = [{class = "Discord";}];
          "${w7}" = [{class = "Google-chrome";} {class = "firefox";}];
          "${w9}" = [{class = "VSCodium";}];
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/sway/config.nix">
{
  config,
  lib,
  defaults,
  ...
}: let
  terminal =
    if (defaults.terminal == "foot")
    then "foot"
    else "${defaults.terminal}";
in {
  config = {
    wayland.windowManager.sway = {
      config = {
        assigns = {
          "1: web" = [{class = "^Firefox$";}];
          "9: steam" = [{class = "^Steam$";}];
        };

        workspaceAutoBackAndForth = true;

        modifier = "Mod4";
        keybindings = let
          m = config.wayland.windowManager.sway.config.modifier;
        in
          lib.mkOptionDefault {
            "${m}+Return" = "exec ${terminal}";
            "${m}+space" = "exec anyrun";

            # utilities
            "${m}+q" = "kill";
            "${m}+t" = "floating toggle";

            # screenshots
            "Print" = "grim -g \"$(slurp)\" - | wl-copy -t image/png";
            "${m}+Shift+r" = "grim -g \"$(slurp)\" - | wl-copy -t image/png";
            "Alt+Print" = "grim - | wl-copy -t image/png";
            "${m}+Alt+Shift+r" = "grim - | wl-copy -t image/png";
          };

        keycodebindings = {
          "--locked --no-repeat 121" = "exec wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"; # mute
          "--locked 122" = "exec wpctl set-volume @DEFAULT_AUDIO_SINK@ 6%-"; # vol-
          "--locked 123" = "exec wpctl set-volume @DEFAULT_AUDIO_SINK@ 6%+"; # vol+
          "--locked 171" = "exec playerctl next"; # next song
          "--locked --no-repeat 172" = "exec playerctl play-pause"; # play/pause
          "--locked 173" = "exec playerctl previous"; # prev song
          "--locked --no-repeat 198" = "exec wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"; # mic mute
          "--locked 232" = "exec light -U 5"; # brightness-
          "--locked 233" = "exec light -A 5"; # brightness+
        };

        menu = "anyrun";
        bars = [];

        gaps = {
          smartBorders = "on";
          outer = 5;
          inner = 5;
        };

        startup = [{command = "dbus-update-activation-environment --systemd WAYLAND_DISPLAY DISPLAY";}];

        input = {
          "type:pointer" = {
            accel_profile = "flat";
            pointer_accel = "0";
          };
          "type:touchpad" = {
            middle_emulation = "enabled";
            natural_scroll = "enabled";
            tap = "enabled";
          };
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/sway/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  env = osConfig.modules.usrEnv;
in {
  imports = [./config.nix];
  config = mkIf env.desktops.sway.enable {
    wayland.windowManager.sway = {
      enable = true;
      package = pkgs.swayfx;
    };
  };
}
</file>

<file path="homes/notashelf/programs/graphical/wms/default.nix">
{
  imports = [
    ./i3
    ./hyprland
    ./sway
  ];
}
</file>

<file path="homes/notashelf/programs/graphical/default.nix">
{
  imports = [
    ./apps
    ./gaming
    ./launchers
    ./misc
    ./screenlock
    ./wms
  ];
}
</file>

<file path="homes/notashelf/programs/media/mpv/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf mkMerge;
  inherit (osConfig) modules;

  env = modules.usrEnv;
  prg = env.programs;

  low1k = import ./low1k.nix {inherit pkgs;};
in {
  config = mkIf prg.media.mpv.enable {
    programs.mpv = {
      enable = true;

      inherit (prg.media.mpv) scripts;

      config = {
        ytdl-format = "bestvideo+bestaudio/best";
        audio-display = false;
        force-window = true;
        hidpi-window-scale = false;
        hwdec = "auto";
        keep-open = true;
        keep-open-pause = false;
        osd-on-seek = false;
        profile = "gpu-hq";
        script-opts = "osc-seekbarstyle=knob,osc-deadzonesize=1,osc-minmousemove=1";
        slang = "chi";
        sub-auto = "fuzzy";
        sub-codepage = "gbk";
        osc = "no";
        osd-bar = "no";
        border = "no";
      };

      bindings = mkMerge [
        # mpv keybindings
        {
          "Y" = "add sub-scale +0.1"; # increase subtitle font size
          "G" = "add sub-scale -0.1"; # decrease subtitle font size
          "y" = "sub_step -1"; # immediately display next subtitle
          "g" = "sub_step +1"; # previous
          "R" = "cycle_values window-scale 2 0.5 1"; # switch between 2x, 1/2, unresized window size

          "l" = "seek 5";
          "h" = "seek -5";
          "j" = "seek -60";
          "k" = "seek 60";

          "s" = "cycle sub";
          "a" = "cycle audio";

          "Alt+h" = "add chapter -1";
          "Alt+l" = "add chapter 1";
          "Ctrl+SPACE" = "add chapter 1";

          "Alt+j" = "add video-zoom -0.25";
          "Alt+k" = "add video-zoom 0.25";

          "Alt+J" = "add sub-pos -1";
          "Alt+K" = "add sub-pos +1";

          "Ctrl+h" = "multiply speed 1/1.1";
          "Ctrl+l" = "multiply speed 1.1";
          "Ctrl+H" = "set speed 1.0";
        }

        # merge low1k's keybindings into mpv bindings section
        low1k
      ];
    };
  };
}
</file>

<file path="homes/notashelf/programs/media/mpv/low1k.nix">
{pkgs, ...}: let
  inherit (pkgs) anime4k;
in {
  # curl -sL https://github.com/bloc97/Anime4K/raw/master/GLSL_Instructions.md | grep '^CTRL' | sed -r -e '/^$/d' -e 's|~~/shaders/|${anime4k}/|g' -e 's|;\$|:$|g' -e "s| |\" = ''|" -e 's|^|    "|' -e "s|$|'';|"
  "CTRL+1" = ''no-osd change-list glsl-shaders set "${anime4k}/Anime4K_Clamp_Highlights.glsl:${anime4k}/Anime4K_Restore_CNN_M.glsl:${anime4k}/Anime4K_Upscale_CNN_x2_M.glsl:${anime4k}/Anime4K_AutoDownscalePre_x2.glsl:${anime4k}/Anime4K_AutoDownscalePre_x4.glsl:${anime4k}/Anime4K_Upscale_CNN_x2_S.glsl"; show-text "Anime4K: Mode A (Fast)"'';
  "CTRL+2" = ''no-osd change-list glsl-shaders set "${anime4k}/Anime4K_Clamp_Highlights.glsl:${anime4k}/Anime4K_Restore_CNN_Soft_M.glsl:${anime4k}/Anime4K_Upscale_CNN_x2_M.glsl:${anime4k}/Anime4K_AutoDownscalePre_x2.glsl:${anime4k}/Anime4K_AutoDownscalePre_x4.glsl:${anime4k}/Anime4K_Upscale_CNN_x2_S.glsl"; show-text "Anime4K: Mode B (Fast)"'';
  "CTRL+3" = ''no-osd change-list glsl-shaders set "${anime4k}/Anime4K_Clamp_Highlights.glsl:${anime4k}/Anime4K_Upscale_Denoise_CNN_x2_M.glsl:${anime4k}/Anime4K_AutoDownscalePre_x2.glsl:${anime4k}/Anime4K_AutoDownscalePre_x4.glsl:${anime4k}/Anime4K_Upscale_CNN_x2_S.glsl"; show-text "Anime4K: Mode C (Fast)"'';
  "CTRL+4" = ''no-osd change-list glsl-shaders set "${anime4k}/Anime4K_Clamp_Highlights.glsl:${anime4k}/Anime4K_Restore_CNN_M.glsl:${anime4k}/Anime4K_Upscale_CNN_x2_M.glsl:${anime4k}/Anime4K_Restore_CNN_S.glsl:${anime4k}/Anime4K_AutoDownscalePre_x2.glsl:${anime4k}/Anime4K_AutoDownscalePre_x4.glsl:${anime4k}/Anime4K_Upscale_CNN_x2_S.glsl"; show-text "Anime4K: Mode A+A (Fast)"'';
  "CTRL+5" = ''no-osd change-list glsl-shaders set "${anime4k}/Anime4K_Clamp_Highlights.glsl:${anime4k}/Anime4K_Restore_CNN_Soft_M.glsl:${anime4k}/Anime4K_Upscale_CNN_x2_M.glsl:${anime4k}/Anime4K_AutoDownscalePre_x2.glsl:${anime4k}/Anime4K_AutoDownscalePre_x4.glsl:${anime4k}/Anime4K_Restore_CNN_Soft_S.glsl:${anime4k}/Anime4K_Upscale_CNN_x2_S.glsl"; show-text "Anime4K: Mode B+B (Fast)"'';
  "CTRL+6" = ''no-osd change-list glsl-shaders set "${anime4k}/Anime4K_Clamp_Highlights.glsl:${anime4k}/Anime4K_Upscale_Denoise_CNN_x2_M.glsl:${anime4k}/Anime4K_AutoDownscalePre_x2.glsl:${anime4k}/Anime4K_AutoDownscalePre_x4.glsl:${anime4k}/Anime4K_Restore_CNN_S.glsl:${anime4k}/Anime4K_Upscale_CNN_x2_S.glsl"; show-text "Anime4K: Mode C+A (Fast)"'';
  "CTRL+0" = ''no-osd change-list glsl-shaders clr ""; show-text "GLSL shaders cleared"'';
}
</file>

<file path="homes/notashelf/programs/media/ncmpcpp/binds.nix">
{
  programs.ncmpcpp.bindings = [
    {
      key = "j";
      command = "scroll_down";
    }
    {
      key = "k";
      command = "scroll_up";
    }
    {
      key = "J";
      command = ["select_item" "scroll_down"];
    }
    {
      key = "K";
      command = ["select_item" "scroll_up"];
    }
  ];
}
</file>

<file path="homes/notashelf/programs/media/ncmpcpp/default.nix">
{
  osConfig,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  env = modules.usrEnv;
  prg = env.programs;
in {
  imports = [./binds.nix ./settings.nix];

  config.programs.ncmpcpp = mkIf prg.media.ncmpcpp.enable {
    enable = true;

    # provide visualisier support for ncmpcpp
    # it will optionally display a visualiser in the terminal
    # if the mpd server is configured to write the visualiser
    # mipe - e.g. /tmp/mpd.fifo
    package = pkgs.ncmpcpp.override {visualizerSupport = true;};

    # look for music tracks inside mpd's music directory
    mpdMusicDir = config.services.mpd.musicDirectory;
  };
}
</file>

<file path="homes/notashelf/programs/media/ncmpcpp/settings.nix">
{config, ...}: {
  programs.ncmpcpp.settings = {
    # Miscelaneous
    ncmpcpp_directory = "${config.xdg.configHome}/ncmpcpp";
    ignore_leading_the = true;
    external_editor = "nvim";
    message_delay_time = 1;
    playlist_disable_highlight_delay = 2;
    autocenter_mode = "yes";
    centered_cursor = "yes";
    allow_for_physical_item_deletion = "no";
    lines_scrolled = "0";
    follow_now_playing_lyrics = "yes";
    lyrics_fetchers = "musixmatch";

    # visualizer
    visualizer_data_source = "/tmp/mpd.fifo";
    visualizer_output_name = "mpd_visualizer";
    visualizer_type = "ellipse";
    visualizer_look = "●● ";
    visualizer_color = "blue, green";

    # appearance
    colors_enabled = "yes";
    playlist_display_mode = "classic";
    user_interface = "classic";
    volume_color = "white";

    # window
    song_window_title_format = "Music";
    statusbar_visibility = "no";
    header_visibility = "no";
    titles_visibility = "no";
    # progress bar
    progressbar_look = "‎‎‎";
    progressbar_color = "black";
    progressbar_elapsed_color = "blue";

    # song list
    song_status_format = "$7%t";
    song_list_format = "$(008)%t$R  $(247)%a$R$5  %l$8";
    song_columns_list_format = "(53)[blue]{tr} (45)[blue]{a}";

    current_item_prefix = "$b$2| ";
    current_item_suffix = "$/b$5";

    now_playing_prefix = "$b$5| ";
    now_playing_suffix = "$/b$5";

    song_library_format = "{{%a - %t} (%b)}|{%f}";

    # colors
    main_window_color = "blue";

    current_item_inactive_column_prefix = "$b$5";
    current_item_inactive_column_suffix = "$/b$5";

    color1 = "white";
    color2 = "blue";
  };
}
</file>

<file path="homes/notashelf/programs/media/beets.nix">
{
  osConfig,
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  env = modules.usrEnv;
  prg = env.programs;
in {
  programs.beets = mkIf prg.media.beets.enable {
    enable = true;

    settings = {
      ui.color = true;
      directory = config.services.mpd.musicDirectory;
      library = "${config.services.mpd.musicDirectory}/musiclibrary.db";

      clutter = [
        "Thumbs.DB"
        ".DS_Store"
        ".directory"
      ];

      plugins = [
        # "acousticbrainz" # DEPRECATED
        "mpdupdate"
        "lyrics"
        "thumbnails"
        "fetchart"
        "embedart"
        "chroma"
        "fromfilename"
        "lastgenre"
        "absubmit"
        "duplicates"
        "edit"
        "mbcollection"
        "mbsync"
        "replaygain"
        "scrub"
      ];

      import = {
        move = true;
        timid = true;
        detail = true;
        bell = true;
        write = true;
      };

      mpd = {
        host = "localhost";
        port = 6600;
      };

      lyrics = {
        auto = true;
      };

      thumbnails.auto = true;
      fetchart.auto = true;

      embedart = {
        auto = true;
        remove_art_file = true;
      };

      acousticbrainz.auto = true;
      chroma.auto = true;
      replaygain.backend = "gstreamer";
    };
  };
}
</file>

<file path="homes/notashelf/programs/media/default.nix">
{
  imports = [
    ./mpv
    ./ncmpcpp

    ./beets.nix
    ./packages.nix
  ];
}
</file>

<file path="homes/notashelf/programs/media/packages.nix">
{
  inputs',
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  inherit (osConfig) modules;

  env = modules.usrEnv;
  prg = env.programs;
  cfg = prg.media;
in {
  config = mkIf cfg.addDefaultPackages {
    home.packages = with pkgs;
      [
        # tools that help with media operations/management
        ffmpeg-full
        yt-dlp
        mpc-cli
        playerctl
        pavucontrol
        pulsemixer
        imv
        cantata
        easytag
        kid3
        musikcube

        # get ani-cli  from my own package collection
        # I usually don't want to wait for nixpkgs
        inputs'.nyxexprs.packages.ani-cli
      ]
      ++ cfg.extraPackages;
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/helix/default.nix">
{
  lib,
  pkgs,
  osConfig,
  inputs',
  ...
}: let
  inherit (lib) mkIf;

  dev = osConfig.modules.device;
  acceptedTypes = ["desktop" "laptop" "hybrid" "server" "lite"];
in {
  config = mkIf (builtins.elem dev.type acceptedTypes) {
    programs.helix = {
      enable = false;
      package = inputs'.helix.packages.default.overrideAttrs (self: {
        makeWrapperArgs = with pkgs;
          self.makeWrapperArgs
          or []
          ++ [
            "--suffix"
            "PATH"
            ":"
            (lib.makeBinPath [
              clang-tools
              marksman
              nil
              luajitPackages.lua-lsp
              nodePackages.bash-language-server
              nodePackages.vscode-css-languageserver-bin
              nodePackages.vscode-langservers-extracted
              nodePackages.prettier
              rustfmt
              rust-analyzer
              black
              alejandra
              shellcheck
            ])
          ];
      });
      settings = {
        theme = "catppuccin_mocha_transparent";
        icons = "nerdfonts";
        keys.normal = {
          "{" = "goto_prev_paragraph";
          "}" = "goto_next_paragraph";
          "X" = "extend_line_above";
          "esc" = ["collapse_selection" "keep_primary_selection"];
          "C-q" = ":xa";
          "C-w" = "file_picker";
          "space" = {
            "space" = "file_picker";
            "w" = ":w";
            "q" = ":bc";
            "u" = {
              "f" = ":format"; # format using LSP formatter
              "w" = ":set whitespace.render all";
              "W" = ":set whitespace.render none";
            };
          };
        };
        keys.select = {
          "%" = "match_brackets";
        };
        editor = {
          color-modes = true;
          cursorline = true;
          mouse = true;
          idle-timeout = 1;
          line-number = "relative";
          scrolloff = 5;
          rainbow-brackets = true;
          completion-replace = true;
          cursor-word = true;
          bufferline = "always";
          true-color = true;
          rulers = [80];
          soft-wrap.enable = true;
          indent-guides = {
            render = true;
          };
          sticky-context = {
            enable = true;
            indicator = true;
          };
          lsp = {
            display-messages = true;
            display-inlay-hints = true;
          };
          gutters = ["diagnostics" "line-numbers" "spacer" "diff"];
          statusline = {
            mode-separator = "";
            separator = "";
            left = ["mode" "selections" "spinner" "file-name" "total-line-numbers"];
            center = [];
            right = ["diagnostics" "file-encoding" "file-line-ending" "file-type" "position-percentage" "position"];
            mode = {
              normal = "NORMAL";
              insert = "INSERT";
              select = "SELECT";
            };
          };

          whitespace.characters = {
            space = "·";
            nbsp = "⍽";
            tab = "→";
            newline = "⤶";
          };

          cursor-shape = {
            insert = "bar";
            normal = "block";
            select = "block";
          };
        };
      };
      # override catppuccin theme and remove background to fix transparency
      themes = {
        catppuccin_mocha_transparent = {
          "inherits" = "catppuccin_mocha";
          "ui.virtual.inlay-hint" = {
            fg = "surface1";
          };
          "ui.background" = "{}";
        };
      };

      languages = {
        language = [
          {
            name = "bash";
            auto-format = true;
            formatter = {
              command = "${pkgs.shfmt}/bin/shfmt";
              args = ["-i" "2" "-"];
            };
          }
          {
            name = "html";
            file-types = ["html" "tera"];
          }
          {
            name = "clojure";
            injection-regex = "(clojure|clj|edn|boot|yuck)";
            file-types = ["clj" "cljs" "cljc" "clje" "cljr" "cljx" "edn" "boot" "yuck"];
          }
        ];

        language-server = {
          bash-language-server = {
            command = "${pkgs.nodePackages.bash-language-server}/bin/bash-language-server";
            args = ["start"];
          };

          clangd = {
            command = "${pkgs.clang-tools}/bin/clangd";
            clangd.fallbackFlags = ["-std=c++2b"];
          };

          nil = {
            command = lib.getExe pkgs.nil;
            config.nil.formatting.command = ["${lib.getExe pkgs.alejandra}" "-q"];
          };

          vscode-css-language-server = {
            command = "${pkgs.nodePackages.vscode-css-languageserver-bin}/bin/css-languageserver";
            args = ["--stdio"];
          };
        };
      };
    };

    home.packages = with pkgs; [
      # some other lsp related packages / dev tools
      lldb # debugging stuff
      gopls # go
      revive # go
      rust-analyzer # rust
      texlab # latex
      zls # zig
      #elixir_ls # broken
      gcc # C/++
      uncrustify # source code beautifier
      black # python
      alejandra # nix formatting
      shellcheck # bash
      gawk
      haskellPackages.haskell-language-server
      nodePackages.typescript-language-server
      java-language-server
      kotlin-language-server
      nodePackages.vls
      nodePackages.yaml-language-server
      nodePackages.jsonlint
      nodePackages.yarn
      nodePackages.pnpm
      sumneko-lua-language-server
      nodePackages.vscode-langservers-extracted
      cargo
    ];
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/display/mouse.lua">
-- disable the "how to disable mouse" message
-- in right click popups
vim.cmd.aunmenu([[PopUp.How-to\ disable\ mouse]])
vim.cmd.aunmenu([[PopUp.-1-]])

vim.cmd.amenu([[PopUp.Inspect <Cmd>Inspect<CR>]])
vim.cmd.amenu([[PopUp.Telescope <Cmd>Telescope<CR>]])
vim.cmd.amenu([[PopUp.Code\ action <Cmd>lua vim.lsp.buf.code_action()<CR>]])
vim.cmd.amenu([[PopUp.LSP\ Hover <Cmd>lua vim.lsp.buf.hover()<CR>]])

-- Add a blinking cursor in certain modes.
vim.opt.guicursor = {
  'n-c-v:block-Cursor',
  'i-ci-ve-r-o:blinkwait250-blinkon250-blinkoff250-Cursor',
  'i-ci-ve:ver25-Cursor',
  'r-cr-o:hor20-Cursor',
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/display/numbertoggle.lua">
-- alias for vim.api.nvim_create_autocmd
local create_autocmd = vim.api.nvim_create_autocmd
-- alias for vim.api.nvim_create_augroup
local create_augroup = vim.api.nvim_create_augroup

-- taken from https://github.com/sitiom/nvim-numbertoggle
-- I would much rather avoid fetching yet another plugin for something
-- that should be done locally - and not as a plugin
local augroup = create_augroup('NumberToggle', {})

create_autocmd({ 'BufEnter', 'FocusGained', 'InsertLeave', 'CmdlineLeave', 'WinEnter' }, {
  pattern = '*',
  group = augroup,
  callback = function()
    if vim.o.nu and vim.api.nvim_get_mode().mode ~= 'i' then
      vim.opt.relativenumber = true
    end
  end,
})

create_autocmd({ 'BufLeave', 'FocusLost', 'InsertEnter', 'CmdlineEnter', 'WinLeave' }, {
  pattern = '*',
  group = augroup,
  callback = function()
    if vim.o.nu then
      vim.opt.relativenumber = false
      vim.cmd('redraw')
    end
  end,
})
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/display/split.lua">
-- More natural pane splitting
vim.o.splitbelow = true
vim.o.splitright = true
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/display/ui.lua">
local opt = vim.opt

-- luacheck: ignore
-- When true, all the windows are automatically made the same size after splitting or closing a window.
-- When false, splitting a window will reduce the size of the current window and leave the other windows the same.
opt.equalalways = false
opt.cmdheight = 1      -- Better display for messages
opt.colorcolumn = '+0' -- Align text at 'textwidth'
opt.showtabline = 2    -- Always show the tabs line
opt.helpheight = 0     -- Disable help window resizing
opt.winwidth = 30      -- Minimum width for active window
opt.winminwidth = 1    -- Minimum width for inactive windows
opt.winheight = 1      -- Minimum height for active window
opt.winminheight = 1   -- Minimum height for inactive window
opt.pumheight = 10     -- Maximum number of items to show in the popup menu
opt.winminwidth = 1    -- min width of inactive window
-- opt.pumblend = 100  -- Popup blend, 100 means transparent

opt.cursorline = true
opt.whichwrap:append('<,>,h,l,[,]')

opt.list = true
-- haracters to fill the statuslines, vertical separators and special
-- lines in the window.opt.whichwrap:append('<,>,h,l,[,]')
opt.fillchars:append({
  -- replace window border with slightly thicker characters
  -- although taking a bit of more space, it helps me better
  -- identify the window borders
  horiz = '━',
  horizup = '┻',
  horizdown = '┳',
  vert = '┃',
  vertleft = '┫',
  vertright = '┣',
  verthoriz = '╋',

  eob = ' ', -- suppress end of buffer lines (~)
  diff = '╱', -- deleted lines of the 'diff' option

  msgsep = '‾',

  -- replace fold chars
  fold = ' ',
  foldopen = '',
  foldclose = '',
})

-- List chars that would b shown on all modes
-- better kept simple, because it gets REALLY
-- noisy in an average buffer
local normal_listchars = {
  extends = '›', -- Alternatives: … ,»
  precedes = '‹', -- Alternatives: … ,«
}

opt.listchars = normal_listchars

-- Show listchars while in Insert mode.
local insert_listchars = {
  eol = nil,
  tab = '▎·',
  lead = '·',
  space = '·',
  trail = '.',
  multispace = '… ',
  nbsp = '¤',
}

-- Show listchars while in Insert mode.
vim.api.nvim_create_augroup('InsertModeListChars', { clear = true })
vim.api.nvim_create_autocmd({ 'InsertEnter', 'InsertLeavePre' }, {
  group = 'InsertModeListChars',
  pattern = '*',
  callback = function(args)
    if vim.tbl_contains({ 'quickfix', 'prompt' }, args.match) then
      return
    end

    if args.event == 'InsertEnter' then
      vim.opt_local.listchars = insert_listchars
    else
      vim.opt_local.listchars = normal_listchars
    end

    -- check if ibl is enabled
    -- @diagnostic disable-next-line: no-unknown, unused-local
    local status_ok, ibl = pcall(require, 'ibl')
    if not status_ok then
      return
    end
    require('ibl').debounced_refresh(0)
  end,
})
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/misc/abbrev.lua">
local cmd = vim.cmd

-- luacheck: ignore
local abbreviations = {
  Wq = 'wq', -- keep making those typos
  WQ = 'wq',
  Wqa = 'wqa',
  W = 'w',
  Q = 'q',
  Qa = 'qa',
  Bd = 'bd',
  E = 'e',
  q1 = 'q!', -- this is for when I don't want to reach to shift
  qa1 = 'qa!',
  mk = 'mark', -- make marks faster
  st = 'sort', -- sort
}

-- add more abbreviations
for left, right in pairs(abbreviations) do
  cmd.cnoreabbrev(('%s %s'):format(left, right))
end
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/misc/autoread.lua">
-- If the cursor has been idle for some time, check if the current buffer
-- has been modified externally. prompt the user to reload it if has.
local bufnr = vim.api.nvim_get_current_buf()

-- luacheck: ignore
vim.opt_local.autoread = true
vim.api.nvim_create_autocmd('CursorHold', {
  group = vim.api.nvim_create_augroup('Autoread', { clear = true }),
  buffer = bufnr,
  callback = function()
    vim.cmd('silent! checktime')
  end,
})
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/misc/declutter.lua">
-- luacheck: ignore
vim.opt.spelllang:append('cjk') -- disable spellchecking for asian characters (VIM algorithm does not support it)

vim.opt.shortmess = {
  t = true, -- truncate file messages at start
  A = true, -- ignore annoying swap file messages
  o = true, -- file-read message overwrites previous
  O = true, -- file-read message overwrites previous
  T = true, -- truncate non-file messages in middle
  f = true, -- (file x of x) instead of just (x of x
  F = true, -- Don't give file info when editing a file, NOTE: this breaks autocommand messages
  s = true,
  c = true,
  W = true, -- Don't show [w] or written when writing
}

-- Disable nvim intro
vim.opt.shortmess:append('sI')

-- Some of those are already disasbled in the Neovim wrapper
-- as configured by nvf. I'm just making sure they are disabled
-- here as well.
local disable_distribution_plugins = function()
  local disabled_built_ins = {
    '2html_plugin',
    'getscript',
    'getscriptPlugin',
    'gzip',
    'logipat',
    'matchit',
    'matchparen',
    'tar',
    'tarPlugin',
    'rrhelper',
    'spellfile_plugin',
    'vimball',
    'vimballPlugin',
    'zip',
    'zipPlugin',
    'tutor',
    'rplugin',
    'synmenu',
    'optwin',
    'compiler',
    'bugreport',
    'ftplugin',
    'netrw',
    'netrwPlugin',
    'netrwSettings',
    'netrwFileHandlers',
    -- "skip_ts_context_commentstring_module"
  }

  for _, plugin in pairs(disabled_built_ins) do
    g['loaded_' .. plugin] = 1
  end
end

-- https://github.com/neovim/neovim/issues/14090#issuecomment-1177933661
-- vim.g.do_filetype_lua = 1
-- vim.g.did_load_filetypes = 0

-- Neovim should not be able to load from those paths since
-- we ultimately want to be able to *only* want the nvf config
-- to be the effective one
vim.opt.runtimepath:remove('/etc/xdg/nvim')
vim.opt.runtimepath:remove('/etc/xdg/nvim/after')
vim.opt.runtimepath:remove('/usr/share/vim/vimfiles')
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/misc/diagnostics.lua">
-- Diagnostic settings:
-- see: `:help vim.diagnostic.config`
vim.diagnostic.config({
  update_in_insert = true,
  virtual_text = false,
  signs = true,
  underline = true,
  severity_sort = true,
  virtual_lines = {
    only_current_line = true,
    spacing = 2,
  },

  float = {
    focusable = false,
    style = 'minimal',
    border = 'rounded',
    source = 'always',
    header = '',
    prefix = '',
  },
})
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/misc/handlers.lua">
-- luacheck: ignore
local float_options = {
  border = 'single',
  max_width = math.ceil(vim.api.nvim_win_get_width(0) * 0.6),
  max_height = math.ceil(vim.api.nvim_win_get_height(0) * 0.8),
}

vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
  virtual_text = true,
  signs = false,
  underline = true,
  update_in_insert = false,
  severity_sort = true,
})

vim.lsp.handlers['textDocument/show_line_diagnostics'] = vim.lsp.with(vim.lsp.handlers.hover, float_options)

-- Prevent show notification
-- <https://github.com/neovim/neovim/issues/20457#issuecomment-1266782345>
vim.lsp.handlers['textDocument/hover'] = function(_, result, ctx, config)
  config = config or float_options
  config.focus_id = ctx.method
  if not result then
    return
  end
  local markdown_lines = vim.lsp.util.convert_input_to_markdown_lines(result.contents)
  markdown_lines = vim.lsp.util.trim_empty_lines(markdown_lines)
  if vim.tbl_isempty(markdown_lines) then
    return
  end
  return vim.lsp.util.open_floating_preview(markdown_lines, 'markdown', config)
end

vim.lsp.handlers['textDocument/signatureHelp'] = vim.lsp.with(vim.lsp.handlers.signature_help, float_options)
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/misc/neovide.lua">
if vim.g.neovide then
  local vks = vim.keymap.set

  vim.g.neovide_scale_factor = 1.0
  vim.g.minianimate_disable = true
  vim.g.neovide_window_blurred = true
  vim.g.neovide_transparency = 0.80
  vim.g.neovide_show_border = true
  vim.g.neovide_input_macos_alt_is_meta = true
  vim.g.neovide_cursor_animate_command_line = false -- noice incompat
  vim.g.neovide_cursor_smooth_blink = true
  vim.g.neovide_cursor_vfx_mode = 'ripple'

  -- keymaps
  vks('v', '<D-c>', '"+y') -- Copy
  vks({ 'n', 'v' }, '<D-v>', '"+P') -- Paste
  vks({ 'i', 'c' }, '<D-v>', '<C-R>+') -- Paste
  vks('t', '<D-v>', [[<C-\><C-N>"+P]]) -- Paste
  vks('n', '<D-+>', function()
    vim.g.neovide_scale_factor = vim.g.neovide_scale_factor * 1.1
  end)
  vks('n', '<D-->', function()
    vim.g.neovide_scale_factor = vim.g.neovide_scale_factor / 1.1
  end)
  vks({ 'n', 'v', 't', 'i' }, '<D-}>', [[<C-\><C-N><Cmd>tabnext<CR>]])
  vks({ 'n', 'v', 't', 'i' }, '<D-{>', [[<C-\><C-N><Cmd>tabprev<CR>]])
  vks({ 'n', 'v', 't', 'i' }, '<D-l>', [[<C-\><C-N><Cmd>tabnext #<CR>]])
  vks({ 'n', 'v', 't', 'i' }, '<D-t>', [[<C-\><C-N><Cmd>tabnew<CR>]])
  vks({ 'n', 'v', 't', 'i' }, '<D-w>', [[<C-\><C-N><Cmd>tabclose<CR>]])
end
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/misc/vscode.lua">
-- https://github.com/asvetliakov/vscode-neovim#normal-mode-control-keys
-- available by default
-- CTRL-a
-- CTRL-b
-- CTRL-c
-- CTRL-d
-- CTRL-e
-- CTRL-f
-- CTRL-i
-- CTRL-o
-- CTRL-r
-- CTRL-u
-- CTRL-v
-- CTRL-w
-- CTRL-x
-- CTRL-y
-- CTRL-]
-- CTRL-j
-- CTRL-k
-- CTRL-l
-- CTRL-h
-- CTRL-/

if vim.g.vscode then
  vim.keymap.set('n', 'H', '<Cmd>Tabprevious<CR>', { noremap = true, silent = true })
  vim.keymap.set('n', 'L', '<Cmd>Tabnext<CR>', { noremap = true, silent = true })
  vim.keymap.set(
    'n',
    '<Leader>p',
    "<<Cmd>call VSCodeNotify('workbench.action.quickOpen')<CR>>",
    { noremap = true, silent = true }
  )
end
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/plugins/notify.lua">
local noice = require('noice')
local no_top_text = {
  opts = {
    border = {
      text = { top = '' },
    },
  },
}

-- luacheck: ignore
noice.setup({
  cmdline = {
    format = {
      cmdline = no_top_text,
      filter = no_top_text,
      lua = no_top_text,
      search_down = no_top_text,
      search_up = no_top_text,
    },
  },

  lsp = {
    override = {
      ['cmp.entry.get_documentation'] = true,
      ['vim.lsp.util.convert_input_to_markdown_lines'] = true,
      ['vim.lsp.util.stylize_markdown'] = true,
    },
    progress = {
      enabled = false,
    },
  },

  popupmenu = {
    backend = 'cmp',
  },

  routes = {
    {
      filter = {
        event = 'msg_show',
        kind = 'search_count',
      },
      opts = { skip = true },
    },
    {
      -- skip progress messages from noisy servers
      filter = {
        event = 'lsp',
        kind = 'progress',
        cond = function(message)
          local client = vim.tbl_get(message.opts, 'progress', 'client')
          return client == 'ltex'
        end,
      },
      opts = { skip = true },
    },
  },

  views = {
    cmdline_popup = {
      border = {
        style = 'single',
      },
    },
    confirm = {
      border = {
        style = 'single',
        text = { top = '' },
      },
    },
  },
})
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/autocmds.lua">
-- luacheck: ignore
-- alias for vim.api.nvim_create_autocmd
local create_autocmd = vim.api.nvim_create_autocmd
-- alias for vim.api.nvim_create_augroup
local create_augroup = vim.api.nvim_create_augroup

create_autocmd('BufWritePre', {
  pattern = { '/tmp/*', 'COMMIT_EDITMSG', 'MERGE_MSG', '*.tmp', '*.bak' },
  callback = function()
    vim.opt_local.undofile = false
  end,
})

-- Remove whitespaces on save
-- this is normally handled by the formatter
-- but this should help when the formatter
-- is not working or has timed out
-- create_autocmd('BufWritePre', {
--   pattern = '',
--   command = ':%s/\\s\\+$//e',
-- })

-- Disable line wrapping & spell checking
-- for the terminal buffer
create_autocmd({ 'FileType' }, {
  pattern = { 'toggleterm' },
  callback = function()
    vim.opt_local.wrap = false
    vim.opt_local.spell = false
  end,
})

-- Enable spell checking & line wrapping
-- for git commit messages
create_autocmd({ 'FileType' }, {
  pattern = { 'gitcommit' },
  callback = function()
    vim.opt_local.wrap = true
    vim.opt_local.spell = true
  end,
})

-- Highlight yank after yanking
local highlight_group = create_augroup('YankHighlight', { clear = true })
create_autocmd({ 'TextYankPost' }, {
  pattern = { '*' },
  group = highlight_group,
  callback = function()
    vim.highlight.on_yank({ higroup = 'Visual', timeout = 200 })
  end,
})

-- Close terminal window if process exists with code 0
create_autocmd('TermClose', {
  callback = function()
    if not vim.b.no_auto_quit then
      vim.defer_fn(function()
        if vim.api.nvim_get_current_line() == '[Process exited 0]' then
          vim.api.nvim_buf_delete(0, { force = true })
        end
      end, 50)
    end
  end,
})

-- Start insert mode automatically
-- when editing a Git commit message
create_augroup('AutoInsert', { clear = true })
create_autocmd('FileType', {
  group = 'AutoInsert',
  pattern = 'gitcommit',
  command = 'startinsert',
})

-- Disable cursorline in insert mode
create_augroup('CursorLine', { clear = true })
create_autocmd({ 'InsertLeave', 'WinEnter' }, {
  group = 'CursorLine',
  callback = function()
    vim.wo.cursorline = true
  end,
})

create_autocmd({ 'InsertEnter', 'WinLeave' }, {
  group = 'CursorLine',
  callback = function()
    vim.wo.cursorline = false
  end,
})

-- Create the necessary directory structure for the file being saved.
create_augroup('AutoMkdir', { clear = true })
create_autocmd('BufWritePre', {
  group = 'AutoMkdir',
  callback = function(event)
    local file = vim.loop.fs_realpath(event.match) or event.match
    vim.fn.mkdir(vim.fn.fnamemodify(file, ':p:h'), 'p')
  end,
})

-- Adjust the window size when the terminal is resized
create_autocmd('VimResized', {
  command = 'wincmd =',
})

-- Allow closing certain windows with "q"
-- and remove them from the buffer list
create_augroup('close_with_q', { clear = true })
create_autocmd('FileType', {
  group = 'close_with_q',
  pattern = {
    'help',
    'lspinfo',
    'TelescopePrompt',
  },
  callback = function(event)
    vim.bo[event.buf].buflisted = false
    vim.keymap.set('n', 'q', '<cmd>close<cr>', { buffer = event.buf, silent = true })
  end,
})

-- Mark internally when nvim is focused
-- and when it is not
create_autocmd('FocusGained', {
  callback = function()
    vim.g.nvim_focused = true
  end,
})

create_autocmd('FocusLost', {
  callback = function()
    vim.g.nvim_focused = false
  end,
})
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/core.lua">
local opt = vim.opt
local options = {
  showmode = false, -- disable the -- STATUS -- line
  showtabline = 0, -- never show the tabline
  startofline = true, -- motions like "G" also move to the first char
  virtualedit = 'block', -- visual-block mode can select beyond end of line
  showmatch = true, -- when closing a bracket, briefly flash the matching one
  matchtime = 1, -- duration of that flashing n deci-seconds
  signcolumn = 'yes:1', -- static width
  report = 9001, -- disable "x more/fewer lines" messages
  diffopt = opt.diffopt:append('vertical'), -- diff mode: vertical splits
  backspace = { 'indent', 'eol', 'start' }, -- backspace through everything in insert mode
  hidden = true, -- Enable background buffers
  history = 100, -- Remember N lines in history
  lazyredraw = false, -- Faster scrolling if enabled, breaks noice
  synmaxcol = 240, -- Max column for syntax highlight
  updatetime = 250, -- ms to wait for trigger an event

  -- If 0, move cursor line will not scroll window.
  -- If 999, cursor line will always be in middle of window.
  scrolloff = 0,
}

-- iterate over the options table and set the options
-- for each key = value pair
for key, value in pairs(options) do
  opt[key] = value
end

if not vim.g.vscode then
  opt.timeoutlen = 300 -- Time out on mappings
end

-- Don't auto-comment new lines automatically
-- that happens when you press enter at the end
-- of a comment line, and comments the next line
-- That's annoying and we don't want it!
-- don't continue comments automagically
-- https://neovim.io/doc/user/options.html#'formatoptions'
opt.formatoptions:remove('c')
opt.formatoptions:remove('r')
opt.formatoptions:remove('o')
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/lua/ft.lua">
-- luacheck: ignore
vim.g.markdown_fenced_languages = { 'shell=bash' }

local file_syntax_map = {
  { pattern = '*.rasi',     syntax = 'scss' },
  { pattern = 'flake.lock', syntax = 'json' },
  { pattern = '*.ignore',   syntax = 'gitignore' }, -- also ignore for fd/ripgrep
  { pattern = '*.ojs',      syntax = 'javascript' },
  { pattern = '*.astro',    syntax = 'astro' },
  { pattern = '*.mdx',      syntax = 'mdx' }
}

for _, elem in ipairs(file_syntax_map) do
  vim.api.nvim_create_autocmd({ 'BufNewFile', 'BufRead' }, {
    pattern = elem.pattern,
    command = 'set syntax=' .. elem.syntax,
  })
end
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/mappings/insert.nix">
{
  programs.nvf.settings.vim.maps = {
    insert = {
      # vsnip
      #"<C-jn>".action = "<Plug>(vsnip-jump-next)";
      #"<C-jp>".action = "<Plug>(vsnip-jump-prev)";
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/mappings/normal.nix">
{
  programs.nvf.settings.vim.maps = {
    normal = {
      # General
      "<leader>fd".action = ":lua vim.g.formatsave = not vim.g.formatsave<CR>";
      "<leader>zt".action = ":<C-U>let g:default_terminal = v:count1<CR>";
      "<leader>e".action = ":NvimTreeToggle<CR>";
      "<leader>ld".action = ":lua vim.diagnostic.setqflist({open = true})<CR>";
      "<leader>lf".action = ":lua vim.lsp.buf.format()<CR>";
      "<leader>li".action = ":lua vim.lsp.buf.implementation()<CR>";

      # Diffview
      "<leader>gdq".action = ":DiffviewClose<CR>";
      "<leader>gdd".action = ":DiffviewOpen ";
      "<leader>gdm".action = ":DiffviewOpen<CR>";
      "<leader>gdh".action = ":DiffviewFileHistory %<CR>";
      "<leader>gde".action = ":DiffviewToggleFiles<CR>";

      # Git
      "<leader>gu".action = "<cmd>Gitsigns undo_stage_hunk<CR>";
      "<leader>g<C-w>".action = "<cmd>Gitsigns preview_hunk<CR>";
      "<leader>gp".action = "<cmd>Gitsigns prev_hunk<CR>";
      "<leader>gn".action = "<cmd>Gitsigns next_hunk<CR>";
      "<leader>gP".action = "<cmd>Gitsigns preview_hunk_inline<CR>";
      "<leader>gR".action = "<cmd>Gitsigns reset_buffer<CR>";
      "<leader>gb".action = "<cmd>Gitsigns blame_line<CR>";
      "<leader>gD".action = "<cmd>Gitsigns diffthis HEAD<CR>";
      "<leader>gw".action = "<cmd>Gitsigns toggle_word_diff<CR>";

      # Telescope
      "<M-f>".action = ":Telescope resume<CR>";
      "<leader>fq".action = ":Telescope quickfix<CR>";
      "<leader>f/".action = ":Telescope live_grep<cr>";

      # Aerial
      "<S-O>".action = ":AerialToggle<CR>";

      # vsnip
      #"<C-jn>".action = "<Plug>(vsnip-jump-next)";
      #"<C-jp>".action = "<Plug>(vsnip-jump-prev)";
    };

    normalVisualOp = {
      "<leader>gs".action = ":Gitsigns stage_hunk<CR>";
      "<leader>gr".action = ":Gitsigns reset_hunk<CR>";
      "<leader>lr".action = "<cmd>lua vim.lsp.buf.references()<CR>";

      # ssr.nvim
      "<leader>sr".action = ":lua require('ssr').open()<CR>";

      # Toggleterm
      "<leader>ct" = {
        # action = ":<C-U>ToggleTermSendVisualLines v:count<CR>";
        action = "':ToggleTermSendVisualLines ' . v:count == 0 ? g:default_terminal : v:count";
        expr = true;
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/mappings/select.nix">
{
  programs.nvf.settings.vim.maps = {
    select = {
      # vsnip
      #"<C-jn>".action = "<Plug>(vsnip-jump-next)";
      #"<C-jp>".action = "<Plug>(vsnip-jump-prev)";
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/mappings/terminal.nix">
{
  programs.nvf.settings.vim.maps = {
    terminal = {
      "<M-x>".action = "<cmd>q<CR>";
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/assistant.nix">
{
  programs.nvf.settings.vim = {
    assistant.copilot = {
      enable = true;
      cmp.enable = true;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/autocomplete.nix">
{
  programs.nvf.settings.vim = {
    autocomplete = {
      enable = true;
      type = "nvim-cmp";
      mappings = {
        # close = "<C-e>";
        confirm = "<C-y>";
        next = "<C-n>";
        previous = "<C-p>";
        scrollDocsDown = "<C-j>";
        scrollDocsUp = "<C-k>";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/autopairs.nix">
{
  programs.nvf.settings.vim = {
    autopairs.enable = true;
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/binds.nix">
{
  programs.nvf.settings.vim = {
    binds = {
      whichKey.enable = true;
      cheatsheet.enable = false;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/comments.nix">
{
  programs.nvf.settings.vim = {
    comments.comment-nvim.enable = true;
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/dashboard.nix">
{
  programs.nvf.settings.vim = {
    dashboard = {
      alpha.enable = true;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/debugger.nix">
{
  programs.nvf.settings.vim = {
    debugger.nvim-dap = {
      enable = true;
      ui.enable = true;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/filetree.nix">
{
  programs.nvf.settings.vim = {
    filetree = {
      nvimTree = {
        enable = true;
        openOnSetup = true;

        mappings = {
          toggle = "<C-w>";
        };

        setupOpts = {
          disable_netrw = true;
          update_focused_file.enable = true;

          hijack_unnamed_buffer_when_opening = true;
          hijack_cursor = true;
          hijack_directories = {
            enable = true;
            auto_open = true;
          };

          git = {
            enable = true;
            show_on_dirs = false;
            timeout = 500;
          };

          view = {
            cursorline = false;
            width = 35;
          };

          renderer = {
            indent_markers.enable = true;
            root_folder_label = false; # inconsistent

            icons = {
              modified_placement = "after";
              git_placement = "after";
              show.git = true;
              show.modified = true;
            };
          };

          diagnostics.enable = true;

          modified = {
            enable = true;
            show_on_dirs = false;
            show_on_open_dirs = true;
          };

          actions = {
            change_dir.enable = false;
            change_dir.global = false;
            open_file.window_picker.enable = true;
          };
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/gestures.nix">
{
  programs.nvf.settings.vim = {
    gestures.gesture-nvim.enable = false;
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/git.nix">
{
  programs.nvf.settings.vim = {
    git = {
      enable = true;
      vim-fugitive.enable = true;
      gitsigns = {
        enable = true;
        codeActions.enable = false; # no.
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/languages.nix">
{
  config,
  pkgs,
  lib,
  ...
}: {
  programs.nvf.settings.vim = {
    languages = {
      enableLSP = true;
      enableFormat = true;
      enableTreesitter = true;
      enableExtraDiagnostics = true;

      markdown.enable = true;
      nix.enable = true;
      html.enable = true;
      css.enable = true;
      tailwind.enable = true;
      ts.enable = true;
      go.enable = true;
      python.enable = true;
      bash.enable = true;
      typst.enable = true;
      zig.enable = true;
      dart.enable = false;
      elixir.enable = false;
      svelte.enable = false;
      sql.enable = false;
      java = let
        jdtlsCache = "${config.xdg.cacheHome}/jdtls";
      in {
        enable = true;
        lsp.package = [
          "${lib.getExe pkgs.jdt-language-server}"
          "-configuration ${jdtlsCache}/config"
          "-data ${jdtlsCache}/workspace"
        ];
      };

      lua = {
        enable = true;
        lsp.neodev.enable = true;
      };

      rust = {
        enable = true;
        crates.enable = true;
      };

      clang = {
        enable = true;
        lsp = {
          enable = true;
          server = "clangd";
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/lsp.nix">
{
  programs.nvf.settings.vim = {
    lsp = {
      formatOnSave = true;
      lspkind.enable = true;
      lsplines.enable = true;
      lightbulb.enable = true;
      lspsaga.enable = false;
      lspSignature.enable = true;
      nvimCodeActionMenu.enable = true;
      trouble.enable = false;
      nvim-docs-view.enable = true;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/minimap.nix">
{
  programs.nvf.settings.vim = {
    minimap = {
      # cool for vanity but practically useless on small screens
      minimap-vim.enable = false;
      codewindow.enable = false;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/notes.nix">
{
  programs.nvf.settings.vim = {
    notes = {
      todo-comments.enable = true;
      mind-nvim.enable = false;
      obsidian.enable = false;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/notify.nix">
{
  programs.nvf.settings.vim = {
    notify = {
      nvim-notify.enable = true;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/presence.nix">
{
  programs.nvf.settings.vim = {
    presence.neocord.enable = false;
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/projects.nix">
{
  programs.nvf.settings.vim = {
    projects = {
      project-nvim = {
        enable = true;
        setupOpts = {
          manualMode = false;
          detectionMethods = ["lsp" "pattern"];
          patterns = [
            ".git"
            ".hg"
            "Makefile"
            "package.json"
            "index.*"
            ".anchor"
            "flake.nix"
          ];
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/session.nix">
{
  programs.nvf.settings.vim = {
    session.nvim-session-manager = {
      enable = false;
      setupOpts.autoload_mode = "Disabled"; # misbehaves with dashboard
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/statusline.nix">
{
  programs.nvf.settings.vim = {
    statusline = {
      lualine = {
        enable = true;
        theme = "catppuccin";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/tabline.nix">
{
  programs.nvf.settings.vim = {
    tabline = {
      nvimBufferline.enable = true;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/telescope.nix">
{
  programs.nvf.settings.vim = {
    telescope.enable = true;
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/template.nix">
{
  programs.nvf.settings.vim = {
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/terminal.nix">
{
  programs.nvf.settings.vim = {
    terminal = {
      toggleterm = {
        enable = true;
        mappings.open = "<C-t>";

        setupOpts = {
          direction = "tab";
          lazygit = {
            enable = true;
            direction = "tab";
          };
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/theme.nix">
{
  programs.nvf.settings.vim = {
    theme = {
      enable = true;
      name = "catppuccin";
      style = "mocha";
      transparent = true;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/treesitter.nix">
{pkgs, ...}: {
  programs.nvf.settings.vim = {
    treesitter = {
      fold = true;
      context.enable = false; # FIXME: currently broken, I do not know why.

      # extra grammars that will be installed by Nix
      grammars = with pkgs.vimPlugins.nvim-treesitter.builtGrammars; [
        regex # for regexplainer
        kdl # zellij configurations are in KDL, I want syntax highlighting
      ];
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/ui.nix">
{
  programs.nvf.settings.vim = {
    ui = {
      noice.enable = true;
      colorizer.enable = true;
      modes-nvim.enable = false;
      illuminate.enable = true;

      breadcrumbs = {
        enable = true;
        source = "nvim-navic";
        navbuddy.enable = false;
      };

      smartcolumn = {
        enable = true;
        setupOpts = {
          columnAt.languages = {
            markdown = [80];
            nix = [150];
            ruby = 110;
            java = 120;
            go = [130];
          };
        };
      };

      borders = {
        enable = true;
        globalStyle = "rounded";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/utility.nix">
{pkgs, ...}: {
  programs.nvf.settings.vim = {
    utility = {
      ccc.enable = true;
      icon-picker.enable = true;
      diffview-nvim.enable = true;

      vim-wakatime = {
        enable = true;
        cli-package = pkgs.wakatime-cli;
      };

      motion = {
        hop.enable = true;
        leap.enable = false;
      };

      preview = {
        glow.enable = true;
        markdownPreview.enable = true;
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/settings/visuals.nix">
{
  programs.nvf.settings.vim = {
    visuals = {
      enable = true;
      nvimWebDevicons.enable = true;
      scrollBar.enable = true;
      smoothScroll.enable = false;
      cellularAutomaton.enable = false;
      highlight-undo.enable = true;

      indentBlankline = {
        enable = true;
      };

      cursorline = {
        enable = true;
        lineTimeout = 0;
      };

      fidget-nvim = {
        enable = true;
        setupOpts = {
          notification.window = {
            winblend = 0;
            border = "none";
          };
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/sources/default.nix">
{
  self,
  pkgs,
  ...
}: let
  inherit (self) pins;
  inherit (pkgs) fetchFromGitHub;
  inherit (pkgs.vimUtils) buildVimPlugin;

  sources = {
    hmts = buildVimPlugin {
      name = "hmts.nvim";
      src = pins."hmts.nvim";
    };

    smart-splits = buildVimPlugin {
      name = "smart-splits";
      src = pins."smart-splits.nvim";
    };

    slides-nvim = buildVimPlugin {
      name = "slides.nvim";
      src = pins."slides.nvim";
    };

    regexplainer = buildVimPlugin {
      name = "nvim-regexplainer";
      src = fetchFromGitHub {
        owner = "bennypowers";
        repo = "nvim-regexplainer";
        rev = "4250c8f3c1307876384e70eeedde5149249e154f";
        hash = "sha256-15DLbKtOgUPq4DcF71jFYu31faDn52k3P1x47GL3+b0=";
      };
    };

    specs-nvim = buildVimPlugin {
      name = "specs.nvim";
      src = fetchFromGitHub {
        owner = "notashelf";
        repo = "specs.nvim";
        rev = "0792aaebf8cbac0c8545c43ad648b98deb83af42";
        hash = "sha256-doHE/3bRuC8lyYxMk927JmwLfiy7aR22+i+BNefEGJ4=";
      };
    };

    deferred-clipboard = buildVimPlugin {
      name = "deferred-clipboard";
      src = fetchFromGitHub {
        owner = "EtiamNullam";
        repo = "deferred-clipboard.nvim";
        rev = "810a29d166eaa41afc220cc7cd85eeaa3c43b37f";
        hash = "sha256-nanNQEtpjv0YKEkkrPmq/5FPxq+Yj/19cs0Gf7YgKjU=";
      };
    };

    data-viewer-nvim = buildVimPlugin {
      name = "data-viewer.nvim";
      src = fetchFromGitHub {
        owner = "VidocqH";
        repo = "data-viewer.nvim";
        rev = "40ddf37bb7ab6c04ff9e820812d1539afe691668";
        hash = "sha256-D5hvLhsYski11H9qiDDL2zlZMtYmbpHgpewiWR6C7rE=";
      };
    };

    vim-nftables = buildVimPlugin {
      name = "vim-nftables";
      src = fetchFromGitHub {
        owner = "awisse";
        repo = "vim-nftables";
        rev = "bc29309080b4c7e1888ffb1a830846be16e5b8e7";
        hash = "sha256-L1x3Hv95t/DBBrLtPBKrqaTbIPor/NhVuEHVIYo/OaA=";
      };
    };

    neotab-nvim = buildVimPlugin {
      name = "neotab.nvim";
      src = fetchFromGitHub {
        owner = "kawre";
        repo = "neotab.nvim";
        rev = "6c6107dddaa051504e433608f59eca606138269b";
        hash = "sha256-bSFKbjj8fJHdfBzYoQ9l3NU0GAYfdfCbESKbwdbLNSw=";
      };
    };
  };
in
  sources
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/plugins/extra.nix">
{
  self,
  pkgs,
  ...
}: let
  inherit (pkgs.vimPlugins) friendly-snippets aerial-nvim nvim-surround undotree mkdir-nvim ssr-nvim direnv-vim legendary-nvim;
  pluginSources = import ./sources {inherit self pkgs;};
in {
  programs.nvf.settings.vim.extraPlugins = {
    # plugins that are pulled from nixpkgs
    direnv = {package = direnv-vim;};
    friendly-snippets = {package = friendly-snippets;};
    mkdir-nvim = {package = mkdir-nvim;};
    aerial = {
      package = aerial-nvim;
      setup = "require('aerial').setup {}";
    };

    nvim-surround = {
      package = nvim-surround;
      setup = "require('nvim-surround').setup {}";
    };

    undotree = {
      package = undotree;
      setup = ''
        vim.g.undotree_ShortIndicators = true
        vim.g.undotree_TreeVertShape = '│'
      '';
    };

    ssr-nvim = {
      package = ssr-nvim;
      setup = "require('ssr').setup {}";
    };

    legendary = {
      package = legendary-nvim;
      setup = ''
        require('legendary').setup {};
      '';
    };

    # plugins that are built from their sources
    regexplainer = {package = pluginSources.regexplainer;};
    vim-nftables = {package = pluginSources.vim-nftables;};

    data-view = {
      package = pluginSources.data-viewer-nvim;
      setup = ''
        -- open data files in data-viewer.nvim
        vim.api.nvim_exec([[
          autocmd BufReadPost,BufNewFile *.sqlite,*.csv,*.tsv DataViewer
        ]], false)


        -- keybinds
        vim.api.nvim_set_keymap('n', '<leader>dv', ':DataViewer<CR>', {noremap = true})
        vim.api.nvim_set_keymap('n', '<leader>dvn', ':DataViewerNextTable<CR>', {noremap = true})
        vim.api.nvim_set_keymap('n', '<leader>dvp', ':DataViewerPrevTable<CR>', {noremap = true})
        vim.api.nvim_set_keymap('n', '<leader>dvc', ':DataViewerClose<CR>', {noremap = true})
      '';
    };

    slides-nvim = {
      package = pluginSources.slides-nvim;
      setup = "require('slides').setup {}";
    };

    hmts = {
      package = pluginSources.hmts;
      after = ["treesitter"];
    };

    smart-splits = {
      package = pluginSources.smart-splits;
      setup = "require('smart-splits').setup {}";
    };

    neotab-nvim = {
      package = pluginSources.neotab-nvim;
      setup = ''
        require('neotab').setup {
          tabkey = "<Tab>",
          act_as_tab = true,
          behavior = "nested", ---@type ntab.behavior
          pairs = { ---@type ntab.pair[]
              { open = "(", close = ")" },
              { open = "[", close = "]" },
              { open = "{", close = "}" },
              { open = "'", close = "'" },
              { open = '"', close = '"' },
              { open = "`", close = "`" },
              { open = "<", close = ">" },
          },
          exclude = {},
          smart_punctuators = {
            enabled = false,
            semicolon = {
                enabled = false,
                ft = { "cs", "c", "cpp", "java" },
            },
            escape = {
                enabled = false,
                triggers = {}, ---@type table<string, ntab.trigger>
            },
          },
        }
      '';
    };

    specs-nvim = {
      package = pluginSources.specs-nvim;
      setup = ''
        require('specs').setup {
          show_jumps = true,
          popup = {
            delay_ms = 0,
            inc_ms = 15,
            blend = 15,
            width = 10,
            winhl = "PMenu",
            fader = require('specs').linear_fader,
            resizer = require('specs').shrink_resizer
          },

          ignore_filetypes = {'NvimTree', 'undotree'},

          ignore_buftypes = {nofile = true},
        }

        -- toggle specs using the <C-b> keybind
        vim.api.nvim_set_keymap('n', '<C-b>', ':lua require("specs").show_specs()', { noremap = true, silent = true })

        -- bind specs to navigation keys
        vim.api.nvim_set_keymap('n', 'n', 'n:lua require("specs").show_specs()<CR>', { noremap = true, silent = true })
        vim.api.nvim_set_keymap('n', 'N', 'N:lua require("specs").show_specs()<CR>', { noremap = true, silent = true })
      '';
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/ftdetect/gitconfig.lua">
-- luacheck: ignore
vim.api.nvim_create_autocmd({ 'BufNewFile', 'BufRead' }, {
  pattern = 'gitconfig*,.gitconfig*',
  callback = function()
    vim.bo.filetype = 'gitconfig'
  end,
  once = false,
})
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/ftdetect/graphql.lua">
-- luacheck: ignore
vim.api.nvim_create_autocmd({ 'BufNewFile', 'BufRead' }, {
  pattern = '*.graphql,*.graphqls,*.gql',
  callback = function()
    vim.bo.filetype = 'graphql'
  end,
  once = false,
})
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/ftplugin/envrc.lua">
-- luacheck: ignore
vim.filetype.add({
  filename = { ['.envrc'] = 'bash' },
})
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/ftplugin/gitcommit.lua">
-- luacheck: ignore
vim.opt_local.textwidth = 80
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/ftplugin/go.lua">
-- luacheck: ignore
vim.opt_local.tabstop = 4
vim.opt_local.shiftwidth = 0
vim.opt_local.expandtab = false
vim.opt_local.list = false
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/ftplugin/json.lua">
vim.keymap.set('n', '<leader>jf', '<cmd>%!jq<cr>', { noremap = true, silent = true, desc = 'Format with jq' })
vim.keymap.set('n', '<leader>jm', '<cmd>%!jq -c<cr>', { noremap = true, silent = true, desc = 'Minify with jq' })

-- add comma to the end of the line on new line
vim.keymap.set('n', 'o', function()
  local line = vim.api.nvim_get_current_line()

  local should_add_comma = string.find(line, '[^,{[]$')
  if should_add_comma then
    return 'A,<cr>'
  else
    return 'o'
  end
end, { buffer = true, expr = true })
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/ftplugin/man.lua">
-- luacheck: ignore
local opts = { noremap = true, silent = true, buffer = 0 }
local wincmd = vim.b.pager and 'q' or 'c'
vim.keymap.set('n', 'q', '<cmd>lclose<CR><C-W>' .. wincmd, opts)
vim.keymap.set('n', '<Leader>o', function()
  -- TODO: can this be done in a floating window?
  require('man').show_toc()
end, opts)

vim.b.undo_ftplugin = (vim.b.undo_ftplugin or '')
  .. (vim.b.undo_ftplugin ~= nil and ' | ' or '')
  .. 'sil! nunmap <buffer> <Leader>o'
  .. ' | sil! nunmap <buffer> q'
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/ftplugin/markdown.lua">
-- luacheck: ignore
vim.opt_local.textwidth = 80

local CR = vim.api.nvim_replace_termcodes('<cr>', true, true, true)
local function toggle_checkbox()
  local cursor = vim.api.nvim_win_get_cursor(0)
  local lineno = cursor[1]
  local line = vim.api.nvim_buf_get_lines(0, lineno - 1, lineno, false)[1] or ''
  if string.find(line, '%[ %]') then
    line = line:gsub('%[ %]', '%[x%]')
  else
    line = line:gsub('%[x%]', '%[ %]')
  end
  vim.api.nvim_buf_set_lines(0, lineno - 1, lineno, false, { line })
  vim.api.nvim_win_set_cursor(0, cursor)
  pcall(vim.fn['repeat#set'], ':ToggleCheckbox' .. CR)
end

vim.api.nvim_create_user_command(
  'ToggleCheckbox',
  toggle_checkbox,
  vim.tbl_extend('force', { desc = 'toggle checkboxes' }, {})
)

vim.keymap.set('n', '<leader>op', toggle_checkbox, {
  noremap = true,
  silent = true,
  desc = 'Toggle checkbox',
  buffer = 0,
})
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/ftplugin/qf.lua">
-- luacheck: ignore
vim.wo.wrap = true
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/ftplugin/xml.lua">
-- luacheck: ignore
vim.opt_local.shiftwidth = 2
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/queries/go/injections.scm">
; extends

; inject sql into any const string with word query in the name
; e.g. const query = `SELECT * FROM users WHERE name = 'John'`;
(const_spec
  name: (identifier) @_name (#match? @_name "[Qq]uery")
  value: (expression_list
    (raw_string_literal) @injection.content)
    (#offset! @injection.content 0 1 0 -1)
    (#set! injection.language "sql"))

; inject sql in single line strings
(call_expression
  (selector_expression
    field: (field_identifier) @_field (#any-of? @_field "GetContext" "Get" "ExecContext" "Exec" "SelectContext" "Select" "In" "Rebind"))
  (argument_list
    (raw_string_literal) @injection.content)
    (#offset! @injection.content 0 1 0 -1)
    (#set! injection.language "sql")
  )

; inject sql in multi line strings
(call_expression
  (selector_expression
    field: (field_identifier) @_field (#any-of? @_field "GetContext" "Get" "ExecContext" "Exec" "SelectContext" "Select" "In" "Rebind"))
  (argument_list
    (interpreted_string_literal) @injection.content)
    (#offset! @injection.content 0 1 0 -1)
    (#set! injection.language "sql")
  )
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/queries/jsx/injections.scm">
;; extends
(( jsx_text ) @injection.content (#set! injection.language "markdown") )
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/queries/markdown/textobjects.scm">
;extends

(fenced_code_block (code_fence_content) @class.inner) @class.outer

(paragraph) @function.outer @function.inner
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/queries/markdown_inline/highlights.scm">
;extends

[
  (shortcut_link)
] @nospell

(strikethrough
(emphasis_delimiter)
(strikethrough
  (emphasis_delimiter)
  (emphasis_delimiter))
(emphasis_delimiter))@markup.doublestrikethrough
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/queries/mdx/injections.scm">
((jsx_section)
 @injection.content
 (#set! injection.language "tsx")
 (#set! injection.include-children))

((markdown_section)
 @injection.content
 (#set! injection.language "markdown")
 (#set! injection.combined))
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/queries/rust/injections.scm">
;extends
(macro_invocation
(scoped_identifier
path: (identifier) @path (#eq? @path "sqlx")
name: (identifier) @name (#match? @name "^query.*")
)

(token_tree
(raw_string_literal) @injection.content
(#set! injection.language "sql")
(#set! injection.include-children)
)
(#offset! @injection.content 0 3 0 -2)
)
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/after/queries/typst/highlights.scm">
;; extends
((ident) @constant
 (#eq? @constant "lambda")
 (#set! conceal "λ")
 )
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/runtime/spell/en.utf-8.add">
contrib
Contrib
gitignore
dotfiles
nyx
notashelf
utils
neovim
glab
gh
ripgrep
wip
thoughtbot
kubectl
CoC
config
Capybara
mailserver
Mailserver
anyrun
ags
spicetify
Spicetify
firefox
Firefox
Hyprland
Hyprwm
Xorg
X11
devShell
devshell
nixos
NixOS
nixpkgs
Nixpkgs
filetree
sourcetree
url
uri
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/default.nix">
{
  inputs,
  lib,
  ...
}: let
  inherit (builtins) filter map toString elem;
  inherit (lib.filesystem) listFilesRecursive;
  inherit (lib.strings) hasSuffix;
  inherit (lib.lists) concatLists;

  mkNeovimModule = {
    path,
    ignoredPaths ? [./plugins/sources/default.nix],
  }:
    filter (hasSuffix ".nix") (
      map toString (
        filter (path: path != ./default.nix && !elem path ignoredPaths) (listFilesRecursive path)
      )
    );

  inherit (inputs.nvf.homeManagerModules) nvf;
in {
  imports = concatLists [
    # nvf home-manager module
    [nvf]

    # construct this entire directory as a module
    # which means all default.nix files will be imported automatically
    (mkNeovimModule {path = ./.;})
  ];
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/settings.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) filter map toString path;
  inherit (lib.filesystem) listFilesRecursive;
  inherit (lib.strings) hasSuffix fileContents;
  inherit (lib.attrsets) genAttrs;

  inherit (lib.nvim.dag) entryBefore;

  mkRuntimeDir = name: let
    finalPath = ./runtime + /${name};
  in
    path {
      name = "nvim-runtime-${name}";
      path = toString finalPath;
    };
in {
  config = {
    programs.nvf = {
      enable = true;

      defaultEditor = true;
      enableManpages = true;

      settings = {
        vim = {
          # use neovim-unwrapped from nixpkgs
          # alternatively, neovim-nightly from the neovim-nightly overlay
          # via inputs.neovim-nightly.packages.${pkgs.stdenv.system}.neovim
          package = pkgs.neovim-unwrapped;

          viAlias = true;
          vimAlias = true;

          withNodeJs = false;
          withPython3 = false;
          withRuby = false;

          preventJunkFiles = true;
          useSystemClipboard = true;
          spellcheck = {
            enable = true;
            languages = ["en"];
          };

          enableLuaLoader = true;
          enableEditorconfig = true;

          debugMode = {
            enable = false;
            logFile = "/tmp/nvim.log";
          };

          additionalRuntimePaths = [
            (mkRuntimeDir "after")
            (mkRuntimeDir "spell")
          ];

          # additional lua configuration that I can append
          # or, to be more precise, randomly inject into
          # the lua configuration of my Neovim configuration
          # wrapper. this is recursively read from the lua
          # directory, so we do not need to use require
          luaConfigRC = let
            spellFile = path {
              name = "nvf-en.utf-8.add";
              path = ./runtime/spell/en.utf-8.add;
            };

            # get the name of each lua file in the lua directory, where setting files reside
            # and import tham recursively
            configPaths = filter (hasSuffix ".lua") (map toString (listFilesRecursive ./lua));

            # generates a key-value pair that looks roughly as follows:
            #  `<filePath> = entryAnywhere ''<contents of filePath>''`
            # which is expected by nvf's modified DAG library
            luaConfig = genAttrs configPaths (file:
              entryBefore ["luaScript"] ''
                ${fileContents file}
              '');
          in
            luaConfig // {spell = "vim.o.spellfile = \"${spellFile}\"";};
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/neovim/wrapper.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) fetchurl;
  inherit (lib.modules) mkForce;
  inherit (lib.meta) getExe;
in {
  xdg.desktopEntries."nvim" = mkForce {
    name = "Neovim";
    type = "Application";
    mimeType = ["text/plain"];

    icon = fetchurl {
      url = "https://raw.githubusercontent.com/NotAShelf/nvf/main/.github/assets/nvf-logo-work.svg";
      sha256 = "sha256:19n7n9xafyak35pkn4cww0s5db2cr97yz78w5ppbcp9jvxw6yyz3";
    };

    exec = let
      wezterm = getExe config.programs.wezterm.package;
      direnv = getExe pkgs.direnv;
    in "${pkgs.writeShellScript "wezterm-neovim" ''
      # define target filename
      filename="$(readlink -f "$1")"

      # get the directory target file is in
      dirname="$(dirname "$filename")"

      # launch a wezterm instance with direnv and nvim
      ${wezterm} -e --cwd "$dirname" -- ${getExe pkgs.zsh} -c "${direnv} exec . nvim '$filename'"
    ''} %f";
  };
}
</file>

<file path="homes/notashelf/programs/terminal/editors/default.nix">
{
  imports = [
    #./helix # sucks
    ./neovim # full-blown IDE
  ];
}
</file>

<file path="homes/notashelf/programs/terminal/emulators/foot/presets/catppuccin-mocha/colors.nix">
{colors}: {
  foreground = "${colors.base05}"; # Text
  background = "${colors.base00}"; # Base

  regular0 = "${colors.base03}"; # Surface 1
  regular1 = "${colors.base08}"; # red
  regular2 = "${colors.base0B}"; # green
  regular3 = "${colors.base0A}"; # yellow
  regular4 = "${colors.base0D}"; # blue
  regular5 = "${colors.base0F}"; # pink
  regular6 = "${colors.base0C}"; # teal
  regular7 = "${colors.base06}"; # Subtext 0
  # Subtext 1 ???
  bright0 = "${colors.base04}"; # Surface 2
  bright1 = "${colors.base08}"; # red
  bright2 = "${colors.base0B}"; # green
  bright3 = "${colors.base0A}"; # yellow
  bright4 = "${colors.base0D}"; # blue
  bright5 = "${colors.base0F}"; # pink
  bright6 = "${colors.base0C}"; # teal
  bright7 = "${colors.base07}"; # Subtext 0
}
</file>

<file path="homes/notashelf/programs/terminal/emulators/foot/presets/oxocarbon-dark/colors.nix">
{colors}: {
  background = "${colors.base00}";
  foreground = "${colors.base06}";

  regular0 = "${colors.base01}";
  regular1 = "${colors.base0C}";
  regular2 = "${colors.base0D}";
  regular3 = "${colors.base05}";
  regular4 = "${colors.base0B}";
  regular5 = "${colors.base0A}";
  regular6 = "${colors.base08}";
  regular7 = "${colors.base04}";
  bright0 = "${colors.base02}";
  bright1 = "${colors.base0C}";
  bright2 = "${colors.base0D}";
  bright3 = "${colors.base05}";
  bright4 = "${colors.base0B}";
  bright5 = "${colors.base0A}";
  bright6 = "${colors.base08}";
  bright7 = "${colors.base06}";
}
</file>

<file path="homes/notashelf/programs/terminal/emulators/foot/default.nix">
{
  inputs',
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (osConfig.modules.style.colorScheme) slug colors;
  inherit (lib) mkIf;

  dev = osConfig.modules.device;
  acceptedTypes = ["laptop" "desktop" "hybrid" "lite"];
in {
  config = mkIf (builtins.elem dev.type acceptedTypes) {
    home.packages = with pkgs; [
      libsixel # for displaying images
    ];
    programs.foot = {
      enable = true;
      package = inputs'.nyxexprs.packages.foot-transparent;
      server.enable = false;
      settings = {
        main = {
          # window settings
          app-id = "foot";
          title = "foot";
          locked-title = "no";
          term = "xterm-256color";
          pad = "16x16 center";
          shell = "zsh";

          # notifications
          notify = "notify-send -a \${app-id} -i \${app-id} \${title} \${body}";
          selection-target = "clipboard";

          # font and font rendering
          dpi-aware = false; # this looks more readable on a laptop, but it's unreasonably large
          font = "Iosevka Nerd Font:size=14";
          font-bold = "Iosevka Nerd Font:size=14";
          vertical-letter-offset = "-0.90";
        };

        scrollback = {
          lines = 10000;
          multiplier = 3;
        };

        tweak = {
          font-monospace-warn = "no"; # reduces startup time
          sixel = "yes";
        };

        cursor = {
          style = "beam";
          beam-thickness = 2;
        };

        mouse = {
          hide-when-typing = "yes";
        };

        url = {
          launch = "xdg-open \${url}";
          label-letters = "sadfjklewcmpgh";
          osc8-underline = "url-mode";
          protocols = "http, https, ftp, ftps, file";
          uri-characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.,~:;/?#@!$&%*+=\"'()[]";
        };

        colors = import ./presets/${slug}/colors.nix {inherit colors;} // {alpha = "0.85";};
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/emulators/kitty/default.nix">
{
  osConfig,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;
  inherit (modules.style.colorScheme) colors;

  dev = modules.device;
  acceptedTypes = ["laptop" "desktop" "hybrid"];
in {
  config = mkIf (builtins.elem dev.type acceptedTypes) {
    programs.kitty = {
      enable = true;
      settings = import ./settings.nix {inherit colors;};
      keybindings = {
        "ctrl+c" = "copy_or_interrupt";
        "ctrl+alt+c" = "copy_to_clipboard";
        "ctrl+alt+v" = "paste_from_clipboard";
        "ctrl+shift+v" = "paste_from_clipboard";

        "ctrl+shift+up" = "increase_font_size";
        "ctrl+shift+down" = "decrease_font_size";
        "ctrl+shift+backspace" = "restore_font_size";

        "ctrl+shift+enter" = "new_window";
        "ctrl+shift+n" = "new_os_window";
        "ctrl+shift+w" = "close_window";
        "ctrl+shift+]" = "next_window";
        "ctrl+shift+[" = "previous_window";
        "ctrl+shift+f" = "move_window_forward";
        "ctrl+shift+b" = "move_window_backward";
        "ctrl+shift+`" = "move_window_to_top";
        "ctrl+shift+1" = "first_window";
        "ctrl+shift+2" = "second_window";
        "ctrl+shift+3" = "third_window";
        "ctrl+shift+4" = "fourth_window";
        "ctrl+shift+5" = "fifth_window";
        "ctrl+shift+6" = "sixth_window";
        "ctrl+shift+7" = "seventh_window";
        "ctrl+shift+8" = "eighth_window";
        "ctrl+shift+9" = "ninth_window";
        "ctrl+shift+0" = "tenth_window";

        "ctrl+shift+right" = "next_tab";
        "ctrl+shift+left" = "previous_tab";
        "ctrl+shift+t" = "new_tab";
        "ctrl+shift+q" = "close_tab";
        "ctrl+shift+l" = "next_layout";
        "ctrl+shift+." = "move_tab_forward";
        "ctrl+shift+," = "move_tab_backward";
        "ctrl+shift+alt+t" = "set_tab_title";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/emulators/kitty/settings.nix">
{colors, ...}: {
  # General
  background_opacity = "0.85";
  font_family = "monospace";
  font_size = 14;
  disable_ligatures = "never";
  cursor_shape = "underline";
  cursor_blink_interval = "0.5";
  cursor_stop_blinking_after = "15.0";
  scrollback_lines = 10000;
  click_interval = "0.5";
  select_by_word_characters = ":@-./_~?&=%+#";
  remember_window_size = false;
  allow_remote_control = true;
  initial_window_width = 640;
  initial_window_height = 400;
  repaint_delay = 15;
  input_delay = 3;
  visual_bell_duration = "0.0";
  url_style = "double";
  open_url_with = "default";
  confirm_os_window_close = 0;
  enable_audio_bell = false;
  window_padding_width = 15;
  window_margin_width = 10;

  # Colorscheme
  foreground = "#${colors.base05}";
  background = "#${colors.base00}";
  selection_background = "#${colors.base05}";
  selection_foreground = "#${colors.base00}";
  url_color = "#${colors.base04}";
  cursor = "#${colors.base05}";
  active_border_color = "#${colors.base03}";
  inactive_border_color = "#${colors.base01}";
  active_tab_background = "#${colors.base00}";
  active_tab_foreground = "#${colors.base05}";
  inactive_tab_background = "#${colors.base01}";
  inactive_tab_foreground = "#${colors.base04}";
  tab_bar_background = "#${colors.base01}";
  color0 = "#${colors.base00}";
  color1 = "#${colors.base08}";
  color2 = "#${colors.base0B}";
  color3 = "#${colors.base0A}";
  color4 = "#${colors.base0D}";
  color5 = "#${colors.base0E}";
  color6 = "#${colors.base0C}";
  color7 = "#${colors.base05}";
  color8 = "#${colors.base03}";
  color9 = "#${colors.base08}";
  color10 = "#${colors.base0B}";
  color11 = "#${colors.base0A}";
  color12 = "#${colors.base0D}";
  color13 = "#${colors.base0E}";
  color14 = "#${colors.base0C}";
  color15 = "#${colors.base07}";
  color16 = "#${colors.base09}";
  color17 = "#${colors.base0F}";
  color18 = "#${colors.base01}";
  color19 = "#${colors.base02}";
  color20 = "#${colors.base04}";
  color21 = "#${colors.base06}";
}
</file>

<file path="homes/notashelf/programs/terminal/emulators/wezterm/colorSchemes.nix">
{colors}:
with colors; {
  followSystem = {
    # basic colors
    background = "#${base00}";
    foreground = "#${base05}";

    cursor_border = "#${base05}";
    cursor_bg = "#${base05}";
    cursor_fg = "#${base08}";

    selection_bg = "#${base0E}";
    selection_fg = "#${base00}";

    split = "#${base01}";

    # base16
    ansi = [
      "#${base03}"
      "#${base08}"
      "#${base0B}"
      "#${base0A}"
      "#${base0D}"
      "#${base0F}"
      "#${base0C}"
      "#${base06}"
    ];

    brights = [
      "#${base04}"
      "#${base08}"
      "#${base0B}"
      "#${base0A}"
      "#${base0D}"
      "#${base0F}"
      "#${base0C}"
      "#${base07}"
    ];

    # tabbar
    tab_bar = {
      background = "#${base08}";
      active_tab = {
        bg_color = "#${base00}";
        fg_color = "#${base05}";
      };

      inactive_tab = {
        bg_color = "#${base08}";
        fg_color = "#${base05}";
      };

      inactive_tab_hover = {
        bg_color = "#${base00}";
        fg_color = "#${base05}";
      };

      inactive_tab_edge = "#${base00}";

      new_tab = {
        bg_color = "#${base08}";
        fg_color = "#${base07}";
      };

      new_tab_hover = {
        bg_color = "#${base00}";
        fg_color = "#${base05}";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/emulators/wezterm/default.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;
  inherit (modules.style.colorScheme) colors;

  dev = modules.device;
  acceptedTypes = ["laptop" "desktop" "hybrid"];
in {
  config = mkIf (builtins.elem dev.type acceptedTypes) {
    programs.wezterm = {
      enable = true;
      package = pkgs.wezterm;
      colorSchemes = import ./colorSchemes.nix {inherit colors;};
      extraConfig = ''
        local wez = require("wezterm")
        local act = wezterm.action
        local baseConfig = {
         -- general
         check_for_updates = false, -- nix has updates covered, I don't care about updates
         exit_behavior = "CloseOnCleanExit",
         enable_scroll_bar = false,
         audible_bell = "Disabled", -- annoying
         warn_about_missing_glyphs =  false,

         -- anims
          animation_fps = 1,

         -- term window settings
         adjust_window_size_when_changing_font_size = false,
         window_background_opacity = 0.85,
         window_padding = { left = 12, right = 12, top = 12, bottom = 12, },
         window_close_confirmation = "NeverPrompt",
         inactive_pane_hsb = {
          saturation = 1.0,
          brightness = 0.8
         },

         -- cursor
         default_cursor_style = "SteadyBar",
         cursor_blink_rate = 700,
         cursor_blink_ease_in = 'Constant',
         cursor_blink_ease_out = 'Constant',

         -- tab bar
         enable_tab_bar = true, -- no observable performance impact
         use_fancy_tab_bar = false,
         hide_tab_bar_if_only_one_tab = true,
         show_tab_index_in_tab_bar = false,

         -- font config
         font_size = 14.0,
         font = wezterm.font_with_fallback {
          { family = "Iosevka Nerd Font", weight = "Regular" },
          { family = "Symbols Nerd Font", weight = "Regular" }
         },

         -- perf
         front_end = "WebGpu",
         enable_wayland = true,
         scrollback_lines = 10000,

         -- colors
         -- the followSystem theme is defined in colorSchemes.nix
         -- as per my base16 theming options
         color_scheme = "followSystem",
        }

        return baseConfig
      '';
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/emulators/default.nix">
_: {
  imports = [
    ./foot
    ./kitty
    ./wezterm
  ];
}
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/rc/binds.zsh">
# Enable Vi mode
bindkey -v

# Make switching modes faster
export KEYTIMEOUT=1

# Use vim keys in the tab complete menu
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

bindkey "^A" vi-beginning-of-line
bindkey "^E" vi-end-of-line

# open commands in $EDITOR
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^V" edit-command-line
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/rc/comp.zsh">
# Configure menu selection for completion options in all contexts
# (indicated by the wildcard `*`)
zstyle ':completion:*' menu select

# forces zsh to realize new commands
# might be useful if new commands have been installed during the session
zstyle ':completion:*' completer _oldlist _expand _complete _match _ignored _approximate

# pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

# Group matches and describe.
zstyle ':completion:*' sort false
zstyle ':completion:complete:*:options' sort false


# rehash if command not found
# (possibly recently installed)
zstyle ':completion:*' rehash true

# Job IDs
zstyle ':completion:*:jobs' numbers true
zstyle ':completion:*:jobs' verbose true

# Array completion element sorting.
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# No correction
zstyle ':completion:*' completer _oldlist _expand _complete _files _ignored

# Don't insert tabs when there is no completion (e.g. beginning of line)
zstyle ':completion:*' insert-tab false

# allow one error for every three characters typed in approximate completer
zstyle ':completion:*:approximate:' max-errors 'reply=( $((($#PREFIX+$#SUFFIX)/3 )) numeric )'

# start menu completion only if it could find no unambiguous initial string
zstyle ':completion:*:correct:*' insert-unambiguous true
zstyle ':completion:*:corrections' format $'%{\e[0;31m%}%d (errors: %e)%{\e[0m%}'
zstyle ':completion:*:correct:*' original true

# List directory completions first
zstyle ':completion:*' list-dirs-first true
# Offer the original completion when using expanding / approximate completions
zstyle ':completion:*' original true
# Treat multiple slashes as a single / like UNIX does (instead of as /*/)
zstyle ':completion:*' squeeze-slashes true

# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# separate matches into groups
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' group-name ''

zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:options' auto-description '%d'

# describe options in full
zstyle ':completion:*:options' description 'yes'

# on processes completion complete all user processes
zstyle ':completion:*:processes' command 'ps -a -u $USER'

# Ignore completion functions for commands you don't have:
zstyle ':completion::(^approximate*):*:functions' ignored-patterns '_*'

# Provide more processes in completion of programs like killall:
zstyle ':completion:*:processes-names' command 'ps c -u ${USER} -o command | uniq'

# complete manual by their section
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.*' insert-sections   true
zstyle ':completion:*:man:*' menu yes select

# provide .. as a completion
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' special-dirs ..

# Use caching so that some commands commands (such as apt and dpkg complete)
# are useable
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' cache-path "$ZSH_CACHE_DIR"

# Don't try to expand multiple partial paths.
zstyle ':completion:*' path-completion false
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/rc/fzf-tab.zsh">
# Fzf-tab
# <https://github.com/Aloxaf/fzf-tab?tab=readme-ov-file#configure>
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions'   format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*'                list-colors ${(s.:.)LS_COLORS}
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*'                menu no
# preview directory's content with eza when completing cd
zstyle ':fzf-tab:complete:cd:*'       fzf-preview 'eza -1 --color=always $realpath'
# switch group using `<` and `>`
zstyle ':fzf-tab:*'                   switch-group '<' '>'
# appearance
zstyle ':fzf-tab:complete:cd:*'       popup-pad 20 0
zstyle ':completion:*'                file-sort modification
zstyle ':completion:*:eza'            sort false
zstyle ':completion:files'            sort false
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/rc/misc.zsh">
# Hyperoptimized time format for the time command
# the definition of the format is as follows:
# - "[%J]": The name of the job.
# - "%uU user": CPU seconds spent in user mode.
# - "%uS system": CPU seconds spent in kernel mode.
# - "%uE/%*E elapsed": Elapsed time in seconds
# - "%P CPU": The CPU percentage, computed as 100*(%U+%S)/%E.
# - "(%X avgtext + %D avgdata + %M maxresident)k": The average amount in (shared) text space used in kilobytes, the
# average amount in (unshared) data/stack space used in kilobytes, and the maximum memory
# the process had in use at any time in kilobytes.
# - "[%I inputs / %O outputs]": Number of input and output operations
# - "(%Fmajor + %Rminor) pagefaults": The number of major & minor page faults.
# - "%W swaps": The number of times the process was swapped.
TIMEFMT=$'\033[1m[%J]\033[0m: %uU user | %uS system | %uE/%*E elapsed | %P CPU\n> (%X avgtext + %D avgdata + %M maxresident)k used\n> [%I inputs / %O outputs] | (%Fmajor + %Rminor) pagefaults | %W swaps'


# If this is an xterm set the title to user@host:dir
case "$TERM" in
	xterm*|rxvt*|Eterm|aterm|kterm|gnome*|alacritty|kitty*)
		TERM_TITLE=$'\e]0;%n@%m: %1~\a'
        ;;
    *)
        ;;
esac

# enable keyword-style arguments in shell functions
set -k

# Colors
autoload -Uz colors && colors

# Autosuggest
ZSH_AUTOSUGGEST_USE_ASYNC="true"
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
ZSH_AUTOSUGGEST_HISTORY_IGNORE=$'*\n*'

# Improve paste delay for nix store paths
FAST_HIGHLIGHT[use_async]=1
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/rc/modules.zsh">
# zsh Line Editor (ZLE) module
# interactive line editing in the shell
zmodload zsh/zle

# zsh pseudo-terminal (PTY) module
# control interactive processes
zmodload zsh/zpty

# zsh completion list (complist) module
# manage and display completion lists
zmodload zsh/complist
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/rc/set.zsh">
# Define a function to set Zsh options
function __set_zsh_options() {
  local options=(
    "AUTO_CD"              # if not command, then directory
    "AUTO_LIST"            # list choices on ambiguous completion
    "AUTO_PARAM_SLASH"     # if parameter is completed whose content is the name of a directory, then add trailing slash instead of space
    "AUTO_PUSHD"           # make cd push the old directory onto the directory stack
    "APPEND_HISTORY"       # append history list to the history file, rather than replace it
    "ALWAYS_TO_END"        # cursor is moved to the end of the word after completion
    "CORRECT"              # try to correct the spelling of commands
    "EXTENDED_HISTORY"     # save each command’s beginning timestamp and the duration to the history file
    "HIST_FCNTL_LOCK"      # use system’s fcntl call to lock the history file
    "HIST_REDUCE_BLANKS"   # remove superfluous blanks
    "HIST_SAVE_NO_DUPS"    # older commands that duplicate newer ones are omitted
    "HIST_VERIFY"          # don’t execute the line directly; instead perform history expansion and reload the line into the editing buffer
    "INC_APPEND_HISTORY"   # new history lines are added to the $HISTFILE incrementally (as soon as they are entered)
    "INTERACTIVE_COMMENTS" # allow comments even in interactive shells
    "MENU_COMPLETE"        # insert the first match immediately on ambiguous completion
    "NO_NOMATCH"           # not explained, probably disables NOMATCH lmao
    "PUSHD_IGNORE_DUPS"    # don’t push multiple copies of the same directory
    "PUSHD_TO_HOME"        # have pushd with no arguments act like `pushd $HOME`
    "PUSHD_SILENT"         # do not print the directory stack
	"NOTIFY"			   # report the status of background jobs immediately
	"PROMPT_SUBST"         # allow substitutions as part of prompt format string
    "SH_WORD_SPLIT"        # perform field splitting on unquoted parameter expansions
	"MULTIOS"              # perform implicit tees or cats when multiple redirections are attempted
  )

  for option in "${options[@]}"; do
    setopt $option
  done
}

__set_zsh_options
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/rc/unset.zsh">
# Define a function to unset Zsh options
function __unset_zsh_options() {
  local options=(
    "CORRECT_ALL"   # try to correct the spelling of all arguments in a line.
    "HIST_BEEP"     # beep in ZLE when a widget attempts to access a history entry which isn’t there
	"SHARE_HISTORY" # read the documentation for more details (too long)
  )

  for option in "${options[@]}"; do
    unsetopt $option
  done
}

__unset_zsh_options
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/aliases.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.meta) getExe getExe';
  inherit (pkgs) eza bat ripgrep dust procs yt-dlp python3 netcat-gnu;

  dig = getExe' pkgs.dnsutils "dig";
in {
  programs.zsh.shellAliases = {
    # make sudo use aliases
    sudo = "sudo ";

    # easy netcat alias for my fiche host
    # https://github.com/solusipse/fiche
    fbin = "${getExe netcat-gnu} p.frzn.dev 9999";

    # nix specific aliases
    cleanup = "sudo nix-collect-garbage --delete-older-than 3d && nix-collect-garbage -d";
    bloat = "nix path-info -Sh /run/current-system";
    curgen = "sudo nix-env --list-generations --profile /nix/var/nix/profiles/system";
    gc-check = "nix-store --gc --print-roots | egrep -v \"^(/nix/var|/run/\w+-system|\{memory|/proc)\"";
    repair = "nix-store --verify --check-contents --repair";
    run = "nix run";
    search = "nix search";
    shell = "nix shell";
    build = "nix build $@ --builders \"\"";

    # quality of life aliases
    cat = "${getExe bat} --style=plain";
    grep = "${getExe ripgrep}";
    du = "${getExe dust}";
    ps = "${getExe procs}";
    mp = "mkdir -p";
    fcd = "cd $(find -type d | fzf)";
    ls = "${getExe eza} -h --git --icons --color=auto --group-directories-first -s extension";
    l = "ls -lF --time-style=long-iso --icons";
    ytmp3 = ''
      ${getExe yt-dlp} -x --continue --add-metadata --embed-thumbnail --audio-format mp3 --audio-quality 0 --metadata-from-title="%(artist)s - %(title)s" --prefer-ffmpeg -o "%(title)s.%(ext)s"
    '';

    # system aliases
    sc = "sudo systemctl";
    jc = "sudo journalctl";
    scu = "systemctl --user ";
    jcu = "journalctl --user";
    errors = "journalctl -p err..alert";
    la = "${getExe eza} -lah --tree";
    tree = "${getExe eza} --tree --icons=always";
    http = "${getExe python3} -m http.server";
    burn = "pkill -9";
    diff = "diff --color=auto";
    cpu = ''watch -n.1 "grep \"^[c]pu MHz\" /proc/cpuinfo"'';
    killall = "pkill";
    switch-yubikey = "gpg-connect-agent \"scd serialno\" \"learn --force\" /bye";

    # insteaed of querying some weird and random"what is my ip" service
    # we get our public ip by querying opendns directly.
    # <https://unix.stackexchange.com/a/81699>
    canihazip = "${dig} @resolver4.opendns.com myip.opendns.com +short";
    canihazip4 = "${dig} @resolver4.opendns.com myip.opendns.com +short -4";
    canihazip6 = "${dig} @resolver1.ipv6-sandbox.opendns.com AAAA myip.opendns.com +short -6";

    # faster navigation
    ".." = "cd ..";
    "..." = "cd ../../";
    "...." = "cd ../../../";
    "....." = "cd ../../../../";
    "......" = "cd ../../../../../";
  };
}
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: {
  imports = [
    ./aliases.nix
    ./init.nix
    ./plugins.nix
  ];

  config = {
    programs.zsh = {
      enable = true;
      dotDir = ".config/zsh";
      enableCompletion = true; # we handle this ourself
      enableVteIntegration = true;
      autosuggestion.enable = true;
      syntaxHighlighting.enable = true;
      sessionVariables = {LC_ALL = "en_US.UTF-8";};

      history = {
        # share history between different zsh sessions
        share = true;

        # avoid cluttering $HOME with the histfile
        path = "${config.xdg.dataHome}/zsh/zsh_history";

        # saves timestamps to the histfile
        extended = true;

        # optimize size of the histfile by avoiding duplicates
        # or commands we don't need remembered
        save = 100000;
        size = 100000;
        expireDuplicatesFirst = true;
        ignoreDups = true;
        ignoreSpace = true;
        ignorePatterns = ["rm *" "pkill *" "kill *" "killall *"];
      };

      # dirhashes are easy aliases to commonly used directoryies
      # e.g. `cd ~dl` would take you to $HOME/Downloads
      dirHashes = {
        docs = "$HOME/Documents";
        dl = "$HOME/Downloads";
        media = "$HOME/Media";
        vids = "$HOME/Media/Videos";
        music = "$HOME/Media/Music";
        pics = "$HOME/Media/Pictures";
        screenshots = "$HOME/Media/Pictures/Screenshots";
        notes = "$HOME/Cloud/Notes";
        dev = "$HOME/Dev";
        dots = "$HOME/.config/nyx";
      };

      # Disable /etc/{zshrc,zprofile} that contains the "sane-default" setup out of the box
      # in order avoid issues with incorrect precedence to our own zshrc.
      # See `/etc/zshrc` for more info.
      envExtra = ''
        setopt no_global_rcs
      '';
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/init.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.strings) fileContents;
in {
  programs.zsh = {
    completionInit = ''
      # Load compinit
      autoload -U compinit
      zmodload zsh/complist

      _comp_options+=(globdots)
      zcompdump="$XDG_DATA_HOME"/zsh/.zcompdump-"$ZSH_VERSION"-"$(date --iso-8601=date)"
      compinit -d "$zcompdump"

      # Recompile zcompdump if it exists and is newer than zcompdump.zwc
      # compdumps are marked with the current date in yyyy-mm-dd format
      # which means this is likely to recompile daily
      # also see: <https://htr3n.github.io/2018/07/faster-zsh/>
      if [[ -s "$zcompdump" && (! -s "$zcompdump".zwc || "$zcompdump" -nt "$zcompdump".zwc) ]]; then
        zcompile "$zcompdump"
      fi

      # Load bash completion functions.
      autoload -U +X bashcompinit && bashcompinit

      ${fileContents ./rc/comp.zsh}
    '';

    initExtraFirst = ''
      # avoid duplicated entries in PATH
      typeset -U PATH

      # try to correct the spelling of commands
      setopt correct
      # disable C-S/C-Q
      setopt noflowcontrol
      # disable "no matches found" check
      unsetopt nomatch

      # autosuggests otherwise breaks these widgets.
      # <https://github.com/zsh-users/zsh-autosuggestions/issues/619>
      ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(history-beginning-search-backward-end history-beginning-search-forward-end)

      # Do this early so fast-syntax-highlighting can wrap and override this
      if autoload history-search-end; then
        zle -N history-beginning-search-backward-end history-search-end
        zle -N history-beginning-search-forward-end  history-search-end
      fi

      source <(${lib.getExe pkgs.fzf} --zsh)
      source ${config.programs.git.package}/share/git/contrib/completion/git-prompt.sh
    '';

    initExtra = ''
      # my helper functions for setting zsh options that I normally use on my shell
      # a description of each option can be found in the Zsh manual
      # <https://zsh.sourceforge.io/Doc/Release/Options.html>
      # NOTE: this slows down shell startup time considerably
      ${fileContents ./rc/unset.zsh}
      ${fileContents ./rc/set.zsh}

      # binds, zsh modules and everything else
      ${fileContents ./rc/binds.zsh}
      ${fileContents ./rc/modules.zsh}
      ${fileContents ./rc/fzf-tab.zsh}
      ${fileContents ./rc/misc.zsh}

      # Set LS_COLORS by parsing dircolors output
      LS_COLORS="$(${pkgs.coreutils}/bin/dircolors --sh)"
      LS_COLORS="''${''${LS_COLORS#*\'}%\'*}"
      export LS_COLORS
    '';
  };
}
</file>

<file path="homes/notashelf/programs/terminal/shell/zsh/plugins.nix">
{pkgs, ...}: {
  programs.zsh.plugins = [
    {
      # Must be before plugins that wrap widgets
      # such as zsh-autosuggestions or fast-syntax-highlighting
      name = "fzf-tab";
      file = "fzf-tab.plugin.zsh";
      src = "${pkgs.zsh-fzf-tab}/share/fzf-tab";
    }
    {
      name = "nix-shell";
      file = "nix-shell.plugin.zsh";
      src = "${pkgs.zsh-nix-shell}/share/zsh-nix-shell";
    }
    {
      name = "zsh-vi-mode";
      file = "zsh-vi-mode.plugin.zsh";
      src = "${pkgs.zsh-vi-mode}/share/zsh-vi-mode";
    }
    {
      name = "fast-syntax-highlighting";
      file = "fast-syntax-highlighting.plugin.zsh";
      src = "${pkgs.zsh-fast-syntax-highlighting}/share/zsh/site-functions";
    }
    {
      name = "zsh-autosuggestions";
      file = "zsh-autosuggestions.zsh";
      src = "${pkgs.zsh-autosuggestions}/share/zsh-autosuggestions";
    }
    {
      name = "zsh-autopair";
      file = "autopair.zsh";
      src = "${pkgs.zsh-autopair}/share/zsh/zsh-autopair";
    }
  ];
}
</file>

<file path="homes/notashelf/programs/terminal/shell/bash.nix">
{config, ...}: {
  programs.bash = {
    enable = false;
    enableCompletion = true;
    historyControl = ["erasedups" "ignoredups" "ignorespace"];
    historyFile = "${config.xdg.dataHome}/bash_history";
    historyIgnore = ["rm *" "pkill *" "kill *" "killall *"];
    bashrcExtra = ''
      set -o vi
      bind -m vi-command 'Control-l: clear-screen'
      bind -m vi-insert 'Control-l: clear-screen'

      bind 'set show-mode-in-prompt on'
      bind 'set vi-cmd-mode-string "n "'
      bind 'set vi-ins-mode-string "i "'

      # use ctrl-z to toggle in and out of bg
      if [[ $- == *i* ]]; then
        stty susp undef
        bind -m vi-command 'Control-z: fg\015'
        bind -m vi-insert 'Control-z: fg\015'
      fi
    '';
  };
}
</file>

<file path="homes/notashelf/programs/terminal/shell/default.nix">
{
  imports = [
    ./zsh

    ./starship.nix
    ./bash.nix
  ];
}
</file>

<file path="homes/notashelf/programs/terminal/shell/starship.nix">
{
  config,
  lib,
  ...
}: let
  inherit (builtins) map;
  inherit (lib.strings) concatStrings;
in {
  home = {
    sessionVariables = {
      STARSHIP_CACHE = "${config.xdg.cacheHome}/starship";
    };
  };

  programs.starship = let
    elemsConcatted = concatStrings (
      map (s: "\$${s}") [
        "hostname"
        "username"
        "directory"
        "shell"
        "nix_shell"
        "git_branch"
        "git_commit"
        "git_state"
        "git_status"
        "jobs"
        "cmd_duration"
      ]
    );
  in {
    enable = true;

    settings = {
      scan_timeout = 2;
      command_timeout = 2000; # nixpkgs makes starship implode with lower values
      add_newline = false;
      line_break.disabled = false;

      format = "${elemsConcatted}\n$character";

      hostname = {
        ssh_only = true;
        disabled = false;
        format = "@[$hostname](bold blue) "; # the whitespace at the end is actually important
      };

      # configure specific elements
      character = {
        error_symbol = "[](bold red)";
        success_symbol = "[](bold green)";
        vicmd_symbol = "[](bold yellow)";
        format = "$symbol [|](bold bright-black) ";
      };

      username = {
        format = "[$user]($style) in ";
      };

      directory = {
        truncation_length = 2;

        # removes the read_only symbol from the format, it doesn't play nicely with my folder icon
        format = "[ ](bold green) [$path]($style) ";

        # the following removes tildes from the path, and substitutes some folders with shorter names
        substitutions = {
          "~/Dev" = "Dev";
          "~/Documents" = "Docs";
        };
      };

      # git
      git_commit.commit_hash_length = 7;
      git_branch.style = "bold purple";
      git_status = {
        style = "red";
        ahead = "⇡ ";
        behind = "⇣ ";
        conflicted = " ";
        renamed = "»";
        deleted = "✘ ";
        diverged = "⇆ ";
        modified = "!";
        stashed = "≡";
        staged = "+";
        untracked = "?";
      };

      # language configurations
      # the whitespaces at the end *are* necessary for proper formatting
      lua.symbol = "[ ](blue) ";
      python.symbol = "[ ](blue) ";
      rust.symbol = "[ ](red) ";
      nix_shell.symbol = "[󱄅 ](blue) ";
      golang.symbol = "[󰟓 ](blue)";
      c.symbol = "[ ](black)";
      nodejs.symbol = "[󰎙 ](yellow)";

      package.symbol = "📦 ";
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/bin/compilec/compilec.sh">
#!/usr/bin/env bash

# Function to compile and run a single .cpp file
function compile_and_run_file() {
  filename="$1"
  basename="''${filename%.*}"

  echo "Compiling $filename..."

  if g++ -o "$basename" "$filename"; then
    echo "Running $basename..."
    "./$basename"
  else
    echo "Compilation failed."
  fi
}

# Function to prompt user to choose a .cpp file using skim or fzf
function choose_cpp_file() {
  directory="$1"

  if command -v skim >/dev/null 2>&1; then
    file=$(find "$directory" -maxdepth 1 -type f -name "*.cpp" | skim --ansi --query "")
  elif command -v fzf >/dev/null 2>&1; then
    file=$(find "$directory" -maxdepth 1 -type f -name "*.cpp" | fzf)
  else
    echo "Error: skim or fzf is required for file selection."
    exit 1
  fi

  if [ -n "$file" ]; then
    compile_and_run_file "$file"
  else
    echo "No .cpp file selected."
  fi
}

# Function to prompt user to choose a .cpp file recursively using skim or fzf
function choose_cpp_file_recursive() {
  directory="$1"

  if command -v skim >/dev/null 2>&1; then
    file=$(find "$directory" -type f -name "*.cpp" | sk --ansi --query "")
  elif command -v fzf >/dev/null 2>&1; then
    file=$(find "$directory" -type f -name "*.cpp" | fzf)
  else
    echo "Error: skim or fzf is required for file selection."
    exit 1
  fi

  if [ -n "$file" ]; then
    compile_and_run_file "$file"
  else
    echo "No .cpp file selected."
  fi
}

# Help menu
function display_help() {
  echo "Usage: $0 [options] <file/directory>"
  echo "Options:"
  echo "  --recursive    Look for .cpp files recursively"
  echo "  --help         Display this help menu"
  echo
  echo "Examples:"
  echo "  $0 ~/Dev/test.cpp"
  echo "  $0 ~/Dev"
  echo "  $0 ~/Dev --recursive"
}

# Parse command line arguments
recursive=false
directory=""

# Check if --help is passed
if [[ $1 == "--help" ]]; then
  display_help
  exit 0
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
  --recursive)
    recursive=true
    shift
    ;;
  *)
    directory="$1"
    shift
    ;;
  esac
done

# Check if directory is provided
if [ -z "$directory" ]; then
  echo "Error: No directory specified."
  display_help
  exit 1
fi

# Check if directory exists
if [ ! -d "$directory" ]; then
  echo "Error: Directory does not exist."
  display_help
  exit 1
fi

# Compile and run or display help menu
if [ -f "$directory" ]; then
  compile_and_run_file "$directory"
elif [ "$recursive" = true ]; then
  choose_cpp_file_recursive "$directory"
else
  choose_cpp_file "$directory"
fi
</file>

<file path="homes/notashelf/programs/terminal/tools/bin/extract/extract.sh">
#!/usr/bin/env bash

SAVEIFS=$IFS
IFS="$(printf '\n\t')"

function extract {
  if [ $# -eq 0 ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz|.zlib|.cso>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
  fi
  for n in "$@"; do
    if [ ! -f "$n" ]; then
      echo "'$n' - file doesn't exist"
      return 1
    fi

    case "''${n%,}" in
    *.cbt | *.tar.bz2 | *.tar.gz | *.tar.xz | *.tbz2 | *.tgz | *.txz | *.tar)
      tar zxvf "$n"
      ;;
    *.lzma) unlzma ./"$n" ;;
    *.bz2) bunzip2 ./"$n" ;;
    *.cbr | *.rar) unrar x -ad ./"$n" ;;
    *.gz) gunzip ./"$n" ;;
    *.cbz | *.epub | *.zip) unzip ./"$n" ;;
    *.z) uncompress ./"$n" ;;
    *.7z | *.apk | *.arj | *.cab | *.cb7 | *.chm | *.deb | *.iso | *.lzh | *.msi | *.pkg | *.rpm | *.udf | *.wim | *.xar | *.vhd)
      7z x ./"$n"
      ;;
    *.xz) unxz ./"$n" ;;
    *.exe) cabextract ./"$n" ;;
    *.cpio) cpio -id <./"$n" ;;
    *.cba | *.ace) unace x ./"$n" ;;
    *.zpaq) zpaq x ./"$n" ;;
    *.arc) arc e ./"$n" ;;
    *.cso) ciso 0 ./"$n" ./"$n.iso" &&
      extract "$n.iso" && \rm -f "$n" ;;
    *.zlib) zlib-flate -uncompress <./"$n" >./"$n.tmp" &&
      mv ./"$n.tmp" ./"''${n%.*zlib}" && rm -f "$n" ;;
    *.dmg)
      hdiutil mount ./"$n" -mountpoint "./$n.mounted"
      ;;
    *)
      echo "extract: '$n' - unknown archive method"
      return 1
      ;;
    esac
  done
}

IFS=$SAVEIFS
</file>

<file path="homes/notashelf/programs/terminal/tools/bin/fs-diff/fs-diff.sh">
#!/usr/bin/env bash
set -euo pipefail

OLD_TRANSID=$(sudo btrfs subvolume find-new /mnt/root-blank 9999999)
OLD_TRANSID=${OLD_TRANSID#transid marker was }

sudo btrfs subvolume find-new "/mnt/root" "$OLD_TRANSID" |
  sed '$d' |
  cut -f17- -d' ' |
  sort |
  uniq |
  while read -r path; do
    path="/$path"
    if [ -L "$path" ]; then
      : # The path is a symbolic link, so is probably handled by NixOS already
    elif [ -d "$path" ]; then
      : # The path is a directory, ignore
    else
      echo "$path"
    fi
  done
</file>

<file path="homes/notashelf/programs/terminal/tools/bin/git-peek/git-peek.sh">
#!/usr/bin/env bash
#
# Function to print usage information
usage() {
  echo "git-peek - Quickly open a git repository in \$EDITOR

Usage: git peek [options...] <clone url>

Options:
    -h, --help            Print this help message
    -e, --editor <name>   Open repo in <name> instead of \$EDITOR
    -d, --depth <num>     Only clone <num> commits, or entire tree if 0 (default: 1)
    -k, --keep            Don't delete the clone after exiting
                          (implied if existing directory is passed)
    -b, --branch <ref>    Clone <ref> instead of the default branch
    -o, --dest <path>     Path to clone repo into
    -s, --shell           Open a new shell in the clone instead of \$EDITOR

Examples:
    git-peek https://github.com/torvalds/linux
    git-peek -s -b nixpkgs-unstable https://github.com/NixOS/nixpkgs"
}

_clean() {
  if [ -z "$_flag_keep" ]; then
    dirs -c
    echo "Cleaning up..."
    rm -rf "$clone_dir"
  fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
  -h | --help)
    usage
    exit 0
    ;;
  -e | --editor)
    shift
    EDITOR=$1
    ;;
  -d | --depth)
    shift
    depth_arg="--depth=$1"
    ;;
  -k | --keep)
    _flag_keep=true
    ;;
  -b | --branch)
    shift
    branch_arg="--branch=$1"
    ;;
  -o | --dest)
    shift
    clone_dir=$1
    if [ -e "$clone_dir" ]; then
      echo "Path '$clone_dir' already exists."
      exit 1
    fi
    ;;
  -s | --shell)
    _flag_shell=true
    ;;
  *)
    break
    ;;
  esac
  shift
done

# If no arguments are passed, print usage
if [ $# -eq 0 ] || [ -z "$1" ]; then
  usage
  exit 1
fi

# Set default values
depth_arg="--depth=1"
clone_dir=$(mktemp -d /tmp/git-peek.XXXXXX)

# Main procedure
echo "Cloning $1 into $clone_dir..."
if ! git clone "$1" "$clone_dir" "$branch_arg" "$depth_arg"; then
  echo "Cloning was not successful."
  _clean
  exit 1
fi

cd "$clone_dir" || exit 1
if [ -z "$_flag_shell" ]; then
  echo "Opening with $EDITOR..."
  "$EDITOR" "$clone_dir"
else
  echo "Opening a new shell at $clone_dir..."
  if [ -z "$_flag_keep" ]; then
    echo "Will clean up after the shell exits."
  fi
  "$SHELL"
fi
cd - >/dev/null || exit 1
_clean
</file>

<file path="homes/notashelf/programs/terminal/tools/bin/preview/preview.sh">
#!/usr/bin/env bash

case "$1" in
-*) exit 0 ;;
esac

case "$(file --mime-type "$1")" in
*text*)
  bat --color always --plain "$1"
  ;;
*image* | *pdf)
  catimg -w 100 -r 2 "$1"
  ;;
*directory*)
  eza --icons -1 --color=always "$1"
  ;;
*)
  echo "unknown file format"
  ;;
esac
</file>

<file path="homes/notashelf/programs/terminal/tools/bin/purge-direnv/purge-direnv.sh">
#!/usr/bin/env bash

# find all .direnv directories
direnv_dirs=$(fd -I -a --hidden --type directory --glob '.direnv')

# check if any directories were found
if [ -z "$direnv_dirs" ]; then
  echo "No .direnv directories found."
  exit 0
fi

# print report
echo "The following .direnv directories will be deleted:"
echo "$direnv_dirs"

# confirm deletion
read -p "Are you sure you want to delete these directories? (y/n) " -n 1 -r

# move to a new line
echo -en "\n"

if [[ $REPLY =~ ^[Yy]$ ]]; then
  # Delete directories
  echo "Deleting directories..."
  for dir in $direnv_dirs; do
    rm -rf "$dir"
  done
  echo "Directories deleted."
else
  echo "Operation cancelled."
fi
</file>

<file path="homes/notashelf/programs/terminal/tools/bin/rm-gpucache/rm-gpucache.sh">
#!/usr/bin/env bash
# shellcheck disable=SC2016

cleanup_caches() {
  echo "Cleaning up caches."
  if ! find "$HOME" -type d -name "GPUCache" -exec rm -r {} +; then
    echo "Error: Failed to remove some caches." >&2
  else
    echo "Done!"
  fi
}

# List GPU caches
list_caches() {
  echo "Found caches:"
  find "$HOME" -type d -name "GPUCache"
}

case "$1" in
-r)
  cleanup_caches
  ;;
-l)
  list_caches
  ;;
*)
  echo "Usage:"
  echo 'gpucache -r : Remove all GPUCache directories found under $HOME'
  echo 'gpucache -l : List all GPUCache directories found under $HOME'
  exit 1
  ;;
esac
</file>

<file path="homes/notashelf/programs/terminal/tools/bin/show-zombie-parents/show-zombie-parents.sh">
#!/usr/bin/env sh

# https://www.linkedin.com/pulse/how-identify-kill-zombiedefunct-processes-linux-without-george-gabra/
ps -A -ostat,ppid | grep -e '[zZ]' | awk '{ print $2 }' | uniq | xargs ps -p
</file>

<file path="homes/notashelf/programs/terminal/tools/bin/tzip/tzip.sh">
#!/usr/bin/env bash

mkdir -p mods/

# Loop through each subdirectory in the current directory
for subdir in */; do
  # Find the most recently accessed file with a .tmod extension in the subdirectory
  latest_file=$(find "$subdir" -name "*.tmod" -type f -printf "%T@ %p\n" | sort -n | tail -1 | awk '{print $2}')
  # Copy the latest file found (if any) to the mods/ directory
  if [[ -n $latest_file ]]; then
    cp "$latest_file" "mods/"
    echo "Copied $latest_file to mods/"
  else
    echo "No .tmod files found in $subdir"
  fi
done

# Zip up the mods/ directory
zip -r mods.zip mods/
echo -en "Zipped up mods/ directory to mods.zip"
</file>

<file path="homes/notashelf/programs/terminal/tools/bin/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) getExe;
  inherit (builtins) readFile;
in {
  home = {
    # make sure the scripts linked below in the session PATH
    # so that they can be referred to by name
    sessionPath = ["${config.home.homeDirectory}/.local/bin"];

    # link scripts to the local PATH
    file = {
      ".local/bin/preview" = {
        # Preview script for fzf tab
        source = getExe (pkgs.writeShellApplication {
          name = "preview";
          runtimeInputs = with pkgs; [fzf eza catimg];
          text = readFile ./preview/preview.sh;
        });
      };

      ".local/bin/show-zombie-parents" = {
        # Show zombie processes and their parents
        source = getExe (pkgs.writeShellApplication {
          name = "show-zombie-parents";
          runtimeInputs = with pkgs; [fzf eza catimg];
          text = readFile ./show-zombie-parents/show-zombie-parents.sh;
        });
      };

      ".local/bin/tzip" = {
        # Find all latest .tmod files recursively in current directory and zip them
        # for tmodloader mods downloaded via steam workshop
        source = getExe (pkgs.writeShellApplication {
          name = "tzip";
          runtimeInputs = with pkgs; [zip];
          text = readFile ./tzip/tzip.sh;
        });
      };

      ".local/bin/extract" = {
        # Extract the compressed file with the correct tool based on the extension
        source = getExe (pkgs.writeShellApplication {
          name = "extract";
          runtimeInputs = with pkgs; [zip unzip gnutar p7zip];
          text = readFile ./extract/extract.sh;
        });
      };

      ".local/bin/compilec" = {
        # Interactively find and compile C++ programs
        source = getExe (pkgs.writeShellApplication {
          name = "compilec";
          runtimeInputs = with pkgs; [skim coreutils gcc];
          text = readFile ./compilec/compilec.sh;
        });
      };

      ".local/bin/fs-diff" = {
        # Show diff of two directories
        source = getExe (pkgs.writeShellApplication {
          name = "fs-diff";
          runtimeInputs = with pkgs; [coreutils gnused btrfs-progs];
          text = readFile ./fs-diff/fs-diff.sh;
        });
      };

      ".local/bin/purge-direnv" = {
        # Purge all direnv links
        source = getExe (pkgs.writeShellApplication {
          name = "purge-direnv";
          runtimeInputs = with pkgs; [direnv];
          text = readFile ./purge-direnv/purge-direnv.sh;
        });
      };

      ".local/bin/git-peek" = {
        # Quickly clone a git repo in a temporary place and open it in $EDITOR
        # Inspired by https://github.com/Jarred-Sumner/git-peek
        source = getExe (pkgs.writeShellApplication {
          name = "git-peek";
          runtimeInputs = with pkgs; [git];
          text = readFile ./git-peek/git-peek.sh;
        });
      };

      ".local/bin/addr" = {
        # Get external IP address
        source = getExe (pkgs.writeShellApplication {
          name = "addr";
          runtimeInputs = with pkgs; [curl];
          text = ''
            #!${pkgs.stdenv.shell}
            exec curl "$@" icanhazip.com
          '';
        });
      };

      ".local/bin/rm-gpucache" = {
        # Remove GPU cache
        source = getExe (pkgs.writeShellApplication {
          name = "rm-gpucache";
          runtimeInputs = with pkgs; [coreutils];
          text = ''
            #!${pkgs.stdenv.shell}
            exec rm -rf ~/.nv
          '';
        });
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/fastfetch/default.nix">
{
  pkgs,
  lib,
  ...
}: {
  config = {
    home = {
      packages = [pkgs.fastfetch];
    };

    xdg.configFile."fastfetch/config.jsonc".text = builtins.toJSON {
      "$schema" = "https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json";
      logo = {
        source = "nixos_small";
        padding = {
          left = 1;
          right = 3;
        };
      };
      display = {
        separator = " ";
        keyWidth = 14;
      };
      modules = [
        {
          type = "os";
          key = " system  ";
          format = "{3}";
        }
        {
          type = "kernel";
          key = " kernel  ";
          format = "{1} {2} ({4})";
        }
        {
          type = "uptime";
          key = " uptime  ";
        }
        {
          type = "wm";
          key = " wm      ";
        }
        {
          type = "command";
          key = "󰆧 packages";
          text = "(${lib.getExe' pkgs.nix "nix-store"} --query --requisites /run/current-system | wc -l | tr -d '\n') && echo ' (nix; /run/current-system)'";
        }
        {
          type = "memory";
          key = "󰍛 memory  ";
        }
        {
          type = "disk";
          key = "󱥎 storage ";
          format = "{1} / {2} ({3})";
          folders = "/";
        }
      ];
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/git/aliases.nix">
{
  programs.git.aliases = {
    br = "branch";
    c = "commit -m";
    ca = "commit -am";
    co = "checkout";
    d = "diff";
    df = "!git hist | peco | awk '{print $2}' | xargs -I {} git diff {}^ {}";
    edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`";
    fuck = "commit --amend -m";
    graph = "log --all --decorate --graph";
    ps = "!git push origin $(git rev-parse --abbrev-ref HEAD)";
    pl = "!git pull origin $(git rev-parse --abbrev-ref HEAD)";
    af = "!git add $(git ls-files -m -o --exclude-standard | fzf -m)";
    st = "status";
    hist = ''
      log --pretty=format:"%Cgreen%h %Creset%cd %Cblue[%cn] %Creset%s%C(yellow)%d%C(reset)" --graph --date=relative --decorate --all
    '';
    llog = ''
      log --graph --name-status --pretty=format:"%C(red)%h %C(reset)(%cd) %C(green)%an %Creset%s %C(yellow)%d%Creset" --date=relative
    '';
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/git/default.nix">
{
  osConfig,
  pkgs,
  ...
}: let
  inherit (osConfig) modules;

  gitPackage = pkgs.gitFull;
  cfg = modules.system.programs.git;
in {
  imports = [
    ./aliases.nix
    ./ignore.nix
  ];

  config = {
    home.packages = with pkgs; [
      gist # manage github gists
      act # local github actions
      delta # pager
    ];

    programs.git = {
      enable = true;
      package = gitPackage;

      # my credentials
      userName = "NotAShelf";
      userEmail = "raf@notashelf.dev";

      # lets sign using our own key
      # this must be provided by the host
      signing = {
        key = cfg.signingKey;
        signByDefault = true;
      };

      lfs = {
        enable = true;
        skipSmudge = true;
      };

      extraConfig = {
        # I don't care about the usage of the term "master"
        # but main is easier to type, so that's that
        init.defaultBranch = "main";

        core = {
          # set delta as the main pager
          pager = "delta";

          # disable the horrendous GUI password prompt
          # for Git when SSH authentication fails
          askPass = "";

          whitespace = "fix,-indent-with-non-tab,trailing-space,cr-at-eol";
        };

        # prefer using libsecret for storing and retrieving credentials
        credential.helper = "${gitPackage}/bin/git-credential-libsecret";

        # Use readable prefixs such as (i)ndex, (w)ork tree, (c)ommit and (o)bject
        # instead of a/b/c/d for the patches.
        diff.mnemonicprefix = true;

        # delta is some kind of a syntax highlighting pager for git
        # it looks nice but I'd like to consider difftastic at some point
        delta = {
          enable = true;
          features = "decorations side-by-side navigate";
          whitespace-error-style = "22 reverse";
          side-by-side = true;
          true-color = "always";

          options = {
            dark = true;
            navigate = true;
            line-numbers = true;
            side-by-side = true;
            syntax-theme = "base16-256";
          };

          # line numbers are nice
          line-numbers = true;
          line-numbers-left-format = "";
          line-numbers-right-format = "│ ";

          # theming
          plus-style = "syntax \"#003800\"";
          minus-style = "syntax \"#3f0001\"";

          # configure decorations
          decorations = {
            commit-decoration-style = "cyan bold box ul";
            file-style = "cyan bold ul";
            file-decoration-style = "cyan bold ul";
            hunk-header-decoration-style = "cyan box ul";
          };
        };

        interactive.diffFilter = "delta --color-only --features=interactive";

        branch.autosetupmerge = "true";
        pull.ff = "only";
        color.ui = "auto";
        repack.usedeltabaseoffset = "true";

        push = {
          default = "current";
          followTags = true;
          autoSetupRemote = true;
        };

        merge = {
          conflictstyle = "diff3";
          stat = "true";
        };

        rebase = {
          autoSquash = true;
          autoStash = true;
        };

        rerere = {
          autoupdate = true;
          enabled = true;
        };

        url = {
          "https://github.com/".insteadOf = "github:";
          "ssh://git@github.com/".pushInsteadOf = "github:";
          "https://gitlab.com/".insteadOf = "gitlab:";
          "ssh://git@gitlab.com/".pushInsteadOf = "gitlab:";
          "https://aur.archlinux.org/".insteadOf = "aur:";
          "ssh://aur@aur.archlinux.org/".pushInsteadOf = "aur:";
          "https://git.sr.ht/".insteadOf = "srht:";
          "ssh://git@git.sr.ht/".pushInsteadOf = "srht:";
          "https://codeberg.org/".insteadOf = "codeberg:";
          "ssh://git@codeberg.org/".pushInsteadOf = "codeberg:";
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/git/ignore.nix">
{lib, ...}: let
  general = ''
    .cache/
    tmp/
    *.tmp
    log/
  '';

  ide = ''
    *.swp
    .idea/
    .~lock*
  '';

  c = ''
    .tags
    tags
    *~
    *.o
    *.so
    *.cmake
    CMakeCache.txt
    CMakeFiles/
    cmake-build-debug/
    compile_commands.json
    .ccls*
  '';

  nix = ''
    result
    result-*
    .direnv/
  '';

  node = ''
    node_modules/
  '';

  python = ''
    venv
    .venv
    *pyc
    *.egg-info/
    __pycached__/
    .mypy_cache
  '';

  ignore = lib.concatStringsSep "\n" [general c nix node ide python];
in {
  # construct the list of ignored files from a very large string containing
  # the list of ignored files, but in a plaintext format for my own convenience
  programs.git.ignores = map (v: "${toString v}") (builtins.split "\n" ignore);
}
</file>

<file path="homes/notashelf/programs/terminal/tools/neomutt/binds.nix">
{
  binds = [
    {
      # Reply to a group or mailing list.
      action = "group-reply";
      key = "R";
      map = [
        "index"
        "pager"
      ];
    }

    {
      # Move to the previous box in the sidebar.
      action = "sidebar-prev";
      key = "\\cK";
      map = [
        "index"
        "pager"
      ];
    }

    {
      # Move to the next box in the sidebar.
      action = "sidebar-next";
      key = "\\cJ";
      map = [
        "index"
        "pager"
      ];
    }

    {
      # Open the current box highlighted in the sidebar.
      action = "sidebar-open";
      key = "\\cO";
      map = [
        "index"
        "pager"
      ];
    }

    {
      # View the raw contents of a message.
      action = "view-raw-message";
      key = "Z";
      map = [
        "index"
        "pager"
      ];
    }
  ];
}
</file>

<file path="homes/notashelf/programs/terminal/tools/neomutt/colors.nix">
# vim: filetype=nix
{pkgs, ...}: {
  muttColors = pkgs.writeTextFile {
    name = "muttColors";
    text = ''
      # vim: filetype=muttrc
      # Header colors:
      color header blue default ".*"
      color header brightmagenta default "^(From)"
      color header brightcyan default "^(Subject)"
      color header brightwhite default "^(CC|BCC)"

      mono bold bold
      mono underline underline
      mono indicator reverse
      mono error bold
      color normal default default
      color indicator brightyellow default # currently selected message. default makes bar clear, disabled arrow to save space.
      color sidebar_highlight red default
      color sidebar_divider brightblack black
      color sidebar_flagged red black
      color sidebar_new green black
      color normal brightyellow default
      color error red default
      color tilde black default
      color message cyan default
      color markers red white
      color attachment white default
      color search brightmagenta default
      color status brightyellow black
      color hdrdefault brightgreen default
      color quoted green default
      color quoted1 blue default
      color quoted2 cyan default
      color quoted3 yellow default
      color quoted4 red default
      color quoted5 brightred default
      color signature brightgreen default
      color bold black default
      color underline black default
      color normal default default

      color body brightred default "[\-\.+_a-zA-Z0-9]+@[\-\.a-zA-Z0-9]+" # Email addresses
      color body brightblue default "(https?|ftp)://[\-\.,/%~_:?&=\#a-zA-Z0-9]+" # URL
      color body green default "\`[^\`]*\`" # Green text between ` and `
      color body brightblue default "^# \.*" # Headings as bold blue
      color body brightcyan default "^## \.*" # Subheadings as bold cyan
      color body brightgreen default "^### \.*" # Subsubheadings as bold green
      color body yellow default "^(\t| )*(-|\\*) \.*" # List items as yellow
      color body brightcyan default "[;:][-o][)/(|]" # emoticons
      color body brightcyan default "[;:][)(|]" # emoticons
      color body brightcyan default "[ ][*][^*]*[*][ ]?" # more emoticon?
      color body brightcyan default "[ ]?[*][^*]*[*][ ]" # more emoticon?
      color body red default "(BAD signature)"
      color body cyan default "(Good signature)"
      color body brightblack default "^gpg: Good signature .*"
      color body brightyellow default "^gpg: "
      color body brightyellow red "^gpg: BAD signature from.*"
      mono body bold "^gpg: Good signature"
      mohttps://neomutt.org/code/config_vars.htmlno body bold "^gpg: BAD signature from.*"
      color body red default "([a-z][a-z0-9+-]*://(((([a-z0-9_.!~*'();:&=+$,-]|%[0-9a-f][0-9a-f])*@)?((([a-z0-9]([a-z0-9-]*[a-z0-9])?)\\.)*([a-z]([a-z0-9-]*[a-z0-9])?)\\.?|[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)(:[0-9]+)?)|([a-z0-9_.!~*'()$,;:@&=+-]|%[0-9a-f][0-9a-f])+)(/([a-z0-9_.!~*'():@&=+$,-]|%[0-9a-f][0-9a-f])*(;([a-z0-9_.!~*'():@&=+$,-]|%[0-9a-f][0-9a-f])*)*(/([a-z0-9_.!~*'():@&=+$,-]|%[0-9a-f][0-9a-f])*(;([a-z0-9_.!~*'():@&=+$,-]|%[0-9a-f][0-9a-f])*)*)*)?(\\?([a-z0-9_.!~*'();/?:@&=+$,-]|%[0-9a-f][0-9a-f])*)?(#([a-z0-9_.!~*'();/?:@&=+$,-]|%[0-9a-f][0-9a-f])*)?|(www|ftp)\\.(([a-z0-9]([a-z0-9-]*[a-z0-9])?)\\.)*([a-z]([a-z0-9-]*[a-z0-9])?)\\.?(:[0-9]+)?(/([-a-z0-9_.!~*'():@&=+$,]|%[0-9a-f][0-9a-f])*(;([-a-z0-9_.!~*'():@&=+$,]|%[0-9a-f][0-9a-f])*)*(/([-a-z0-9_.!~*'():@&=+$,]|%[0-9a-f][0-9a-f])*(;([-a-z0-9_.!~*'():@&=+$,]|%[0-9a-f][0-9a-f])*)*)*)?(\\?([-a-z0-9_.!~*'();/?:@&=+$,]|%[0-9a-f][0-9a-f])*)?(#([-a-z0-9_.!~*'();/?:@&=+$,]|%[0-9a-f][0-9a-f])*)?)[^].,:;!)? \t\r\n<>\"]"

      # Default index colors:
      color index yellow default '.*'
      color index_author red default '.*'
      color index_number blue default
      color index_subject cyan default '.*'

      # For new mail:
      color index brightyellow black "~N"
      color index_author brightred black "~N"
      color index_subject brightcyan black "~N"

      color progress black cyan
    '';
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/neomutt/default.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mapAttrsToList flatten concatStringsSep;
in {
  config = {
    programs.neomutt = {
      enable = true;
      vimKeys = true;
      checkStatsInterval = 60;

      # sidebar
      sidebar = {
        enable = true;
        width = 30;
        format = "%D%?F? [%F]?%* %?N?%N/?%S";
      };

      # sort default view by threads
      sort = "threads";

      # get keybinds from their respective file
      inherit (import ./binds.nix) binds;

      # get settings from their respective file
      inherit (import ./settings.nix {inherit config;}) settings;

      # get macros from their respective file
      inherit (import ./macros.nix) macros;

      extraConfig = let
        # collect all addresses and aliases from accounts.email.accounts attribute of home-manager
        accounts = mapAttrsToList (_: value: [value.address] ++ value.aliases) config.accounts.email.accounts;
        addresses = flatten accounts;
      in ''
        # add collected accounts to neomutt config
        alternates "${concatStringsSep "|" addresses}"

        # mark anything marked by SpamAssassin as probably spam
        spam "X-Spam-Score: ([0-9\\.]+).*" "SA: %1"

        # only show the basic mail headers
        ignore *
        unignore From To Cc Bcc Date Subject

        # show headers in the following order
        unhdr_order *
        hdr_order From: To: Cc: Bcc: Date: Subject:

      '';
    };

    xdg = {
      desktopEntries = {
        neomutt = {
          name = "Neomutt";
          genericName = "Email Client";
          comment = "Read and send emails";
          exec = "neomutt %U";
          icon = "neomutt";
          terminal = true;
          categories = ["Network" "Email" "ConsoleOnly"];
          type = "Application";
          mimeType = ["x-scheme-handler/mailto"];
        };
      };
      mimeApps.defaultApplications = {
        "x-scheme-handler/mailto" = "neomutt.desktop";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/neomutt/macros.nix">
{
  macros = [
    {
      # toggle the sidebar's visibility and refresh/redraw the screen
      action = "<enter-command>toggle sidebar_visible<enter><refresh>";
      key = "B";
      map = ["index"];
    }
    {
      action = "<enter-command>toggle sidebar_visible<enter><redraw-screen>";
      key = "B";
      map = ["pager"];
    }
  ];
}
</file>

<file path="homes/notashelf/programs/terminal/tools/neomutt/settings.nix">
{config}: {
  settings = {
    # if the given mail doesn't have an explicit charset, assume an old
    # and Windows-y compatible charset as fallback
    assumed_charset = "iso-8859-1";

    # use gpgme for cryptography
    crypt_use_gpgme = "yes";

    # use PKA to find keys via DNS records and possibly check whether an email
    # address is controlled by who it says it is
    crypt_use_pka = "yes";

    # always try to verify signatures
    crypt_verify_sig = "yes";

    # ask to purge messages marked for delete when closing/syncing a box, with
    # the default to do so
    delete = "ask-yes";

    # when editing outgoing mail, allow editing the headers too
    edit_headers = "yes";

    # the format to use for subjects when forwarding messages
    forward_format = "\"Fwd: %s\"";

    # save 10_000 lines of string buffer history per category
    history = "10000";

    # save history to a file in neomutt's directory
    history_file = "${config.xdg.configHome}/neomutt/history";

    # when connecting via IMAP, add all subscribed folders from the server
    imap_check_subscribed = "yes";

    # keep IMAP connections alive with a keepalive every 5 minutes
    imap_keepalive = "300";

    # use a smaller IMAP pipeline to play nice with servers like GMail
    imap_pipeline_depth = "5";

    # check for new mail every minute
    mail_check = "60";

    # the path to the mailcap file
    mailcap_path = "${config.home.homeDirectory}/.mailcap";

    # use Maildir-style mailboxes
    mbox_type = "Maildir";

    # scroll menus and such by a single line, rather than a whole page
    menu_scroll = "yes";

    # show five lines of context when moving between pages in the pager
    pager_context = "5";

    # the format for the pager status line.
    pager_format = "\" %C - %[%H:%M] %.20v, %s%* %?H? [%H] ?\"";

    # when in the mail pager, show 10 lines of the index above the current
    # message
    pager_index_lines = "10";

    # don't move to the next message when reaching the bottom of a message
    pager_stop = "yes";

    # reply to mail using the same address the original was sent to
    reverse_name = "yes";

    # send all mail as UTF-8
    send_charset = "utf-8";

    # sort the mailboxes in the sidebar by mailbox path
    sidebar_sort_method = "path";

    # sort by last message date if messages are in the same thread
    sort_aux = "last-date-received";

    # separate matching spam headers with this separator
    spam_separator = ", ";

    # only group messages as a thread by the In-Reply-To or References headers
    # rather than matching subject names
    strict_threads = "yes";

    # search messages against their decoded contents
    thorough_search = "yes";

    # pad blank lines at the bottom of the screen with tildes
    tilde = "yes";
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/newsboat/default.nix">
{
  config,
  pkgs,
  lib,
  osConfig,
  ...
}: let
  inherit (lib) mkIf getExe;

  mpv = "${getExe pkgs.mpv}";
  glow = "${getExe pkgs.glow}";
  pandoc = "${getExe pkgs.pandoc}";

  dev = osConfig.modules.device;
  acceptedTypes = ["laptop" "desktop" "hybrid" "lite"];
in {
  config = mkIf (builtins.elem dev.type acceptedTypes) {
    programs.newsboat = {
      enable = true;
      autoReload = true;

      inherit ((import ./urls.nix)) urls;

      extraConfig = ''
        error-log /dev/null

        download-full-page yes
        download-retries 3
        cookie-cache ~/.cache/newsboat/cookies.txt

        auto-reload yes
        max-items 0
        scrolloff 999
        reload-threads 100

        bind-key j down
        bind-key k up
        bind-key j next articlelist
        bind-key k prev articlelist
        bind-key J next-feed articlelist
        bind-key K prev-feed articlelist
        bind-key G end
        bind-key g home
        bind-key d pagedown
        bind-key u pageup
        bind-key l open
        bind-key h quit
        bind-key a toggle-article-read
        bind-key n next-unread
        bind-key N prev-unread
        bind-key D pb-download
        bind-key U show-urls
        bind-key x pb-delete

        color listnormal         color15 default
        color listnormal_unread  color2  default
        color listfocus_unread   color2  color0
        color listfocus          default color0
        color background         default default
        color article            default default
        color end-of-text-marker color8  default
        color info               color4  color8
        color hint-separator     default color8
        color hint-description   default color8
        color title              color14 color8

        highlight article "^(Feed|Title|Author|Link|Date): .+" color4 default bold
        highlight article "^(Feed|Title|Author|Link|Date):" color14 default bold
        highlight article "\\((link|image|video)\\)" color8 default
        highlight article "https?://[^ ]+" color4 default
        highlight article "\[[0-9]+\]" color6 default bold
        user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36"

        html-renderer "${pandoc} --from=html -t markdown_github-raw_html"
        pager "${glow} --pager --width 72"

        # macros
        macro v set browser "${mpv} %u" ; open-in-browser ; set browser "firefox %u" -- "Open video on mpv"
        macro , open-in-browser
      '';
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/newsboat/urls.nix">
{
  urls = [
    # Weekly NixOS news and some other stuff
    {
      title = "NixOS Weekly";
      tags = ["news" "twitter"];
      url = "https://weekly.nixos.org/feeds/all.rss.xml";
    }
    # https://hackaday.com/blog/feed/
    {
      title = "Hacker News";
      url = "https://hnrss.org/newest";
      tags = ["tech"];
    }
    {
      title = "Hacker News Daily";
      url = "https://www.daemonology.net/hn-daily/index.rss";
      tags = ["tech"];
    }
    # Reddit
    {
      title = "/r/neovim";
      url = "https://www.reddit.com/r/neovim/.rss";
      tags = ["neovim" "reddit"];
    }
    {
      title = "/r/unixporn";
      url = "https://www.reddit.com/r/unixporn/.rss";
      tags = ["unix" "ricing" "style"];
    }
    # Computerphile
    {
      title = "Computerphile";
      url = "https://www.youtube.com/feeds/videos.xml?channel_id=UC9-y-6csu5WGm29I7JiwpnA";
      tags = ["tech" "youtube"];
    }
    # Security news
    {
      title = "Krebson Security";
      url = "https://krebsonsecurity.com/feed/";
      tags = ["tech" "security"];
    }

    # Unsorted
    {url = "https://nitter.net/GergelyOrosz/rss";}
    {url = "https://feeds.feedburner.com/ThePragmaticEngineer";}
    {url = "https://www.reddit.com/r/ExperiencedDevs/.rss";}
    {url = "https://news.ycombinator.com/rss";}
    {url = "https://programming.dev/feeds/local.xml?sort=Active";}
    {url = "https://programming.dev/feeds/c/functional_programming.xml?sort=Active";}
    {url = "https://programming.dev/feeds/c/linux.xml?sort=Active";}
    {url = "https://programming.dev/feeds/c/experienced_devs.xml?sort=Active";}
    {url = "https://programming.dev/feeds/c/nix.xml?sort=Active";}
    {url = "https://programming.dev/feeds/c/commandline.xml?sort=Active";}
    {url = "https://beehaw.org/feeds/c/technology.xml?sort=Active";}
    {url = "https://lobste.rs/rss";}
    {url = "https://kiszamolo.hu/feed";}
  ];
}
</file>

<file path="homes/notashelf/programs/terminal/tools/vifm/config/colors/.gitkeep">

</file>

<file path="homes/notashelf/programs/terminal/tools/vifm/config/settings/abbr.vifm">
" vim:ft=vim
cabbrev t touch
cabbrev mk mkdir
</file>

<file path="homes/notashelf/programs/terminal/tools/vifm/config/settings/commands.vifm">
" vim:ft=vim
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window
" more information: https://vifm.info/vimdoc.shtml#vifm-macros

command! df df -h %m 2> /dev/null
command! diff nvim -d %f %F
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart
command! dragon dragon-drop -a -x %f
command! clear vifmimg clear
command! print lp -n 1 -o sides=two-sided-long-edge %f
command! sudoedit sudoedit %c
</file>

<file path="homes/notashelf/programs/terminal/tools/vifm/config/settings/favicons.vifm">
" vim:ft=vim

" Filetypes/directories
set classify=' :dir:/, :exe:, :reg:, :link:,? :?:, ::../::'

" Specific files
set classify+=' ::.Xdefaults,,.Xresources,,.bashprofile,,.bash_profile,,.bashrc,,.dmrc,,.d_store,,.fasd,,.gitconfig,,.gitignore,,.jack-settings,,.mime.types,,.nvidia-settings-rc,,.pam_environment,,.profile,,.recently-used,,.selected_editor,,.xinitpurc,,.zprofile,,.yarnc,,.snclirc,,.tmux.conf,,.urlview,,.config,,.ini,,.user-dirs.dirs,,.mimeapps.list,,.offlineimaprc,,.msmtprc,,.Xauthority,,config::'
set classify+=' ::dropbox::'
set classify+=' ::favicon.*,,README,,readme::'
set classify+=' ::.vim,,.vimrc,,.gvimrc,,.vifm::'
set classify+=' ::gruntfile.coffee,,gruntfile.js,,gruntfile.ls::'
set classify+=' ::gulpfile.coffee,,gulpfile.js,,gulpfile.ls::'
set classify+=' ::ledger::'
set classify+=' ::license,,copyright,,copying,,LICENSE,,COPYRIGHT,,COPYING::'
set classify+=' ::node_modules::'
set classify+=' ::react.jsx::'

" File extensions
set classify+='λ ::*.ml,,*.mli::'
set classify+=' ::*.styl::'
set classify+=' ::*.scss::'
set classify+=' ::*.py,,*.pyc,,*.pyd,,*.pyo::'
set classify+=' ::*.php::'
set classify+=' ::*.markdown,,*.md::'
set classify+=' ::*.json::'
set classify+=' ::*.js::'
set classify+=' ::*.bmp,,*.gif,,*.ico,,*.jpeg,,*.jpg,,*.png,,*.svg,,*.svgz,,*.tga,,*.tiff,,*.xmb,,*.xcf,,*.xpm,,*.xspf,,*.xwd,,*.cr2,,*.dng,,*.3fr,,*.ari,,*.arw,,*.bay,,*.crw,,*.cr3,,*.cap,,*.data,,*.dcs,,*.dcr,,*drf,,*.eip,,*.erf,,*.fff,,*.gpr,,*.iiq,,*.k25,,*.kdc,,*.mdc,,.*mef,,*.mos,,.*.mrw,,.*.obm,,*.orf,,*.pef,,*.ptx,,*.pxn,,*.r3d,,*.raf,,*.raw,,*.rwl,,*.rw2,,*.rwz,,*.sr2,,*.srf,,*.srf,,*.srw,,*.tif,,*.x3f::'
set classify+=' ::*.ejs,,*.htm,,*.html,,*.slim,,*.xml::'
set classify+=' ::*.mustasche::'
set classify+=' ::*.css,,*.less,,*.bat,,*.conf,,*.ini,,*.rc,,*.yml,,*.cfg,,*.rc::'
set classify+=' ::*.rss::'
set classify+=' ::*.coffee::'
set classify+=' ::*.twig::'
set classify+=' ::*.c++,,*.cc,,*.cpp,,*.cxx,,*.h::'
set classify+=' ::*.c::'
set classify+=' ::*.hs,,*.lhs::'
set classify+=' ::*.lua::'
set classify+=' ::*.jl::'
set classify+=' ::*.go::'
set classify+=' ::*.ts::'
set classify+=' ::*.db,,*.dump,,*.sql::'
set classify+=' ::*.sln,,*.suo::'
set classify+=' ::*.exe::'
set classify+=' ::*.diff,,*.sum,,*.md5,,*.sha512::'
set classify+=' ::*.scala::'
set classify+=' ::*.java,,*.jar::'
set classify+=' ::*.xul::'
set classify+=' ::*.clj,,*.cljc::'
set classify+=' ::*.pl,,*.pm,,*.t::'
set classify+=' ::*.cljs,,*.edn::'
set classify+=' ::*.rb::'
set classify+=' ::*.fish,,*.sh,,*.bash::'
set classify+=' ::*.dart::'
set classify+=' ::*.f#,,*.fs,,*.fsi,,*.fsscript,,*.fsx::'
set classify+=' ::*.rlib,,*.rs::'
set classify+=' ::*.d::'
set classify+=' ::*.erl,,*.hrl::'
set classify+=' ::*.ai::'
set classify+=' ::*.psb,,*.psd::'
set classify+=' ::*.jsx::'
set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'
set classify+=' ::*.avi,,*.flv,,*.mkv,,*.mov,,*.mov,,*.mp4,,*.mpeg,,*.mpg,,*.webm::'
set classify+=' ::*.epub,,*.pdf,,*.fb2,,*.djvu::'
set classify+=' ::*.7z,,*.apk,,*.bz2,,*.cab,,*.cpio,,*.deb,,*.gem,,*.gz,,*.gzip,,*.lh,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.tar,,*.tgz,,*.xz,,*.zip::'
set classify+=' ::*.cbr,,*.cbz::'
set classify+=' ::*.log::'
set classify+=' ::*.doc,,*.docx,,*.adoc::'
set classify+=' ::*.xls,,*.xls,,*.xlsmx::'
set classify+=' ::*.pptx,,*.ppt::'
</file>

<file path="homes/notashelf/programs/terminal/tools/vifm/config/settings/ft.vifm">
" vim:ft=vim
" filextype: What should it do (which program should it use), when you want to open it
" fileviewer: What should it do for the prievew?

filextype *.pdf zathura %c &

filextype *.ps,*.eps,*.ps.gz
        \ {View in sioyek}
        \ sioyek  %f &

filextype *.xml,*.ipe ipe %c &

filextype *.djvu
        \ {View in sioyek}
        \ sioyek  %f & ,
        \ {View in apvlv}
        \ apvlv %f,

filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,*.MOD
       \ {Play using ffplay}
       \ ffplay -nodisp -autoexit %c &,
       \ {Play using MPlayer}
       \ mplayer %f &,
fileviewer *.mp3 mp3info
fileviewer *.flac soxi

filextype *.avi,*.mp4,*.wmv,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
        \ {View using ffplay}
        \ ffplay -fs -autoexit -volume 100 %f &,

filextype *.html,*.htm
        \ firefox %f &,
filetype *.html,*.htm links, lynx
fileviewer *.html
	\ w3m %c

filetype *.o,*.out objdump -d %f | less
fileviewer *.o,*.out objdump -d %f

filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

filextype *.bmp,*.jpg,*.jpeg,*.png,*.xpm,*.svg,*.ico,*.gif
        "\ viewnior %c &
        " \ vimiv --log-level info --debug vimico %c &
        \ vimiv %c &

filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

filetype *.asc
       \ {Check signature}
       \ !!gpg --verify %c,

filetype *.torrent ktorrent %f &
fileviewer *.torrent dumptorrent -v %c

filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ tar -xf %c
filetype *.zip unzip %f
filetype *.tar.gz tar -xvf %f
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer *.tar tar -tf %c

filetype *.rar
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.rar unrar v %c

filetype *.iso
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

filetype *.7z
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.7z 7z l %c

filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx libreoffice %f &
fileviewer *.odt odt2txt %f
fileviewer *.docx docx2txt %f -

filetype *.tudu tudu -f %c

filextype *.pro qtcreator %f &

filextype */
        \ pacmanfm %f &,

fileviewer *.md glow %c

filetype *.xopp xournalpp %f &
</file>

<file path="homes/notashelf/programs/terminal/tools/vifm/config/settings/fv.vifm">
" vim:ft=vim

fileviewer *.* bat --color=always --decorations=never %c
</file>

<file path="homes/notashelf/programs/terminal/tools/vifm/config/settings/mappings.vifm">
" vim:ft=vim

" Editing / Do something with the files
nnoremap cd :cd
nnoremap cD :diff<CR>
vnoremap cD :diff<CR>

" start shell
nmap S :shell<Cr>

" Display sorting dialog
nnoremap s :sort<cr>

" preview window
" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" panel resize
nnoremap < <C-w>5<
nnoremap > <C-w>5>

" tabs
nnoremap <C-t> :tabnew<CR>

" drag and drop
nmap <C-h> :dragon<CR>
vmap <C-h> :dragon<CR>

" Yank current directory path into the clipboard
nnoremap yd :!echo -n %d | wl-copy %i<cr>:echo expand('%"d') "is yanked to clipboard"<cr>
" Yank current file path into the clipboard
nnoremap yf :!echo -n %c:p | wl-copy %i<cr>:echo expand('%"c:p') "is yanked to clipboard"<cr>

nnoremap q :q<cr>

"nnoremap ö q
</file>

<file path="homes/notashelf/programs/terminal/tools/vifm/config/vifmrc">
" vim:ft=vim

" editor
set vicmd="nvim"

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" miller view
set millerview
set milleroptions="lsize:1,csize:2,rsize:0,rpreview:all"

set sizefmt=units:si,precision:2,space

" The display on the bottom left
set rulerformat="%2l/%2S %[MAX: %2L%]"

set findprg="fd %A"
set grepprg="rg -n -H %i %a %s"

" set fillchars=vborder:│

" execute files
set runexec

set tuioptions="pu"

" controls details of file operations
set iooptions=fastfilecloning

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash
set trashdir="~/.local/share/Trash/files"

" This is how many directories to store in the directory history.
set history=100

" number of spaces of a tab"
set tabstop=4

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).
set fastrun

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" If you installed the vim.txt help file set vimhelp.
" If would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press return on the file name set this.
set norunexec

set rnu
set dotdirs=

" colorscheme custom

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt=%d.%m.%Y\ \ %H:%M

" Show list of matches on tab completion in command-line mode
set wildmenu
" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers,delay:0

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
if !has('win')
    set slowfs=curlftpfs
endif

set statusline=" %A %10u:%-7g %20d Free Space: %a"

set vifminfo=dhistory,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------
" panels
" ------------
set viewcolumns=-{name},{size}
</file>

<file path="homes/notashelf/programs/terminal/tools/vifm/default.nix">
{
  self,
  pkgs,
  ...
}: {
  imports = [self.homeManagerModules.vifm];
  config = {
    programs.vifm = {
      enable = true;
      package = pkgs.vifm-full;
      config = builtins.readFile "${./config/vifmrc}";
      extraConfigFiles = [
        "${./config/settings/abbr.vifm}"
        "${./config/settings/commands.vifm}"
        "${./config/settings/favicons.vifm}"
        "${./config/settings/ft.vifm}"
        "${./config/settings/fv.vifm}"
        "${./config/settings/mappings.vifm}"
      ];
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/xplr/default.nix">
{
  pkgs,
  lib,
  osConfig,
  ...
}: let
  device = osConfig.modules.device;
  acceptedTypes = ["laptop" "desktop" "hybrid" "server" "lite"];
in {
  config = lib.mkIf (builtins.elem device.type acceptedTypes) {
    home.packages = with pkgs; [
      xplr
    ];

    xdg.configFile."xplr/init.lua".text = let
      # get plugin derivations from plugins.nix so that this file remains clean
      inherit (import ./plugins.nix pkgs) wl-clipboard-plugin nuke-plugin;
    in ''
      version = '${pkgs.xplr.version}'

      package.path =
      "${wl-clipboard-plugin}/init.lua;" ..
      "${nuke-plugin}/init.lua;" ..
      package.path


      require("wl-clipboard").setup{
        copy_command = "wl-copy -t text/uri-list",
        paste_command = "wl-paste",
        keep_selection = true,
      }

      require("nuke").setup{
        pager = "less -R",
        open = {
          run_executables = true, -- default: false
          custom = {
            {extension = "jpg", command = "imv {}"},
            {extension = "pdf", command = "zathura {}"},
            {mime_regex = "^video/.*", command = "mpv {}"},
            {mime_regex = ".*", command = "xdg-open {}"}
          }
        },

        view = {
          show_line_numbers = true, -- default: false
        },

        smart_view = {
          custom = {
            {extension = "so", command = "ldd -r {} | less"},
          },
        }
      }
    '';
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/xplr/plugins.nix">
pkgs: {
  wl-clipboard-plugin = pkgs.fetchFromGitHub {
    owner = "sayanarijit";
    repo = "wl-clipboard.xplr";
    rev = "a3ffc87460c5c7f560bffea689487ae14b36d9c3";
    hash = "sha256-I4rh5Zks9hiXozBiPDuRdHwW5I7ppzEpQNtirY0Lcks=";
  };
  nuke-plugin = pkgs.fetchFromGitHub {
    owner = "Junker";
    repo = "nuke.xplr";
    rev = "f83a7ed58a7212771b15fbf1fdfb0a07b23c81e9";
    hash = "sha256-k/yre9SYNPYBM2W1DPpL6Ypt3w3EMO9dznHwa+fw/n0=";
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/yazi/theme/icons.nix">
{
  programs.yazi.theme.icons = {
    # Default
    "*" = "";
    "*/" = "󰉋";

    # Home
    ".config/" = "";
    ".ssh/" = "󰢬";
    "Desktop/" = "";
    "Development/" = "";
    "Documents/" = "";
    "Downloads/" = "󰉍";
    "Library/" = "";
    "Movies/" = "";
    "Music/" = "󱍙";
    "Pictures/" = "󰉏";
    "Videos/" = "";
    "Public/" = "";

    # Git
    ".git/" = "";
    ".gitignore" = "";
    ".gitmodules" = "";
    ".gitattributes" = "";

    # Dotfiles
    ".DS_Store" = "";
    ".bashrc" = "";
    ".bashprofile" = "";
    ".zshrc" = "";
    ".zshenv" = "";
    ".zprofile" = "";
    ".vimrc" = "";

    # Text
    "*.txt" = "";
    "*.md" = "";
    "*.rst" = "";
    COPYING = "󰿃";
    LICENSE = "󰿃";

    # Archives
    "*.zip" = "";
    "*.tar" = "";
    "*.gz" = "";
    "*.7z" = "";
    "*.bz2" = "";
    "*.xz" = "";

    # Documents
    "*.csv" = "";
    "*.doc" = "";
    "*.doct" = "";
    "*.docx" = "";
    "*.dot" = "";
    "*.ods" = "";
    "*.ots" = "";
    "*.pdf" = "";
    "*.pom" = "";
    "*.pot" = "";
    "*.ppm" = "";
    "*.pps" = "";
    "*.ppt" = "";
    "*.potx" = "";
    "*.ppmx" = "";
    "*.ppsx" = "";
    "*.pptx" = "";
    "*.xlc" = "";
    "*.xlm" = "";
    "*.xls" = "";
    "*.xlt" = "";
    "*.xlsm" = "";
    "*.xlsx" = "";

    # Audio
    "*.mp3" = "";
    "*.flac" = "";
    "*.wav" = "";
    "*.aac" = "";
    "*.ogg" = "";
    "*.m4a" = "";
    "*.mp2" = "";

    # Movies
    "*.mp4" = "";
    "*.mkv" = "";
    "*.avi" = "";
    "*.mov" = "";
    "*.webm" = "";

    # Images
    "*.jpg" = "";
    "*.jpeg" = "";
    "*.png" = "";
    "*.gif" = "";
    "*.webp" = "";
    "*.avif" = "";
    "*.bmp" = "";
    "*.ico" = "";
    "*.svg" = "";
    "*.xcf" = "";
    "*.HEIC" = "";

    # Programming
    "*.c" = "";
    "*.cpp" = "";
    "*.h" = "";
    "*.hpp" = "";
    "*.rs" = "";
    "*.go" = "";
    "*.py" = "";
    "*.hs" = "";
    "*.js" = "";
    "*.ts" = "";
    "*.tsx" = "";
    "*.jsx" = "";
    "*.rb" = "";
    "*.php" = "";
    "*.java" = "";
    "*.sh" = "";
    "*.fish" = "";
    "*.swift" = "";
    "*.vim" = "";
    "*.lua" = "";
    "*.html" = "";
    "*.css" = "";
    "*.sass" = "";
    "*.scss" = "";
    "*.json" = "";
    "*.toml" = "";
    "*.yml" = "";
    "*.yaml" = "";
    "*.ini" = "";
    "*.conf" = "";
    "*.lock" = "";
    "*.nix" = "";
    Containerfile = "󰡨";
    Dockerfile = "󰡨";

    # Misc
    "*.bin" = "";
    "*.exe" = "";
    "*.pkg" = "";
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/yazi/theme/manager.nix">
{
  programs.yazi.theme.manager = {
    cwd = {fg = "cyan";};

    # Hovered
    hovered = {
      fg = "black";
      bg = "lightblue";
    };

    preview_hovered = {
      fg = "black";
      bg = "lightblue";
    };

    # Find
    find_keyword = {
      fg = "yellow";
      italic = true;
    };
    find_position = {
      fg = "magenta";
      bg = "reset";
      italic = true;
    };

    # Marker
    marker_selected = {
      fg = "lightgreen";
      # bg = "lightgreen";
    };
    marker_copied = {
      fg = "lightyellow";
      # bg = "lightyellow";
    };
    marker_cut = {
      fg = "lightred";
      # bg = "lightred";
    };

    # Tab
    tab_active = {
      fg = "black";
      bg = "lightblue";
    };
    tab_inactive = {
      fg = "white";
      bg = "darkgray";
    };
    tab_width = 1;

    # Border;
    border_symbol = "│";
    border_style = {fg = "gray";};

    # Offset;
    folder_offset = [1 0 1 0];
    preview_offset = [1 1 1 1];

    # Highlighting;
    syntect_theme = "";
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/yazi/theme/status.nix">
{
  programs.yazi.theme.status = {
    separator_open = "█";
    separator_close = "█";
    separator_style = {
      fg = "darkgray";
      bg = "darkgray";
    };

    # Mode;
    mode_normal = {
      fg = "black";
      bg = "lightblue";
      bold = true;
    };
    mode_select = {
      fg = "black";
      bg = "lightgreen";
      bold = true;
    };
    mode_unset = {
      fg = "black";
      bg = "lightmagenta";
      bold = true;
    };

    # Progress;
    progress_label = {bold = true;};
    progress_normal = {
      fg = "blue";
      bg = "black";
    };
    progress_error = {
      fg = "red";
      bg = "black";
    };

    # Permissions;
    permissions_t = {fg = "blue";};
    permissions_r = {fg = "lightyellow";};
    permissions_w = {fg = "lightred";};
    permissions_x = {fg = "lightgreen";};
    permissions_s = {fg = "darkgray";};
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/yazi/default.nix">
{
  config,
  pkgs,
  ...
}: {
  imports = [
    ./theme/icons.nix
    ./theme/manager.nix
    ./theme/status.nix
  ];

  home.packages = [pkgs.exiftool];

  programs.yazi = {
    enable = true;

    enableBashIntegration = config.programs.bash.enable;
    enableZshIntegration = config.programs.zsh.enable;

    settings = {
      manager = {
        layout = [1 4 3];
        sort_by = "alphabetical";
        sort_sensitive = true;
        sort_reverse = false;
        sort_dir_first = true;
        linemode = "none";
        show_hidden = false;
        show_symlink = true;
      };

      preview = {
        tab_size = 2;
        max_width = 600;
        max_height = 900;
        cache_dir = "${config.xdg.cacheHome}/yazi";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/zellij/layouts/system.kdl">
// this is my custom "system" layout, loosely based on the official
// zellij development layout - it's simplified for desktop use
// and allows me to remain in a single workspace even when I'm
// using a tiling window manager and am constrained to a single
// workspace. It provides default tabs for media, file browsing
// which should be everything that I need, but I may add more
// in the future

layout {
	// define default tab layout
    default_tab_template {
		// tab bar on the top
        pane size=1 borderless=true {
            plugin location="zellij:tab-bar"
        }

		// child tabs and panes
		children

		// status bar on the bottom
		pane size=2 borderless=true {
            plugin location="zellij:status-bar"
        }
    }

	// strider tab uses the strider plugin of zellij
	// which is similar to neovim's nvimtree
	// ...but slower and much less configurable
	tab_template name="strider_tab" {
        pane size=1 borderless=true {
            plugin location="zellij:tab-bar"
        }

		// use the strider plugin on the left side of the screen
		// to achieve a nvim-tree like layout on the left 15% of
		// the terminal window - looks cool but is not flexible
        pane split_direction="Vertical" {
            pane size="15%" name="Filetree" {
                plugin location="zellij:strider"
            }
            children
        }

        pane size=2 borderless=true {
            plugin location="zellij:status-bar"
        }
    }

	// define a template pane for the terminal
	// this once again imitates the neovim layout
	// by providing a terminal instance on the bottom
	// 25% of the screen that enters the z shell when
	// zellij starts - the exec duration for zsh matters
	// here as it'll repeat for each "tab" that exists
	pane_template name="term" {
		// horizontal split to place the terminal
		// on the bottom half of the screen like the
		// toggleterm neovim plugin
        pane split_direction="horizontal" {
            children
            pane command="zsh" size="25%" name="Shell"
        }
    }

	// create a "strider tab" for my system configuration
	// which is a tab that utilizes the strider tab template
	// that we have defined earlier, provides a file-tree
	// view in my system config directory, and opens flake.nix
	// with the $EDITOR variable - has focus, is the first tab
	strider_tab name="Nyx" cwd="~dots" focus=true {
        term split_direction="vertical" {
			// FIXME: edit does not open the file from cwd
			// instead opens a buffer named flake.nix in cwd
			// which should be the original flake.nix
			// but is not
            pane edit="./flake.nix" name="Flake"
        }
    }

	// regular vertical tab that will open btop automatically for
	// viewing active processes in a standalone tab
	// more utilities can go here if seen necessary
	tab name="Processes" split_direction="vertical"  {
        pane {
			// open btop in the home directory
			// doesn't really matter where you open it
		    cwd "$HOME"
			command "btop"
		}
    }

	// the media tab opens musikcube, the TUI music player
	// and pulsemixer for volume control across different
	// audio devices - this is split horizontally so that
	// the mixer covers less space on the screen, at the
	// bottom 35% of the active tab
	tab name="Media" split_direction="vertical" {
		// run musikcube in the Music directory
		// the CWD doesn't really matter as musikcube
		// is capable of binding to mpd daemon but
		// the music directory seemed suitable as
		// the working directory for the player
        pane split_direction="horizontal" name="Player" {
            pane {
				cwd "$HOME/Music"
				command "musikcube"
			}
        }

		// standalone pane for pulsemixer
		pane split_direction="horizontal" name="Mixer" {
            pane size="35%" {
				command "pulsemixer"
			}
        }
    }

	// The last tab is a file browser that opens in the home directory
	// so that I may freely browse my files and open them using the XDG
	// specs when yazi can handle the file type.
	tab name="Files" split_direction="horizontal" name="Files" {
        pane {
		    cwd "$HOME"
			command "yazi"
		}
    }
}
</file>

<file path="homes/notashelf/programs/terminal/tools/zellij/default.nix">
{osConfig, ...}: let
  inherit (osConfig.modules.style.colorScheme) slug colors;
in {
  config = {
    programs.zellij = {
      enable = true;
      enableZshIntegration = false; # do NOT auto-start, thank you
      settings = {
        # custom defined layouts
        layout_dir = "${./layouts}";

        # clipboard provider
        copy_command = "wl-copy";

        auto_layouts = true;

        default_layout = "system"; # or compact
        default_mode = "locked";

        on_force_close = "quit";
        pane_frames = true;
        session_serialization = false;

        ui.pane_frames = {
          rounded_corners = true;
          hide_session_name = true;
        };

        # load internal plugins from built-in paths
        plugins = {
          tab-bar.path = "tab-bar";
          status-bar.path = "status-bar";
          strider.path = "strider";
          compact-bar.path = "compact-bar";
        };

        # generate a local colorscheme from the system theming module
        # using the color palette and the slug provided by the module
        # this will ensure consistency, generally, with differing
        # colorschemes
        themes = {
          "${slug}" = with colors; {
            bg = "#${base00}";
            fg = "#${base05}";
            red = "#${base08}";
            green = "#${base0A}";
            blue = "#${base0D}";
            yellow = "#${base06}";
            magenta = "#${base0E}";
            orange = "#${base09}";
            cyan = "#${base0C}";
            black = "#${base00}";
            white = "#${base05}";
          };
        };

        # set theme to Catppuccin Mocha
        theme = "${slug}";
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/bat.nix">
{pkgs, ...}: let
  catppuccin = builtins.readFile (pkgs.fetchurl {
    url = "https://raw.githubusercontent.com/catppuccin/bat/main/Catppuccin-mocha.tmTheme";
    hash = "sha256-qMQNJGZImmjrqzy7IiEkY5IhvPAMZpq0W6skLLsng/w=";
  });
in {
  programs.bat = {
    enable = true;
    themes = {
      Catppuccin-mocha = {
        src = pkgs.fetchFromGitHub {
          owner = "catppuccin";
          repo = "bat";
          rev = "ba4d16880d63e656acced2b7d4e034e4a93f74b1";
          sha256 = "sha256-6WVKQErGdaqb++oaXnY3i6/GuH2FhTgK0v4TN4Y0Wbw=";
        };
        file = "Catppuccin-mocha.tmTheme";
      };
    };
    config = {
      theme = "Catppuccin-mocha";
      pager = "less -FR"; # frfr
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/bottom.nix">
{pkgs, ...}: {
  home.packages = with pkgs; [
    # replace top and htop with bottom
    # if breaks shit? cope.
    (writeScriptBin "htop" ''exec btm'')
    (writeScriptBin "top" ''exec btm'')
  ];
  programs.bottom = {
    enable = true;
    settings = {
      flags.group_processes = true;
      row = [
        {
          ratio = 2;
          child = [
            {type = "cpu";}
            {type = "mem";}
          ];
        }
        {
          ratio = 3;
          child = [
            {
              type = "proc";
              ratio = 1;
              default = true;
            }
          ];
        }
      ];
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/default.nix">
{
  imports = [
    ./bin
    ./fastfetch
    ./git
    ./neomutt
    ./newsboat
    ./vifm
    ./xplr
    ./yazi
    ./zellij

    ./bat.nix
    ./bottom.nix
    ./dircolors.nix
    ./editorconfig.nix
    ./eza.nix
    ./fzf.nix
    ./gh.nix
    ./gpg.nix
    ./man.nix
    ./nix-direnv.nix
    ./nix-index.nix
    ./nix-init.nix
    ./ranger.nix
    ./ripgrep.nix
    ./ssh.nix
    ./tealdeer.nix
    ./thefuck.nix
    ./transient-services.nix
    ./zoxide.nix
  ];
}
</file>

<file path="homes/notashelf/programs/terminal/tools/dircolors.nix">
{
  programs.dircolors = {
    enable = true;
    settings = {
      OTHER_WRITABLE = "30;46";
      ".sh" = "01;32";
      ".csh" = "01;32";
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/editorconfig.nix">
{
  editorconfig = {
    enable = true;
    settings = {
      "*" = {
        charset = "utf-8";
        end_of_line = "lf";
        trim_trailing_whitespace = true;
        insert_final_newline = true;
        max_line_width = 78;
        indent_style = "space";
        indent_size = 2;
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/eza.nix">
{
  programs.eza = {
    enable = true;
    icons = true;
    git = true;
    enableZshIntegration = false;
    extraOptions = [
      "--group-directories-first"
      "--header"
    ];
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/fzf.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (osConfig.modules.style.colorScheme) colors;
in {
  programs.fzf = {
    enable = true;
    defaultCommand = "${lib.getBin pkgs.fd}/bin/fd --type=d --hidden --exclude=.git";
    fileWidgetCommand = "${pkgs.fd}/bin/fd --type f --hidden --exclude=.git";
    defaultOptions = [
      "--layout=reverse" # Top-first.
      "--exact" # Substring matching by default, `'`-quote for subsequence matching.
      "--bind=alt-p:toggle-preview,alt-a:select-all"
      "--multi"
      "--no-mouse"
      "--info=inline"

      # Style and widget layout
      "--ansi"
      "--with-nth=1.."
      "--pointer=' '"
      "--pointer=' '"
      "--header-first"
      "--border=rounded"
    ];

    colors = {
      "preview-bg" = "-1";
      "gutter" = "-1";
      "bg" = "-1";
      "bg+" = "-1";
      "fg" = "#${colors.base04}";
      "fg+" = "#${colors.base06}";
      "hl" = "#${colors.base0D}";
      "hl+" = "#${colors.base0D}";
      "header" = "#${colors.base0D}";
      "info" = "#${colors.base0A}";
      "pointer" = "#${colors.base0C}";
      "marker" = "#${colors.base0C}";
      "prompt" = "#${colors.base0A}";
      "spinner" = "#${colors.base0C}";
      "preview-fg" = "#${colors.base0D}";
    };

    enableZshIntegration = false; # we handle this ourselves
    enableBashIntegration = false; # I don't think I've ever used fzf with bash
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/gh.nix">
{pkgs, ...}: {
  programs.gh = {
    enable = true;
    gitCredentialHelper.enable = false;
    extensions = with pkgs; [
      gh-dash # dashboard with pull requests and issues
      gh-eco # explore the ecosystem
      gh-cal # contributions calender terminal viewer
      gh-poi # clean up local branches safely
    ];
    settings = {
      git_protocol = "ssh";
      prompt = "enabled";
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/gpg.nix">
{
  osConfig,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
  sys = osConfig.modules.system;

  pinentryPkg =
    if sys.video.enable
    then pkgs.pinentry-gnome3 # requires services.dbus.packages = [ pkgs.gcr ]
    else pkgs.pinentry-curses;

  key = sys.programs.git.signingKey;
in {
  services = {
    gpg-agent = {
      enable = true;
      enableScDaemon = true;
      enableSshSupport = true;
      enableExtraSocket = true;
      enableZshIntegration = true;

      pinentryPackage = pinentryPkg;

      defaultCacheTtl = 1209600;
      defaultCacheTtlSsh = 1209600;
      maxCacheTtl = 1209600;
      maxCacheTtlSsh = 1209600;

      extraConfig = ''
        allow-preset-passphrase
      '';
    };
  };

  # Allow manually restarting gpg-agent in case of failure
  systemd.user.services.gpg-agent.Unit.RefuseManualStart = mkForce false;

  programs = {
    gpg = {
      enable = true;

      # Use an xdg-compliant directory for GnuPG. This
      # should generally work, but some programs still try
      # to create ~/.gnupg.
      homedir = "${config.xdg.dataHome}/gnupg";

      settings = {
        # Default/trusted key ID to use (helpful with throw-keyids)
        default-key = key;
        trusted-key = key;

        keyserver = "hkps://keys.openpgp.org";

        # https://github.com/drduh/config/blob/master/gpg.conf
        # https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html
        # https://www.gnupg.org/documentation/manuals/gnupg/GPG-Esoteric-Options.html
        # Use AES256, 192, or 128 as cipher
        personal-cipher-preferences = "AES256 AES192 AES";
        # Use SHA512, 384, or 256 as digest
        personal-digest-preferences = "SHA512 SHA384 SHA256";
        # Use ZLIB, BZIP2, ZIP, or no compression
        personal-compress-preferences = "ZLIB BZIP2 ZIP Uncompressed";
        # Default preferences for new keys
        default-preference-list = "SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed";
        # SHA512 as digest to sign keys
        cert-digest-algo = "SHA512";
        # SHA512 as digest for symmetric ops
        s2k-digest-algo = "SHA512";
        # AES256 as cipher for symmetric ops
        s2k-cipher-algo = "AES256";
        # UTF-8 support for compatibility
        charset = "utf-8";
        # Show Unix timestamps
        fixed-list-mode = "";
        # No comments in messages
        no-comments = "";
        # No version in output
        no-emit-version = "";
        # Disable banner
        no-greeting = "";
        # Long hexadecimal key format
        keyid-format = "0xlong";
        # Display UID validity
        list-options = "show-uid-validity";
        verify-options = "show-uid-validity";
        # Display all keys and their fingerprints
        with-fingerprint = "";
        # Cross-certify subkeys are present and valid
        require-cross-certification = "";
        # Disable caching of passphrase for symmetrical ops
        no-symkey-cache = "";
        # Enable smartcard
        use-agent = "";
        # Output ASCII instead of binary
        armor = "";
        # Disable recipient key ID in messages (breaks Mailvelope)
        throw-keyids = "";
      };

      scdaemonSettings.deny-admin = true;
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/man.nix">
{
  programs.man = {
    enable = true;
    generateCaches = true; # slows down rebuilds
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/nix-direnv.nix">
{pkgs, ...}: {
  home.sessionVariables = {
    DIRENV_LOG_FORMAT = "";
  };

  programs.direnv = {
    enable = true;
    nix-direnv.enable = true;
    stdlib = ''
      : ''${XDG_CACHE_HOME:=$HOME/.cache}
      declare -A direnv_layout_dirs
      direnv_layout_dir() {
          echo "''${direnv_layout_dirs[$PWD]:=$(
              echo -n "$XDG_CACHE_HOME"/direnv/layouts/
              echo -n "$PWD" | ${pkgs.perl}/bin/shasum| cut -d ' ' -f 1
          )}"
      }
    '';

    # we should probably do this ourselves
    enableZshIntegration = true;
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/nix-index.nix">
{inputs, ...}: {
  imports = [inputs.nix-index-db.hmModules.nix-index];

  config = {
    home.sessionVariables = {
      # auto-run programs using nix-index-database
      NIX_AUTO_RUN = "1";
    };

    programs = {
      nix-index-database.comma.enable = true;

      # `command-not-found` relies on nix-channel.
      # Enable and use `nix-index` instead.
      command-not-found.enable = false;
      nix-index = {
        enable = true;

        # link nix-inde database to ~/.cache/nix-index
        symlinkToCacheHome = true;
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/nix-init.nix">
{pkgs, ...}: let
  toTOML = name: (pkgs.formats.toml {}).generate "${name}";
in {
  config = {
    home.packages = [pkgs.nix-init];

    xdg.configFile."nix-init/config.toml".source = toTOML "config.toml" {
      commit = true;
      maintainers = ["NotAShelf"];
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/ranger.nix">
{
  pkgs,
  lib,
  osConfig,
  config,
  ...
}: let
  device = osConfig.modules.device;
  # TODO: maybe not have a TUI file manager on desktops, when GUI does it better
  acceptedTypes = ["laptop" "desktop" "hybrid" "server" "lite"];
  inherit (lib.strings) optionalString;
in {
  config = lib.mkIf (builtins.elem device.type acceptedTypes) {
    home.packages = with pkgs; [
      ranger
    ];

    # TODO: more file preview methods
    xdg.configFile."ranger/rc.conf".text = ''
      set preview_images true
      ${(optionalString config.programs.kitty.enable "set preview_images_method kitty")}
    '';
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/ripgrep.nix">
{
  programs.ripgrep = {
    enable = true;

    # <https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file>
    arguments = [
      # Don't have ripgrep vomit a bunch of stuff on the screen
      # show a preview of the match
      "--max-columns=150"
      "--max-columns-preview"

      # ignore git files
      "--glob=!.git/*"

      #
      "--smart-case"
    ];
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/ssh.nix">
{
  programs = {
    ssh = {
      enable = true;
      hashKnownHosts = true;
      compression = true;
      matchBlocks = let
        commonIdFile = "~/.ssh/id_ed25519";
      in {
        "aur" = {
          hostname = "aur.archlinux.org";
          identityFile = "~/.ssh/aur";
        };

        "builder" = {
          hostname = "build.neushore.dev";
          user = "builder";
          identityFile = "~/.ssh/builder";
          port = 30;
        };

        "helios" = {
          port = 30;
        };

        "enyo" = {
          port = 30;
        };

        "hermes" = {
          port = 30;
        };

        "epimetheus" = {
          port = 30;
        };

        "icarus" = {
          port = 30;
        };

        "nix-builder" = {
          hostname = "helios";
          user = "nix-builder";
          identityFile = "~/.ssh/builder";
        };

        "frozendev" = {
          hostname = "frzn.dev";
          user = "raf";
          identityFile = "~/.ssh/id_rsa";
        };

        "github" = {
          hostname = "github.com";
          identityFile = "~/.ssh/github_rsa";
        };

        "neushore" = {
          hostname = "ssh.neushore.dev";
          user = "raf";
          identityFile = "~/.ssh/neushore";
          port = 30;
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/tealdeer.nix">
{
  programs = {
    tealdeer = {
      enable = false;
      settings = {
        display = {
          compact = false;
          use_pager = true;
        };

        updates = {
          auto_update = false;
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/thefuck.nix">
{pkgs, ...}: {
  # type "fuck" to fix the last command that made you go "fuck"
  programs.thefuck = {
    enable = false;
    package = pkgs.thefuck.overridePythonAttrs {doCheck = false;};
  };
}
</file>

<file path="homes/notashelf/programs/terminal/tools/transient-services.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.strings) optionalString concatStringsSep;
  inherit (lib.attrsets) mapAttrsToList;

  sessionPath = optionalString (config.home.sessionPath != []) ''
    export PATH=${concatStringsSep ":" config.home.sessionPath}:$PATH
  '';

  sessionVariables = concatStringsSep "\n" (mapAttrsToList (key: value: ''
      export ${key}="${toString value}"
    '')
    config.home.sessionVariables);

  apply-hm-env = pkgs.writeShellScript "apply-hm-env" ''
    ${sessionPath}
    ${sessionVariables}
    ${config.home.sessionVariablesExtra}
    exec "$@"
  '';

  # runs processes as systemd transient services
  run-as-service = pkgs.writeShellScriptBin "run-as-service" ''
    exec ${pkgs.systemd}/bin/systemd-run \
      --slice=app-manual.slice \
      --property=ExitType=cgroup \
      --user \
      --wait \
      bash -lc "exec ${apply-hm-env} $@"
  '';
in {
  home.packages = [run-as-service];
}
</file>

<file path="homes/notashelf/programs/terminal/tools/zoxide.nix">
{
  programs.zoxide = {
    enable = true;
    options = ["--cmd cd"];
  };
}
</file>

<file path="homes/notashelf/programs/terminal/default.nix">
{
  imports = [
    ./editors
    ./emulators
    ./shell
    ./tools
  ];
}
</file>

<file path="homes/notashelf/programs/default.nix">
{
  imports = [
    ./graphical
    ./media
    ./terminal
  ];
}
</file>

<file path="homes/notashelf/services/shared/dunst/assets/brightness.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#95AEC7" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <circle cx="12" cy="12" r="4"></circle>
  <path d="M12 2v2"></path>
  <path d="M12 20v2"></path>
  <path d="m4.93 4.93 1.41 1.41"></path>
  <path d="m17.66 17.66 1.41 1.41"></path>
  <path d="M2 12h2"></path>
  <path d="M20 12h2"></path>
  <path d="m6.34 17.66-1.41 1.41"></path>
  <path d="m19.07 4.93-1.41 1.41"></path>

</svg>
</file>

<file path="homes/notashelf/services/shared/dunst/assets/mic-mute.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#95AEC7" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-mic-off"><line x1="1" y1="1" x2="23" y2="23"></line><path d="M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"></path><path d="M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"></path><line x1="12" y1="19" x2="12" y2="23"></line><line x1="8" y1="23" x2="16" y2="23"></line></svg>
</file>

<file path="homes/notashelf/services/shared/dunst/assets/mic.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#95AEC7" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-mic"><path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path><path d="M19 10v2a7 7 0 0 1-14 0v-2"></path><line x1="12" y1="19" x2="12" y2="23"></line><line x1="8" y1="23" x2="16" y2="23"></line></svg>
</file>

<file path="homes/notashelf/services/shared/dunst/assets/notification.svg">
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   width="192"
   height="192"
   fill="#616e88"
   viewBox="0 0 256 256"
   version="1.1"
   id="svg891"
   sodipodi:docname="notification.svg"
   inkscape:version="1.1.1 (3bf5ae0d25, 2021-09-20)"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <defs
     id="defs895" />
  <sodipodi:namedview
     id="namedview893"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     showgrid="false"
     inkscape:zoom="1.4375"
     inkscape:cx="95.652174"
     inkscape:cy="75.826087"
     inkscape:window-width="1366"
     inkscape:window-height="728"
     inkscape:window-x="0"
     inkscape:window-y="40"
     inkscape:window-maximized="1"
     inkscape:current-layer="svg891" />
  <g
     id="g979"
     transform="matrix(0.66642001,0,0,0.66847835,45.341226,50.623186)">
    <path
       d="m 208,128 v 80 a 8,8 0 0 1 -8,8 H 48 a 8,8 0 0 1 -8,-8 V 56 a 8,8 0 0 1 8,-8 h 80"
       fill="none"
       stroke="#616e88"
       stroke-linecap="round"
       stroke-linejoin="round"
       stroke-width="16"
       id="path887" />
    <circle
       cx="196"
       cy="60"
       r="28"
       fill="none"
       stroke="#616e88"
       stroke-linecap="round"
       stroke-linejoin="round"
       stroke-width="16"
       id="circle889" />
  </g>
</svg>
</file>

<file path="homes/notashelf/services/shared/dunst/assets/volume-mute.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#95AEC7" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-volume-x"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><line x1="23" y1="9" x2="17" y2="15"></line><line x1="17" y1="9" x2="23" y2="15"></line></svg>
</file>

<file path="homes/notashelf/services/shared/dunst/assets/volume.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#95AEC7" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-volume-2"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path></svg>
</file>

<file path="homes/notashelf/services/shared/dunst/default.nix">
{
  osConfig,
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) modules;
  inherit (modules.style.colorScheme) colors;

  dev = modules.device;
  acceptedTypes = ["desktop" "laptop" "lite" "hybrid"];
in {
  config = mkIf (builtins.elem dev.type acceptedTypes) {
    services.dunst = {
      enable = true;
      iconTheme = {
        package = config.gtk.iconTheme.package;
        name = "Papirus-Dark";
      };

      settings = {
        global = {
          follow = "mouse";
          width = 320;
          height = 280;
          origin = "top-center";
          alignment = "left";
          vertical_alignment = "center";
          ellipsize = "middle";
          offset = "17x17";
          padding = 15;
          horizontal_padding = 15;
          text_icon_padding = 15;
          icon_position = "left";
          min_icon_size = 48;
          max_icon_size = 64;
          progress_bar = true;
          progress_bar_height = 8;
          progress_bar_frame_width = 1;
          progress_bar_min_width = 150;
          progress_bar_max_width = 300;
          separator_height = 2;
          frame_width = 2;
          frame_color = "#${colors.base0E}";
          separator_color = "frame";
          corner_radius = 8;
          transparency = 0;
          gap_size = 8;
          line_height = 0;
          notification_limit = 3;
          idle_threshold = 120;
          history_length = 20;
          show_age_threshold = 60;
          markup = "full";
          font = "Iosevka 16";
          word_wrap = "yes";
          sort = "yes";
          shrink = "no";
          indicate_hidden = "yes";
          sticky_history = "yes";
          ignore_newline = "no";
          show_indicators = "no";
          stack_duplicates = true;
          always_run_script = true;
          hide_duplicate_count = false;
          ignore_dbusclose = false;
          force_xwayland = false;
          force_xinerama = false;
          mouse_left_click = "do_action";
          mouse_middle_click = "close_all";
          mouse_right_click = "close_current";
        };

        fullscreen_delay_everything = {fullscreen = "delay";};

        urgency_low = {
          timeout = 3;
          background = "#${colors.base02}";
          foreground = "#${colors.base05}";
          highlight = "#${colors.base0C}";
        };

        urgency_normal = {
          timeout = 7;
          background = "#${colors.base02}";
          foreground = "#${colors.base05}";
          highlight = "#${colors.base0C}";
        };

        urgency_critical = {
          timeout = 0;
          background = "#${colors.base02}";
          foreground = "#${colors.base05}";
          highlight = "#${colors.base08}";
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/services/shared/media/easyeffects/default.nix">
{
  osConfig,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  dev = osConfig.modules.device;
  acceptedTypes = ["desktop" "laptop" "lite" "hybrid"];
in {
  config = mkIf (builtins.elem dev.type acceptedTypes) {
    services.easyeffects = {
      enable = true;
      preset = "quiet";
    };

    xdg.configFile."easyeffects/output/quiet.json".source = ./quiet.json;
  };
}
</file>

<file path="homes/notashelf/services/shared/media/easyeffects/quiet.json">
{
	"output": {
		"blocklist": ["mpd", "mpd.pipewire"],
		"compressor#0": {
			"attack": 19.969999999999995,
			"boost-amount": 6.0,
			"boost-threshold": -72.0,
			"bypass": false,
			"dry": -100.0,
			"hpf-frequency": 10.0,
			"hpf-mode": "off",
			"input-gain": 14.9,
			"knee": -6.499999999999998,
			"lpf-frequency": 20000.0,
			"lpf-mode": "off",
			"makeup": 0.0,
			"mode": "Upward",
			"output-gain": -8.3,
			"ratio": 3.9400000000000013,
			"release": 100.0,
			"release-threshold": -100.0,
			"sidechain": {
				"lookahead": 0.0,
				"mode": "RMS",
				"preamp": 0.0,
				"reactivity": 10.0,
				"source": "Middle",
				"type": "Feed-forward"
			},
			"threshold": -12.0,
			"wet": 0.0
		},
		"multiband_compressor#0": {
			"band0": {
				"attack-threshold": -12.0,
				"attack-time": 20.0,
				"boost-amount": 6.0,
				"boost-threshold": -72.0,
				"compression-mode": "Downward",
				"compressor-enable": true,
				"external-sidechain": false,
				"knee": -6.0,
				"makeup": 0.0,
				"mute": false,
				"ratio": 1.0,
				"release-threshold": -100.0,
				"release-time": 100.0,
				"sidechain-custom-highcut-filter": false,
				"sidechain-custom-lowcut-filter": false,
				"sidechain-highcut-frequency": 500.0,
				"sidechain-lookahead": 0.0,
				"sidechain-lowcut-frequency": 10.0,
				"sidechain-mode": "RMS",
				"sidechain-preamp": 0.0,
				"sidechain-reactivity": 10.0,
				"sidechain-source": "Middle",
				"solo": false
			},
			"band1": {
				"attack-threshold": -12.0,
				"attack-time": 20.0,
				"boost-amount": 6.0,
				"boost-threshold": -72.0,
				"compression-mode": "Downward",
				"compressor-enable": true,
				"enable-band": true,
				"external-sidechain": false,
				"knee": -6.0,
				"makeup": 0.0,
				"mute": false,
				"ratio": 1.0,
				"release-threshold": -100.0,
				"release-time": 100.0,
				"sidechain-custom-highcut-filter": false,
				"sidechain-custom-lowcut-filter": false,
				"sidechain-highcut-frequency": 1000.0,
				"sidechain-lookahead": 0.0,
				"sidechain-lowcut-frequency": 500.0,
				"sidechain-mode": "RMS",
				"sidechain-preamp": 0.0,
				"sidechain-reactivity": 10.0,
				"sidechain-source": "Middle",
				"solo": false,
				"split-frequency": 500.0
			},
			"band2": {
				"attack-threshold": -12.0,
				"attack-time": 20.0,
				"boost-amount": 6.0,
				"boost-threshold": -72.0,
				"compression-mode": "Downward",
				"compressor-enable": true,
				"enable-band": true,
				"external-sidechain": false,
				"knee": -6.0,
				"makeup": 0.0,
				"mute": false,
				"ratio": 1.0,
				"release-threshold": -100.0,
				"release-time": 100.0,
				"sidechain-custom-highcut-filter": false,
				"sidechain-custom-lowcut-filter": false,
				"sidechain-highcut-frequency": 2000.0,
				"sidechain-lookahead": 0.0,
				"sidechain-lowcut-frequency": 1000.0,
				"sidechain-mode": "RMS",
				"sidechain-preamp": 0.0,
				"sidechain-reactivity": 10.0,
				"sidechain-source": "Middle",
				"solo": false,
				"split-frequency": 1000.0
			},
			"band3": {
				"attack-threshold": -12.0,
				"attack-time": 20.0,
				"boost-amount": 6.0,
				"boost-threshold": -72.0,
				"compression-mode": "Downward",
				"compressor-enable": true,
				"enable-band": true,
				"external-sidechain": false,
				"knee": -6.0,
				"makeup": 0.0,
				"mute": false,
				"ratio": 1.0,
				"release-threshold": -100.0,
				"release-time": 100.0,
				"sidechain-custom-highcut-filter": false,
				"sidechain-custom-lowcut-filter": false,
				"sidechain-highcut-frequency": 4000.0,
				"sidechain-lookahead": 0.0,
				"sidechain-lowcut-frequency": 2000.0,
				"sidechain-mode": "RMS",
				"sidechain-preamp": 0.0,
				"sidechain-reactivity": 10.0,
				"sidechain-source": "Middle",
				"solo": false,
				"split-frequency": 2000.0
			},
			"band4": {
				"attack-threshold": -12.0,
				"attack-time": 20.0,
				"boost-amount": 6.0,
				"boost-threshold": -72.0,
				"compression-mode": "Downward",
				"compressor-enable": true,
				"enable-band": false,
				"external-sidechain": false,
				"knee": -6.0,
				"makeup": 0.0,
				"mute": false,
				"ratio": 1.0,
				"release-threshold": -100.0,
				"release-time": 100.0,
				"sidechain-custom-highcut-filter": false,
				"sidechain-custom-lowcut-filter": false,
				"sidechain-highcut-frequency": 8000.0,
				"sidechain-lookahead": 0.0,
				"sidechain-lowcut-frequency": 4000.0,
				"sidechain-mode": "RMS",
				"sidechain-preamp": 0.0,
				"sidechain-reactivity": 10.0,
				"sidechain-source": "Middle",
				"solo": false,
				"split-frequency": 4000.0
			},
			"band5": {
				"attack-threshold": -12.0,
				"attack-time": 20.0,
				"boost-amount": 6.0,
				"boost-threshold": -72.0,
				"compression-mode": "Downward",
				"compressor-enable": true,
				"enable-band": false,
				"external-sidechain": false,
				"knee": -6.0,
				"makeup": 0.0,
				"mute": false,
				"ratio": 1.0,
				"release-threshold": -100.0,
				"release-time": 100.0,
				"sidechain-custom-highcut-filter": false,
				"sidechain-custom-lowcut-filter": false,
				"sidechain-highcut-frequency": 12000.0,
				"sidechain-lookahead": 0.0,
				"sidechain-lowcut-frequency": 8000.0,
				"sidechain-mode": "RMS",
				"sidechain-preamp": 0.0,
				"sidechain-reactivity": 10.0,
				"sidechain-source": "Middle",
				"solo": false,
				"split-frequency": 8000.0
			},
			"band6": {
				"attack-threshold": -12.0,
				"attack-time": 20.0,
				"boost-amount": 6.0,
				"boost-threshold": -72.0,
				"compression-mode": "Downward",
				"compressor-enable": true,
				"enable-band": false,
				"external-sidechain": false,
				"knee": -6.0,
				"makeup": 0.0,
				"mute": false,
				"ratio": 1.0,
				"release-threshold": -100.0,
				"release-time": 100.0,
				"sidechain-custom-highcut-filter": false,
				"sidechain-custom-lowcut-filter": false,
				"sidechain-highcut-frequency": 16000.0,
				"sidechain-lookahead": 0.0,
				"sidechain-lowcut-frequency": 12000.0,
				"sidechain-mode": "RMS",
				"sidechain-preamp": 0.0,
				"sidechain-reactivity": 10.0,
				"sidechain-source": "Middle",
				"solo": false,
				"split-frequency": 12000.0
			},
			"band7": {
				"attack-threshold": -12.0,
				"attack-time": 20.0,
				"boost-amount": 6.0,
				"boost-threshold": -72.0,
				"compression-mode": "Downward",
				"compressor-enable": true,
				"enable-band": false,
				"external-sidechain": false,
				"knee": -6.0,
				"makeup": 0.0,
				"mute": false,
				"ratio": 1.0,
				"release-threshold": -100.0,
				"release-time": 100.0,
				"sidechain-custom-highcut-filter": false,
				"sidechain-custom-lowcut-filter": false,
				"sidechain-highcut-frequency": 20000.0,
				"sidechain-lookahead": 0.0,
				"sidechain-lowcut-frequency": 16000.0,
				"sidechain-mode": "RMS",
				"sidechain-preamp": 0.0,
				"sidechain-reactivity": 10.0,
				"sidechain-source": "Middle",
				"solo": false,
				"split-frequency": 16000.0
			},
			"bypass": true,
			"compressor-mode": "Modern",
			"dry": -100.0,
			"envelope-boost": "None",
			"input-gain": 19.2,
			"output-gain": -0.8,
			"wet": 0.0
		},
		"plugins_order": ["multiband_compressor#0", "compressor#0"]
	}
}
</file>

<file path="homes/notashelf/services/shared/media/mpd/default.nix">
{
  osConfig,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (osConfig) modules;

  env = modules.usrEnv;
  srv = env.services;
in {
  config = mkIf srv.media.mpd.enable {
    home.packages = with pkgs; [
      playerctl # CLI interface for playerctld
      mpc_cli # CLI interface for mpd
      cava # CLI music visualizer (cavalier is a gui alternative)
    ];

    services = {
      playerctld.enable = true;
      mpris-proxy.enable = true;
      mpd-mpris.enable = true;

      # music player daemon service
      mpd = {
        enable = true;
        musicDirectory = "${config.home.homeDirectory}/Media/Music";
        network = {
          startWhenNeeded = true;
          listenAddress = "127.0.0.1";
          port = 6600;
        };

        extraConfig = ''
          auto_update           "yes"
          volume_normalization  "yes"
          restore_paused        "yes"
          filesystem_charset    "UTF-8"

          audio_output {
            type                "pipewire"
            name                "PipeWire"
          }

          audio_output {
            type                "fifo"
            name                "Visualiser"
            path                "/tmp/mpd.fifo"
            format              "44100:16:2"
          }

          audio_output {
           type		              "httpd"
           name		              "lossless"
           encoder		          "flac"
           port		              "8000"
           max_clients	        "8"
           mixer_type	          "software"
           format		            "44100:16:2"
          }
        '';
      };

      # MPRIS 2 support to mpd
      mpdris2 = {
        enable = true;
        notifications = true;
        multimediaKeys = true;
        mpd = {
          # for some reason config.xdg.userDirs.music is not a "path" - possibly because it has $HOME in its name?
          inherit (config.services.mpd) musicDirectory;
        };
      };

      # discord rich presence for mpd
      mpd-discord-rpc = {
        enable = true;
        settings = {
          format = {
            details = "$title";
            state = "On $album by $artist";
            large_text = "$album";
            small_image = "";
          };
        };
      };
    };

    programs = {
      /*
      # yams service
      # TODO: figure out a way to provide the lastfm authentication declaratively

      systemd.user.services.yams = {
        Unit = {
          Description = "Last.FM scrobbler for MPD";
          After = ["mpd.service"];
        };
        Service = {
          ExecStart = "${pkgs.yams}/bin/yams -N";
          Environment = "NON_INTERACTIVE=1";
          Restart = "always";
        };
        Install.WantedBy = ["default.target"];
      };
      */
    };
  };
}
</file>

<file path="homes/notashelf/services/shared/media/default.nix">
{
  imports = [
    ./easyeffects
    ./mpd

    ./noisetorch.nix
    ./spotifyd.nix
  ];
}
</file>

<file path="homes/notashelf/services/shared/media/noisetorch.nix">
{
  osConfig,
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf mkEnableOption mkOption literalExpression types;

  cfg = config.services.noisetorch;

  dev = osConfig.modules.device;

  acceptedTypes = ["desktop" "laptop" "lite" "hybrid"];
in {
  options = {
    services.noisetorch = {
      enable = mkEnableOption "noisetorch service";
      package = mkOption {
        type = types.package;
        default = pkgs.noisetorch;
        defaultText = literalExpression "pkgs.noisetorch";
        description = "Which package to use for noisetorch";
      };
      threshold = mkOption {
        type = types.int;
        default = -1;
        description = "Voice activation threshold (default -1)";
      };
      device = mkOption {
        type = types.str;
        description = "Use the specified source/sink device ID";
      };
      deviceUnit = mkOption {
        type = types.str;
        description = "Systemd device unit which is providing the audio device";
      };
    };
  };

  config = mkIf (cfg.enable && builtins.elem dev.type acceptedTypes) {
    home.packages = [cfg.package];

    systemd.user.services.noisetorch = {
      Unit = {
        Description = "Noisetorch Noise Cancelling";
        Requires = "${cfg.deviceUnit}";
        After = "${cfg.deviceUnit}";
      };
      Install = {
        WantedBy = ["default.target"];
      };
      Service = {
        Type = "simple";
        RemainAfterExit = "yes";
        ExecStart = "${cfg.package}/bin/noisetorch -i -s ${cfg.device} -t ${builtins.toString cfg.threshold}";
        ExecStop = "${cfg.package}/bin/noisetorch -u";
        Restart = "on-failure";
        RestartSec = 3;
        Nice = -10;
      };
    };
  };
}
</file>

<file path="homes/notashelf/services/shared/media/spotifyd.nix">
{
  osConfig,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  dev = osConfig.modules.device;

  credientals = {
    password_cmd = "${pkgs.coreutils}/bin/tail -1 /run/agenix/spotify";
    username_cmd = "${pkgs.coreutils}/bin/head -1 /run/agenix/spotify";
  };

  acceptedTypes = ["desktop" "laptop" "lite" "hybrid"];
in {
  config = mkIf (builtins.elem dev.type acceptedTypes) {
    services = {
      spotifyd = {
        enable = false;
        package = pkgs.spotifyd.override {withMpris = true;};
        settings.global = {
          inherit (credientals) password_cmd username_cmd;
          cache_path = "${config.xdg.cacheHome}/spotifyd";
          device_type = "computer";
          use_mpris = true;
          autoplay = true;

          # audio settings
          volume_normalisation = true;
          backend = "pulseaudio";
          bitrate = 320;
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/services/shared/default.nix">
{
  imports = [
    ./dunst
    ./media

    ./kdeconnect.nix
    ./mail.nix
    ./nextcloud.nix
    ./transience.nix
    ./tray.nix
    ./udiskie.nix
  ];
}
</file>

<file path="homes/notashelf/services/shared/kdeconnect.nix">
{
  services.kdeconnect = {
    enable = false;
    indicator = true;
  };
}
</file>

<file path="homes/notashelf/services/shared/mail.nix">
{
  osConfig,
  config,
  pkgs,
  ...
}: {
  config = let
    extraMailboxes = ["Archive" "Drafts" "Junk" "Sent" "Trash"];
  in {
    accounts.email = {
      maildirBasePath = config.xdg.userDirs.extraConfig.XDG_MAIL_DIR;
      accounts = {
        notashelf = let
          gpgKey = "0xBA46BCC36E912922";
          name = "NotAShelf";
        in {
          primary = true;
          address = "raf@notashelf.dev";
          aliases = ["me@notashelf.dev"];
          userName = "raf@notashelf.dev";
          realName = name; # very real, I know
          passwordCommand = ''
            # this is a really bad way of getting the password
            # but home-manager does not provide a passwordFile option
            tail ${osConfig.age.secrets.client-email.path} -n 1
          '';

          signature = {
            showSignature = "append";
            text = ''
              --
              ${name}

              Want to use GPG encryption with me? Try my GPG key:
              [${gpgKey}](https://github.com/notashelf.gpg)
            '';
          };

          folders = {
            inbox = "Inbox";
            drafts = "Drafts";
            sent = "Sent";
            trash = "Trash";
          };

          imap = {
            host = "notashelf.dev";
            tls.enable = true;
          };

          smtp = {
            host = "notashelf.dev";
            tls.enable = true;
          };

          gpg = {
            key = gpgKey;
            signByDefault = true;
          };

          msmtp.enable = true;
          mbsync = {
            enable = true;
            create = "maildir"; # funny as it is, this is not a path - it's an instruction
            expunge = "both";
          };

          neomutt = {
            enable = true;
            inherit extraMailboxes;
          };
        };
      };
    };

    systemd.user = {
      timers."mbsync" = {
        Unit.Description = "Automatic mbsync synchronization";
        Timer = {
          OnBootSec = "30";
          OnUnitActiveSec = "5m";
        };
        Install.WantedBy = ["timers.target"];
      };

      services."genFolders" = {
        Unit.Description = "Generate folders for email accounts";
        Install.WantedBy = ["multi-user.target"];
        Service = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStart = let
            script = pkgs.writeShellApplication {
              name = "genFolders";
              text = ''
                # move to the current user's home directory
                # FIXME: pretty sure this can also be set as the service's runtime dir
                cd "${config.home.homeDirectory}/Mail"

                # iterate over dirs and create those that do not exist
                for dir in ${toString extraMailboxes}; do
                  if [ ! -d "$dir" ]; then
                    echo -en "$dir does not exist, creating...\n";
                    mkdir "$dir"
                    echo "Done creating $dir"
                  fi
                done
              '';
            };
          in "${script}/bin/genFolders";

          # set runtime dir to the current user's home directory
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/services/shared/nextcloud.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) elem;
  inherit (lib) mkGraphicalService;
  inherit (lib.modules) mkIf;

  inherit (osConfig) meta modules;
  dev = modules.device;
  sys = modules.system;

  acceptedTypes = ["desktop" "laptop" "lite" "hybrid"];
in {
  config = mkIf ((elem dev.type acceptedTypes) && (sys.video.enable && meta.isWayland)) {
    /*
    services = {
      nextcloud-client.enable = true;
      nextcloud-client.startInBackground = true;
    };
    */

    home.packages = [pkgs.nextcloud-client];
    systemd.user.services.nextcloud = mkGraphicalService {
      Unit.Description = "Nextcloud client service";
      Service = {
        ExecStart = "${pkgs.nextcloud-client}/bin/nextcloud --background";
        Restart = "always";
        Slice = "background.slice";
      };
    };
  };
}
</file>

<file path="homes/notashelf/services/shared/transience.nix">
{
  osConfig,
  self,
  ...
}: let
  sys = osConfig.modules.system;
in {
  imports = [self.homeManagerModules.transience];
  services.transience = {
    enable = false;
    directories = [];
    user = sys.mainUser;
  };
}
</file>

<file path="homes/notashelf/services/shared/tray.nix">
{
  osConfig,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  env = osConfig.modules.usrEnv;
in {
  # If desktop is not set, then assume tray is not necessary.
  config = mkIf (env.desktop != "") {
    # fake a tray to let apps start
    # https://github.com/nix-community/home-manager/issues/2064
    systemd.user.targets.tray = {
      Unit = {
        Description = "Home Manager System Tray";
        Requires = ["graphical-session-pre.target"];
      };
    };
  };
}
</file>

<file path="homes/notashelf/services/shared/udiskie.nix">
{
  services.udiskie.enable = true;
}
</file>

<file path="homes/notashelf/services/wayland/ags/bin/bash/hyprctl_swallow">
#!/usr/bin/env bash
# vim: syntax=bash

notifySend="notify-send"

getSwallowStatus() {
    output=$(hyprctl getoption misc:enable_swallow)
    if [[ $output == *"int: 1"* ]]; then
        status=false
    else
        status=true
    fi
    echo "{\"status\": $status}"
}

switchSwallowStatus() {
    enable=$1
    if [ "$enable" = true ]; then
        statusMsg="Turned on swallowing"
        keyword="true"
    else
        statusMsg="Turned off swallowing"
        keyword="false"
    fi
    hyprctl keyword misc:enable_swallow $keyword
    $notifySend "Hyprland" "$statusMsg"
}

if [ $# -gt 0 ] && [ "${1}" = "query" ]; then
    getSwallowStatus
    exit 0
fi

output=$(hyprctl getoption misc:enable_swallow)

if [[ $output == *"int: 1"* ]]; then
    switchSwallowStatus false
else
    switchSwallowStatus true
fi
</file>

<file path="homes/notashelf/services/wayland/ags/bin/bash/move_window">
#!/usr/bin/env bash
# vim: syntax=bash

move_window() {
    local position="$1"
    local size="$2"

    if [[ -z "$position" || -z "$size" ]]; then
        echo "Error: Both position and size are required." 1>&2
        exit 1
    fi

    hyprctl --batch "dispatch moveactive exact ${position//,/ }; dispatch resizeactive exact ${size//x/ }"
}

if [[ $# -ne 2 ]]; then
    echo "Usage: $0 <position> <size>"
    exit 1
fi

move_window "$1" "$2"
</file>

<file path="homes/notashelf/services/wayland/ags/bin/bash/open_window">
#!/usr/bin/env bash
# vim: syntax=bash

open_window() {
	local position="$1"
	local size="$2"
	local command="$3"

	# Validate input
	if [[ -z "$position" || -z "$size" || -z "$command" ]]; then
		echo "Error: Position, size, and command are required." 1>&2
		exit 1
	fi

	hyprctl dispatch exec "[float; move ${position//,/ }; size ${size//x/ }] $command"
}

if [[ $# -ne 3 ]]; then
	echo "Usage: $0 <position> <size> <command>"
	exit 1
fi

open_window "$1" "$2" "$3"
</file>

<file path="homes/notashelf/services/wayland/ags/bin/python/weather">
#!/usr/bin/env python
# vim: syntax=python

import os
import json
import requests
import logging
from datetime import datetime, timedelta

logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

CACHE_EXPIRATION = 60
XDG_CACHE_HOME = os.getenv("XDG_CACHE_HOME", os.path.expanduser("~/.cache"))
CACHE_DIR = os.path.join(XDG_CACHE_HOME, "zephyr")
FALLBACK_CACHE_DIR = "/tmp"
CACHE_FILE = os.path.join(CACHE_DIR, "zephyr_cache.json")

SUNNY = "\udb81\udda8"
CLOUDY = "\ue312"
RAIN = "\ue318"
SNOW = "\ue31a"
THUNDERSTORM = "\ue31d"
PARTLY_CLOUDY = "\ue302"
CLEAR = "\ue30d"

HOURS_AGO_THRESHOLD = 2
TEMP_THRESHOLD_COLD = 10
TEMP_THRESHOLD_HOT = 0


def ensure_cache_directory():
    try:
        if not os.path.exists(CACHE_DIR):
            os.makedirs(CACHE_DIR, exist_ok=True)
    except Exception as e:
        logger.error(f"Error creating cache directory: {e}")


def get_weather_data():
    ensure_cache_directory()
    try:
        response = requests.get("https://wttr.in/?format=j1")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching weather data: {e}")
        return None


def get_cached_weather_data():
    try:
        if os.path.exists(CACHE_FILE):
            with open(CACHE_FILE, "r") as cache_file:
                cached_data = json.load(cache_file)
                cache_time = datetime.strptime(
                    cached_data["timestamp"], "%Y-%m-%d %H:%M:%S"
                )
                if datetime.now() - cache_time < timedelta(minutes=CACHE_EXPIRATION):
                    return cached_data["data"]
    except Exception as e:
        logger.error(f"Error loading cached data: {e}")
    return None


def cache_weather_data(data):
    try:
        with open(CACHE_FILE, "w") as cache_file:
            cached_data = {
                "data": data,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            }
            json.dump(cached_data, cache_file)
    except Exception as e:
        logger.error(f"Error caching data: {e}")


def format_time(time):
    return time.replace("00", "").zfill(2)


def format_temp(temp):
    return f" {temp}°".ljust(4)


def get_emoji_for_condition(condition):
    emoji_map = {
        "Sunny": SUNNY,
        "Partly cloudy": PARTLY_CLOUDY,
        "Overcast": CLOUDY,
        "Patchy rain nearby": RAIN,
        "Clear": CLEAR,
        "Fog": "\ue313",
        "Frost": "\udb83\udf29",
        "Thunder": THUNDERSTORM,
        "Snow": SNOW,
        "Windy": "\u27A7",
        "Mist": "\u2601",
        "Drizzle": "\u2601",
        "Heavy rain": "\u2614",
        "Sleet": "\u2744",
        "Wintry mix": "\u2744",
        "Clear/Sunny": CLEAR,
        "Clear/Mostly clear": CLEAR,
        "Clear/Mostly clear (night)": CLEAR,
        "Drizzle (night)": "\u2601",
    }
    return emoji_map.get(condition, "")


def format_conditions(hour):
    condition_probabilities = {
        "chanceoffog": "Fog",
        "chanceoffrost": "Frost",
        "chanceofovercast": "Overcast",
        "chanceofrain": "Rain",
        "chanceofsnow": "Snow",
        "chanceofsunshine": "Sunshine",
        "chanceofthunder": "Thunder",
        "chanceofwindy": "Wind",
    }
    if "chanceofpartlycloudy" in hour:
        condition_probabilities["chanceofpartlycloudy"] = "Partly Cloudy"
    conditions = []
    for event, description in condition_probabilities.items():
        if event in hour:
            probability = int(hour[event])
            if probability > 0:
                emoji = get_emoji_for_condition(description)
                conditions.append(f"{emoji} {description} {probability}%")
    return ", ".join(conditions)


def format_weather_data(weather_data):
    current_condition = weather_data["current_condition"][0]
    temp = int(current_condition["FeelsLikeC"])
    temp_sign = "+" if TEMP_THRESHOLD_HOT > temp > TEMP_THRESHOLD_COLD else ""
    formatted_data = {
        "text": f" {SUNNY} \n {temp_sign}{temp}°",
        "tooltip": f"{current_condition['weatherDesc'][0]['value']} {current_condition['temp_C']}°\n"
        f"Feels like: {current_condition['FeelsLikeC']}°\n"
        f"Wind: {current_condition['windspeedKmph']}Km/h\n"
        f"Humidity: {current_condition['humidity']}%\n",
    }
    for i, day in enumerate(weather_data["weather"]):
        formatted_data["tooltip"] += f"\n"
        if i == 0:
            formatted_data["tooltip"] += "Today, "
        if i == 1:
            formatted_data["tooltip"] += "Tomorrow, "
        formatted_data["tooltip"] += f"{day['date']}\n"
        formatted_data["tooltip"] += f"⬆️ {day['maxtempC']}° ⬇️ {day['mintempC']}° "
        formatted_data[
            "tooltip"
        ] += f"🌅 {day['astronomy'][0]['sunrise']} 🌇 {day['astronomy'][0]['sunset']}\n"
        now = datetime.now()
        for hour in day["hourly"]:
            hour_time = format_time(hour["time"])
            if i == 0 and int(hour_time) < now.hour - HOURS_AGO_THRESHOLD:
                continue
            formatted_data[
                "tooltip"
            ] += f"{hour_time} {get_emoji_for_condition(hour['weatherDesc'][0]['value'])} {format_temp(hour['FeelsLikeC'])} {hour['weatherDesc'][0]['value']}, {format_conditions(hour)}\n"
    return formatted_data


def main():
    weather_data = get_weather_data()
    if weather_data is None:
        weather_data = get_cached_weather_data()
    if weather_data:
        formatted_data = format_weather_data(weather_data)
        cache_weather_data(formatted_data)
        print(json.dumps(formatted_data))


if __name__ == "__main__":
    main()
</file>

<file path="homes/notashelf/services/wayland/ags/bin/default.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (pkgs) writeShellScriptBin;

  ags-open-window = writeShellScriptBin "ags-open-window" ''
    ${lib.fileContents ./bash/open_window}
  '';

  ags-move-window = writeShellScriptBin "ags-move-window" ''
    ${lib.fileContents ./bash/move_window}
  '';

  ags-hyprctl-swallow = writeShellScriptBin "ags-hyprctl-swallow" ''
    ${lib.fileContents ./bash/hyprctl_swallow}
  '';
in {
  inherit ags-open-window ags-move-window ags-hyprctl-swallow;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/services/brightness.ts">
import { Service, Utils } from "../imports.js";
const { exec } = Utils;

class Brightness extends Service {
    static {
        Service.register(
            this,
            {},
            {
                screen: ["float", "rw"],
            },
        );
    }

    _screen = 0;

    get screen() {
        return this._screen;
    }

    set screen(percent) {
        if (percent < 0) percent = 0;

        if (percent > 1) percent = 1;

        Utils.execAsync(`brightnessctl s ${percent * 100}% -q`)
            .then(() => {
                this._screen = percent;
                this.changed("screen");
            })
            .catch(console.error);
    }

    constructor() {
        super();
        try {
            this._screen =
                Number(exec("brightnessctl g")) /
                Number(exec("brightnessctl m"));
        } catch (error) {
            console.error("missing dependency: brightnessctl");
        }
    }
}

const service = new Brightness();

globalThis.brightness = service;

export default service;
</file>

<file path="homes/notashelf/services/wayland/ags/src/services/directoryMonitorService.ts">
import { Service } from "../imports.js";
const { Gio } = imports.gi;

class DirectoryMonitorService extends Service {
    static {
        Service.register(this, {}, {});
    }

    _monitors = [];

    constructor() {
        super();
    }

    recursiveDirectoryMonitor(directoryPath) {
        const directory = Gio.File.new_for_path(directoryPath);
        const monitor = directory.monitor_directory(
            Gio.FileMonitorFlags.NONE,
            null,
        );
        this._monitors.push(monitor);

        monitor.connect(
            "changed",
            (fileMonitor, file, otherFile, eventType) => {
                if (eventType === Gio.FileMonitorEvent.CHANGES_DONE_HINT) {
                    this.emit("changed");
                }
            },
        );

        const enumerator = directory.enumerate_children(
            "standard::*",
            Gio.FileQueryInfoFlags.NONE,
            null,
        );

        let fileInfo;
        while ((fileInfo = enumerator.next_file(null)) !== null) {
            const childPath = directoryPath + "/" + fileInfo.get_name();
            if (fileInfo.get_file_type() === Gio.FileType.DIRECTORY) {
                this.recursiveDirectoryMonitor(childPath);
            }
        }
    }
}

const service = new DirectoryMonitorService();
export default service;
</file>

<file path="homes/notashelf/services/wayland/ags/src/services/inputMonitor.ts">
import { Utils, Service } from "../imports.js";
const { subprocess } = Utils;

class InputMonitorService extends Service {
    static {
        Service.register(
            this,
            {
                keypress: ["jsobject"],
                keyrelease: ["jsobject"],
                keyrepeat: ["jsobject"],
                event: ["jsobject"],
            },
            {},
        );
    }

    constructor() {
        super();
        this._evtest = subprocess("evtest /dev/input/event3", (str) =>
            this._handleEvent(str),
        );
    }

    _handleEvent(event) {
        //ignore initial output
        if (!event.startsWith("Event")) return;
        //ignore SYN_REPORTS
        if (event.includes("SYN")) return;
        const eventData = event.substring(7).split(", ");
        const eventInfo = {};
        //evetnInfo structure:
        //{
        //  time: unix timstamp
        //  type: event type
        //  code: keycode (this is the hardware keycode)
        //  value: depends on type, for EV_KEY 0->release, 1->press, 2->repeat(when holding)
        //}

        eventData.forEach((data) => {
            const [key, value, value2] = data.split(" ");
            eventInfo[key] = isNaN(value) ? value : Number(value);
            if (key === "code") eventInfo["name"] = value2.slice(1, -1);
        });
        //only emit on EV_KEY
        if (eventInfo.type === 1) {
            if (eventInfo.value === 0) this.emit("keyrelease", eventInfo);
            if (eventInfo.value === 1) this.emit("keypress", eventInfo);
            if (eventInfo.value === 2) this.emit("keyrepeat", eventInfo);
        }
        //emit on every event, just in case, you need it
        this.emit("event", eventInfo);
    }
}

export default new InputMonitorService();
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_audio.scss">
.audio {
	@include barModule;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_battery.scss">
.battery {
	@include barModule;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_bluetooth.scss">
// default state of the bluetooth icon
.bluetooth {
	@include barModule;
}

// if bluetooth is paired
// but not active
.bluetooth-paired {
	color: $onSurface;
}

// if bluetooth is paired
// and active
.bluetooth-active {
	color: $onSurface;
}

// if bluetooth is disabled
.bluetooth-disabled {
	color: lighten($surfaceVariant, 30%);
	transition:
		all 0.3s $materialStandard,
		border 0.35s $materialStandard;

	&:hover {
		color: $red;
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_clock.scss">
.clock {
	background: $surfaceVariant;
	color: $onPrimary;
	font-family: $monoFont;
	font-weight: 800;
	border-radius: 12px;
	margin: 6px 4px;
	padding: 6px;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_launcher.scss">
.launcherIcon {
	background: $surfaceVariant;
	font-family: $iconFont;
	border-radius: 12px;
	margin: 6px 4px;
	padding: 6px;
	min-height: 1.5rem;
	transition: all 0.2s $materialAccel;

	&:hover {
		background: lighten($surfaceVariant, 5%);
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_lock.scss">
.lock {
	background: $surface;
	font-size: 24px;
	border-radius: 12px;
	margin: 2px 4px;
	padding: 2px;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_net.scss">
.network {
	@include barModule;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_power.scss">
.power {
	color: $red;
	background: $surface;
	font-size: 24px;
	border-radius: 12px;
	margin: 6px 4px;
	padding: 6px;
	min-height: 1.5rem;
	transition: all 0.2s $materialAccel;

	&:hover {
		background: lighten($surfaceVariant, 5%);
		color: lighten($red, 5%);
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_swallow.scss">
.swallow {
	@include barModule;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_system.scss">
$size: 1.2rem;

.systemUsage {
	color: $onSurface;
	background: $surfaceVariant;
	font-family: $iconFont;
	border-radius: 12px;
	margin: 4px;
}

// cpu indicator
.cpuButton {
	padding: 6px 2px 3px 2px;
	margin: 1px;
}

.cpuProgress {
	color: $lavender;
	padding: 4px 4px;
	margin: 0.1rem;
	font-size: 4px;
	background: $primary;
	min-height: $size;
	min-width: $size;
}

// memory indicator
.memButton {
	padding: 3px 2px 6px 2px;
	margin: 1px;
}

.memProgress {
	color: $blue;
	padding: 4px 4px;
	margin: 0.1rem;
	font-size: 4px;
	background: $primary;
	min-height: $size;
	min-width: $size;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_tray.scss">
.tray {
	margin: 0;
}

.trayChevron {
	font-family: $iconFont;
}

.trayIcons {
	margin: 3px 0 0;

	&:hover {
		background: lighten($surface, 5%);
	}
}

.trayIcon {
	margin: 0 0 3px;
}

.trayMenu {
	@include barModule;

	background: $surface;
	border-radius: 12px;
	margin: 6px 4px;
	padding: 4px;

	separator {
		background-color: $onSurfaceVariant;
	}

	menuitem {
		border-radius: 0;
		background: $surfaceVariant;
		margin: 4px 2px;
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_weather.scss">
.weather {
	background: $surfaceVariant;
	font-family: "Material Symbols Sharp", Roboto;
	border-radius: 12px;
	margin: 6px 4px;
	padding: 4px;
	min-height: 1.5rem;
	min-width: 1rem;
	transition: all 0.2s $materialAccel;

	&:hover {
		background: lighten($surfaceVariant, 5%);
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/modules/_workspaces.scss">
.workspaces {
	background: transparent;
	padding: 14px;

	button {
		@include barModule;

		// override some styles provided by barModule
		// to better suit the position of the workspaces
		// module
		margin: 5px 3px;
		min-width: 0.6rem;
		min-height: 0.6rem;

		color: transparent;
		background: $onSurface;
		border-radius: 99px;

		&:hover {
			background: $lavender;
		}

		&.focused {
			border-radius: 18px;
			background: $blue;
			padding: 8px 0;
		}
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/bar/_bar.scss">
// Components
// top
@import "modules/launcher";
@import "modules/system";
@import "modules/weather";

// center
@import "modules/workspaces";

// bottom
@import "modules/tray";
@import "modules/battery";
@import "modules/bluetooth";
@import "modules/lock";
@import "modules/swallow";
@import "modules/audio";
@import "modules/net";
@import "modules/clock";
@import "modules/power";

// general config
.bar {
	@include barWindow;
}

// top section
.utilsBox {
	@include barSection;
}

// bottom section
.systemInfo {
	@include barSection;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/desktop/_desktop.scss">
// Components
@import "desktopMenu";
@import "desktopIcons";
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/desktop/_desktopIcons.scss">
.desktopIcons {
	margin: 24px 0 0 24px;
}

.desktopIcon {
	border-radius: 6px;
	padding: 6px;
	transition: all 200ms cubic-bezier(0, 0, 1, 1);

	&:hover {
		background: transparentize($lavender, 0.3);
	}
}

.desktopIconLabel {
	color: $surface;
	font-family: $font;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/desktop/_desktopMenu.scss">
.desktopMenu {
	background: $primary;
	color: $onSurface;
	font-family: $font;
	border-radius: 14px;
	padding: 6px 3px;
}

.desktopMenuItem {
	border-radius: 14px;
	margin: 0 3px;
	padding: 6px 12px;
	transition: all 0.2s $materialAccel;

	&:hover {
		background: lighten($surfaceVariant, 5%);
		color: lighten($onSurface, 5%);
	}
}

.desktopMenuItemIcon {
	font-family: $iconFont;
	padding: 2px 8px 2px 2px;
}

.separator {
	background: $surface;
	padding: 1px 3px;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/launcher/_launcher.scss">
.launcher {
	color: $onSurface;
	background: $primary;
	font-family: $font;
	border-radius: 12px;
	margin: 0 0 16px;
	padding: 6px;
}

.launcherApp {
	border-radius: 12px;
	margin: 3px;
	padding: 3px;

	&:focus {
		background: $surfaceVariant;
	}
}

.launcherEntry {
	caret-color: $onSurface;
	background: $surfaceVariant;
	border-radius: 10px;
	margin: 6px;
	padding: 3px 12px;
}

.launcherItem {
}

.launcherItemIcon {
	margin: 3px 6px;
}

.launcherItemTitle {
	font-size: 16px;
	font-weight: bold;
}

.launcherItemDescription {
	font-size: 12px;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/music/_music.scss">
.music.window {
	background: rgba(0, 0, 0, 0.5);
	margin: 5px 10px 15px;
	padding: $padding;

	.cover {
		background-position: center;
		background-size: cover;
		border-radius: $rounding;
		box-shadow: 0 1px 2px -1px rgba(0, 0, 0, 0.5);
		margin: 0.4rem;
		min-height: 13rem;
		min-width: 13rem;
	}
}

.music.window .info {
	margin: 0.5rem;

	label,
	scale {
		margin: 0.3rem 0;
	}

	label.position,
	label.length {
		font-size: 0.8rem;
		margin-bottom: 0;
	}

	scale {
		margin-top: 0;
		margin-bottom: 0;
	}

	.title {
		font-size: 1.5rem;
		font-weight: bold;
		min-width: 14rem;
	}
}

.music.window .controls {
	button {
		margin: 0 0.2rem;
		font-size: 1.5rem;
	}
}

.music.window .player-info {
	margin-bottom: 0;

	.player-icon {
		font-size: 1.2rem;
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/notifications/notifications.scss">
.notification {
	@include window;
	margin: 5px 5px 5px 12px;
	min-width: 25rem;

	background-color: $primary;
	color: $onPrimary;

	// low priority
	&.low {
		border: 1.5px solid $lavender;
	}

	// medium priority
	&.normal {
		border: 1.5px solid $blue;
	}

	// critical priority
	&.critical {
		border: 1.5px solid $red;
	}
}

.notifications widget:last-child .notification {
	margin-bottom: 15px;
}

.notification .icon {
	image {
		font-size: 5rem;
		margin: 0.5rem;
		min-height: 5rem;
		min-width: 5rem;
	}

	> box {
		border-radius: $rounding;
		margin: 0.5rem;
		min-height: 5rem;
		min-width: 5rem;
	}
}

.notification .actions .action-button {
	@include window;
	@include animated;
	padding: 4px 0;

	&:hover {
		background: $onSurfaceVariant;
	}
}

.notification .text {
	margin: 6px 4px;

	.title {
		margin: 4px 6px;
		color: $onPrimary;
		font-weight: 900;
	}

	.body {
		margin: 4px 6px;
		color: $onPrimary;
		font-weight: 600;
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/popups/_brightnessPopup.scss">
.brightnessPopup {
	@include popup;
}

.brtPopupIcon {
	@include popupIcon;
}

.brtPopupBar {
	@include popupBar;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/popups/_popups.scss">
// Components
@import "brightnessPopup";
@import "volumePopup";
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/popups/_volumePopup.scss">
.volumePopup {
	@include popup;
}

.volPopupIcon {
	@include popupIcon;
}

.volPopupBar {
	@include popupBar;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/beziers.scss">
$materialStandard: cubic-bezier(0.2, 0, 0, 1);
$materialDecel: cubic-bezier(0, 0, 0, 1);
$materialAccel: cubic-bezier(0.3, 0, 1, 1);
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/colors.scss">
$primary: #1e1e2e;
$onPrimary: #cdd6f4;
$secondary: #181825;
$onSecondary: #cdd6f4;
$surface: #313244;
$onSurface: #cdd6f4;
$surfaceVariant: #313244;
$onSurfaceVariant: #cdd6f4;
$shadow: #000;

// other colors
$red: #f38ba8;
$yellow: #f9e2af;
$green: #a6e3a1;
$blue: #89b4fa;
$lavender: #b4befe;
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/fonts.scss">
$font: roboto;
$monoFont: robotomono;
$iconFont: symbolsnerdfontmono;
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/main.scss">
// common components
@import "colors";
@import "beziers";
@import "fonts";
@import "mixins";
@import "prelude";

// modules and widgets
@import "bar/bar";
@import "launcher/launcher";
@import "desktop/desktop";
@import "popups/popups";
@import "music/music";
@import "notifications/notifications";
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/mixins.scss">
$rounding: 12px; // intter rounding
$padding: 2px; // component padding

// general mixins
@mixin animated {
	transition:
		all 0.3s $materialStandard,
		border 0.35s $materialStandard;
}

@mixin roundingOuter {
	// Outer rounding = inner rounding + padding
	border-radius: calc(#{$rounding} + #{$padding});
}

@mixin roundingInner {
	border-radius: $rounding;
}

// window mixin represents a top-level window
// e.g. the bar or a music widget
@mixin window {
	@include roundingOuter;
}

// bar window
@mixin barWindow {
	@include window;
	color: $onSurface;
	background: $primary;
	font-family: $font;
	border-radius: 14px;
	padding: 2px;
}

@mixin barSection {
	@include roundingInner;
	color: $onSurface;
	background: $surfaceVariant;
	font-family: $iconFont;
	margin: 4px;
	padding: 6px;
}

@mixin barModule {
	// include animations
	@include animated;

	// standard widget dimensions
	margin: 6px 3px;

	// and styling
	color: $onSurface;
	background: $surfaceVariant;

	&:hover {
		color: $lavender;
	}
}

// popup windows
@mixin popup {
	background: $primary;
	border-radius: 12px;
	margin: 6px;
	padding: 12px;
	min-width: 200px;
}

@mixin popupIcon {
	font-family: $iconFont;
	margin: 0 6px 0 0;
}

@mixin popupBar {
	min-width: 200px;

	& scale {
		min-height: 12px;
	}

	& trough {
		background: transparentize($surfaceVariant, 0.5);
		border-radius: 24px;
		min-height: 12px;
	}

	& highlight {
		background: $onSurface;
		border-radius: 24px;
		min-width: 12px;
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style/prelude.scss">
*:not(selection):not(tooltip) {
	all: unset;
	text-shadow: 0 2px 3px rgba(0, 0, 0, 0.2);
	font-family: "Material Design Icons", "Iosevka Nerd Font Mono", Inter,
		Roboto, sans-serif;
}

// restore tooltip styling that got unset in the above class
tooltip {
	@include roundingOuter;
	background: $primary;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/appIcon.ts">
import { Widget } from "../imports";
import { queryExact } from "./global";
const { Button, Icon } = Widget;

export default ({
    appName,
    onClicked = () => queryExact(appName).launch(),
    icon = queryExact(appName).iconName,
    size = 36,
    ...props
}) => {
    const appIcon = Button({
        onClicked,
        child: Icon({
            icon,
            size,
            ...props,
        }),
    });
    return appIcon;
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/audio.ts">
import { Audio, Widget } from "../imports";
const { Slider, Label } = Widget;
const { speaker } = Audio;

const audio = {
    mixer: "",
    mic: {
        muted: "microphone-disabled-symbolic",
        low: "microphone-sensitivity-low-symbolic",
        medium: "microphone-sensitivity-medium-symbolic",
        high: "microphone-sensitivity-high-symbolic",
    },
    volume: {
        muted: "audio-volume-muted-symbolic",
        low: "audio-volume-low-symbolic",
        medium: "audio-volume-medium-symbolic",
        high: "audio-volume-high-symbolic",
        overamplified: "audio-volume-overamplified-symbolic",
    },
    type: {
        headset: "audio-headphones-symbolic",
        speaker: "audio-speakers-symbolic",
        card: "audio-card-symbolic",
    },
};

export const getAudioIcon = (self) => {
    if (!Audio.speaker) return;

    const { muted, low, medium, high, overamplified } = audio.volume;

    if (Audio.speaker.is_muted) return (self.icon = muted);

    /** @type {Array<[number, string]>} */
    const cons = [
        [101, overamplified],
        [67, high],
        [34, medium],
        [1, low],
        [0, muted],
    ];

    self.icon = cons.find(([n]) => n <= Audio.speaker.volume * 100)?.[1] || "";
};

export const getSliderIcon = () =>
    Label({
        className: "volPopupIcon",
        label: speaker.bind("volume").as((/** @type {number} */ v) => {
            return ["󰝟", "󰕿", "", "󰕾"][
                speaker.stream?.isMuted ? 0 : Math.floor((v * 100) / 26)
            ];
        }),
    });

export const volumePercentBar = () =>
    Slider({
        className: "volPopupBar",
        drawValue: false,
        value: speaker.bind("volume"),
        onChange: ({ value }) => (speaker.volume = value),
    });
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/battery.ts">
import { Battery } from "../imports";

/**
 * toTime converts a given value to a human-readable
 * format where the number of hours and minutes are
 * inferred from time, which is assumed to be in seconds.
 *
 * @param {number} time - time in seconds
 */
export const toTime = (time) => {
    const MINUTE = 60;
    const HOUR = MINUTE * 60;

    if (time > 24 * HOUR) return "";

    const hours = Math.round(time / HOUR);
    const minutes = Math.round((time - hours * HOUR) / MINUTE);

    const hoursDisplay = hours > 0 ? `${hours}h ` : "";
    const minutesDisplay = minutes > 0 ? `${minutes}m ` : "";

    return `${hoursDisplay}${minutesDisplay}`;
};

export const getBatteryTime = () => {
    const timeRemaining = Battery.timeRemaining;
    return timeRemaining > 0 && toTime(timeRemaining) != ""
        ? `${toTime(timeRemaining)}remaining`
        : "";
};

export const getBatteryPercentage = () => {
    const percent = Battery.percent;
    return percent > 0 && percent < 100 ? `${percent}%` : "";
};

export const getBatteryTooltip = () => {
    const time = getBatteryTime();
    const percent = Battery.percent;

    return `${percent}% | ${time}`;
};

export const getBatteryIcon = () => {
    // if Battery.percent is not between 0 and 100, handle the error
    if (Battery.percent < 0 || Battery.percent > 100)
        return "Battery percentage is not a valid value!";

    const icons = [
        ["󰂎", "󰁺", "󰁻", "󰁼", "󰁽", "󰁾", "󰁿", "󰂀", "󰂁", "󰂂", "󰁹"],
        ["󰢟", "󰢜", "󰂆", "󰂇", "󰂈", "󰢝", "󰂉", "󰢞", "󰂊", "󰂋", "󰂅"],
    ];

    const chargingIndex = Battery.charging ? 1 : 0;
    const percentIndex = Math.floor(Battery.percent / 10);
    return icons[chargingIndex][percentIndex].toString();
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/bluetooth.ts">
import { Bluetooth } from "../imports";
import Icons from "./icons";

export const getBluetoothDevice = (addr) =>
	Bluetooth.getDevice(addr).alias ?? Bluetooth.getDevice(addr).name;

export const getBluetoothIcon = (connected) => {
	if (!Bluetooth.enabled) return Icons.bluetooth.disabled;
	if (connected.length > 0) return Icons.bluetooth.active;
	return Icons.bluetooth.disconnected;
};

export const getBluetoothTooltip = (connected) => {
	if (!Bluetooth.enabled) return "Bluetooth off";

	if (connected.length > 0) {
		const dev = Bluetooth.getDevice(connected[0].address);
		let battery_str = "";

		if (dev.battery_percentage > 0) {
			battery_str += ` ${dev.battery_percentage}%`;
		}

		return dev.name + battery_str;
	}

	return "Bluetooth on";
};

export const getBluetoothClass = (connected) => {
	if (!Bluetooth.enabled) return "bluetooth-disabled";

	if (connected.length > 0) {
		const dev = Bluetooth.getDevice(connected.at(0).address);

		if (dev.battery_percentage <= 25) return "bluetooth-active-low-battery";

		if (dev.battery_percentage > 25) return "bluetooth-paired";
	}

	return "bluetooth-active";
};

export const getBluetoothLabel = (connected) => {
	if (!Bluetooth.enabled) return "󰂲";

	if (connected.length > 0) {
		const dev = Bluetooth.getDevice(connected.at(0).address);

		if (dev.battery_percentage <= 25) return "󰥇";
	}

	return "󰂰";
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/desktop.ts">
import { Widget } from "../imports";
import { queryExact } from "./global";
const { Box, Icon, Label, Button } = Widget;

/**
 * Builds a desktop item with a specific name and label.
 * It uses the `queryExact` function to find the exact application based on its name.
 * Then, it creates a button widget with the application's icon and label.
 * When the button is clicked, it launches the application.
 *
 * @function buildDesktopItem
 * @param {string} name - The name of the application.
 * @param {string} label - The label of the desktop item.
 * @returns {Object} The desktop item widget.
 */
export const buildDesktopItem = (name: string, label: string): object => {
    const app = queryExact(name);
    return Button({
        className: "desktopIcon",
        cursor: "pointer",
        onClicked: () => app.launch(),
        child: Box({
            vertical: true,
            children: [
                Icon({
                    icon: app.iconName,
                    size: 48,
                }),
                Label({
                    className: "desktopIconLabel",
                    label,
                }),
            ],
        }),
    });
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/global.ts">
import { Applications, Utils } from "../imports";
const { execAsync } = Utils;
const { list, query } = Applications;

/**
 * Queries the exact application based on its name.
 * First tries to find the application in the list of applications.
 * If it doesn't find it, then it queries the application by its name.
 *
 * @function queryExact
 * @param {string} appName - The name of the application to query.
 * @returns {Object} The queried application object. Returns null if the application is not found.
 */
export function queryExact(appName: string): object {
    return (
        list.filter(
            (app) => app.name.toLowerCase() === appName.toLowerCase(),
        )[0] ?? query(appName)[0]
    );
}

/**
 * Tries to launch an application based on its name.
 * First it tries to kill the application if it's already running.
 * Regardless of whether the killing has been successful or not, it
 * tries to launch the application.
 *
 * @function launchApp
 * @param {string} appName - The name of the application to launch.
 * @returns {void}
 */
export function launchApp(appName) {
    if (queryExact(appName)) {
        execAsync(["sh", "-c", `killall ${appName}`]);
    }

    execAsync(["sh", "-c", `${appName}`]);
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/hyprland.ts">
import { Hyprland } from "../imports";

export const getFocusedWorkspace = (self) =>
    self.children.forEach((btn) => {
        btn.className =
            btn.attribute.index === Hyprland.active.workspace.id
                ? "focused"
                : "";
        btn.visible = Hyprland.workspaces.some(
            (ws) => ws.id === btn.attribute.index,
        );
    });
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/icons.ts">
const Icons = {
	settings: "org.gnome.Settings-symbolic",
	tick: "object-select-symbolic",
	audio: {
		mic: {
			muted: "microphone-disabled-symbolic",
			unmuted: "microphone-sensitivity-high-symbolic",
		},
		volume: {
			muted: "audio-volume-muted-symbolic",
			low: "audio-volume-low-symbolic",
			medium: "audio-volume-medium-symbolic",
			high: "audio-volume-high-symbolic",
			overamplified: "audio-volume-overamplified-symbolic",
		},
		type: {
			headset: "audio-headphones-symbolic",
			speaker: "audio-speakers-symbolic",
			card: "audio-card-symbolic",
		},
		mixer: "tool-symbolic",
	},
	apps: {
		apps: "view-app-grid-symbolic",
		search: "folder-saved-search-symbolic",
	},
	bluetooth: {
		enabled: "bluetooth-active-symbolic",
		disabled: "bluetooth-disabled-symbolic",
	},
	brightness: {
		indicator: "display-brightness-symbolic",
		keyboard: "keyboard-brightness-symbolic",
		screen: ["󰛩", "󱩎", "󱩏", "󱩐", "󱩑", "󱩒", "󱩓", "󱩔", "󱩕", "󱩖", "󰛨"],
	},
	header: {
		refresh: "view-refresh-symbolic",
		settings: "settings-symbolic",
		power: "system-shutdown-symbolic",
	},
	media: {
		play: "media-playback-start-symbolic",
		pause: "media-playback-pause-symbolic",
		next: "media-skip-forward-symbolic",
		previous: "media-skip-backward-symbolic",
		player: "multimedia-player-symbolic",
	},
	mpris: {
		fallback: "audio-x-generic-symbolic",
		shuffle: {
			enabled: "media-playlist-shuffle-symbolic",
			disabled: "media-playlist-no-shuffle-symbolic",
		},
		loop: {
			none: "media-playlist-no-repeat-symbolic",
			track: "media-playlist-repeat-song-symbolic",
			playlist: "media-playlist-repeat-symbolic",
		},
		playing: "media-playback-pause-symbolic",
		paused: "media-playback-start-symbolic",
		stopped: "media-playback-stop-symbolic",
		prev: "media-skip-backward-symbolic",
		next: "media-skip-forward-symbolic",
	},
	notifications: {
		noisy: "preferences-system-notifications-symbolic",
		silent: "notifications-disabled-symbolic",
		critical: "messagebox_critical-symbolic",
		chat: "notification-symbolic",
		close: "window-close-symbolic",
	},
	powermenu: {
		sleep: "weather-clear-night-symbolic",
		reboot: "system-reboot-symbolic",
		logout: "system-log-out-symbolic",
		shutdown: "system-shutdown-symbolic",
		lock: "system-lock-screen-symbolic",
		close: "window-close-symbolic",
	},
	recorder: {
		recording: "media-record-symbolic",
	},
	trash: {
		full: "user-trash-full-symbolic",
		empty: "user-trash-symbolic",
	},
	ui: {
		send: "mail-send-symbolic",
		arrow: {
			right: "pan-end-symbolic",
			left: "pan-start-symbolic",
			down: "pan-down-symbolic",
			up: "pan-up-symbolic",
		},
	},
	speaker: {
		overamplified: "\uf14b",
		high: "\ue050",
		medium: "\ue04d",
		low: "\ue04e",
		muted: "\ue04f",
	},
	microphone: {
		overamplified: "\ue029",
		high: "\ue029",
		medium: "\ue029",
		low: "\ue029",
		muted: "\ue02b",
	},
	wired: {
		power: "󰈀",
		poweroff: "󱘖",
	},
	wifi: {
		none: "󰤭",
		bad: "󰤠",
		low: "󰤟",
		normal: "󰤢",
		good: "󰤨",
	},
	system: {
		cpu: "org.gnome.SystemMonitor-symbolic",
		ram: "drive-harddisk-solidstate-symbolic",
		temp: "temperature-symbolic",
	},
};

export default Icons;
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/launcher.ts">
export const getLauncherIcon = (
    self: { child: { label: string } },
    windowName: string,
    visible: any,
) => {
    windowName === "launcher" && (self.child.label = visible ? "󱢡" : "󱢦");
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/mpris.ts">
import { Utils, GLib } from "../imports";
import Icons from "./icons";

export const findPlayer = (players) => {
	// try to get the first active player
	const activePlayer = players.find((p) => p.playBackStatus == "Playing");
	if (activePlayer != null) return activePlayer;

	// otherwise get the first "working" player
	for (const p of players) {
		if (p.title != "undefined") return p;
	}
};

export const mprisStateIcon = (status) => {
	const state = status == "Playing" ? "pause" : "play";
	return Icons.media[state];
};

export const MEDIA_CACHE_PATH = Utils.CACHE_DIR + "/media";
export const blurredPath = MEDIA_CACHE_PATH + "/blurred";

export const generateBackground = (cover_path) => {
	const url = cover_path;
	if (!url) return "";

	const makeBg = (bg) => `background: center/cover url('${bg}')`;

	const blurred = blurredPath + url.substring(MEDIA_CACHE_PATH.length);

	if (GLib.file_test(blurred, GLib.FileTest.EXISTS)) {
		return makeBg(blurred);
	}

	Utils.ensureDirectory(blurredPath);
	Utils.exec(`convert ${url} -blur 0x22 ${blurred}`);

	return makeBg(blurred);
};

export function lengthStr(length) {
	const min = Math.floor(length / 60);
	const sec = Math.floor(length % 60);
	const sec0 = sec < 10 ? "0" : "";
	return `${min}:${sec0}${sec}`;
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/network.ts">
import { Network } from "../imports";

import Icons from "./icons";
const { wifi, wired } = Icons;

export const getWifiIcon = (strength) => {
    if (strength < 0.1) return wifi.none;
    if (strength < 0.26) return wifi.bad;
    if (strength < 0.51) return wifi.low;
    if (strength < 0.76) return wifi.normal;
    if (strength > 0.76) return wifi.good;
    else return wifi.none;
};

export const getWifiTooltip = (strength, ssid) => {
    const wifi = Network.wifi;
    const wifiStrength = `Strength: ${strength * 100}`;

    switch (wifi.internet) {
        case "connected":
            return `Connected to ${ssid} | Strength: ${wifiStrength}`;
        case "connecting":
            return `Connecting to ${ssid} | Strength: ${wifiStrength}`;
        case "disconnected":
            return `Disconnected from ${ssid} | Strength: ${wifiStrength}`;
        default:
            return `No connection | Strength: ${wifiStrength}`;
    }
};

export const getWiredIcon = (internet) => {
    if (internet === "connected") return wired.power;
    if (internet === "connecting") return wired.poweroff;
    if (internet === "disconnected") return wired.poweroff;
    return wired.poweroff;
};

export const getWiredTooltip = (internet) => {
    return `Status: ${internet}`;
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/popupWindow.ts">
import { App, Widget, Utils } from "../imports";
const { Box, Revealer, Window } = Widget;

export default ({
    onOpen = () => {},
    onClose = () => {},

    name,
    child,
    transition = "slide_up",
    transitionDuration = 250,
    ...props
}) => {
    const window = Window({
        name,
        visible: false,
        ...props,

        child: Box({
            css: `
            min-height: 2px;
            min-width: 2px;
            `,
            child: Revealer({
                transition,
                transitionDuration,
                child: child || Box(),
                setup: (self) => {
                    self.hook(App, (rev, currentName, isOpen) => {
                        if (currentName === name) {
                            rev.revealChild = isOpen;

                            if (isOpen) {
                                onOpen(window);
                            } else {
                                Utils.timeout(transitionDuration, () => {
                                    onClose(window);
                                });
                            }
                        }
                    });
                },
            }),
        }),
    });
    window.getChild = () => window.child.children[0].child;
    window.setChild = (newChild) => {
        window.child.children[0].child = newChild;
        window.child.children[0].show_all();
    };

    return window;
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/swallow.ts">
import { Utils, Variable } from "../imports";
const { exec, execAsync } = Utils;

function genCommand(arg: string) {
    return ["sh", "-c", `ags-hyprctl-swallow ${arg}`];
}

const swallowQuery = genCommand("query");
const swallowToggle = genCommand("toggle");

const getSwallowStatus = async () => {
    try {
        await execAsync(swallowQuery);
        const result = exec("hyprctl -j getoption misc:enable_swallow");
        return JSON.parse(result).set;
    } catch (error) {
        console.error("Error getting swallow status:", error);
        throw error;
    }
};

export const status = Variable(getSwallowStatus());

export const toggleSwallowStatus = () => {
    execAsync(swallowToggle);

    // toggle swallow status
    status.value = !status.value;
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/system.ts">
// generalized function to get class name based on value and thresholds
export const getClass = (v: number, thresholds: any[]) => {
    const val = v * 100;
    const className = thresholds.find(([threshold]) => threshold <= val)[1];
    return className;
};

// thresholds and class names for memory
export const memThresholds = [
    [100, "memCritical"],
    [75, "memHigh"],
    [35, "memMod"],
    [5, "memLow"],
    [0, "memIdle"],
    [-1, "memRevealer"],
];

// thresholds and class names for CPU
export const cpuThresholds = [
    [100, "cpuCritical"],
    [75, "cpuHigh"],
    [35, "cpuMod"],
    [5, "cpuLow"],
    [0, "cpuIdle"],
    [-1, "cpuRevealer"],
];

// get class names for memory and CPU
export const getMemClass = (v: number) => getClass(v, memThresholds);
export const getCpuClass = (v: number) => getClass(v, cpuThresholds);
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/tray.ts">
import { Widget, SystemTray } from "../imports";
const { Button, Icon } = Widget;

export const getTrayItems = (self: { children: any }) => {
    self.children = SystemTray.items.map((item) => {
        if (item.menu) item.menu.class_name = "trayMenu";

        return Button({
            className: "trayIcon",
            child: Icon({
                setup: (self) => self.bind("icon", item, "icon"),
            }),
            setup: (self: {
                bind: (arg0: string, arg1: any, arg2: string) => any;
            }) => self.bind("tooltip-markup", item, "tooltip-markup"),
            onPrimaryClick: (_, event) => item.activate(event),
            onSecondaryClick: (_, event) => item.openMenu(event),
        });
    });
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/utils/weather.ts">
import { Variable } from "../imports";
import {
    getWeatherData,
    getCachedWeatherData,
    formatWeatherData,
} from "../variables/weather.js";

export const WeatherValue = Variable(
    {},
    {
        poll: [
            36000,
            async () => {
                let data = await getWeatherData();
                if (!data) {
                    console.error(
                        "Failed to fetch weather data, using cached data",
                    );
                    data = getCachedWeatherData();
                }
                return formatWeatherData(data);
            },
        ],
    },
);

export const getWeatherIcon = (value: { text: any }) => value.text || "...";
export const getWeatherTooltip = (value: { tooltip: any }) =>
    value.tooltip || "...";
</file>

<file path="homes/notashelf/services/wayland/ags/src/variables/weather.ts">
import { Utils, GLib, Gio } from "../imports";

const { get_user_cache_dir, get_home_dir, build_filenamev } = GLib;
const { fetch } = Utils;
const fs = Gio;

const CACHE_EXPIRATION = 60; // minutes
const XDG_CACHE_HOME = get_user_cache_dir() || get_home_dir() + "/.cache";
const CACHE_DIR_PATH = build_filenamev([XDG_CACHE_HOME, "zephyr"]);
const CACHE_DIR = fs.File.new_for_path(CACHE_DIR_PATH);
const CACHE_FILE_PATH = build_filenamev([CACHE_DIR_PATH, "zephyr_cache.json"]);
const CACHE_FILE = fs.File.new_for_path(CACHE_FILE_PATH);

const SUNNY = "\udb81\udda8";
const CLOUDY = "\ue312";
const RAIN = "\ue318";
const SNOW = "\ue31a";
const THUNDERSTORM = "\ue31d";
const PARTLY_CLOUDY = "\ue302";
const CLEAR = "\udb81\udda8";

const HOURS_AGO_THRESHOLD = 2;
const TEMP_THRESHOLD_COLD = 10;
const TEMP_THRESHOLD_HOT = 0;

const ensureCacheDirectory = () => {
    try {
        if (!fs.File.new_for_path(CACHE_DIR).query_exists(null)) {
            fs.File.new_for_path(CACHE_DIR).make_directory_with_parents(null);
        }
    } catch (e) {
        console.error(`Error creating cache directory: ${e}`);
    }
};

export const getWeatherData = (): Promise<any> => {
    return new Promise((resolve, reject) => {
        fetch("http://wttr.in/?format=j1")
            .then((res: any) => res.text())
            .then((text: string) => {
                try {
                    const data = JSON.parse(text);
                    resolve(data);
                } catch (error) {
                    console.error(error);
                    // provide dummy data to avoid errors
                    resolve({ text: "Dummy data" });
                }
            })
            .catch(reject);
    });
};

export const cacheWeatherData = (data: any): void => {
    try {
        ensureCacheDirectory();
        const cachedData = {
            data,
            timestamp: new Date().toISOString(),
        };
        const outputStream = CACHE_FILE.replace(
            null,
            false,
            Gio.FileCreateFlags.NONE,
            null,
        );
        const text = `${cachedData.timestamp}\n${JSON.stringify(cachedData.data)}`;
        outputStream.write(text, null);
        outputStream.close(null);
    } catch (e) {
        console.error(`Error caching data: ${e}`);
    }
};

export const getCachedWeatherData = (): any | null => {
    try {
        if (CACHE_FILE.query_exists(null)) {
            const inputStream = CACHE_FILE.read(null);
            const [, content] = inputStream.read();
            inputStream.close(null);
            const [timestamp, jsonData] = content.toString().split("\n");
            const cacheTime = new Date(timestamp);
            if ((new Date() - cacheTime) / 60000 < CACHE_EXPIRATION) {
                return JSON.parse(jsonData);
            }
        }
    } catch (e) {
        console.error(`Error loading cached data: ${e}`);
    }
    return null;
};

const formatTime = (time: string): string =>
    time.replace("00", "").padStart(2, "0");

const formatTemp = (temp: number): string => ` ${temp}°`.padEnd(4, " ");

const getEmojiForCondition = (condition: string): string => {
    const emojiMap: { [key: string]: string } = {
        Sunny: SUNNY,
        "Partly cloudy": PARTLY_CLOUDY,
        Overcast: CLOUDY,
        "Patchy rain nearby": RAIN,
        Clear: CLEAR,
        Fog: "\ue313",
        Frost: "\udb83\udf29",
        Thunder: THUNDERSTORM,
        Snow: SNOW,
        Windy: "\u27A7",
        Mist: "\u2601",
        Drizzle: "\u2601",
        "Heavy rain": "\u2614",
        Sleet: "\u2744",
        "Wintry mix": "\u2744",
        "Clear/Sunny": CLEAR,
        "Clear/Mostly clear": CLEAR,
        "Clear/Mostly clear (night)": CLEAR,
        "Drizzle (night)": "\u2601",
    };
    return emojiMap[condition] || "";
};

const formatConditions = (hour: any): string => {
    const conditionProbabilities: { [key: string]: string } = {
        chanceoffog: "Fog",
        chanceoffrost: "Frost",
        chanceofovercast: "Overcast",
        chanceofrain: "Rain",
        chanceofsnow: "Snow",
        chanceofsunshine: "Sunshine",
        chanceofthunder: "Thunder",
        chanceofwindy: "Wind",
    };
    if (hour.chanceofpartlycloudy) {
        conditionProbabilities["chanceofpartlycloudy"] = "Partly Cloudy";
    }
    const conditions: string[] = [];
    for (const [event, description] of Object.entries(conditionProbabilities)) {
        if (hour[event]) {
            const probability = parseInt(hour[event]);
            if (probability > 0) {
                const emoji = getEmojiForCondition(description);
                conditions.push(`${emoji} ${description} ${probability}%`);
            }
        }
    }
    return conditions.join(", ");
};

export const formatWeatherData = (
    weatherData: any,
): { text: string; tooltip: string } => {
    const formattedData = {
        text: "",
        tooltip: "",
    };

    if (!weatherData || !weatherData.current_condition) {
        // weather data or current condition is missing, return default data
        formattedData.tooltip = "No weather data available";
        return formattedData;
    }

    const currentCondition = weatherData.current_condition[0];
    const temp = parseInt(currentCondition.FeelsLikeC);
    const tempSign =
        TEMP_THRESHOLD_HOT > temp && temp > TEMP_THRESHOLD_COLD ? "+" : "";
    formattedData.text = ` ${SUNNY} \n ${tempSign}${temp}°`;
    formattedData.tooltip =
        `${currentCondition.weatherDesc[0].value} ${currentCondition.temp_C}°\n` +
        `Feels like: ${currentCondition.FeelsLikeC}°\n` +
        `Wind: ${currentCondition.windspeedKmph}Km/h\n` +
        `Humidity: ${currentCondition.humidity}%\n`;

    if (!weatherData.weather || weatherData.weather.length === 0) {
        // weather array is missing or empty, return default data
        formattedData.tooltip += "No weather forecast available";
        return formattedData;
    }

    weatherData.weather.forEach((day: any, i: number) => {
        formattedData.tooltip += "\n";
        if (i === 0) formattedData.tooltip += "Today, ";
        if (i === 1) formattedData.tooltip += "Tomorrow, ";
        formattedData.tooltip += `${day.date}\n`;
        formattedData.tooltip += `⬆️ ${day.maxtempC}° ⬇️ ${day.mintempC}° `;
        formattedData.tooltip += `🌅 ${day.astronomy[0].sunrise} 🌇 ${day.astronomy[0].sunset}\n`;
        const now = new Date();
        if (!day.hourly || day.hourly.length === 0) {
            // hourly data is missing or empty, continue to the next day
            formattedData.tooltip +=
                "No hourly forecast available for this day\n";
            return;
        }
        day.hourly.forEach((hour: any) => {
            const hourTime = formatTime(hour.time);
            if (
                i === 0 &&
                parseInt(hourTime) < now.getHours() - HOURS_AGO_THRESHOLD
            ) {
                return;
            }
            formattedData.tooltip += `${hourTime} ${getEmojiForCondition(hour.weatherDesc[0].value)} ${formatTemp(hour.FeelsLikeC)} ${hour.weatherDesc[0].value}, ${formatConditions(hour)}\n`;
        });
    });

    return formattedData;
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/audio.ts">
import { Audio, Widget } from "../../../imports";
import { getAudioIcon } from "../../../utils/audio";
import { launchApp } from "../../../utils/global";

const { Button, Icon } = Widget;

const AudioIcon = () =>
	Icon({
		setup: (self) => {
			self.hook(Audio, getAudioIcon, "speaker-changed");
		},
	});

export const AudioWidget = () => {
	return Button({
		className: "audio",
		cursor: "pointer",
		visible: true,
		child: AudioIcon(),
		onClicked: () => launchApp("pavucontrol"),
	});
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/battery.ts">
import { Widget, Battery } from "../../../imports";
import {
	getBatteryPercentage,
	getBatteryTooltip,
	getBatteryIcon,
} from "../../../utils/battery.js";
const { Button, Box, Label, Revealer } = Widget;

const BatIcon = () =>
	Label({ className: "battery" })
		// NOTE: label needs to be used instead of icon here
		.bind("label", Battery, "percent", getBatteryIcon)
		.bind("tooltip-text", Battery, "percent", getBatteryTooltip);

const BatStatus = () =>
	Revealer({
		transition: "slide_down",
		transition_duration: 200,
		child: Label().bind("label", Battery, "percent", getBatteryPercentage),
	});

export const BatteryWidget = () =>
	Button({
		onPrimaryClick: (self) => {
			self.child.children[1].revealChild =
				!self.child.children[1].revealChild;
		},
		child: Box({
			cursor: "pointer",
			vertical: true,
			children: [BatIcon(), BatStatus()],
			visible: Battery.bind("available"),
		}),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/bluetooth.ts">
import { Bluetooth, Widget, Utils } from "../../../imports";
import {
	getBluetoothIcon,
	getBluetoothLabel,
	getBluetoothClass,
	getBluetoothTooltip,
} from "../../../utils/bluetooth.js";
const { Button, Label } = Widget;

const BluetoothModule = () =>
	Label({ className: "bluetoothIcon" })
		.bind("label", Bluetooth, "connected-devices", getBluetoothIcon)
		.bind("class", Bluetooth, "connected-devices", getBluetoothClass)
		.bind("label", Bluetooth, "connected-devices", getBluetoothLabel)
		.bind(
			"tooltip-text",
			Bluetooth,
			"connected-devices",
			getBluetoothTooltip,
		);

export const BluetoothWidget = () =>
	Button({
		className: "bluetooth",
		cursor: "pointer",
		child: BluetoothModule(),
		visible: Bluetooth.connectedDevices.length > 0,
		onClicked: () => Utils.exec("blueman-applet"),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/clock.ts">
import { Widget, Utils } from "../../../imports";
const { exec, execAsync } = Utils;
const { Label, Box } = Widget;

const Time = () =>
	Label({
		className: "timeLabel",
		setup: (self) => {
			// the current quote syntax is the only one that works
			// eslint-disable-next-line quotes
			self.poll(1000, (self) => (self.label = exec('date "+%H%n%M"')));
			self.poll(1000, (self) =>
				execAsync(["date", "+%H%n%M"])
					.then((time) => (self.label = time))
					// eslint-disable-next-line no-undef
					.catch(print.error),
			);
		},
	});

export const Clock = () =>
	Box({
		className: "clock",
		vertical: true,
		children: [Time()],
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/launcher.ts">
import { Widget, App } from "../../../imports";
import { getLauncherIcon } from "../../../utils/launcher";
const { Button, Label } = Widget;

export const LauncherIcon = () =>
	Button({
		vexpand: false,
		className: "launcherIcon",
		cursor: "pointer",
		child: Label("󱢦"),
		onClicked: () => App.toggleWindow("launcher"),
		setup: (self) => {
			self.hook(App, getLauncherIcon, "window-toggled");
		},
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/lock.ts">
import { Widget, Utils } from "../../../imports";
const { Button, Label } = Widget;

export const Lock = () =>
	Button({
		className: "lock",
		cursor: "pointer",
		child: Label(""),
		onClicked: () => Utils.exec("swaylock"),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/network.ts">
import { Network, Widget, Utils } from "../../../imports";
import {
	getWifiIcon,
	getWifiTooltip,
	getWiredIcon,
	getWiredTooltip,
} from "../../../utils/network.js";
const { Stack, Button, Label } = Widget;

const WifiIndicator = () =>
	Label({ has_tooltip: true })
		.bind("label", Network.wifi, "strength", getWifiIcon)
		.bind("tooltip-text", Network.wifi, "strength", getWifiTooltip);

const WiredIndicator = () =>
	Label({ cursor: "pointer" })
		.bind("label", Network.wired, "internet", getWiredIcon)
		.bind("tooltip-text", Network.wired, "internet", getWiredTooltip);

export const NetworkWidget = () =>
	Button({
		className: "network",
		cursor: "pointer",
		onClicked: () => Utils.exec("nm-connection-editor"),
		child: Stack({
			shown: Network.bind("primary").as(
				(/** @type {any} */ p) => p || "wifi",
			),
			children: {
				wifi: WifiIndicator(),
				wired: WiredIndicator(),
			},
		}),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/power.ts">
import { Widget } from "../../../imports";
const { Button, Label } = Widget;

export const PowerMenu = () =>
	Button({
		vexpand: false,
		className: "power",
		cursor: "pointer",
		child: Label(""),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/swallow.ts">
import { Widget } from "../../../imports";
const { Label, Button } = Widget;

import { toggleSwallowStatus, status } from "../../../utils/swallow";

export const Swallow = () =>
	Button({
		className: "swallow",
		cursor: "pointer",
		tooltipText: `Swallow: ${status.value}`,
		onPrimaryClick: toggleSwallowStatus,
		child: Label({
			label: "󰊰",
		}),
	}).hook(status, (self) => (self.tooltipText = `${status.value}`));
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/system.ts">
import { Variable, Widget } from "../../../imports";
import { getCpuClass } from "../../../utils/system";
import { getMemClass } from "../../../utils/system";
const { Button, Revealer, Box, Label, CircularProgress } = Widget;

const divide = ([total, free]) => free / total;

const cpu = Variable(0, {
    poll: [
        3000,
        "top -b -n 1",
        (out) => {
            const match = out.match(/Cpu\(s\):\s*([\d.]+)\s*us/);
            if (match) {
                return divide([100, match[1]]);
            }
            return 0;
        },
    ],
});

const mem = Variable(0, {
    poll: [
        3000,
        "free",
        (out) => {
            const match = out.match(/Mem:\s+(\d+)\s+(\d+)/);
            if (match) {
                return divide([match[1], match[2]]);
            }
            return 0;
        },
    ],
});

/**
 * @param {string} name
 * @param {typeof cpu | typeof ram} process
 * @param {Array<any>} extraChildren
 * @param  {() => void} onPrimary
 */
const systemWidget = (name, process, extraChildren = [], onPrimary) =>
    Button({
        className: `${name}Button`,
        onPrimaryClick: onPrimary,
        child: Box({
            className: name,
            vertical: true,
            children: [
                CircularProgress({
                    className: `${name}Progress`,
                    rounded: true,
                    inverted: false,
                    startAt: 0.27,
                }).bind("value", process),
                ...extraChildren,
            ],
        }),
    });

const CPU = systemWidget(
    "cpu",
    cpu,
    [
        Revealer({
            transition: "slide_down",
            child: Label()
                .bind("label", cpu, "value", (v) => `${Math.floor(v * 100)}%`)
                .bind("className", cpu, "value", getCpuClass),
            transition_duration: 250,
        }),
    ],
    (self) => {
        const revealer = self.child.children[1];
        revealer.revealChild = !revealer.revealChild;
    },
);

const MEM = systemWidget(
    "mem",
    mem,
    [
        Revealer({
            transition: "slide_down",
            child: Label()
                .bind("label", mem, "value", (v) => `${Math.floor(v * 100)}%`)
                .bind("className", mem, "value", getMemClass),
            transition_duration: 250,
        }),
    ],
    (self) => {
        const revealer = self.child.children[1];
        revealer.revealChild = !revealer.revealChild;
    },
);

export const SystemUsage = () =>
    Box({
        className: "systemUsage",
        vertical: true,
        cursor: "pointer",
        children: [CPU, MEM],
    });
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/tray.ts">
import { Widget, SystemTray } from "../../../imports";
import { getTrayItems } from "../../../utils/tray";
const { Box, EventBox, Label, Revealer } = Widget;

const RevIcon = () =>
	Label({
		className: "trayChevron",
		label: "",
	});

const TrayItems = () =>
	Box({
		className: "trayIcons",
		vertical: true,
		setup: (self) => {
			self.hook(SystemTray, getTrayItems);
		},
	});

export const Tray = () =>
	EventBox({
		onPrimaryClick: (self) => {
			self.child.children[0].label = self.child.children[1].revealChild
				? ""
				: "";
			self.child.children[1].revealChild =
				!self.child.children[1].revealChild;
		},
		child: Box({
			className: "tray",
			vertical: true,
			children: [
				RevIcon(),
				Revealer({
					transition: "slide_up",
					child: TrayItems(),
				}),
			],
		}),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/weather.ts">
import { Widget } from "../../../imports";
import {
	WeatherValue,
	getWeatherIcon,
	getWeatherTooltip,
} from "../../../utils/weather";
const { Label } = Widget;

const weatherWidget = () =>
	Label({
		hexpand: false,
		vexpand: false,
		class_name: "weather",
		setup: (self) => {
			self.bind("label", WeatherValue, "value", getWeatherIcon);
			self.bind("tooltip-text", WeatherValue, "value", getWeatherTooltip);
		},
	});

export const Weather = () =>
	Widget.CenterBox({
		vertical: true,
		centerWidget: weatherWidget(),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/modules/workspaces.ts">
import { Widget, Hyprland } from "../../../imports";
import { getFocusedWorkspace } from "../../../utils/hyprland";
const { Box, Button } = Widget;
const { messageAsync } = Hyprland;

export const Workspaces = () =>
	Box({
		className: "workspaces",
		child: Box({
			vertical: true,
			children: Array.from({ length: 10 }, (_, i) => i + 1).map((i) =>
				Button({
					cursor: "pointer",
					attribute: { index: i },
					onClicked: () => messageAsync(`dispatch workspace ${i}`),
					onSecondaryClick: () =>
						messageAsync(`dispatch movetoworkspacesilent ${i}`),
				}),
			),

			setup: (self) => {
				self.hook(Hyprland, getFocusedWorkspace);
			},
		}),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/bar/index.ts">
import { Widget } from "../../imports";
const { Window, Box, CenterBox } = Widget;

// Widgets
import { LauncherIcon } from "./modules/launcher";
import { Workspaces } from "./modules/workspaces";
import { Tray } from "./modules/tray";
import { BatteryWidget } from "./modules/battery";
import { Clock } from "./modules/clock";
import { PowerMenu } from "./modules/power";
import { Swallow } from "./modules/swallow";
import { BluetoothWidget } from "./modules/bluetooth";
import { AudioWidget } from "./modules/audio";
import { NetworkWidget } from "./modules/network";
import { SystemUsage } from "./modules/system";
import { Weather } from "./modules/weather";

const Top = () =>
    Box({
        className: "barTop",
        vertical: true,
        vpack: "start",
        children: [LauncherIcon(), SystemUsage(), Weather()],
    });

const Center = () =>
    Box({
        className: "barCenter",
        vertical: true,
        children: [Workspaces()],
    });

const Bottom = () =>
    Box({
        className: "barBottom",
        vertical: true,
        vpack: "end",
        children: [
            Tray(),
            Box({
                className: "utilsBox",
                vertical: true,
                children: [
                    BluetoothWidget(),
                    AudioWidget(),
                    Swallow(),
                    BatteryWidget(),
                    NetworkWidget(),
                ],
            }),
            Clock(),
            PowerMenu(),
        ],
    });

const Bar = ({ monitor: number } = {}) =>
    Window({
        name: "bar",
        anchor: ["top", "bottom", "left"],
        exclusivity: "exclusive",
        layer: "top",
        margins: [8, 0, 8, 8],
        child: CenterBox({
            className: "bar",
            vertical: true,
            startWidget: Top(),
            centerWidget: Center(),
            endWidget: Bottom(),
        }),
    });

export default Bar;
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/desktop/modules/icons.ts">
import { Widget } from "../../../imports";
const { Box } = Widget;

const DesktopIcons = () =>
	Box({
		className: "desktopIcons",
		vertical: true,
		hpack: "start",
		vpack: "start",
		children: [],
	});

export default DesktopIcons;
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/desktop/modules/menu.ts">
import { Widget, Utils } from "../../../imports";
const { Box, EventBox, Label, MenuItem, Menu } = Widget;
const { exec, execAsync } = Utils;

/**
 * Creates a menu item with an icon.
 * @param {string} icon - The icon to display for the menu item.
 * @param {string} itemLabel - The label for the menu item.
 * @param {Function} onClick - The function to be executed when the menu item is activated.
 * @returns {Object} A menu item object with the specified icon, label, and click action.
 */
function ItemWithIcon(
    icon: string,
    itemLabel: string,
    onClick: Function,
): object {
    return MenuItem({
        className: "desktopMenuItem",
        child: Box({
            children: [
                Label({
                    className: "desktopMenuItemIcon",
                    label: icon,
                }),
                Label(itemLabel),
            ],
        }),
        onActivate: onClick,
    });
}

const Separator = () =>
    MenuItem({
        child: Box({
            className: "separator",
            css: `
            min-height: 1px;
            margin: 3px 6px;
            `,
        }),
    });

const rioMenu = () => {
    return [
        ItemWithIcon("󰆍", "Terminal", () =>
            exec('sh -c "ags-open-window `slurp -d -c 999999 -w 2` foot"'),
        ),
        ItemWithIcon("󰘖", "Resize", () =>
            exec('sh -c "ags-move-window `slurp -d -c 999999 -w 2`"'),
        ),
        ItemWithIcon("󰁁", "Move", () => exec("hyprctl dispatch submap move")),
        ItemWithIcon("󰅖", "Delete", () => exec("hyprctl kill")),
        Separator(),
    ];
};

const Powermenu = () => {
    return MenuItem({
        className: "desktopMenuItem",
        child: Box({
            children: [
                Label({
                    className: "desktopMenuItemIcon",
                    label: "󰐥",
                }),
                Label("Powermenu"),
            ],
        }),
        submenu: Menu({
            className: "desktopMenu",
            children: [
                ItemWithIcon("󰍁", "Lock", () => Utils.exec("gtklock")),
                ItemWithIcon("󰍃", "Log Out", () =>
                    exec("hyprctl dispatch exit"),
                ),
                ItemWithIcon("󰖔", "Suspend", () => exec("systemctl suspend")),
                ItemWithIcon("󰜉", "Reboot", () => exec("systemctl reboot")),
                ItemWithIcon("󰐥", "Shutdown", () => exec("systemctl poweroff")),
            ],
        }),
    });
};

const DesktopMenu = () =>
    EventBox({
        onSecondaryClick: (_, event) =>
            Menu({
                className: "desktopMenu",
                children: [
                    ...rioMenu(),
                    ItemWithIcon("󰈊", "Colorpicker", () =>
                        execAsync(["hyprpicker", "-a", "wl-copy"]),
                    ),
                    Separator(),
                    Powermenu(),
                ],
            }).popup_at_pointer(event),
    });

export default DesktopMenu;
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/desktop/index.ts">
import { Widget } from "../../imports";
const { Window } = Widget;

import DesktopMenu from "./modules/menu";
import DesktopIcons from "./modules/icons";

const Desktop = ({ monitor } = {}) =>
	Window({
		name: "desktop",
		anchor: ["top", "bottom", "left", "right"],
		layer: "bottom",
		monitor,
		child: Widget.Overlay({
			child: DesktopMenu(),
			overlays: [DesktopIcons()],
		}),
	});

export default Desktop;
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/launcher/index.ts">
import { Widget, App, Applications, Utils, Hyprland } from "../../imports";
import PopupWindow from "../../utils/popupWindow";
const { Box, Button, Icon, Label, Scrollable, Entry } = Widget;

const WINDOW_NAME = "launcher";

const truncateString = (str, maxLength) =>
	str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;

const AppItem = (app) =>
	Button({
		className: "launcherApp",
		onClicked: () => {
			App.closeWindow(WINDOW_NAME);
			Hyprland.messageAsync(`dispatch exec gtk-launch ${app.desktop}`);
			++app.frequency;
		},
		setup: (self) => (self.app = app),
		child: Box({
			children: [
				Icon({
					className: "launcherItemIcon",
					icon: app.iconName || "",
					size: 24,
				}),
				Box({
					className: "launcherItem",
					vertical: true,
					vpack: "center",
					children: [
						Label({
							className: "launcherItemTitle",
							label: app.name,
							xalign: 0,
							vpack: "center",
							truncate: "end",
						}),
						!!app.description &&
							Widget.Label({
								className: "launcherItemDescription",
								label:
									truncateString(app.description, 75) || "",
								wrap: true,
								xalign: 0,
								justification: "left",
								vpack: "center",
							}),
					],
				}),
			],
		}),
	});

const Launcher = () => {
	const list = Box({ vertical: true });

	const entry = Entry({
		className: "launcherEntry",
		hexpand: true,
		text: "-",
		onAccept: ({ text }) => {
			const isCommand = text.startsWith(">");
			const appList = Applications.query(text || "");
			if (isCommand === true) {
				App.toggleWindow(WINDOW_NAME);
				Utils.execAsync(text.slice(1));
			} else if (appList[0]) {
				App.toggleWindow(WINDOW_NAME);
				appList[0].launch();
			}
		},
		onChange: ({ text }) =>
			list.children.map((item) => {
				item.visible = item.app.match(text);
			}),
	});

	return Widget.Box({
		className: "launcher",
		vertical: true,
		setup: (self) => {
			self.hook(App, (_, name, visible) => {
				if (name !== WINDOW_NAME) return;

				list.children = Applications.list.map(AppItem);

				entry.text = "";
				if (visible) entry.grab_focus();
			});
		},
		children: [
			entry,
			Scrollable({
				hscroll: "never",
				css: "min-width: 250px; min-height: 360px;",
				child: list,
			}),
		],
	});
};

const AppLauncher = () =>
	PopupWindow({
		name: WINDOW_NAME,
		anchor: ["top", "bottom", "right"],
		margins: [13, 13, 0, 13],
		layer: "overlay",
		transition: "slide_down",
		transitionDuration: 150,
		keymode: "on-demand",
		child: Launcher(),
		setup: (self: { keybind: (arg0: string, arg1: () => void) => any }) =>
			self.keybind("Escape", () => {
				App.closeWindow(WINDOW_NAME);
			}),
	});

export default AppLauncher;
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/music/modules/controls.ts">
import { Widget } from "../../../imports";
import { mprisStateIcon } from "../../../utils/mpris";
import Icons from "../../../utils/icons";

export default (player: {
	previous: () => any;
	playPause: () => any;
	next: () => any;
}) =>
	Widget.CenterBox({
		className: "controls",
		hpack: "center",

		startWidget: Widget.Button({
			onClicked: () => player.previous(),
			child: Widget.Icon(Icons.media.previous),
		}),

		centerWidget: Widget.Button({
			onClicked: () => player.playPause(),

			child: Widget.Icon().bind(
				"icon",
				player,
				"play-back-status",
				mprisStateIcon,
			),
		}),

		endWidget: Widget.Button({
			onClicked: () => player.next(),
			child: Widget.Icon(Icons.media.next),
		}),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/music/modules/cover.ts">
import { Widget } from "../../../imports";

export default (player) =>
	Widget.Box({ className: "cover" }).bind(
		"css",
		player,
		"cover-path",
		(cover) => `background-image: url('${cover ?? ""}')`,
	);
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/music/modules/player_info.ts">
import { Utils, Widget } from "../../../imports";
import Icons from "../../../utils/icons";

export default (player) =>
	Widget.Box({
		className: "player-info",
		vexpand: true,
		vpack: "start",

		children: [
			Widget.Icon({
				hexpand: true,
				hpack: "end",
				className: "player-icon",
				tooltipText: player.identity ?? "",
			}).bind("icon", player, "entry", (entry) => {
				// the Spotify icon is called spotify-client
				if (entry == "spotify") entry = "spotify-client";
				return Utils.lookUpIcon(entry ?? "")
					? entry
					: Icons.media.player;
			}),
		],
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/music/modules/popup_window.ts">
import { App, Widget } from "../../../imports";
const { Box, Revealer, Window } = Widget;

export default ({
	name,
	child,
	revealerSetup = null,
	transition = "crossfade",
	transitionDuration = 200,
	...props
}) => {
	const window = Window({
		name,
		popup: false,
		focusable: false,
		visible: false,
		...props,

		setup: (self) => (self.getChild = () => child),

		child: Box({
			css: `
        min-height: 1px;
        min-width: 1px;
        padding: 1px;
      `,
			child: Revealer({
				transition,
				transitionDuration,
				child: child,

				setup:
					revealerSetup ??
					((self) =>
						self.hook(App, (self, currentName, visible) => {
							if (currentName === name) {
								self.reveal_child = visible;
							}
						})),
			}),
		}),
	});

	return window;
};
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/music/modules/time_info.ts">
import { Widget } from "../../../imports";
import { lengthStr } from "../../../utils/mpris";

export const PositionLabel = (player) =>
	Widget.Label({
		className: "position",
		hexpand: true,
		xalign: 0,

		setup: (self) => {
			const update = (_, time) => {
				player.length > 0
					? (self.label = lengthStr(time || player.position))
					: (self.visible = !!player);
			};

			self.hook(player, update, "position").poll(1000, update);
		},
	});

export const LengthLabel = (player) =>
	Widget.Label({
		className: "length",
		hexpand: true,
		xalign: 1,
	})
		.bind("visible", player, "length", (length) => length > 0)
		.bind("label", player, "length", (length) => lengthStr(length));

export const Position = (player) =>
	Widget.Slider({
		className: "position",
		draw_value: false,

		onChange: ({ value }) => (player.position = player.length * value),

		setup: (self) => {
			const update = () => {
				if (self.dragging) return;

				self.visible = player.length > 0;

				if (player.length > 0) {
					self.value = player.position / player.length;
				}
			};

			self.hook(player, update)
				.hook(player, update, "position")
				.poll(1000, update);
		},
	});

export default (player) =>
	Widget.Box({
		vertical: true,
		vexpand: true,
		vpack: "end",

		children: [
			Widget.Box({
				hexpand: true,
				children: [PositionLabel(player), LengthLabel(player)],
			}),
			Position(player),
		],
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/music/modules/title_artists.ts">
import { Widget } from "../../../imports";

export const Title = (player) =>
	Widget.Scrollable({
		className: "title",
		vscroll: "never",
		hscroll: "automatic",

		child: Widget.Label({
			className: "title",
			label: "Nothing playing",
		}).bind(
			"label",
			player,
			"track-title",
			(title) => title ?? "Nothing playing",
		),
	});

export const Artists = (player) =>
	Widget.Scrollable({
		className: "artists",
		vscroll: "never",
		hscroll: "automatic",

		child: Widget.Label({ className: "artists" }).bind(
			"label",
			player,
			"track-artists",
			(artists) => artists.join(", ") ?? "",
		),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/music/index.ts">
import { Mpris, Widget } from "../../imports";
import { findPlayer, generateBackground } from "../../utils/mpris";

import PopupWindow from "./modules/popup_window";
import Cover from "./modules/cover";
import { Artists, Title } from "./modules/title_artists";
import TimeInfo from "./modules/time_info";
import Controls from "./modules/controls";
import PlayerInfo from "./modules/player_info";

const Info = (player) =>
	Widget.Box({
		className: "info",
		vertical: true,
		vexpand: false,
		hexpand: false,
		homogeneous: true,

		children: [
			PlayerInfo(player),
			Title(player),
			Artists(player),
			Controls(player),
			TimeInfo(player),
		],
	});

const MusicBox = (player) =>
	Widget.Box({
		className: "music window",
		children: [Cover(player), Info(player)],
	}).bind("css", player, "cover-path", generateBackground);

const Media = () =>
	PopupWindow({
		monitor: 0,
		anchor: ["top"],
		layer: "top",
		margins: [8, 0, 0, 0],
		name: "music",
		child: Widget.Box(),
	}).bind("child", Mpris, "players", (players) => {
		if (players.length == 0) return Widget.Box();
		return MusicBox(findPlayer(players));
	});

export default Media;
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/notifications/index.ts">
import { Hyprland, Notifications, Utils, Widget } from "../../imports";
const { Box, Icon, Label, Button, EventBox, Window } = Widget;
const { lookUpIcon } = Utils;

const closeAll = () => {
	Notifications.popups.map((n) => n.dismiss());
};

const NotificationIcon = ({ app_entry, app_icon, image }) => {
	if (image) {
		return Box({
			css: `
        background-image: url("${image}");
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
      `,
		});
	}

	if (lookUpIcon(app_icon)) {
		return Icon(app_icon);
	}

	if (app_entry && lookUpIcon(app_entry)) {
		return Icon(app_entry);
	}

	return null;
};

const Notification = (notif) => {
	const icon = Box({
		vpack: "start",
		class_name: "icon",
		// @ts-ignore
		setup: (self: { child: any }) => {
			const icon = NotificationIcon(notif);
			if (icon !== null) self.child = icon;
		},
	});

	const title = Label({
		class_name: "title",
		xalign: 0,
		justification: "left",
		hexpand: true,
		max_width_chars: 24,
		truncate: "end",
		wrap: true,
		label: notif.summary,
		use_markup: true,
	});

	const body = Label({
		class_name: "body",
		hexpand: true,
		use_markup: true,
		xalign: 0,
		justification: "left",
		max_width_chars: 100,
		wrap: true,
		label: notif.body,
	});

	const actions = Box({
		class_name: "actions",
		children: notif.actions
			.filter(({ id }) => id != "default")
			.map(({ id, label }) =>
				Button({
					class_name: "action-button",
					on_clicked: () => notif.invoke(id),
					hexpand: true,
					child: Label(label),
				}),
			),
	});

	return EventBox({
		on_primary_click: () => {
			if (notif.actions.length > 0) notif.invoke(notif.actions[0].id);
		},
		on_middle_click: closeAll,
		on_secondary_click: () => notif.dismiss(),
		child: Box({
			class_name: `notification ${notif.urgency}`,
			vertical: true,

			children: [
				Box({
					class_name: "info",
					children: [
						icon,
						Box({
							vertical: true,
							class_name: "text",
							vpack: "center",

							setup: (self) => {
								if (notif.body.length > 0)
									self.children = [title, body];
								else self.children = [title];
							},
						}),
					],
				}),
				actions,
			],
		}),
	});
};

let lastMonitor;
const Notifs = () =>
	Window({
		name: "notifications",
		anchor: ["top", "right"],
		margins: [8, 8, 8, 0],
		child: Box({
			css: "padding: 1px;",
			class_name: "notifications",
			vertical: true,
			// @ts-ignore
			children: Notifications.bind("popups").transform((popups) => {
				return popups.map(Notification);
			}),
		}),
	}).hook(Hyprland.active, (self) => {
		// prevent useless resets
		if (lastMonitor === Hyprland.active.monitor) return;

		self.monitor = Hyprland.active.monitor.id;
	});

export default Notifs;
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/popups/modules/brightnessPopup.ts">
import { Widget, Utils } from "../../../imports";
import Brightness from "../../../services/brightness";
const { Box, Slider, Label, Revealer } = Widget;

const BrightnessIcon = () =>
	Label({
		className: "brtPopupIcon",
		setup: (self) => {
			self.hook(Brightness, (self) => {
				const icons = ["", "", "", "", "", "", "", "", ""];

				let index = Math.floor((Brightness.screen * 100) / 11);
				index = Math.max(0, Math.min(index, icons.length - 1));

				if (index >= 0 && index < icons.length) {
					self.label = icons[index].toString();
				} else {
					console.log("Index out of bounds:", index);
				}
			});
		},
	});

const PercentBar = () =>
	Slider({
		className: "brtPopupBar",
		drawValue: false,
		onChange: ({ value }) => (Brightness.screen = value),
		setup: (self) => {
			self.hook(Brightness, (self) => (self.value = Brightness.screen));
		},
	});

export const BrightnessPopup = () =>
	Box({
		css: `min-height: 1px;
          min-width: 1px;`,
		child: Revealer({
			transition: "slide_up",
			child: Box({
				className: "brightnessPopup",
				children: [BrightnessIcon(), PercentBar()],
			}),
			attribute: { count: 0 },
			setup: (self) => {
				self.hook(Brightness, (self) => {
					self.revealChild = true;
					self.attribute.count++;
					Utils.timeout(1500, () => {
						self.attribute.count--;

						if (self.attribute.count === 0)
							self.revealChild = false;
					});
				});
			},
		}),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/popups/modules/volumePopup.ts">
import { Widget, Utils, Audio } from "../../../imports.js";
import { getSliderIcon, volumePercentBar } from "../../../utils/audio";
const { Box, Revealer } = Widget;
const { speaker } = Audio;
const { timeout } = Utils;

export const VolumePopup = () =>
	Box({
		css: `
        min-height: 2px;
        min-width: 2px;
    `,
		child: Revealer({
			transition: "slide_up",
			child: Box({
				className: "volumePopup",
				children: [getSliderIcon(), volumePercentBar()],
			}),
			attribute: { count: 0 },
			setup: (self) =>
				self.hook(
					speaker,
					() => {
						self.reveal_child = true;
						self.attribute.count++;
						timeout(1500, () => {
							self.attribute.count--;

							if (self.attribute.count === 0)
								self.reveal_child = false;
						});
					},
					"notify::volume",
				),
		}),
	});
</file>

<file path="homes/notashelf/services/wayland/ags/src/windows/popups/index.ts">
import { Widget } from "../../imports";

// Widgets
import { BrightnessPopup } from "./modules/brightnessPopup";
import { VolumePopup } from "./modules/volumePopup";

const Popups = () =>
	Widget.Window({
		name: "popups",
		className: "popups",
		anchor: ["bottom", "right"],
		layer: "overlay",
		margins: [0, 12, 8, 0],
		child: Widget.Box({
			vertical: true,
			children: [BrightnessPopup(), VolumePopup()],
		}),
	});

export default Popups;
</file>

<file path="homes/notashelf/services/wayland/ags/src/.eslintrc.yml">
root: true
env:
  es2021: true
extends:
  - "eslint:recommended"
  - "plugin:@typescript-eslint/recommended"
parser: "@typescript-eslint/parser"
parserOptions:
  ecmaVersion: 2022
  sourceType: "module"
  project: "./tsconfig.json"
  warnOnUnsupportedTypeScriptVersion: false
ignorePatterns:
  - types/
  - node_modules/
  - bin/
  - result/
  - style/
plugins:
  - "@typescript-eslint"
rules:
  "@typescript-eslint/ban-ts-comment":
    - "off"
  "@typescript-eslint/no-non-null-assertion":
    - "off"
  "@typescript-eslint/no-explicit-any":
    - "off"
  "@typescript-eslint/no-unused-vars":
    - error
    - varsIgnorePattern: (^unused|_$)
      argsIgnorePattern: ^(unused|_)
  "@typescript-eslint/no-empty-interface":
    - "off"

  comma-dangle:
    - error
    - always-multiline
  comma-spacing:
    - error
    - before: false
      after: true
  comma-style:
    - error
    - last
  curly:
    - error
    - multi-or-nest
    - consistent
  dot-location:
    - error
    - property
  eol-last:
    - error
  indent:
    - error
    - 4
    - SwitchCase: 1
  keyword-spacing:
    - error
    - before: true
  lines-between-class-members:
    - error
    - always
    - exceptAfterSingleLine: true
  padded-blocks:
    - error
    - never
    - allowSingleLineBlocks: false
  prefer-const:
    - error
  quotes:
    - error
    - double
    - avoidEscape: true
  semi:
    - error
    - always
  nonblock-statement-body-position:
    - error
    - below
  no-trailing-spaces:
    - error
  no-useless-escape:
    - off
  max-len:
    - error
    - code: 100
  func-call-spacing:
    - error
  array-bracket-spacing:
    - error
  space-before-blocks:
    - error
  key-spacing:
    - error
  object-curly-spacing:
    - error
    - always

globals:
  globalThis: readonly
  imports: readonly
  Intl: readonly
  log: readonly
  logError: readonly
  print: readonly
  printerr: readonly
  console: readonly
</file>

<file path="homes/notashelf/services/wayland/ags/src/.gitignore">
# NodeJS dependencies
node_modules/

# Type definitions for TypeScript and friends
# it's handled by ags, but we may need to link it manually
types/

# Build configuration
config.js
</file>

<file path="homes/notashelf/services/wayland/ags/src/.prettierrc">
{}
</file>

<file path="homes/notashelf/services/wayland/ags/src/.stylelintrc.yml">
extends: stylelint-config-standard-scss
ignoreFiles:
  - "**/*.js"
  - "**/*.ts"
rules:
  selector-type-no-unknown: null
  declaration-empty-line-before: null
  no-descending-specificity: null
  selector-pseudo-class-no-unknown: null
  color-function-notation: legacy
  alpha-value-notation: number
  scss/operator-no-unspaced: null
  scss/no-global-function-names: null
  scss/dollar-variable-empty-line-before: null
</file>

<file path="homes/notashelf/services/wayland/ags/src/imports.ts">
export const require = async (file: string) =>
    (await import(resource(file))).default;
export const resource = (file: string) =>
    `resource:///com/github/Aylur/ags/${file}.js`;
export const fromService = async (service: string) =>
    await Service.import(`${service}`);
export const requireCustom = async (path: string) =>
    (await import(path)).default;

export const App = await require("app");
export const GLib = await requireCustom("gi://GLib?version=2.0");
export const Gio = await requireCustom("gi://Gio");
export const Gtk = await requireCustom("gi://Gtk?version=3.0");
export const Service = await require("service");
export const Utils = await import(resource("utils"));
export const Variable = await require("variable");
export const Widget = await require("widget");

// Services
export const Battery = await fromService("battery");
export const Bluetooth = await fromService("bluetooth");
export const Hyprland = await fromService("hyprland");
export const Mpris = await fromService("mpris");
export const Network = await fromService("network");
export const Applications = await fromService("applications");
export const Audio = await fromService("audio");
export const Notifications = await fromService("notifications");
export const SystemTray = await fromService("systemtray");
</file>

<file path="homes/notashelf/services/wayland/ags/src/main.ts">
import { App, Notifications } from "./imports";

// Windows
import AppLauncher from "./windows/launcher/index";
import Bar from "./windows/bar/index";
import Desktop from "./windows/desktop/index";
import Popups from "./windows/popups/index";
import Notifs from "./windows/notifications/index";
import Media from "./windows/music/index";

App.connect("config-parsed", () => console.log("Config parsed!"));

Notifications.popupTimeout = 5000;
Notifications.forceTimeout = false;
Notifications.cacheActions = true;

// Main config
App.config({
    style: "./style.css",
    closeWindowDelay: {
        launcher: 300,
        music: 300,
    },
});

function addWindows(windows: (typeof Window)[]): void {
    windows.forEach((win) => App.addWindow(win));
}

// Spawn windows, or load them into memory
try {
    addWindows([AppLauncher(), Bar(), Media(), Desktop(), Popups(), Notifs()]);
} catch (error) {
    console.error(error);
    App.quit();
}

export {};
</file>

<file path="homes/notashelf/services/wayland/ags/src/package.json">
{
	"name": "nyx-ags",
	"author": "NotAShelf",
	"kofi": "https://ko-fi.com/aylur",
	"description": "The AGS configuration segment of my NixOS configurations.",
	"devDependencies": {
		"@typescript-eslint/eslint-plugin": "^5.62.0",
		"@typescript-eslint/parser": "^5.62.0",
		"eslint": "^8.57.0",
		"eslint-plugin-import": "^2.29.1",
		"eslint-plugin-n": "^16.6.2",
		"eslint-plugin-promise": "^6.2.0",
		"stylelint-config-standard-scss": "^10.0.0"
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/src/style.css">
*:not(selection):not(tooltip){all:unset;text-shadow:0 2px 3px rgba(0,0,0,0.2);font-family:"Material Design Icons", "Iosevka Nerd Font Mono", Inter, Roboto, sans-serif}tooltip{border-radius:calc(12px + 2px);background:#1e1e2e}.launcherIcon{background:#313244;font-family:symbolsnerdfontmono;border-radius:12px;margin:6px 4px;padding:6px;min-height:1.5rem;transition:all 0.2s cubic-bezier(0.3, 0, 1, 1)}.launcherIcon:hover{background:#3c3d53}.systemUsage{color:#cdd6f4;background:#313244;font-family:symbolsnerdfontmono;border-radius:12px;margin:4px}.cpuButton{padding:6px 2px 3px 2px;margin:1px}.cpuProgress{color:#b4befe;padding:4px 4px;margin:0.1rem;font-size:4px;background:#1e1e2e;min-height:1.2rem;min-width:1.2rem}.memButton{padding:3px 2px 6px 2px;margin:1px}.memProgress{color:#89b4fa;padding:4px 4px;margin:0.1rem;font-size:4px;background:#1e1e2e;min-height:1.2rem;min-width:1.2rem}.weather{background:#313244;font-family:"Material Symbols Sharp", Roboto;border-radius:12px;margin:6px 4px;padding:4px;min-height:1.5rem;min-width:1rem;transition:all 0.2s cubic-bezier(0.3, 0, 1, 1)}.weather:hover{background:#3c3d53}.workspaces{background:transparent;padding:14px}.workspaces button{transition:all 0.3s cubic-bezier(0.2, 0, 0, 1),border 0.35s cubic-bezier(0.2, 0, 0, 1);margin:6px 3px;color:#cdd6f4;background:#313244;margin:5px 3px;min-width:0.6rem;min-height:0.6rem;color:transparent;background:#cdd6f4;border-radius:99px}.workspaces button:hover{color:#b4befe}.workspaces button:hover{background:#b4befe}.workspaces button.focused{border-radius:18px;background:#89b4fa;padding:8px 0}.tray{margin:0}.trayChevron{font-family:symbolsnerdfontmono}.trayIcons{margin:3px 0 0}.trayIcons:hover{background:#3c3d53}.trayIcon{margin:0 0 3px}.trayMenu{transition:all 0.3s cubic-bezier(0.2, 0, 0, 1),border 0.35s cubic-bezier(0.2, 0, 0, 1);margin:6px 3px;color:#cdd6f4;background:#313244;background:#313244;border-radius:12px;margin:6px 4px;padding:4px}.trayMenu:hover{color:#b4befe}.trayMenu separator{background-color:#cdd6f4}.trayMenu menuitem{border-radius:0;background:#313244;margin:4px 2px}.battery{transition:all 0.3s cubic-bezier(0.2, 0, 0, 1),border 0.35s cubic-bezier(0.2, 0, 0, 1);margin:6px 3px;color:#cdd6f4;background:#313244}.battery:hover{color:#b4befe}.bluetooth{transition:all 0.3s cubic-bezier(0.2, 0, 0, 1),border 0.35s cubic-bezier(0.2, 0, 0, 1);margin:6px 3px;color:#cdd6f4;background:#313244}.bluetooth:hover{color:#b4befe}.bluetooth-paired{color:#cdd6f4}.bluetooth-active{color:#cdd6f4}.bluetooth-disabled{color:#74769a;transition:all 0.3s cubic-bezier(0.2, 0, 0, 1),border 0.35s cubic-bezier(0.2, 0, 0, 1)}.bluetooth-disabled:hover{color:#f38ba8}.lock{background:#313244;font-size:24px;border-radius:12px;margin:2px 4px;padding:2px}.swallow{transition:all 0.3s cubic-bezier(0.2, 0, 0, 1),border 0.35s cubic-bezier(0.2, 0, 0, 1);margin:6px 3px;color:#cdd6f4;background:#313244}.swallow:hover{color:#b4befe}.audio{transition:all 0.3s cubic-bezier(0.2, 0, 0, 1),border 0.35s cubic-bezier(0.2, 0, 0, 1);margin:6px 3px;color:#cdd6f4;background:#313244}.audio:hover{color:#b4befe}.network{transition:all 0.3s cubic-bezier(0.2, 0, 0, 1),border 0.35s cubic-bezier(0.2, 0, 0, 1);margin:6px 3px;color:#cdd6f4;background:#313244}.network:hover{color:#b4befe}.clock{background:#313244;color:#cdd6f4;font-family:robotomono;font-weight:800;border-radius:12px;margin:6px 4px;padding:6px}.power{color:#f38ba8;background:#313244;font-size:24px;border-radius:12px;margin:6px 4px;padding:6px;min-height:1.5rem;transition:all 0.2s cubic-bezier(0.3, 0, 1, 1)}.power:hover{background:#3c3d53;color:#f5a2b9}.bar{border-radius:calc(12px + 2px);color:#cdd6f4;background:#1e1e2e;font-family:roboto;border-radius:14px;padding:2px}.utilsBox{border-radius:12px;color:#cdd6f4;background:#313244;font-family:symbolsnerdfontmono;margin:4px;padding:6px}.systemInfo{border-radius:12px;color:#cdd6f4;background:#313244;font-family:symbolsnerdfontmono;margin:4px;padding:6px}.launcher{color:#cdd6f4;background:#1e1e2e;font-family:roboto;border-radius:12px;margin:0 0 16px;padding:6px}.launcherApp{border-radius:12px;margin:3px;padding:3px}.launcherApp:focus{background:#313244}.launcherEntry{caret-color:#cdd6f4;background:#313244;border-radius:10px;margin:6px;padding:3px 12px}.launcherItemIcon{margin:3px 6px}.launcherItemTitle{font-size:16px;font-weight:bold}.launcherItemDescription{font-size:12px}.desktopMenu{background:#1e1e2e;color:#cdd6f4;font-family:roboto;border-radius:14px;padding:6px 3px}.desktopMenuItem{border-radius:14px;margin:0 3px;padding:6px 12px;transition:all 0.2s cubic-bezier(0.3, 0, 1, 1)}.desktopMenuItem:hover{background:#3c3d53;color:#e2e7f9}.desktopMenuItemIcon{font-family:symbolsnerdfontmono;padding:2px 8px 2px 2px}.separator{background:#313244;padding:1px 3px}.desktopIcons{margin:24px 0 0 24px}.desktopIcon{border-radius:6px;padding:6px;transition:all 200ms cubic-bezier(0, 0, 1, 1)}.desktopIcon:hover{background:rgba(180,190,254,0.7)}.desktopIconLabel{color:#313244;font-family:roboto}.brightnessPopup{background:#1e1e2e;border-radius:12px;margin:6px;padding:12px;min-width:200px}.brtPopupIcon{font-family:symbolsnerdfontmono;margin:0 6px 0 0}.brtPopupBar{min-width:200px}.brtPopupBar scale{min-height:12px}.brtPopupBar trough{background:rgba(49,50,68,0.5);border-radius:24px;min-height:12px}.brtPopupBar highlight{background:#cdd6f4;border-radius:24px;min-width:12px}.volumePopup{background:#1e1e2e;border-radius:12px;margin:6px;padding:12px;min-width:200px}.volPopupIcon{font-family:symbolsnerdfontmono;margin:0 6px 0 0}.volPopupBar{min-width:200px}.volPopupBar scale{min-height:12px}.volPopupBar trough{background:rgba(49,50,68,0.5);border-radius:24px;min-height:12px}.volPopupBar highlight{background:#cdd6f4;border-radius:24px;min-width:12px}.music.window{background:rgba(0,0,0,0.5);margin:5px 10px 15px;padding:2px}.music.window .cover{background-position:center;background-size:cover;border-radius:12px;box-shadow:0 1px 2px -1px rgba(0,0,0,0.5);margin:0.4rem;min-height:13rem;min-width:13rem}.music.window .info{margin:0.5rem}.music.window .info label,.music.window .info scale{margin:0.3rem 0}.music.window .info label.position,.music.window .info label.length{font-size:0.8rem;margin-bottom:0}.music.window .info scale{margin-top:0;margin-bottom:0}.music.window .info .title{font-size:1.5rem;font-weight:bold;min-width:14rem}.music.window .controls button{margin:0 0.2rem;font-size:1.5rem}.music.window .player-info{margin-bottom:0}.music.window .player-info .player-icon{font-size:1.2rem}.notification{border-radius:calc(12px + 2px);margin:5px 5px 5px 12px;min-width:25rem;background-color:#1e1e2e;color:#cdd6f4}.notification.low{border:1.5px solid #b4befe}.notification.normal{border:1.5px solid #89b4fa}.notification.critical{border:1.5px solid #f38ba8}.notifications widget:last-child .notification{margin-bottom:15px}.notification .icon image{font-size:5rem;margin:0.5rem;min-height:5rem;min-width:5rem}.notification .icon>box{border-radius:12px;margin:0.5rem;min-height:5rem;min-width:5rem}.notification .actions .action-button{border-radius:calc(12px + 2px);transition:all 0.3s cubic-bezier(0.2, 0, 0, 1),border 0.35s cubic-bezier(0.2, 0, 0, 1);padding:4px 0}.notification .actions .action-button:hover{background:#cdd6f4}.notification .text{margin:6px 4px}.notification .text .title{margin:4px 6px;color:#cdd6f4;font-weight:900}.notification .text .body{margin:4px 6px;color:#cdd6f4;font-weight:600}
</file>

<file path="homes/notashelf/services/wayland/ags/src/tsconfig.json">
{
	"compilerOptions": {
		"target": "ES2022",
		"module": "ES2022",
		"lib": ["ES2022"],
		"allowJs": true,
		"checkJs": true,
		"strict": true,
		"noImplicitAny": false,
		"baseUrl": ".",
		"typeRoots": ["./types"],
		"skipLibCheck": true
	}
}
</file>

<file path="homes/notashelf/services/wayland/ags/.envrc">
use nix
</file>

<file path="homes/notashelf/services/wayland/ags/default.nix">
{
  inputs,
  osConfig,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) elem path;
  inherit (lib.modules) mkIf;
  inherit (osConfig.modules) device;
  inherit (import ./bin {inherit pkgs lib;}) ags-open-window ags-move-window ags-hyprctl-swallow;

  agsPkg = inputs.ags.packages.${pkgs.stdenv.system}.ags;

  acceptedTypes = ["desktop" "laptop" "lite" "hybrid"];
in {
  config = mkIf (elem device.type acceptedTypes) {
    home.packages = [agsPkg];
    systemd.user.services.ags = let
      # dependencies required for the ags runtime to function properly
      # some of those dependencies are used internally for setting variables
      # or basic functionality where built-in services do not suffice
      coreDeps = with pkgs; [
        inputs.hyprpicker.packages.${pkgs.stdenv.system}.default
        inputs.hyprland.packages.${pkgs.stdenv.system}.default
        config.programs.foot.package

        # basic functionality
        inotify-tools
        gtk3

        # script and service helpers
        bash
        brightnessctl
        coreutils
        gawk
        gvfs
        imagemagick
        libnotify
        procps
        ripgrep
        slurp
        sysstat

        # runtime scripts
        ags-open-window
        ags-move-window
        ags-hyprctl-swallow
      ];

      # applications that are not necessarily required to compile ags
      # but are used by the widgets to launch certain applications
      widgetDeps = with pkgs; [
        pavucontrol
        networkmanagerapplet
        blueman
      ];

      dependencies = coreDeps ++ widgetDeps;

      agsSrc = path {
        name = "ags-configuration-src";
        path = ./src;
      };

      agsSource = pkgs.runCommand "build-ags-configuration" {nativeBuildInputs = with pkgs; [bun dart-sass];} ''
        mkdir -p $out

        # Compile stylesheet
        sass --verbose --style=compressed --no-source-map \
          ${agsSrc}/style/main.scss \
          $out/style.css

        # Build the configuration file with Bun
        bun build ${agsSrc}/main.ts \
          --external 'resource://*' \
          --external 'gi://*' \
          --external 'file://*' \
          --public-path ${agsSrc} \
          --target bun \
          --outfile $out/config.js
      '';
    in {
      Install.WantedBy = ["graphical-session.target"];

      Unit = {
        Description = "Aylur's Gtk Shell (Ags)";
        After = ["graphical-session-pre.target"];
        PartOf = [
          "tray.target"
          "graphical-session.target"
        ];
      };

      Service = {
        Type = "simple";
        Environment = "PATH=/run/wrappers/bin:${lib.makeBinPath dependencies}";
        ExecStart = pkgs.writeShellScript "ags-start" ''
          # Use $XDG_RUNTIME_DIR/ags as the configuration directory
          # with compiled configuration and stylesheet files
          ${agsPkg}/bin/ags --config ${agsSource}/config.js
        '';

        # Kill and restart ags on SIGUSR2
        # provides some kind of a hot-reloading functionality
        # which is not *really* necessary, but is there anyway
        ExecReload = "${pkgs.coreutils}/bin/kill -SIGUSR2 $MAINPID";

        # Takes a value between -20 and 19. Higher values (e.g. 19) mean lower priority.
        # Lower priority means the process will get less CPU time and therefore will be slower.
        # Fortunately I do not need my status bar to be fast. Also, the difference is almost
        # unnoticeable, and definitely negligible.
        Nice = 19;

        # Hardening options.
        # Ags is a NodeJS runtime, and is allowed to execute arbitrary JavaScript code.
        # Also in my config, it is allowed to call for Python and Bash scripts.
        # Indeed, this is a security risk, and therefore we must make an effort to reduce
        # this risk by hardening the systemd service as much as possible.
        # See: `man 5 systemd.exec`
        ProtectSystem = "strict";
        ProtectHome = "read-only";
        ProtectHostname = true;
        ProtectClock = true;
        ProtectKernelTunables = true;
        ProtectKernelModules = true;
        ProtectKernelLogs = true;
        ProtectControlGroups = true;

        PrivateUsers = true;
        PrivateDevices = true;

        RestrictAddressFamilies = ["AF_UNIX" "AF_INET" "AF_INET6"];
        RestrictNamespaces = true;
        RestrictSUIDSGID = true;
        RestrictRealtime = true;

        RemoveIPC = true;
        PrivateMounts = true;

        # FIXME: ags cannot start if this is set
        # MemoryDenyWriteExecute = true;
        # CapabilityBoundingSet = "";
        # System Call Filtering
        # SystemCallArchitectures = "native";
        # SystemCallFilter = ["~@clock @process"];

        NoNewPrivileges = true;
        LockPersonality = true;

        # Proc filesystem
        ProcSubset = "pid";
        ProtectProc = "invisible";

        # Runtime access control
        RuntimeDirectory = "ags";
        RuntimeDirectoryMode = "0700";

        CacheDirectory = ["ags"];
        UMask = "0027";
        ReadWritePaths = [
          # Socket and runtime directory access
          # %t refers to $XDG_RUNTIME_DIR
          "%t/hypr"
          "%t/dconf/user"
          "%t/pulse"
          "%t/ags"
          "%t/gvfs"
          "%t/gvfsd"

          # Additional directories required for
          # working with cached files
          "%h/.cache/ags"
          "%h/.local/share/firefox-mpris/"
        ];

        # restart on failure
        Restart = "on-failure";
        KillMode = "mixed";
      };
    };
  };
}
</file>

<file path="homes/notashelf/services/wayland/ags/README.md">
# Ags Configuration

A complete-ish shell replacement with a strong dependency on Hyprland. Currently
features a drop-in replacement for my old Waybar configuration paired with a few
other features that I found interesting, such as a program launcher and desktop
right click capture.

## Credits

I have taken inspiration or/and code snippets from the cool people below. If you
like this configuration, consider giving them a star on their respective
repositories.

- [Exoess](https://github.com/exoess/.files) - initially based on their
  configuration
- [SoraTenshi](https://github.com/SoraTenshi/ags-env) - the connection widget
  and weather module inspiration
- [Fufexan](https://github.com/fufexan/dotfiles/tree/main/home/programs/ags) -
  cool dude overall, inspiration for a few widgets and his willingness to help
  with my skill issues

And of course [Aylur](https://github.com/Aylur) for his awesome work on AGS.
</file>

<file path="homes/notashelf/services/wayland/ags/shell.nix">
{pkgs ? import <nixpkgs> {}}: let
  # trivial builders
  inherit (pkgs) mkShell writeShellScriptBin;
in
  mkShell {
    buildInputs = with pkgs; [
      nodejs-slim

      # while developing locally, you need types and other eslint deps
      # so that our eslint config works properly
      # pnpm is used to fetch the deps from package.json
      nodePackages.pnpm

      # dart-sass is for compiling the stylesheets
      dart-sass
      (writeShellScriptBin "compile-stylesheet" ''
        # compile scss files
        ${dart-sass}/bin/sass --verbose \
          --style compressed \
          --no-source-map --fatal-deprecation --future-deprecation \
          ./style/main.scss > ./style.css
      '')
    ];
  }
</file>

<file path="homes/notashelf/services/wayland/clipboard/default.nix">
{
  pkgs,
  lib,
  osConfig,
  ...
}: let
  inherit (lib) mkIf mkGraphicalService getExe;
  inherit (osConfig) meta;
in {
  config = mkIf meta.isWayland {
    systemd.user.services = {
      cliphist = mkGraphicalService {
        Unit.Description = "Clipboard history service";
        Service = {
          ExecStart = "${pkgs.wl-clipboard}/bin/wl-paste --watch ${getExe pkgs.cliphist} store";
          Restart = "always";
        };
      };

      wl-clip-persist = mkGraphicalService {
        Unit.Description = "Persistent clipboard for Wayland";
        Service = {
          ExecStart = "${getExe pkgs.wl-clip-persist} --clipboard both";
          Restart = "always";
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/services/wayland/gammastep/default.nix">
{
  lib,
  osConfig,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig) meta;
in {
  config = mkIf meta.isWayland {
    services.gammastep = {
      enable = true;
      provider = "geoclue2";
    };
  };
}
</file>

<file path="homes/notashelf/services/wayland/hyprpaper/default.nix">
{
  inputs,
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) map;
  inherit (lib.modules) mkIf;
  inherit (lib.meta) getExe;
  inherit (lib.strings) concatStringsSep;

  inherit (osConfig) modules;
  env = modules.usrEnv;
  sys = modules.system;

  monitors = modules.device.monitors;

  hyprpaper = inputs.hyprpaper.packages.${pkgs.stdenv.system}.default;
  wallpkgs = inputs.wallpkgs.packages.${pkgs.stdenv.system};
in {
  config = mkIf ((sys.video.enable) && (env.isWayland && (env.desktop == "Hyprland"))) {
    systemd.user.services.hyprpaper = lib.mkHyprlandService {
      Unit.Description = "Hyprland wallpaper daemon";
      Service = {
        Type = "simple";
        ExecStart = "${getExe hyprpaper}";
        Restart = "on-failure";
      };
    };
    xdg.configFile."hypr/hyprpaper.conf" = {
      text = let
        wallpaper = "${wallpkgs.catppuccin}/share/wallpapers/catppuccin/01.png";
      in ''
        preload=${wallpaper}
        ${concatStringsSep "\n" (map (monitor: ''wallpaper=${monitor},${wallpaper}'') monitors)}
        ipc=off
      '';
    };
  };
}
</file>

<file path="homes/notashelf/services/wayland/mako/default.nix">
_: {
  programs.mako = {
    enable = false;

    backgroundColor = "#303446";
    textColor = "#c6d0f5";
    borderColor = "#8caaee";
    padding = "15";
    defaultTimeout = 7000;
    borderSize = 3;
    borderRadius = 10;
    height = 300;
    font = "monospace 15";

    extraConfig = ''
      [urgency=high]
      border-color=#ef9f76
    '';
  };
}
</file>

<file path="homes/notashelf/services/wayland/swaybg/default.nix">
{
  pkgs,
  lib,
  osConfig,
  ...
}: let
  inherit (lib) mkIf getExe mkGraphicalService;
  inherit (osConfig) modules meta;

  env = modules.usrEnv;
in {
  config = mkIf (meta.isWayland && (env.desktop != "Hyprland")) {
    systemd.user.services = {
      swaybg = mkGraphicalService {
        Unit.Description = "Wallpaper chooser service";
        Service = let
          wall = builtins.fetchurl {
            url = "https://raw.githubusercontent.com/catppuccin/wallpapers/main/wallpapers/catppuccin/01.png";
            sha256 = lib.fakeHash;
          };
        in {
          ExecStart = "${getExe pkgs.swaybg} -i ${wall}";
          Restart = "always";
        };
      };
    };
  };
}
</file>

<file path="homes/notashelf/services/wayland/swayidle/default.nix">
{
  osConfig,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) getExe mkIf;

  env = osConfig.modules.usrEnv;
  locker = getExe env.programs.screenlock.package;

  systemctl = "${pkgs.systemd}/bin/systemctl";
  suspendScript = pkgs.writeShellScript "suspend-script" ''
    ${pkgs.pipewire}/bin/pw-cli i all | ${pkgs.ripgrep}/bin/rg running
    # only suspend if audio isn't running
    if [ $? == 1 ]; then
      ${systemctl} suspend
    fi
  '';
in {
  # TODO: can we make it so that it works with sway *or* hyprland based on which one is enabled?
  config = mkIf env.desktops.hyprland.enable {
    systemd.user.services.swayidle.Install.WantedBy = ["hyprland-session.target"];

    # screen idle
    services.swayidle = {
      enable = true;
      extraArgs = ["-d" "-w"];
      events = [
        {
          event = "before-sleep";
          command = "${pkgs.systemd}/bin/loginctl lock-session";
        }
        {
          event = "lock";
          command = "${locker}";
        }
      ];
      timeouts = [
        {
          timeout = 900;
          command = suspendScript.outPath;
        }
        {
          timeout = 1200;
          command = "${config.wayland.windowManager.hyprland.package}/bin/hyprctl dispatch dpms off";
          resumeCommand = "${config.wayland.windowManager.hyprland.package}/bin/hyprctl dispatch dpms on";
        }
      ];
    };
  };
}
</file>

<file path="homes/notashelf/services/wayland/waybar/presets/catppuccin-mocha/config.nix">
{
  config,
  pkgs,
  lib,
  osConfig,
  ...
}: let
  inherit (lib) optionalString primaryMonitor;

  sys = osConfig.modules.system;
in {
  mainBar = {
    layer = "top";
    position = "left";
    # monitor configuration, kind of dirty since it assumes DP-1 is my main monitor
    output = primaryMonitor osConfig; #builtins.elemAt monitors 0;
    width = 55;
    spacing = 7;
    margin-left = 6;
    margin-top = 9;
    margin-bottom = 9;
    margin-right = null;
    fixed-center = true;
    exclusive = true;
    modules-left = [
      "custom/search"
      "hyprland/workspaces"
      "custom/lock"
      "backlight"
      "battery"
      "custom/weather"
      "custom/todo"
    ];
    modules-center = [];
    modules-right = [
      "cpu"
      (optionalString sys.bluetooth.enable "bluetooth")
      "gamemode"
      "pulseaudio"
      "network"
      "custom/swallow"
      "clock"
      "custom/power"
    ];

    "hyprland/workspaces" = let
      hyprctl = config.wayland.windowManager.hyprland.package + "/bin/hyprctl";
    in {
      on-click = "activate";
      on-scroll-up = "${hyprctl} dispatch workspace m+1";
      on-scroll-down = "${hyprctl} dispatch workspace m-1";
      format = "{icon}";
      active-only = true;
      all-outputs = true;
      format-icons = {
        "1" = "一";
        "2" = "二";
        "3" = "三";
        "4" = "四";
        "5" = "五";
        "6" = "六";
        "7" = "七";
        "8" = "八";
        "9" = "九";
        "10" = "十";
      };
    };

    "custom/search" = {
      format = " ";
      tooltip = false;
      on-click = "${lib.getExe pkgs.killall} rofi || run-as-service $(rofi -show drun)";
    };

    "custom/todo" = {
      format = "{}";
      tooltip = true;
      interval = 7;
      exec = let
        todo = pkgs.todo + "/bin/todo";
        sed = pkgs.gnused + "/bin/sed";
        wc = pkgs.coreutils + "/bin/wc";
      in
        pkgs.writeShellScript "todo-waybar" ''
          #!/bin/sh

          total_todo=$(${todo} | ${wc} -l)
          todo_raw_done=$(${todo} raw done | ${sed} 's/^/      ◉ /' | ${sed} -z 's/\n/\\n/g')
          todo_raw_undone=$(${todo} raw todo | ${sed} 's/^/     ◉ /' | ${sed} -z 's/\n/\\n/g')
          done=$(${todo} raw done | ${wc} -l)
          undone=$(${todo} raw todo | ${wc} -l)
          tooltip=$(${todo})

          left="$done/$total_todo"

          header="<b>todo</b>\\n\\n"
          tooltip=""
          if [[ $total_todo -gt 0 ]]; then
          	if [[ $undone -gt 0 ]]; then
          		export tooltip="$header👷 Today, you need to do:\\n\\n $(echo $todo_raw_undone)\\n\\n✅ You have already done:\\n\\n $(echo $todo_raw_done)"
          		export output=" 🗒️ \\n $left"
          	else
          		export tooltip="$header✅ All done!\\n🥤 Remember to stay hydrated!"
          		export output=" 🎉 \\n $left"
          	fi
          else
          	export tooltip=""
          	export output=""
          fi

          printf '{"text": "%s", "tooltip": "%s" }' "$output" "$tooltip"
        '';
      return-type = "json";
    };

    "custom/weather" = let
      waybar-wttr = pkgs.stdenv.mkDerivation {
        name = "waybar-wttr";
        buildInputs = [(pkgs.python3.withPackages (pythonPackages: with pythonPackages; [requests]))];
        unpackPhase = "true";
        installPhase = ''
          mkdir -p $out/bin
          cp ${../../scripts/waybar-wttr.py} $out/bin/waybar-wttr
          chmod +x $out/bin/waybar-wttr
        '';
      };
    in {
      format = "{}";
      tooltip = true;
      interval = 30;
      exec = "${waybar-wttr}/bin/waybar-wttr";
      return-type = "json";
    };

    "custom/lock" = {
      tooltip = false;
      on-click = "${pkgs.bash}/bin/bash -c '(sleep 0.5s; ${lib.getExe pkgs.swaylock-effects} --grace 0)' & disown";
      format = "";
    };

    "custom/swallow" = {
      tooltip = false;
      on-click = let
        hyprctl = config.wayland.windowManager.hyprland.package + "/bin/hyprctl";
        notify-send = pkgs.libnotify + "/bin/notify-send";
        rg = pkgs.ripgrep + "/bin/rg";
      in
        pkgs.writeShellScript "waybar-swallow" ''
          #!/bin/sh
          if ${hyprctl} getoption misc:enable_swallow | ${rg} -q "int: 1"; then
          	${hyprctl} keyword misc:enable_swallow false >/dev/null &&
          	${notify-send} "Hyprland" "Turned off swallowing"
          else
          	${hyprctl} keyword misc:enable_swallow true >/dev/null &&
          	${notify-send} "Hyprland" "Turned on swallowing"
          fi
        '';
      format = "󰊰";
    };

    "custom/power" = {
      tooltip = false;
      on-click = let
        sudo = pkgs.sudo + "/bin/sudo";
        rofi = config.programs.rofi.package + "/bin/rofi";
        poweroff = pkgs.systemd + "/bin/poweroff";
        reboot = pkgs.systemd + "/bin/reboot";
      in
        pkgs.writeShellScript "shutdown-waybar" ''

          #!/bin/sh

          off=" Shutdown"
          reboot=" Reboot"
          cancel="󰅖 Cancel"

          sure="$(printf '%s\n%s\n%s' "$off" "$reboot" "$cancel" |
          	${rofi} -dmenu -p ' Are you sure?')"

          if [ "$sure" = "$off" ]; then
          	${sudo} ${poweroff}
          elif [ "$sure" = "$reboot" ]; then
          	${sudo} ${reboot}
          fi
        '';
      format = "󰐥";
    };
    clock = {
      format = ''
        {:%H
        %M}'';
      tooltip-format = ''
        <big>{:%Y %B}</big>
        <tt><small>{calendar}</small></tt>
      '';
    };

    backlight = let
      brightnessctl = lib.getExe pkgs.brightnessctl;
    in {
      format = "{icon}";
      format-icons = ["󰋙" "󰫃" "󰫄" "󰫅" "󰫆" "󰫇" "󰫈"];
      #format-icons = ["" "" "" "" "" "" "" "" ""];
      on-scroll-up = "${brightnessctl} s 1%-";
      on-scroll-down = "${brightnessctl} s +1%";
    };

    battery = {
      states = {
        warning = 30;
        critical = 15;
      };
      format = "{icon}";
      format-charging = "󰂄";
      format-plugged = "󰂄";
      format-alt = "{icon}";
      format-icons = ["󰂃" "󰁺" "󰁻" "󰁼" "󰁽" "󰁾" "󰁾" "󰁿" "󰂀" "󰂁" "󰂂" "󰁹"];
    };
    network = let
      nm-editor = "${pkgs.networkmanagerapplet}/bin/nm-connection-editor";
    in {
      format-wifi = "󰤨";
      format-ethernet = "󰈀";
      format-alt = "󱛇";
      format-disconnected = "󰤭";
      tooltip-format = "{ipaddr}/{ifname} via {gwaddr} ({signalStrength}%)";
      on-click-right = "${nm-editor}";
    };

    pulseaudio = {
      scroll-step = 5;
      tooltip = true;
      tooltip-format = "{volume}";
      on-click = "${pkgs.killall}/bin/killall pavucontrol || ${pkgs.pavucontrol}/bin/pavucontrol";
      format = "{icon}";
      format-muted = "󰝟";
      format-icons = {
        default = ["" "" ""];
      };
    };

    cpu = {
      interval = 10;
      format = "";
      max-length = 10;
      states = {
        "50" = 50;
        "60" = 75;
        "70" = 90;
      };
    };

    bluetooth = {
      # controller = "controller1", // specify the alias of the controller if there are more than 1 on the system
      format = "";
      format-disabled = "󰂲"; # an empty format will hide the module
      format-connected = "󰂱";
      tooltip-format = "{controller_alias}\t{controller_address}";
      tooltip-format-connected = "{controller_alias}\t{controller_address}\n\n{device_enumerate}";
      tooltip-format-disabled = "";
      tooltip-format-enumerate-connected = "{device_alias}\t{device_address}";
    };

    gamemode = {
      format = "󰊴";
      format-alt = "{glyph}";
      glyph = "󰊴";
      hide-not-running = true;
      use-icon = true;
      icon-name = "input-gaming-symbolic";
      icon-spacing = 4;
      icon-size = 20;
      tooltip = true;
      tooltip-format = "Games running: {count}";
    };
  };
}
</file>

<file path="homes/notashelf/services/wayland/waybar/presets/catppuccin-mocha/style.nix">
{colors}:
with colors; let
  OSLogo = builtins.fetchurl rec {
    name = "OSLogo-${sha256}.png";
    sha256 = "14mbpw8jv1w2c5wvfvj8clmjw0fi956bq5xf9s2q3my14far0as8";
    url = "https://raw.githubusercontent.com/NixOS/nixos-artwork/master/logo/nix-snowflake.svg";
  };
in ''
  * {
    font-family: Material Design Icons, Iosevka Nerd Font Mono;
    font-size: 19px;
  }

  window#waybar {
    background-color: #${base00};
    border: .5px solid #${base01};
    border-radius: 20px;
    box-shadow: 2 3 2 2px #151515;
    color: #${base05};
    margin: 16px 16px;
    transition-property: background-color;
    transition-duration: .5s;
  }

  window#waybar.hidden {
    opacity: 0.2;
  }

  #custom-weather,
  #clock,
  #network,
  #custom-swallow,
  #custom-power,
  #cpu,
  #battery,
  #backlight,
  #memory,
  #workspaces,
  #custom-search,
  #custom-power,
  #custom-todo,
  #custom-lock,
  #custom-weather,
  #volume,
  #cpu,
  #bluetooth,
  #gamemode,
  #pulseaudio {
    border-radius: 15px;
    margin: 0px 7px 0px 7px;
    background-color: #${base02};
    padding: 10px 0px 10px 0px;
  }


  #workspaces button {
    background-color: transparent;
    /* Use box-shadow instead of border so the text isn't offset */
    color: #${base0D};
    font-size: 21px;
    /* padding-left: 6px; */
    box-shadow: inset 0 -3px transparent;
  }

  #workspaces button:hover {
    color: #${base0C};
    box-shadow: inherit;
    text-shadow: inherit;
  }

  #workspaces button.active {
    color: #${base0A};
  }

  #workspaces button.urgent {
    color: #${base08};
  }

  #custom-power {
    color: #${base08};
  }

  #workspaces {
    font-size: 15px;
    background-color: #${base02};
  }

  #network {
    color: #${base0D};
    padding: 14px 0px 14px 0px;
  }

  #gamemode {
    color: #${base0D};
  }

  #custom-weather {
    color: #${base05};
    background-color: #${base02};
  }

  #cpu {
    color: rgba(0, 0, 0, 0.0);
    background-color: rgba(0, 0, 0, 0.0);
    margin: -50;
  }

  #cpu.50 {
    color: #${base06};
    background-color: #${base02};
    border-radius: 15px;
    margin: 0px 7px 0px 7px;
    padding: 10px 0px 10px 0px;
  }

  #cpu.60 {
    color: #${base09};
    background-color: #${base02};
    border-radius: 15px;
    margin: 0px 7px 0px 7px;
    padding: 10px 0px 10px 0px;
  }

  #cpu.70 {
    color: #${base08};
    background-color: #${base02};
    border-radius: 15px;
    margin: 0px 7px 0px 7px;
    padding: 10px 0px 10px 0px;
  }

  #bluetooth {
    color: #${base0E};
  }

  #bluetooth.off,
  #bluetooth.pairable,
  #bluetooth.discovering,
  #bluetooth.disabled {
    color: rgba(0, 0, 0, 0.0);
    background-color: rgba(0, 0, 0, 0.0);
    margin: -50;
  }

  #clock {
    color: #${base05};
    background-color: #${base02};
    font-weight: 700;
    font-size: 20px;
    padding: 5px 0px 5px 0px;
    font-family: "Iosevka Term";
  }

  #pulseaudio {
    color: #${base0B};
    padding: 5px 0px 5px 0px;
    font-size: 30;
  }

  #pulseaudio.source-muted,
  #pulseaudio.muted {
    color: #${base08};
    padding: 16px 0px 16px 0px;
    font-size: 15;
  }

  #custom-swallow {
    color: #${base0E};
    padding: 14px 0px 14px 0px;
  }

  #custom-lock {
    color: #${base0D};
    font-size: 27;
    padding: 6px 0px 6px 0px;
  }

  #custom-todo {
    color: #${base05};
    padding-left: 2px;
  }

  #custom-power {
    margin-bottom: 7px;
    padding: 14px 0px 14px 0px;
  }

  #custom-search {
    background-image: url("${OSLogo}");
    background-size: 65%;
    background-position: center;
    background-repeat: no-repeat;
    margin-top: 7px;
  }

  #backlight {
    color: #${base0A};
  }

  #battery {
    color: #${base0C};
  }

  #battery.warning {
    color: #${base09};
  }

  #battery.critical:not(.charging) {
    color: #${base08};
  }

  tooltip {
    font-family: 'Lato', sans-serif;
    border-radius: 15px;
    padding: 20px;
    margin: 30px;
  }

  tooltip label {
    font-family: 'Lato', sans-serif;
    padding: 20px;
  }

''
</file>

<file path="homes/notashelf/services/wayland/waybar/presets/oxocarbon-dark/config.nix">
{
  config,
  pkgs,
  lib,
  osConfig,
  ...
}: let
  inherit (lib) optionalString primaryMonitor;

  sys = osConfig.modules.system;
in {
  mainBar = {
    layer = "top";
    position = "left";
    # monitor configuration, kind of dirty since it assumes DP-1 is my main monitor
    output = primaryMonitor osConfig;
    width = 55;
    spacing = 7;
    margin-left = 6;
    margin-top = 9;
    margin-bottom = 9;
    margin-right = null;
    fixed-center = true;
    exclusive = true;
    modules-left = [
      "custom/search"
      "hyprland/workspaces"
      "backlight"
      "battery"
      "custom/weather"
      "custom/todo"
    ];
    modules-center = [];
    modules-right = [
      "cpu"
      (optionalString sys.bluetooth.enable "bluetooth")
      "gamemode"
      "pulseaudio"
      "network"
      "custom/swallow"
      "clock"
      "custom/power"
    ];

    "hyprland/workspaces" = let
      hyprctl = config.wayland.windowManager.hyprland.package + "/bin/hyprctl";
    in {
      on-click = "activate";
      on-scroll-up = "${hyprctl} dispatch workspace m+1";
      on-scroll-down = "${hyprctl} dispatch workspace m-1";
      format = "{icon}";
      active-only = true;
      all-outputs = true;
      format-icons = {
        "1" = "一";
        "2" = "二";
        "3" = "三";
        "4" = "四";
        "5" = "五";
        "6" = "六";
        "7" = "七";
        "8" = "八";
        "9" = "九";
        "10" = "十";
      };
    };

    "custom/search" = {
      format = " ";
      tooltip = false;
      on-click = "${lib.getExe pkgs.killall} rofi || run-as-service $(rofi -show drun)";
    };

    "custom/todo" = {
      format = "{}";
      tooltip = true;
      interval = 7;
      exec = let
        todo = pkgs.todo + "/bin/todo";
        sed = pkgs.gnused + "/bin/sed";
        wc = pkgs.coreutils + "/bin/wc";
      in
        pkgs.writeShellScript "todo-waybar" ''
          #!/bin/sh

          total_todo=$(${todo} | ${wc} -l)
          todo_raw_done=$(${todo} raw done | ${sed} 's/^/      ◉ /' | ${sed} -z 's/\n/\\n/g')
          todo_raw_undone=$(${todo} raw todo | ${sed} 's/^/     ◉ /' | ${sed} -z 's/\n/\\n/g')
          done=$(${todo} raw done | ${wc} -l)
          undone=$(${todo} raw todo | ${wc} -l)
          tooltip=$(${todo})

          left="$done/$total_todo"

          header="<b>todo</b>\\n\\n"
          tooltip=""
          if [[ $total_todo -gt 0 ]]; then
          	if [[ $undone -gt 0 ]]; then
          		export tooltip="$header👷 Today, you need to do:\\n\\n $(echo $todo_raw_undone)\\n\\n✅ You have already done:\\n\\n $(echo $todo_raw_done)"
          		export output=" 🗒️ \\n $left"
          	else
          		export tooltip="$header✅ All done!\\n🥤 Remember to stay hydrated!"
          		export output=" 🎉 \\n $left"
          	fi
          else
          	export tooltip=""
          	export output=""
          fi

          printf '{"text": "%s", "tooltip": "%s" }' "$output" "$tooltip"
        '';
      return-type = "json";
    };

    "custom/weather" = let
      waybar-wttr = pkgs.stdenv.mkDerivation {
        name = "waybar-wttr";
        buildInputs = [(pkgs.python3.withPackages (pythonPackages: with pythonPackages; [requests]))];
        unpackPhase = "true";
        installPhase = ''
          mkdir -p $out/bin
          cp ${../../scripts/waybar-wttr.py} $out/bin/waybar-wttr
          chmod +x $out/bin/waybar-wttr
        '';
      };
    in {
      format = "{}";
      tooltip = true;
      interval = 30;
      exec = "${waybar-wttr}/bin/waybar-wttr";
      return-type = "json";
    };

    "custom/lock" = {
      tooltip = false;
      on-click = "${pkgs.bash}/bin/bash -c '(sleep 0.5s; ${lib.getExe pkgs.swaylock-effects} --grace 0)' & disown";
      format = "";
    };

    "custom/swallow" = {
      tooltip = false;
      on-click = let
        hyprctl = config.wayland.windowManager.hyprland.package + "/bin/hyprctl";
        notify-send = pkgs.libnotify + "/bin/notify-send";
        rg = pkgs.ripgrep + "/bin/rg";
      in
        pkgs.writeShellScript "waybar-swallow" ''
          #!/bin/sh
          if ${hyprctl} getoption misc:enable_swallow | ${rg} -q "int: 1"; then
          	${hyprctl} keyword misc:enable_swallow false >/dev/null &&
          	${notify-send} "Hyprland" "Turned off swallowing"
          else
          	${hyprctl} keyword misc:enable_swallow true >/dev/null &&
          	${notify-send} "Hyprland" "Turned on swallowing"
          fi
        '';
      format = "󰊰";
    };

    "custom/power" = {
      tooltip = false;
      on-click = let
        sudo = pkgs.sudo + "/bin/sudo";
        rofi = config.programs.rofi.package + "/bin/rofi";
        poweroff = pkgs.systemd + "/bin/poweroff";
        reboot = pkgs.systemd + "/bin/reboot";
      in
        pkgs.writeShellScript "shutdown-waybar" ''

          #!/bin/sh

          off=" Shutdown"
          reboot=" Reboot"
          cancel="󰅖 Cancel"

          sure="$(printf '%s\n%s\n%s' "$off" "$reboot" "$cancel" |
          	${rofi} -dmenu -p ' Are you sure?')"

          if [ "$sure" = "$off" ]; then
          	${sudo} ${poweroff}
          elif [ "$sure" = "$reboot" ]; then
          	${sudo} ${reboot}
          fi
        '';
      format = "󰐥";
    };
    clock = {
      format = ''
        {:%H
        %M}'';
      tooltip-format = ''
        <big>{:%Y %B}</big>
        <tt><small>{calendar}</small></tt>
      '';
    };

    backlight = let
      brightnessctl = lib.getExe pkgs.brightnessctl;
    in {
      format = "{icon}";
      format-icons = ["󰋙" "󰫃" "󰫄" "󰫅" "󰫆" "󰫇" "󰫈"];
      #format-icons = ["" "" "" "" "" "" "" "" ""];
      on-scroll-up = "${brightnessctl} s 1%-";
      on-scroll-down = "${brightnessctl} s +1%";
    };

    battery = {
      states = {
        warning = 30;
        critical = 15;
      };
      format = "{icon}";
      format-charging = "󰂄";
      format-plugged = "󰂄";
      format-alt = "{icon}";
      format-icons = ["󰂃" "󰁺" "󰁻" "󰁼" "󰁽" "󰁾" "󰁾" "󰁿" "󰂀" "󰂁" "󰂂" "󰁹"];
    };
    network = let
      nm-editor = "${pkgs.networkmanagerapplet}/bin/nm-connection-editor";
    in {
      format-wifi = "󰤨";
      format-ethernet = "󰈀";
      format-alt = "󱛇";
      format-disconnected = "󰤭";
      tooltip-format = "{ipaddr}/{ifname} via {gwaddr} ({signalStrength}%)";
      on-click-right = "${nm-editor}";
    };

    pulseaudio = {
      scroll-step = 5;
      tooltip = true;
      tooltip-format = "{volume}";
      on-click = "${pkgs.killall}/bin/killall pavucontrol || ${pkgs.pavucontrol}/bin/pavucontrol";
      format = "{icon}";
      format-muted = "󰝟";
      format-icons = {
        default = ["" "" ""];
      };
    };

    cpu = {
      interval = 10;
      format = "";
      max-length = 10;
      states = {
        "50" = 50;
        "60" = 75;
        "70" = 90;
      };
    };

    bluetooth = {
      # controller = "controller1", // specify the alias of the controller if there are more than 1 on the system
      format = "";
      format-disabled = "󰂲"; # an empty format will hide the module
      format-connected = "󰂱";
      tooltip-format = "{controller_alias}\t{controller_address}";
      tooltip-format-connected = "{controller_alias}\t{controller_address}\n\n{device_enumerate}";
      tooltip-format-disabled = "";
      tooltip-format-enumerate-connected = "{device_alias}\t{device_address}";
    };

    gamemode = {
      format = "󰊴";
      format-alt = "{glyph}";
      glyph = "󰊴";
      hide-not-running = true;
      use-icon = true;
      icon-name = "input-gaming-symbolic";
      icon-spacing = 4;
      icon-size = 20;
      tooltip = true;
      tooltip-format = "Games running: {count}";
    };
  };
}
</file>

<file path="homes/notashelf/services/wayland/waybar/presets/oxocarbon-dark/style.nix">
{colors}:
with colors; let
  OSLogo = builtins.fetchurl rec {
    name = "OSLogo-${sha256}.png";
    sha256 = "14mbpw8jv1w2c5wvfvj8clmjw0fi956bq5xf9s2q3my14far0as8";
    url = "https://raw.githubusercontent.com/NixOS/nixos-artwork/master/logo/nix-snowflake.svg";
  };
in ''
  * {
    font-family: Material Design Icons, Iosevka Nerd Font Mono;
    font-size: 19px;
    border-radius: 12px;
  }

  window#waybar {
    background-color: #${base00};
    border: .5px solid #${base01};
    border-radius: 14px;
    box-shadow: 2 3 2 2px #151515;
    color: #${base05};
    margin: 16px 16px;
    transition-property: background-color;
    transition-duration: .5s;
  }

  window#waybar.hidden {
    opacity: 0.2;
  }

  #clock,
  #network,
  #custom-power,
  #cpu,
  #battery,
  #backlight,
  #memory,
  #workspaces,
  #custom-search,
  #custom-power,
  #custom-todo,
  #custom-lock,
  #custom-weather,
  #custom-swallow,
  #volume,
  #bluetooth,
  #gamemode,
  #pulseaudio {
    border-radius: 14px;
    margin: 0px 7px 0px 7px;
    background-color: #${base01};
    padding: 10px 0px 10px 0px;
  }

  #workspaces {
    font-size: 14px;
    background-color: #${base01};
  }

  #workspaces button {
    background-color: transparent;
    border-radius: 14px;
    color: #${base04};
    font-size: 21px;
    /* Use box-shadow instead of border so the text isn't offset */
    box-shadow: inset 0 -3px transparent;
  }

  #workspaces button:hover {
    color: #${base0C};
    box-shadow: inherit;
    text-shadow: inherit;
  }

  #workspaces button.active {
    color: #${base0A};
  }

  #workspaces button.urgent {
    color: #${base08};
  }

  #network {
    /* prevents the network icon from being too squashed */
    padding: 14px 0px 14px 0px;
  }

  #cpu {
    color: rgba(0, 0, 0, 0.0);
    background-color: rgba(0, 0, 0, 0.0);
    margin: -50;
    border-radius: 16px;
  }

  #cpu.50 {
    color: #${base06};
    background-color: #${base02};
    border-radius: 15px;
    margin: 0px 7px 0px 7px;
    padding: 10px 0px 10px 0px;
  }

  #cpu.60 {
    color: #${base09};
    background-color: #${base02};
    border-radius: 15px;
    margin: 0px 7px 0px 7px;
    padding: 10px 0px 10px 0px;
  }

  #cpu.70 {
    color: #${base08};
    background-color: #${base02};
    border-radius: 15px;
    margin: 0px 7px 0px 7px;
    padding: 10px 0px 10px 0px;
  }

  #bluetooth.off,
  #bluetooth.pairable,
  #bluetooth.discovering,
  #bluetooth.disabled {
    color: rgba(0, 0, 0, 0.0);
    background-color: rgba(0, 0, 0, 0.0);
    margin: -50;
    border-radius: 16px;
  }

  #clock {
    color: #${base05};
    background-color: #${base01};
    font-weight: 700;
    font-size: 20px;
    padding: 5px 0px 5px 0px;
    font-family: "Iosevka Term";
  }

  #pulseaudio {
    padding: 5px 0px 5px 0px;
    font-size: 30;
  }

  #pulseaudio.source-muted,
  #pulseaudio.muted {
    color: #${base08};
    padding: 16px 0px 16px 0px;
    font-size: 15;
  }

  #custom-swallow {
    padding: 14px 0px 14px 0px;
  }

  #custom-todo {
    padding-left: 2px;
    background-color: #${base01};
  }

  #custom-power {
    margin-bottom: 7px;
    padding: 14px 0px 14px 0px;
  }

  #custom-search {
    background-image: url("${OSLogo}");
    background-size: 65%;
    background-position: center;
    background-repeat: no-repeat;
    margin-top: 7px;
  }

  #custom-power {
    margin-bottom: 7px;
    padding: 14px 0px 14px 0px;
    color: #${base0A};
  }

  #battery {
    border-radius: 14px;
  }

  #battery.warning {
    color: #${base09};
  }

  #battery.critical:not(.charging) {
    color: #${base08};
  }

  tooltip {
    font-family: 'Lato', sans-serif;
    border-radius: 14px;
    padding: 20px;
    margin: 30px;
  }

  tooltip label {
    font-family: 'Lato', sans-serif;
    padding: 20px;
  }

''
</file>

<file path="homes/notashelf/services/wayland/waybar/scripts/waybar-wttr.py">
#!/usr/bin/env python

import os
import json
import requests
import logging
from datetime import datetime, timedelta

logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

CACHE_EXPIRATION = 60
XDG_CACHE_HOME = os.getenv("XDG_CACHE_HOME", os.path.expanduser("~/.cache"))
CACHE_DIR = os.path.join(XDG_CACHE_HOME, "waybar-wttr")
FALLBACK_CACHE_DIR = "/tmp"
CACHE_FILE = os.path.join(CACHE_DIR, "weather_cache.json")

SUNNY = "☀️"
CLOUDY = "☁️"
RAIN = "🌧️"
SNOW = "❄️"
THUNDERSTORM = "⛈️"
PARTLY_CLOUDY = "⛅️"
CLEAR = "☀️"

HOURS_AGO_THRESHOLD = 2
TEMP_THRESHOLD_COLD = 10
TEMP_THRESHOLD_HOT = 0


def ensure_cache_directory():
    try:
        if not os.path.exists(CACHE_DIR):
            os.makedirs(CACHE_DIR, exist_ok=True)
    except Exception as e:
        logger.error(f"Error creating cache directory: {e}")


def get_weather_data():
    ensure_cache_directory()
    try:
        response = requests.get("https://wttr.in/?format=j1")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching weather data: {e}")
        return None


def get_cached_weather_data():
    try:
        if os.path.exists(CACHE_FILE):
            with open(CACHE_FILE, "r") as cache_file:
                cached_data = json.load(cache_file)
                cache_time = datetime.strptime(
                    cached_data["timestamp"], "%Y-%m-%d %H:%M:%S"
                )
                if datetime.now() - cache_time < timedelta(minutes=CACHE_EXPIRATION):
                    return cached_data["data"]
    except Exception as e:
        logger.error(f"Error loading cached data: {e}")
    return None


def cache_weather_data(data):
    try:
        with open(CACHE_FILE, "w") as cache_file:
            cached_data = {
                "data": data,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            }
            json.dump(cached_data, cache_file)
    except Exception as e:
        logger.error(f"Error caching data: {e}")


def format_time(time):
    return time.replace("00", "").zfill(2)


def format_temp(temp):
    return f"{temp}°".ljust(4)


def get_emoji_for_condition(condition):
    emoji_map = {
        "Sunny": SUNNY,
        "Cloudy": CLOUDY,
        "Rain": RAIN,
        "Snow": SNOW,
        "Thunder": THUNDERSTORM,
        "Partly Cloudy": PARTLY_CLOUDY,
        "Clear": CLEAR,
    }
    return emoji_map.get(condition, "")


def format_conditions(hour):
    condition_probabilities = {
        "chanceoffog": "Fog",
        "chanceoffrost": "Frost",
        "chanceofovercast": "Overcast",
        "chanceofrain": "Rain",
        "chanceofsnow": "Snow",
        "chanceofsunshine": "Sunshine",
        "chanceofthunder": "Thunder",
        "chanceofwindy": "Wind",
    }
    if "chanceofpartlycloudy" in hour:
        condition_probabilities["chanceofpartlycloudy"] = "Partly Cloudy"
    conditions = []
    for event, description in condition_probabilities.items():
        if event in hour:
            probability = int(hour[event])
            if probability > 0:
                emoji = get_emoji_for_condition(description)
                conditions.append(f"{emoji} {description} {probability}%")
    return ", ".join(conditions)


def format_weather_data(weather_data):
    current_condition = weather_data["current_condition"][0]
    temp = int(current_condition["FeelsLikeC"])
    temp_sign = "+" if TEMP_THRESHOLD_HOT > temp > TEMP_THRESHOLD_COLD else ""
    formatted_data = {
        "text": f" {SUNNY} \n {temp_sign}{temp}°",
        "tooltip": f"<b>{current_condition['weatherDesc'][0]['value']} {current_condition['temp_C']}°</b>\n"
        f"Feels like: {current_condition['FeelsLikeC']}°\n"
        f"Wind: {current_condition['windspeedKmph']}Km/h\n"
        f"Humidity: {current_condition['humidity']}%\n",
    }
    for i, day in enumerate(weather_data["weather"]):
        formatted_data["tooltip"] += f"\n<b>"
        if i == 0:
            formatted_data["tooltip"] += "Today, "
        if i == 1:
            formatted_data["tooltip"] += "Tomorrow, "
        formatted_data["tooltip"] += f"{day['date']}</b>\n"
        formatted_data["tooltip"] += f"⬆️ {day['maxtempC']}° ⬇️ {day['mintempC']}° "
        formatted_data[
            "tooltip"
        ] += f"🌅 {day['astronomy'][0]['sunrise']} 🌇 {day['astronomy'][0]['sunset']}\n"
        now = datetime.now()
        for hour in day["hourly"]:
            hour_time = format_time(hour["time"])
            if i == 0 and int(hour_time) < now.hour - HOURS_AGO_THRESHOLD:
                continue
            formatted_data[
                "tooltip"
            ] += f"{hour_time} {get_emoji_for_condition(hour['weatherDesc'][0]['value'])} {format_temp(hour['FeelsLikeC'])} {hour['weatherDesc'][0]['value']}, {format_conditions(hour)}\n"
    return formatted_data


def main():
    ensure_cache_directory()
    cached_data = get_cached_weather_data()
    if cached_data:
        print(json.dumps(cached_data))
        return
    weather_data = get_weather_data()
    if weather_data:
        formatted_data = format_weather_data(weather_data)
        cache_weather_data(formatted_data)
        print(json.dumps(formatted_data))


if __name__ == "__main__":
    main()
</file>

<file path="homes/notashelf/services/wayland/waybar/default.nix">
{
  pkgs,
  lib,
  config,
  osConfig,
  ...
}: let
  inherit (lib) mkIf;
  inherit (osConfig.modules) device;
  inherit (osConfig.modules.style.colorScheme) slug colors;

  waybar_config = import ./presets/${slug}/config.nix {inherit osConfig config lib pkgs;};
  waybar_style = import ./presets/${slug}/style.nix {inherit colors;};

  acceptedTypes = ["desktop" "laptop" "lite" "hybrid"];
in {
  config = mkIf (builtins.elem device.type acceptedTypes) {
    home.packages = with pkgs.python3Packages; [requests];
    programs.waybar = {
      enable = false;
      systemd.enable = true;
      package = pkgs.waybar;
      settings = waybar_config;
      style = waybar_style;
    };
  };
}
</file>

<file path="homes/notashelf/services/wayland/default.nix">
{
  imports = [
    ./ags
    ./clipboard
    ./gammastep
    ./hyprpaper
    ./swaybg
    ./swayidle
    ./waybar
  ];
}
</file>

<file path="homes/notashelf/services/x11/default.nix">
_: {}
</file>

<file path="homes/notashelf/services/default.nix">
{
  imports = [
    ./wayland # services that are wayland-only
    ./x11 # services that are x11-only
    ./shared # services that should be enabled regardless
  ];
}
</file>

<file path="homes/notashelf/themes/default.nix">
{
  imports = [
    ./gtk.nix
    ./qt.nix
    ./global.nix
  ];
}
</file>

<file path="homes/notashelf/themes/global.nix">
{osConfig, ...}: let
  cfg = osConfig.modules.style;
  inherit (cfg.pointerCursor) package name size;
in {
  home.pointerCursor = {
    # Package, name and the size of the cursor. The same values need to be set
    # in Hyprland config to make sure our cursors are consistent.
    inherit package name size;

    # Enable GTK config generation for pointerCursor
    gtk.enable = true;

    # Enable X11 config generation for pointerCursor
    x11.enable = true;
  };
}
</file>

<file path="homes/notashelf/themes/gtk.nix">
{
  osConfig,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  cfg = osConfig.modules.style;
in {
  config = mkIf cfg.gtk.enable {
    xdg.systemDirs.data = let
      schema = pkgs.gsettings-desktop-schemas;
    in ["${schema}/share/gsettings-schemas/${schema.name}"];

    home = {
      packages = [pkgs.glib]; # gsettings

      sessionVariables = {
        # Set GTK_THEME variable to the name of the theme package
        # in our theming module.
        GTK_THEME = cfg.gtk.theme.name;

        # Tell GTK applications to use the file-pickers provided by
        # xdg-desktop-portal-gtk. This gives us a somewhat consistent
        # file picker, and fixes issues with some Flatpak apps that
        # use GTK backend(s).
        GTK_USE_PORTAL = toString (lib.boolToNum cfg.gtk.usePortal);
      };
    };

    gtk = {
      enable = true;
      theme = {
        name = cfg.gtk.theme.name;
        package = cfg.gtk.theme.package;
      };

      iconTheme = {
        name = cfg.gtk.iconTheme.name;
        package = cfg.gtk.iconTheme.package;
      };

      font = {
        name = cfg.gtk.font.name;
        size = cfg.gtk.font.size;
      };

      gtk2 = {
        configLocation = "${config.xdg.configHome}/gtk-2.0/gtkrc";
        extraConfig = ''
          gtk-xft-antialias=1
          gtk-xft-hinting=1
          gtk-xft-hintstyle="hintslight"
          gtk-xft-rgba="rgb"
        '';
      };

      gtk3.extraConfig = {
        # Lets be easy on the eyes. This should be easy to make dependent on
        # the "variant" of the theme, but I never use a light theme anyway.
        gtk-application-prefer-dark-theme = true;

        # Decorations
        gtk-decoration-layout = "appmenu:none";
        gtk-toolbar-style = "GTK_TOOLBAR_BOTH";
        gtk-toolbar-icon-size = "GTK_ICON_SIZE_LARGE_TOOLBAR";
        gtk-button-images = 1;
        gtk-menu-images = 1;

        # Silence bells and whistles, quite literally.
        gtk-error-bell = 0;
        gtk-enable-event-sounds = 0;
        gtk-enable-input-feedback-sounds = 0;

        # Fonts
        gtk-xft-antialias = 1;
        gtk-xft-hinting = 1;
        gtk-xft-hintstyle = "hintslight";
      };

      gtk4.extraConfig = {
        # Prefer dark theme.
        gtk-application-prefer-dark-theme = true;

        # Decorations.
        gtk-decoration-layout = "appmenu:none";

        # Sounds, again.
        gtk-error-bell = 0;
        gtk-enable-event-sounds = 0;
        gtk-enable-input-feedback-sounds = 0;

        # Fonts, you know the drill.
        gtk-xft-antialias = 1;
        gtk-xft-hinting = 1;
        gtk-xft-hintstyle = "hintslight";
      };
    };

    # Store GTK css theme in a more easily discoverable location that some
    # applications *might* be smart enough to look at: ~/.config/gtk-4.0
    xdg.configFile = let
      gtk4Dir = "${cfg.gtk.theme.package}/share/themes/${cfg.gtk.theme.name}/gtk-4.0";
    in {
      "gtk-4.0/assets".source = "${gtk4Dir}/assets";
      "gtk-4.0/gtk.css".source = "${gtk4Dir}/gtk.css";
      "gtk-4.0/gtk-dark.css".source = "${gtk4Dir}/gtk-dark.css";
    };
  };
}
</file>

<file path="homes/notashelf/themes/qt.nix">
{
  osConfig,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) concatStringsSep;
  inherit (lib.modules) mkIf mkMerge;

  cfg = osConfig.modules.style;
in {
  config = mkIf cfg.qt.enable {
    qt = {
      enable = true;
      platformTheme = {
        # Sets QT_QPA_PLATFORMTHEME, takes "gtk", "gtk3", "adwaita", "kde" and a few others.
        name = mkIf cfg.forceGtk "gtk3";
        package = []; # libraries associated with the platformtheme, we add those manually
      };

      style = {
        # Sets QT_STYLE_OVERRIDE, takes "gtk2, "adwaita" (and variants), "breeze", "kvantum" and a few others."
        name = mkIf cfg.useKvantum "kvantum";
        package = []; # same as above
      };
    };

    home = {
      packages = with pkgs;
        mkMerge [
          [
            # Libraries and programs to ensure
            # that QT applications load without issues, e.g. missing libs.
            libsForQt5.qt5.qtwayland # qt5
            kdePackages.qtwayland # qt6
            qt6.qtwayland
            kdePackages.qqc2-desktop-style

            # qt5ct/qt6ct for configuring QT apps imperatively
            libsForQt5.qt5ct
            kdePackages.qt6ct

            # Some KDE applications such as Dolphin try to fall back to Breeze
            # theme icons. Lets make sure they're also found.
            libsForQt5.breeze-qt5
            kdePackages.breeze-icons
            qt6.qtsvg # needed to load breeze icons
          ]

          (mkIf cfg.forceGtk [
            # Libraries to ensure that "gtk" platform theme works
            # as intended after the following PR:
            # <https://github.com/nix-community/home-manager/pull/5156>
            libsForQt5.qtstyleplugins
            qt6Packages.qt6gtk2
          ])

          (mkIf cfg.useKvantum [
            # Kvantum as a library and a program to theme qt applications
            # is added here, however, this will not have an effect
            # until QT_QPA_PLATFORMTHEME has been set appropriately
            # we still write the config files for Kvantum below
            # but again, it is a no-op until the env var is set
            libsForQt5.qtstyleplugin-kvantum
            qt6Packages.qtstyleplugin-kvantum
          ])
        ];

      sessionVariables = {
        # Scaling factor for QT applications. 1 means no scaling
        QT_AUTO_SCREEN_SCALE_FACTOR = "1";

        # Use Wayland as the default backend, fallback to XCB if Wayland is not available
        QT_QPA_PLATFORM = "wayland;xcb";

        # Disable QT specific window decorations everywhere
        QT_WAYLAND_DISABLE_WINDOWDECORATION = "1";

        # Do remain backwards compatible with QT5 if possible.
        DISABLE_QT5_COMPAT = "0";

        # Tell Calibre to use the dark theme, because the
        # default light theme hurts my eyes.
        CALIBRE_USE_DARK_PALETTE = "1";
      };
    };

    # Write configuration and theme packages required KDE and Kvantum respectively.
    # Those tools aren't always used, but they are useful when the app looks for one
    # of those engines before GTK, despite our attempts to override.
    xdg.configFile = {
      # Write ~/.config/kdeglobals based on the kdeglobals file the user has specified.
      "kdeglobals".source = cfg.qt.kdeglobals.colors;

      # Write kvantum configuration, and the theme files required by the Catppuccin theme.
      "Kvantum/kvantum.kvconfig".source = let
        themeName = "Catppuccin";
        themedApps = ["qt5ct" "org.kde.dolphin" "org.kde.kalendar" "org.qbittorrent.qBittorrent" "hyprland-share-picker" "dolphin-emu" "Nextcloud" "nextcloud" "cantata" "org.kde.kid3-qt"];
      in
        (pkgs.formats.ini {}).generate "kvantum.kvconfig" {
          General.theme = themeName;
          Applications."${themeName}" = concatStringsSep ", " themedApps;
        };

      "Kvantum/Catppuccin/Catppuccin.kvconfig".source = cfg.qt.kvantum.kvconfig;
      "Kvantum/Catppuccin/Catppuccin.svg".source = cfg.qt.kvantum.svg;
    };
  };
}
</file>

<file path="homes/notashelf/home.nix">
{
  imports = [
    # home package sets
    ./packages

    # programs and services that I use
    ./programs
    ./services

    # declarative system and program themes (qt/gtk)
    ./themes

    # things that don't fit anywhere else
    ./misc
  ];

  config = {
    home = {
      username = "notashelf";
      homeDirectory = "/home/notashelf";
      extraOutputsToInstall = ["doc" "devdoc"];

      # This is, and should remain, the version on which you have initiated
      # the home-manager configuration. Similar to the `stateVersion` in the
      # NixOS module system, you should not be changing it.
      # I will personally strangle every moron who just puts nothing but "DONT CHANGE" next
      # to this value
      stateVersion = "23.05";
    };

    # reload system units when changing configs
    systemd.user.startServices = "sd-switch"; # or "legacy" if "sd-switch" breaks again
  };
}
</file>

<file path="homes/default.nix">
{
  inputs',
  self',
  self,
  config,
  lib,
  ...
}: let
  inherit (self) inputs;
  inherit (lib.modules) mkIf mkForce;
  inherit (lib.attrsets) genAttrs;
  inherit (config) modules;

  env = modules.usrEnv;
  sys = modules.system;
  defaults = sys.programs.default;

  specialArgs = {inherit inputs self inputs' self' defaults;};
in {
  home-manager = mkIf env.useHomeManager {
    # Tell home-manager to be as verbose as possible
    verbose = true;

    # Use the system configuration’s pkgs argument
    # this ensures parity between nixos' pkgs and hm's pkgs
    useGlobalPkgs = true;

    # Enable the usage user packages through
    # the users.users.<name>.packages option
    useUserPackages = true;

    # Move existing files to the .hm.old suffix rather than failing
    # with a very long error message about it
    backupFileExtension = "hm.old";

    # Additional specialArgs passed to Home Manager.
    # For reference, the config argument in nixos can be accessed
    # in home-manager through osConfig without us passing it here.
    extraSpecialArgs = specialArgs;

    # Per-user Home Manager configurations.
    # The function below generates an attribute sett of users
    # where users come from a list in my module system. Each
    # user in this list is mapped to an attribute set to generate
    # the format Home-Manager expects, i.e., { "username" = path;}
    # The system expects user directories to be found in the present
    # directory, or will exit with directory not found errors
    users = genAttrs config.modules.system.users (name: ./${name} + /home.nix);

    # Additional configuration that should be set for any existing and future users
    # declared in this module. Any "shared" configuration between users may be passed
    # here.
    sharedModules = [
      {
        # Ensure that HM uses t he same Nix package as NixOS.
        nix.package = mkForce config.nix.package;

        # Allow HM to manage itself when in standalone mode.
        # This makes the home-manager command available to users.
        programs.home-manager.enable = true;

        # Try to save some space by not installing variants of the home-manager
        # manual, which I don't use at all. Unlike what the name implies, this
        # section is for home-manager related manpages only, and does not affect
        # whether or not manpages of actual packages will be installed.
        manual = {
          manpages.enable = false;
          html.enable = false;
          json.enable = false;
        };
      }
    ];
  };
}
</file>

<file path="hosts/apollon/host.nix">
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: let
  inherit (lib.modules) mkForce mkOverride;
in {
  imports = [
    (modulesPath + "/virtualisation/qemu-vm.nix")
  ];

  config = {
    modules.device.type = "vm";
    zramSwap.enable = mkForce false;
    services.thermald.enable = mkForce false;

    boot = {
      initrd = {
        supportedFilesystems = ["bcachefs"]; # make bcachefs work
        availableKernelModules = ["bcache"];
      };

      kernelPackages = mkOverride 0 pkgs.linuxPackages_testing;
    };

    environment = {
      systemPackages = [
        pkgs.bcachefs-tools
      ];
    };

    programs.zsh = {
      enable = true;
      enableCompletion = mkForce true;
      promptInit = ''
        eval "$(${lib.getExe pkgs.starship} init zsh)"
      '';
    };

    users.users."user" = {
      description = "Testing user with sudo access and no password";
      isNormalUser = true;
      password = "";
      extraGroups = ["wheel" "networkmanager"];
      shell = pkgs.zsh;
    };

    security.sudo.wheelNeedsPassword = false;

    virtualisation = {
      memorySize = 2048;
      diskSize = 4096;
      cores = 3;
      useDefaultFilesystems = false;
      rootDevice = "/dev/vda1";

      fileSystems = {
        "/" = {
          device = "${config.virtualisation.rootDevice}:/dev/vda2";
          fsType = lib.mkForce "bcachefs";
        };
      };

      interfaces = {
        vm0 = {
          vlan = 1;
        };
      };
    };

    boot.initrd.postDeviceCommands = with pkgs; ''
      if ! test -b /dev/vda1; then
        ${parted}/bin/parted --script /dev/vda -- mklabel gpt
        ${parted}/bin/parted --script /dev/vda -- mkpart primary 1MiB 50%
        ${parted}/bin/parted --script /dev/vda -- mkpart primary 50% 100%
        sync
      fi

      FSTYPE=$(blkid -o value -s TYPE /dev/vda1 || true)
      if test -z "$FSTYPE"; then
        ${bcachefs-tools}/bin/bcachefs format /dev/vda1 /dev/vda2 --replicas=2 --label=root
      fi
    '';
  };
}
</file>

<file path="hosts/artemis/host.nix">
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/virtualisation/qemu-vm.nix")
  ];

  config = {
    modules.device.type = "vm";
    zramSwap.enable = lib.mkForce false;

    boot = {
      initrd = {
        supportedFilesystems = ["bcachefs"]; # make bcachefs work
        availableKernelModules = ["bcache"];
      };

      kernelPackages = lib.mkOverride 0 pkgs.linuxPackages_latest;
    };

    environment = {
      shells = with pkgs; [bash zsh];

      systemPackages = with pkgs; [
        bcachefs-tools
        starship # having starship here means pkgs.startship will be stored during build and not during promptInit
      ];
    };

    programs.zsh = {
      enable = true;
      enableCompletion = true;
      promptInit = ''
        eval "$(${lib.getExe pkgs.starship} init zsh)"
      '';
    };

    users.users."user" = {
      description = "Testing user with sudo access and no password";
      isNormalUser = true;
      password = "";
      extraGroups = ["wheel" "networkmanager"];
      shell = pkgs.zsh;
    };

    security.sudo.wheelNeedsPassword = false;

    virtualisation = {
      memorySize = 2048;
      diskSize = 4096;
      cores = 3;
      useDefaultFilesystems = false;
      rootDevice = "/dev/vda1";

      fileSystems = {
        "/" = {
          device = "${config.virtualisation.rootDevice}:/dev/vda2";
          fsType = lib.mkForce "bcachefs";
        };
      };

      interfaces = {
        vm0 = {
          vlan = 1;
        };
      };
    };

    boot.initrd.postDeviceCommands = with pkgs; ''
      if ! test -b /dev/vda1; then
        ${parted}/bin/parted --script /dev/vda -- mklabel gpt
        ${parted}/bin/parted --script /dev/vda -- mkpart primary 1MiB 25%
        ${parted}/bin/parted --script /dev/vda -- mkpart primary 25% 100%
        sync
      fi

      FSTYPE=$(blkid -o value -s TYPE /dev/vda1 || true)
      if test -z "$FSTYPE"; then
        ${bcachefs-tools}/bin/bcachefs format /dev/vda1 /dev/vda2 --replicas=2 --label=root
      fi
    '';
  };
}
</file>

<file path="hosts/atlas/fs/default.nix">
{
  fileSystems = {
    "/" = {
      device = "/dev/disk/by-label/NIXOS_SD";
      fsType = "ext4";
      options = ["noatime"];
    };

    "/boot" = {
      device = "/dev/disk/by-label/NIXOS_SD";
      fsType = "ext4";
      options = ["noatime"];
    };

    "/var/log" = {
      device = "/dev/disk/by-label/NIXOS_SD";
      fsType = "ext4";
      options = ["noatime"];
    };
  };

  swapDevices = [];
}
</file>

<file path="hosts/atlas/modules/default.nix">
{
  imports = [
    ./device.nix
    ./system.nix
    ./usrEnv.nix
  ];
}
</file>

<file path="hosts/atlas/modules/device.nix">
{
  config.modules.device = {
    type = "server";
    cpu.type = "pi";
    gpu.type = "pi";
    monitors = ["HDMI-A-1"];
    hasBluetooth = false;
    hasSound = false;
    hasTPM = false;
  };
}
</file>

<file path="hosts/atlas/modules/system.nix">
{
  config.modules.system = {
    mainUser = "notashelf";
    fs.enabledFilesystems = ["ext4" "vfat" "ntfs" "exfat"];
    autoLogin = false;

    boot = {
      loader = "none";
      enableKernelTweaks = true;
      initrd.enableTweaks = true;
      tmpOnTmpfs = false;
    };

    video.enable = false;
    sound.enable = false;
    bluetooth.enable = false;
    printing.enable = false;
    emulation.enable = false;

    virtualization.enable = false;

    networking = {
      optimizeTcp = true;
      nftables.enable = true;
      tailscale = {
        enable = true;
        isClient = true;
        isServer = false;
      };
    };

    security = {
      tor.enable = true;
      fixWebcam = false;
      lockModules = true;
      auditd.enable = true;
    };
  };
}
</file>

<file path="hosts/atlas/modules/usrEnv.nix">
{
  config.modules.usrEnv = {
    isWayland = false;
    desktop = "Hyprland";
    useHomeManager = true;
  };
}
</file>

<file path="hosts/atlas/host.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
in {
  imports = [
    ./fs
    ./modules
  ];
  config = {
    environment.systemPackages = with pkgs; [
      libraspberrypi
      raspberrypi-eeprom
      git
      neovim
    ];

    hardware = {
      raspberry-pi."4" = {
        # Enable GPU acceleration
        fkms-3d.enable = true;
        apply-overlays-dtmerge.enable = true;
      };

      deviceTree.enable = true;

      graphics = {
        # this only takes effect in 64 bit systems
        enable32Bit = mkForce false;
      };
    };

    boot = {
      kernelModules = mkForce ["bridge" "macvlan" "tap" "tun" "loop" "atkbd" "ctr"];
      supportedFilesystems = mkForce ["ext4" "vfat"];
      loader.grub.enable = mkForce false;
    };

    nixpkgs = {
      config.allowUnsupportedSystem = true;
      hostPlatform.system = "armv7l-linux";
      buildPlatform.system = "x86_64-linux";
    };

    console.enable = false;

    system.stateVersion = "24.05";
  };
}
</file>

<file path="hosts/enyo/fs/default.nix">
{
  imports = [./external.nix];
  config = {
    fileSystems = {
      "/boot" = {
        device = "/dev/disk/by-uuid/E20E-9940";
        fsType = "vfat";
      };

      "/" = {
        device = "/dev/disk/by-uuid/e1f1186b-2143-4bf7-8b99-8da1434520c6";
        fsType = "btrfs";
        options = ["subvol=root" "compress=zstd" "noatime"];
      };

      "/nix" = {
        device = "/dev/disk/by-uuid/e1f1186b-2143-4bf7-8b99-8da1434520c6";
        fsType = "btrfs";
        options = ["subvol=nix" "compress=zstd" "noatime"];
      };

      "/home" = {
        device = "/dev/disk/by-uuid/e1f1186b-2143-4bf7-8b99-8da1434520c6";
        fsType = "btrfs";
        options = ["subvol=home" "compress=zstd"];
      };

      "/persist" = {
        device = "/dev/disk/by-uuid/e1f1186b-2143-4bf7-8b99-8da1434520c6";
        fsType = "btrfs";
        options = ["subvol=persist" "compress=zstd" "noatime"];
      };

      "/var/log" = {
        device = "/dev/disk/by-uuid/e1f1186b-2143-4bf7-8b99-8da1434520c6";
        fsType = "btrfs";
        options = ["subvol=log" "compress=zstd" "noatime"];
      };
    };

    # Swap Devices
    swapDevices = [{device = "/dev/disk/by-uuid/62fc1f62-55ae-432d-8623-74ea6511410c";}];
  };
}
</file>

<file path="hosts/enyo/fs/external.nix">
let
  homeDir = "/home/notashelf";
in {
  fileSystems = {
    # External Devices
    "/mnt/SLib1" = {
      label = "SteamLib1";
      device = "/dev/disk/by-uuid/4345570b-2bd6-4cb8-8ca1-eb05bcf12c05";
      fsType = "btrfs";
      options = ["nofail" "rw" "compress=zstd"];
    };

    "/mnt/SLib2" = {
      label = "SteamLib2";
      device = "/dev/disk/by-uuid/080006fe-b012-4363-b596-c183b012c1de";
      fsType = "btrfs";
      options = ["nofail" "rw" "compress=zstd"];
    };

    "/mnt/Storage" = {
      label = "Storage";
      device = "/dev/disk/by-uuid/eb25f034-e5de-4c6c-89e9-f3dea10159a5";
      fsType = "btrfs";
      options = ["nofail" "rw" "compress=zstd"];
    };

    "/mnt/Expansion" = {
      label = "Expansion";
      device = "/dev/disk/by-uuid/9381fba0-e9b5-4574-9007-a0911cae4a08";
      fsType = "btrfs";
      options = ["nofail" "rw" "compress=zstd"];
    };

    "${homeDir}/Media/Music" = {
      label = "Music";
      device = "/dev/disk/by-uuid/68a2203f-5ecd-4ddb-b66a-76eb8dcf328c";
      fsType = "btrfs";
      options = ["nofail" "rw" "compress=zstd"];
      noCheck = true;
    };
  };
}
</file>

<file path="hosts/enyo/kernel/config/amd.nix">
{lib, ...}: let
  inherit (lib.kernel) yes no;
  inherit (lib.attrsets) mapAttrs;
  inherit (lib.modules) mkForce;
in {
  boot.kernelPatches = [
    {
      # recompile with AMD platform specific optimizations
      name = "amd-platform-patches";
      patch = null; # no patch is needed, just apply the options
      extraStructuredConfig = mapAttrs (_: mkForce) {
        # enable compiler optimizations for AMD
        MNATIVE_AMD = yes;
        X86_USE_PPRO_CHECKSUM = yes;
        X86_AMD_PSTATE = yes;

        X86_EXTENDED_PLATFORM = no; # disable support for other x86 platforms
        X86_MCE_INTEL = no; # disable support for intel mce

        # multigen LRU
        LRU_GEN = yes;
        LRU_GEN_ENABLED = yes;

        # collect CPU frequency statistics
        CPU_FREQ_STAT = yes;

        # Optimized for performance
        # this is already set on the Xanmod kernel
        # CC_OPTIMIZE_FOR_PERFORMANCE_O3 = yes;
      };
    }
  ];
}
</file>

<file path="hosts/enyo/kernel/config/base.nix">
{lib, ...}: let
  inherit (lib.kernel) yes no module freeform;
  inherit (lib.attrsets) mapAttrs;
  inherit (lib.modules) mkForce;
in {
  boot.kernelPatches = [
    {
      # <https://www.phoronix.com/news/Google-BBRv3-Linux>
      # <https://github.com/google/bbr/blob/v3/README.md>
      name = "bbr-and-cake";
      patch = null;
      extraStructuredConfig = mapAttrs (_: mkForce) {
        TCP_CONG_CUBIC = module;
        NET_SCH_CAKE = module;

        # xanmod defaults
        TCP_CONG_BBR = yes;
        DEFAULT_BBR = yes;
      };
    }
    {
      name = "zstd-module-compression";
      patch = null;
      extraStructuredConfig = mapAttrs (_: mkForce) {
        KERNEL_ZSTD = yes;
        MODULE_COMPRESS_ZSTD = yes;
        MODULE_COMPRESS_XZ = no;
      };
    }
    {
      name = "fq_codel-packet-scheduling";
      patch = null;
      extraStructuredConfig = {
        NET_SCH_DEFAULT = yes;
        DEFAULT_FQ_CODEL = yes;
        DEFAULT_NET_SCH = freeform "fq_codel";
      };
    }
  ];
}
</file>

<file path="hosts/enyo/kernel/config/low-latency.nix">
{lib, ...}: let
  inherit (lib.kernel) yes no freeform;
  inherit (lib.attrsets) mapAttrs;
  inherit (lib.modules) mkForce;
in {
  boot.kernelPatches = [
    {
      name = "Lower latency";
      patch = null;
      extraStructuredConfig = mapAttrs (_: mkForce) {
        HZ = freeform "1000";
        HZ_1000 = yes;

        PREEMPT = yes;
        PREEMPT_BUILD = yes;
        PREEMPT_COUNT = yes;
        PREEMPT_VOLUNTARY = no;
        PREEMPTION = yes;

        TREE_RCU = yes;
        PREEMPT_RCU = yes;
        RCU_EXPERT = yes;
        TREE_SRCU = yes;
        TASKS_RCU_GENERIC = yes;
        TASKS_RCU = yes;
        TASKS_RUDE_RCU = yes;
        TASKS_TRACE_RCU = yes;
        RCU_STALL_COMMON = yes;
        RCU_NEED_SEGCBLIST = yes;
        RCU_FANOUT = freeform "64";
        RCU_FANOUT_LEAF = freeform "16";
        RCU_BOOST = yes;
        RCU_BOOST_DELAY = freeform "500";
        RCU_NOCB_CPU = yes;
        RCU_LAZY = yes;
      };
    }
  ];
}
</file>

<file path="hosts/enyo/kernel/config/security.nix">
{lib, ...}: let
  inherit (lib.kernel) yes;
  inherit (lib.attrsets) mapAttrs;
  inherit (lib.modules) mkForce;
in {
  boot.kernelPatches = [
    {
      # enable lockdown LSM
      name = "kernel-lockdown-lsm";
      patch = null;
      extraStructuredConfig = mapAttrs (_: mkForce) {
        SECURITY_LOCKDOWN_LSM = yes;
        LOCKDOWN_LSM_EARLY = yes;
        LOCK_DOWN_KERNEL_FORCE_CONFIDENTIALITY = yes;

        MODULE_SIG = yes;
        MODULE_SIG_SHA512 = yes;
        MODULE_SIG_FORCE = yes;

        # used to avoid a systemd error:
        # systemd[1]: bpf-lsm: Failed to load BPF object: Invalid argument
        BPF_LSM = yes;
      };
    }
  ];
}
</file>

<file path="hosts/enyo/kernel/config/unused.nix">
{lib, ...}: let
  inherit (lib.kernel) no unset;
  inherit (lib.attrsets) mapAttrs;
  inherit (lib.modules) mkForce;
in {
  boot.kernelPatches = [
    {
      name = "disable-unused-features";
      patch = null;
      extraStructuredConfig = mapAttrs (_: mkForce) {
        ATALK = no;
        BATMAN_ADV = no;
        CAIF = no;
        COMEDI = no;
        DVB_CORE = no;
        FB_TFT = no;
        IIO = no;
        INPUT_TOUCHSCREEN = no;
        NFC = no;
        SND_FIREWIRE = unset;
        USB_GSPCA = no;
        USB_SERIAL = no;
        USB_SERIAL_CONSOLE = unset;
        USB_SERIAL_GENERIC = unset;
        WATCHDOG = no;
        WATCHDOG_SYSFS = unset;
        XEN = no;

        CRYPTO_842 = no;
        DEBUG_MISC = no;
        DEBUG_PREEMPT = no;
        HIBERNATION = no;
        KEXEC = no;
        KEXEC_FILE = no;

        "60XX_WDT" = no;
        "6LOWPAN" = no;
        "8139CP" = no;
        "8139TOO" = no;
        "8139TOO_8129" = no;

        ALIENWARE_WMI = no;
        ALIM1535_WDT = no;
        ALIM7101_WDT = no;
        ALTERA_MBOX = no;
        ALTERA_MSGDMA = no;
        ALTERA_TSE = no;
        ALX = no;

        GENERIC_ADC_BATTERY = no;
        IP5XXX_POWER = no;
        TEST_POWER = no;
        CHARGER_ADP5061 = no;
        BATTERY_CW2015 = no;
        BATTERY_DS2760 = no;
        BATTERY_DS2780 = no;
        BATTERY_DS2781 = no;
        BATTERY_DS2782 = no;
        BATTERY_SAMSUNG_SDI = no;
        BATTERY_SBS = no;
        CHARGER_SBS = no;
        MANAGER_SBS = no;
        BATTERY_BQ27XXX = no;
        BATTERY_BQ27XXX_I2C = no;
        BATTERY_BQ27XXX_HDQ = no;
        BATTERY_BQ27XXX_DT_UPDATES_NVM = no;
        CHARGER_DA9150 = no;
        BATTERY_AXP20X = no;
        AXP20X_POWER = no;
        AXP288_CHARGER = no;
        AXP288_FUEL_GAUGE = no;
        BATTERY_MAX17040 = no;
        BATTERY_MAX17042 = no;
        BATTERY_MAX1721X = no;
        CHARGER_PCF50633 = no;
        CHARGER_ISP1704 = no;
        CHARGER_MAX8903 = no;
        CHARGER_LP8727 = no;
        CHARGER_GPIO = no;
        CHARGER_MANAGER = no;
        CHARGER_LT3651 = no;
        CHARGER_LTC4162L = no;
        CHARGER_MAX14577 = no;
        CHARGER_MAX77693 = no;
        CHARGER_MAX77976 = no;
        CHARGER_MP2629 = no;
        CHARGER_MT6360 = no;
        CHARGER_MT6370 = no;
        CHARGER_BQ2415X = no;
        CHARGER_BQ24190 = no;
        CHARGER_BQ24257 = no;
        CHARGER_BQ24735 = no;
        CHARGER_BQ2515X = no;
        CHARGER_BQ25890 = no;
        CHARGER_BQ25980 = no;
        CHARGER_BQ256XX = no;
        CHARGER_SMB347 = no;
        BATTERY_GAUGE_LTC2941 = no;
        BATTERY_GOLDFISH = no;
        BATTERY_RT5033 = no;
        CHARGER_RT5033 = no;
        CHARGER_RT9455 = no;
        CHARGER_RT9467 = no;
        CHARGER_RT9471 = no;
        CHARGER_CROS_USBPD = no;
        CHARGER_CROS_PCHG = no;
        CHARGER_BD99954 = no;
        CHARGER_WILCO = no;
        BATTERY_SURFACE = no;
        CHARGER_SURFACE = no;
        BATTERY_UG3105 = no;
        FUEL_GAUGE_MM8013 = no;

        GENERIC_IRQ_DEBUGFS = no;

        # remove samba support
        CIFS = no;
        CIFS_ROOT = no;

        # disable amdgpu cik support
        DRM_AMDGPU_CIK = no;

        # disable radeon drivers
        DRM_RADEON = no;
        FB_RADEON = no;
        FB_RADEON_I2C = no;
        FB_RADEON_BACKLIGHT = no;

        # disable ngreedia drivers
        NET_VENDOR_NVIDIA = no;
        I2C_NVIDIA_GPU = no;
        FB_NVIDIA = no;
        FB_NVIDIA_I2C = no;
        FB_NVIDIA_BACKLIGHT = no;
        HID_NVIDIA_SHIELD = no;
        TYPEC_NVIDIA_ALTMODE = no;
        NVIDIA_WMI_EC_BACKLIGHT = no;

        # firewire
        FIREWIRE = no;
        FIREWIRE_OHCI = no;
        FIREWIRE_SBP2 = no;
        FIREWIRE_NET = no;
        FIREWIRE_NOSY = no;

        # ms surface hid
        SURFACE_AGGREGATOR = no;

        DELL_RBTN = no;
        DELL_RBU = no;
        DELL_SMBIOS = no;
        DELL_WMI = no;
        DELL_WMI_AIO = no;
        DELL_WMI_DESCRIPTOR = no;
        DELL_WMI_LED = no;
        DELL_WMI_SYSMAN = no;

        HID_A4TECH = no;
        HID_ACRUX = no;
        HID_ALPS = no;
        HID_APPLEIR = no;
        HID_ASUS = no;
        HID_AUREAL = no;
        HID_BETOP_FF = no;
        HID_BIGBEN_FF = no;
        HID_CMEDIA = no;
        HID_COUGAR = no;
        HID_CREATIVE_SB0540 = no;
        HID_CYPRESS = no;
        HID_DRAGONRISE = no;
        HID_ELAN = no;
        HID_ELECOM = no;
        HID_ELO = no;
        HID_EMS_FF = no;
        HID_EZKEY = no;
        HID_GEMBIRD = no;
        HID_GFRM = no;
        HID_GOOGLE_HAMMER = no;
        HID_GREENASIA = no;
        HID_GT683R = no;
        HID_GYRATION = no;
        HID_HOLTEK = no;
        HID_HYPERV_MOUSE = no;
        HID_ICADE = no;
        HID_ITE = no;
        HID_KEYTOUCH = no;
        HID_KYE = no;
        HID_LCPOWER = no;
        HID_LED = no;
        HID_MALTRON = no;
        HID_MCP2221 = no;
        HID_MONTEREY = no;
        HID_MULTITOUCH = no;
        HID_NTI = no;
        HID_NTRIG = no;
        HID_PANTHERLORD = no;
        HID_PENMOUNT = no;
        HID_PETALYNX = no;
        HID_PICOLCD = no;
        HID_PLAYSTATION = no;
        HID_PRIMAX = no;
        HID_REDRAGON = no;
        HID_RETRODE = no;
        HID_RMI = no;
        HID_RMI4 = no;
        HID_SAITEK = no;
        HID_SAMSUNG = no;
        HID_SEMITEK = no;
        HID_SMARTJOYPLUS = no;
        HID_SONY = no;
        HID_SPEEDLINK = no;
        HID_SUNPLUS = no;
        HID_THINGM = no;
        HID_THRUSTMASTER = no;
        HID_TIVO = no;
        HID_TOPSEED = no;
        HID_TWINHAN = no;
        HID_U2FZERO = no;
        HID_UCLOGIC = no;
        HID_UDRAW_PS3 = no;
        HID_VIEWSONIC = no;
        HID_VIVALDI = no;
        HID_WALTOP = no;
        HID_WIIMOTE = no;
        HID_XINMO = no;
        HID_ZEROPLUS = no;
        HID_ZYDACRON = no;

        # disable unused soc modules
        SND_SOC_CHV3_I2S = no;
        SND_SOC_ADI = no;
        SND_SOC_APPLE_MCA = no;
        SND_ATMEL_SOC = no;
        SND_DESIGNWARE_I2S = no;
        SND_SOC_FSL_ASRC = no;
        SND_SOC_FSL_SAI = no;
        SND_SOC_FSL_MQS = no;
        SND_SOC_FSL_AUDMIX = no;
        SND_SOC_FSL_SSI = no;
        SND_SOC_FSL_SPDIF = no;
        SND_SOC_FSL_ESAI = no;
        SND_SOC_FSL_MICFIL = no;
        SND_SOC_FSL_EASRC = no;
        SND_SOC_FSL_XCVR = no;
        SND_SOC_FSL_UTILS = no;
        SND_SOC_FSL_RPMSG = no;
        SND_I2S_HI6210_I2S = no;
        SND_SOC_IMG = no;
        SND_SOC_STI = no;
        SND_SOC_XILINX_I2S = no;
        SND_SOC_XILINX_AUDIO_FORMATTER = no;
        SND_SOC_XILINX_SPDIF = no;
        SND_XEN_FRONTEND = no;

        INFINIBAND = no;
        INFINIBAND_IPOIB = unset;
        INFINIBAND_IPOIB_CM = unset;
        NET_DSA = no;
        NET_VENDOR_CISCO = no;
        NET_VENDOR_HUAWEI = no;
        NET_VENDOR_MARVELL = no;
        NET_VENDOR_MELLANOX = no;
        NET_VENDOR_RENESAS = no;
        NET_VENDOR_STMICRO = no;
        RT2800USB_RT53XX = unset;
        RT2800USB_RT55XX = unset;
        WLAN_VENDOR_MARVELL = no;
        WLAN_VENDOR_MEDIATEK = no;
        WLAN_VENDOR_RALINK = no;
        X25 = no;

        AFFS_FS = no;
        AFS_FS = no;
        BEFS_FS = no;
        CODA_FS = no;
        JFS_FS = no;
        OCFS2_FS = no;
        OMFS_FS = no;
        ORANGEFS_FS = no;
        SYSV_FS = no;

        CHROME_PLATFORMS = no;
        CHROMEOS_LAPTOP = unset;
        CHROMEOS_PSTORE = unset;
        CHROMEOS_TBMC = unset;
        CROS_EC = unset;
        CROS_EC_I2C = unset;
        CROS_EC_ISHTP = unset;
        CROS_EC_LPC = unset;
        CROS_EC_SPI = unset;
        CROS_KBD_LED_BACKLIGHT = unset;

        SND_SOC = no;
        SND_SOC_INTEL_SOUNDWIRE_SOF_MACH = unset;
        SND_SOC_INTEL_USER_FRIENDLY_LONG_NAMES = unset;
        SND_SOC_SOF_ACPI = unset;
        SND_SOC_SOF_APOLLOLAKE = unset;
        SND_SOC_SOF_CANNONLAKE = unset;
        SND_SOC_SOF_COFFEELAKE = unset;
        SND_SOC_SOF_COMETLAKE = unset;
        SND_SOC_SOF_ELKHARTLAKE = unset;
        SND_SOC_SOF_GEMINILAKE = unset;
        SND_SOC_SOF_HDA_AUDIO_CODEC = unset;
        SND_SOC_SOF_HDA_LINK = unset;
        SND_SOC_SOF_ICELAKE = unset;
        SND_SOC_SOF_INTEL_TOPLEVEL = unset;
        SND_SOC_SOF_JASPERLAKE = unset;
        SND_SOC_SOF_MERRIFIELD = unset;
        SND_SOC_SOF_PCI = unset;
        SND_SOC_SOF_TIGERLAKE = unset;
        SND_SOC_SOF_TOPLEVEL = unset;

        HUAWEI_WMI = no;
      };
    }
  ];
}
</file>

<file path="hosts/enyo/kernel/packages/xanmod.nix">
{
  lib,
  stdenv,
  gccStdenv,
  buildLinux,
  fetchFromGitHub,
  kernelPatches,
  # Args to be passed to the kernel builder
  hostname ? "",
  customSuffix ? "shelf",
  ...
}: let
  inherit (lib.modules) mkForce mkOverride;
  inherit (lib.kernel) yes no freeform;
  inherit (lib.versions) pad majorMinor;

  version = "6.10.0";
  vendorSuffix = "xanmod1";

  pname = "linux-xanmod";
  modDirVersion = pad 3 "${version}-${customSuffix}";

  xanmod_custom =
    (buildLinux {
      inherit pname version modDirVersion;

      stdenv = gccStdenv;

      src = fetchFromGitHub {
        owner = "xanmod";
        repo = "linux";
        rev = "refs/tags/${version}-${vendorSuffix}";
        hash = "sha256-zsBSG8YFxW4kKWRVtdG6M87FHJJ/8qlmq/qWAGYeieg=";
      };

      # Kernel derivations in Nixpkgs apply a set of patches to the kernel
      # in order to improve the reproducibility, security or compatibility
      # of the kernel. Patches below from pkgs.kernelPatches are passed to
      # the nixpkgs Xanmod builds, but since we build Xanmod from source here
      # they will be missing. Re-add those patches to the manual builder alongside
      # any other patches that I might need.
      kernelPatches = [
        kernelPatches.bridge_stp_helper
        kernelPatches.request_key_helper
      ];

      ignoreConfigErrors = true;

      # This is true by default. I need to figure out what this
      # *really* entails and then un-set it to disable unnecessary
      # preset configurations.
      enableCommonConfig = true;

      # after booting to the new kernel
      # use zcat /proc/config.gz | grep -i "<value>"
      # to check if the kernel options are set correctly
      # Do note that values set in config/*.nix will override
      # those values in most cases.
      structuredExtraConfig = {
        ### Xanmod Options
        # CPUFreq governor Performance
        CPU_FREQ_DEFAULT_GOV_PERFORMANCE = mkOverride 60 yes;
        CPU_FREQ_DEFAULT_GOV_SCHEDUTIL = mkOverride 60 no;

        # Full preemption
        PREEMPT = mkOverride 60 yes;
        PREEMPT_VOLUNTARY = mkOverride 60 no;

        # Preemptive Full Tickless Kernel at 250Hz
        HZ = freeform "250";
        HZ_250 = yes;
        HZ_1000 = no;

        # RCU_BOOST and RCU_EXP_KTHREAD
        RCU_EXPERT = yes;
        RCU_FANOUT = freeform "64";
        RCU_FANOUT_LEAF = freeform "16";
        RCU_BOOST = yes;
        RCU_BOOST_DELAY = freeform "0";
        RCU_EXP_KTHREAD = yes;

        ### Custom Options
        DEFAULT_HOSTNAME = freeform "${hostname}";

        GCC_PLUGINS = yes;
        BUG_ON_DATA_CORRUPTION = yes;

        EXPERT = yes;
        DEBUG_KERNEL = mkForce no;
        WERROR = no;
      };

      extraMeta = {
        broken = stdenv.isAarch64;
        branch = majorMinor version;
        description = ''
          Custom build of the Xanmod kernel with patches focusing on performance
          and security.
        '';
      };
    })
    .overrideAttrs (oa: {
      prePatch =
        (oa.prePatch or "")
        + ''
          # Without this override, buildLinux forces me to use the value set in
          # localversion which, as you can tell, is xanmod1. Replace it with my
          # own custom suffix to indicate this is a custom build.
          # ...and for bragging rights.
          echo "Replacing localversion with custom suffix"
          substituteInPlace localversion \
            --replace-fail "xanmod1" "${customSuffix}"
        '';
    });
in {
  inherit xanmod_custom;
}
</file>

<file path="hosts/enyo/kernel/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.lists) filter;
  inherit (lib.strings) hasSuffix;
  inherit (lib.filesystem) listFilesRecursive;

  # Get hostname from meta module.
  inherit (config.meta) hostname;

  # Call the custom Xanmod package. Any future kernel builds from different sources
  # should be added in the packages directory.
  inherit (pkgs.callPackage ./packages/xanmod.nix {inherit hostname;}) xanmod_custom;
in {
  # Autodiscover Nix files containing patch configurations
  # with patchfiles or extraStructuredConfig. This is not the
  # most optimized way to do it, but it works.
  imports = filter (hasSuffix ".nix") (listFilesRecursive ./config);
  config.modules.system.boot.kernel = pkgs.linuxPackagesFor xanmod_custom;
}
</file>

<file path="hosts/enyo/modules/default.nix">
{
  imports = [
    ./device.nix
    ./profiles.nix
    ./system.nix
    ./usrEnv.nix
    ./style.nix
  ];
}
</file>

<file path="hosts/enyo/modules/device.nix">
{
  config.modules.device = {
    type = "desktop";
    cpu.type = "amd";
    gpu.type = "amd";
    monitors = ["DP-1" "HDMI-A-1"];
    hasBluetooth = true;
    hasSound = true;
    hasTPM = true;
  };
}
</file>

<file path="hosts/enyo/modules/profiles.nix">
{
  config.modules.profiles = {
    workstation.enable = true;
    gaming.enable = true;
  };
}
</file>

<file path="hosts/enyo/modules/style.nix">
{
  config.modules.style = {
    forceGtk = true;
    useKvantum = true;

    qt.enable = true;
    gtk = {
      enable = true;
      usePortal = true;
    };
  };
}
</file>

<file path="hosts/enyo/modules/system.nix">
{pkgs, ...}: {
  config.modules.system = {
    mainUser = "notashelf";
    fs.enabledFilesystems = ["btrfs" "vfat" "ntfs" "exfat"];
    autoLogin = true;

    boot = {
      loader = "systemd-boot";
      secureBoot = false;
      enableKernelTweaks = true;
      initrd.enableTweaks = true;
      loadRecommendedModules = true;
      tmpOnTmpfs = false;
      plymouth = {
        enable = true;
        withThemes = false;
      };
    };

    containers = {
      enabledContainers = ["alpha"];
    };

    yubikeySupport.enable = true;

    video.enable = true;
    sound.enable = true;
    bluetooth.enable = false;
    printing.enable = false;
    emulation.enable = true;

    virtualization = {
      enable = true;
      qemu.enable = true;
      docker.enable = true;
    };

    networking = {
      optimizeTcp = true;
      nftables.enable = true;
      tailscale = {
        enable = true;
        isClient = true;
        isServer = false;
      };
    };

    security = {
      tor.enable = true;
      fixWebcam = false;
      lockModules = true;
      auditd.enable = true;
    };

    programs = {
      cli.enable = true;
      gui.enable = true;

      spotify.enable = true;

      git.signingKey = "0xAF26552424E53993 ";

      gaming = {
        enable = true;
      };

      default = {
        terminal = "foot";
      };

      libreoffice.enable = true;
    };
  };
}
</file>

<file path="hosts/enyo/modules/usrEnv.nix">
{
  config.modules.usrEnv = {
    desktop = "Hyprland";
    desktops."i3".enable = true;
    useHomeManager = true;

    programs = {
      media.mpv.enable = true;

      launchers = {
        anyrun.enable = true;
        tofi.enable = true;
      };

      screenlock.swaylock.enable = true;
    };
  };
}
</file>

<file path="hosts/enyo/btrfs.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (lib.attrsets) filterAttrs;

  btrfsMounts = filterAttrs (_: mount: mount.fsType == "btrfs") config.fileSystems;
  hasHomeSubvolume = (filterAttrs (_: mount: mount.mountPoint == "/home") btrfsMounts) != {};
in {
  config = mkIf (btrfsMounts != {}) {
    systemd = {
      # Create a snapshots directory. It will be used to store periodic snapshots
      # created via btfs subvolume snapshot. Those snapshots will linger for 30 days
      # before they are dropped via systemd-tmpfiles settings.
      tmpfiles.settings."10-snapshots"."/var/lib/snapshots".d = {
        user = "root";
        group = "root";
        age = "30d";
      };

      # Run snapshotting job on a weekly timer. Persistent = true implies
      # that the job will attempt to cover for missed jobs that were supposed
      # to run during downtime.
      timers."snapshot-home" = {
        enable = hasHomeSubvolume;
        description = "snapshot home subvolume";
        wantedBy = ["multi-user.target"];
        timerConfig = {
          OnCalendar = "weekly";
          Persistent = true;
        };
      };

      # Create a service job that will run if the host has a /home subvolume.
      # It will create a snapshot of the /home subvolume and store it in
      # /var/lib/snapshots with a timestamp in its filename.
      # Timestamp format is as follows:
      #  %s - seconds since the Epoch (1970-01-01 00:00 UTC)
      services."snapshot-home" = {
        enable = hasHomeSubvolume;
        path = [pkgs.btrfs-progs];
        script = "btrfs subvolume snapshot /home /var/lib/snapshots/$(date +%s)";
      };
    };
  };
}
</file>

<file path="hosts/enyo/host.nix">
{
  imports = [
    ./fs
    ./kernel
    ./modules

    ./btrfs.nix
    ./networking.nix
  ];

  config = {
    # Mount some filesystems with secure defaults to disallow
    # running executables, setuid binaries, and device files.
    # We could consider /tmp here, but that breaks e.g. makefiles
    # while building packages.
    # See:
    #  <https://wiki.archlinux.org/title/Security#Mount_options>
    fileSystems = let
      defaults = ["nodev" "nosuid" "noexec"];
    in {
      "/var/log".options = defaults;
      "/boot".options = defaults;
    };

    system.stateVersion = "23.05";
  };
}
</file>

<file path="hosts/enyo/networking.nix">
{
  #  we don't want the kernel setting up interfaces magically for us
  boot.extraModprobeConfig = "options bonding max_bonds=0";
  networking = {
    useDHCP = false;
    useNetworkd = false;
  };

  systemd.network = {
    enable = true;

    wait-online = {
      enable = false;
      anyInterface = true;
      extraArgs = ["--ipv4"];
    };

    # https://wiki.archlinux.org/title/Systemd-networkd
    networks = {
      # leave the kernel dummy devies unmanagaed
      "10-dummy" = {
        matchConfig.Name = "dummy*";
        networkConfig = {};
        # linkConfig.ActivationPolicy = "always-down";
        linkConfig.Unmanaged = "yes";
      };

      # let me configure tailscale manually
      "20-tailscale-ignore" = {
        matchConfig.Name = "tailscale*";
        linkConfig = {
          Unmanaged = "yes";
          RequiredForOnline = false;
        };
      };

      # wired interfaces e.g. ethernet
      "30-network-defaults-wired" = {
        # matchConfig.Name = "en* | eth* | usb*";
        matchConfig.Type = "ether";
        networkConfig = {
          DHCP = "yes";
          IPv6AcceptRA = true;
          IPForward = "yes";
          IPMasquerade = "no";
        };

        dhcpV4Config = {
          ClientIdentifier = "duid"; # "mac"
          Use6RD = "yes";
          RouteMetric = 512; # should be higher than the wireless RouteMetric so that wireless is preferred
          UseDNS = false;
          DUIDType = "link-layer";
        };

        dhcpV6Config = {
          RouteMetric = 512;
          PrefixDelegationHint = "::64";
          UseDNS = false;
          DUIDType = "link-layer";
        };
      };

      # wireless interfaces e.g. network cards
      "30-network-defaults-wireless" = {
        # matchConfig.Name = "wl*";
        matchConfig.Type = "wlan";
        networkConfig = {
          DHCP = "yes";
          IPv6AcceptRA = true;
          IPForward = "yes";
          IPMasquerade = "no";
        };

        dhcpV4Config = {
          ClientIdentifier = "mac";
          RouteMetric = 216;
          UseDNS = true;
          DUIDType = "link-layer";
          Use6RD = "yes";
        };

        dhcpV6Config = {
          RouteMetric = 216;
          UseDNS = true;
          DUIDType = "link-layer";
          PrefixDelegationHint = "::64";
        };
      };
    };
  };
}
</file>

<file path="hosts/enyo/wireguard.nix">
{config, ...}: {
  networking.firewall = {
    allowedUDPPorts = [51820];
  };

  boot.kernelModules = ["wireguard"];

  # Wireguard Client Peer Setup
  networking.wireguard = {
    enable = true;
    interfaces = {
      wg0 = {
        # General Settings
        privateKeyFile = config.age.secrets.wg-client.path;
        allowedIPsAsRoutes = true;
        listenPort = 51820;
        ips = ["10.255.255.11/32" "2a01:4f9:c010:2cf9:f::11/128"];
        peers = [
          {
            allowedIPs = ["10.255.255.0/24" "2a01:4f9:c010:2cf9:f::/80"];
            endpoint = "128.140.91.216:51820";
            publicKey = "v3ol3QsgLPudVEtbETByQ0ABAOrJE2WcFfQ/PQAD8FM=";
            persistentKeepalive = 30;
          }
        ];
      };
    };
  };
}
</file>

<file path="hosts/epimetheus/fs/default.nix">
{
  boot.initrd.luks.devices."enc".device = "/dev/disk/by-uuid/82144284-cf1d-4d65-9999-2e7cdc3c75d4";

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/b79d3c8b-d511-4d66-a5e0-641a75440ada";
      fsType = "btrfs";
      options = ["subvol=root"];
    };

    "/home" = {
      device = "/dev/disk/by-uuid/b79d3c8b-d511-4d66-a5e0-641a75440ada";
      fsType = "btrfs";
      options = ["subvol=home"];
    };

    "/nix" = {
      device = "/dev/disk/by-uuid/b79d3c8b-d511-4d66-a5e0-641a75440ada";
      fsType = "btrfs";
      options = ["subvol=nix"];
    };

    "/persist" = {
      device = "/dev/disk/by-uuid/b79d3c8b-d511-4d66-a5e0-641a75440ada";
      fsType = "btrfs";
      options = ["subvol=persist"];
      neededForBoot = true;
    };

    "/var/log" = {
      device = "/dev/disk/by-uuid/b79d3c8b-d511-4d66-a5e0-641a75440ada";
      fsType = "btrfs";
      options = ["subvol=log"];
      neededForBoot = true;
    };

    "/boot" = {
      device = "/dev/disk/by-uuid/FDED-3BCF";
      fsType = "vfat";
    };
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/0d1fc824-623b-4bb8-bf7b-63a3e657889d";}
  ];
}
</file>

<file path="hosts/epimetheus/modules/default.nix">
{
  imports = [
    ./device.nix
    ./system.nix
    ./usrEnv.nix
  ];
}
</file>

<file path="hosts/epimetheus/modules/device.nix">
{
  config.modules.device = {
    type = "laptop";
    cpu.type = "intel";
    gpu.type = "hybrid-nv"; # nvidia drivers :b:roke
    monitors = ["eDP-1"];
    hasBluetooth = true;
    hasSound = true;
    hasTPM = true;
  };
}
</file>

<file path="hosts/epimetheus/modules/system.nix">
{
  config.modules.system = {
    mainUser = "notashelf";
    fs.enabledFilesystems = ["btrfs" "ext4" "vfat"];
    autoLogin = true;

    boot = {
      secureBoot = false;
      loader = "systemd-boot";
      enableKernelTweaks = true;
      initrd.enableTweaks = true;
      loadRecommendedModules = true;
      tmpOnTmpfs = true;
    };

    encryption = {
      enable = true;
      device = "enc";
    };

    video.enable = true;
    sound.enable = true;
    bluetooth.enable = false;
    printing.enable = false;
    emulation.enable = true;

    networking = {
      optimizeTcp = true;
    };

    security = {
      fixWebcam = false;
    };

    virtualization = {
      enable = true;
      docker.enable = false;
      qemu.enable = true;
      podman.enable = false;
    };

    programs = {
      git.signingKey = "0x05A3BD53FEB32B81";

      cli.enable = true;
      gui.enable = true;

      gaming = {
        enable = false;
      };
      default = {
        terminal = "foot";
      };
    };
  };
}
</file>

<file path="hosts/epimetheus/modules/usrEnv.nix">
{
  config.modules.usrEnv = {
    isWayland = true;
    desktop = "Hyprland";
    useHomeManager = true;
  };
}
</file>

<file path="hosts/epimetheus/encryption.nix">
{
  # mildly improves performance for the disk encryption
  boot.initrd.availableKernelModules = [
    "aesni_intel"
    "cryptd"
    "usb_storage"
  ];

  boot.initrd.luks.devices."enc" = {
    # improve performance on ssds
    bypassWorkqueues = true;
    keyFileSize = 4096;
    # the device with the maching id will be searched for the key file
    keyFile = "/dev/disk/by-id/usb-Generic_Flash_Disk_B314B63E-0:0";
    preLVM = true;
    # if keyfile is not there, fall back to cryptsetup password
    # fallbackToPassword = true; # IMPLIED BY config.boot.initrd.systemd.enable
  };
}
</file>

<file path="hosts/epimetheus/host.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf mkForce;
  inherit (lib.lists) optionals;

  dev = config.modules.device;
in {
  imports = [
    ./fs
    ./modules

    ./encryption.nix
  ];
  config = {
    fileSystems = {
      "/".options = ["compress=zstd" "noatime"];
      "/home".options = ["compress=zstd"];
      "/nix".options = ["compress=zstd" "noatime"];
      "/var/log".options = ["compress=zstd" "noatime"];
      "/persist".options = ["compress=zstd" "noatime"];
    };

    hardware = {
      nvidia = mkIf (builtins.elem dev.gpu ["nvidia" "hybrid-nv"]) {
        nvidiaPersistenced = mkForce false;

        open = mkForce false;

        prime = {
          offload.enable = mkForce true;
          # Bus ID of the Intel GPU. You can find it using lspci, either under 3D or VGA
          intelBusId = "PCI:0:2:0";

          # Bus ID of the NVIDIA GPU. You can find it using lspci, either under 3D or VGA
          nvidiaBusId = "PCI:1:0:0";
        };
      };
    };

    boot = {
      kernelParams =
        [
          "nohibernate"
          # The passive default severely degrades performance.
          "intel_pstate=active"
        ]
        ++ optionals ((dev.cpu == "intel") && (dev.gpu != "hybrid-nv")) [
          "i915.enable_fbc=1"
          "i915.enable_psr=2"
        ];

      kernelModules = [
        "sdhci" # fix microsd cards
      ];
    };

    home-manager.users.notashelf.systemd.user.startServices = mkForce "legacy";

    console.earlySetup = true;
  };
}
</file>

<file path="hosts/erebus/image/default.nix">
{
  self,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkImageMediaOverride;
in {
  # A stripped-down version of ISO role
  system.switch.enable = false;

  isoImage = let
    hostname = config.networking.hostName or "nixos";
    rev = self.shortRev or "${builtins.substring 0 8 self.lastModifiedDate}-dirty";
    # $hostname-$release-$rev-$arch
    name = "${hostname}-${config.system.nixos.release}-${rev}-${pkgs.stdenv.hostPlatform.uname.processor}";
  in {
    isoName = mkImageMediaOverride "${name}.iso";
    volumeID = mkImageMediaOverride "${name}";
    squashfsCompression = "zstd -Xcompression-level 10"; # default uses gzip
    makeEfiBootable = true;
    makeUsbBootable = true;
  };
}
</file>

<file path="hosts/erebus/system/boot.nix">
{pkgs, ...}: let
  inherit (pkgs) linuxPackagesFor linuxKernel;
in {
  boot = {
    tmp.cleanOnBoot = true;
    kernel.sysctl = {"kernel.unprivileged_bpf_disabled" = 1;};

    # Always copytoram so that if the image is booted from, e.g., a
    # USB stick, nothing is mistakenly written to persistent storage.
    kernelParams = ["copytoram"];

    # Use latest Linux kernel package
    kernelPackages = linuxPackagesFor linuxKernel.kernels.linux_hardened;
  };
}
</file>

<file path="hosts/erebus/system/default.nix">
# NixOS livesystem to generate yubikeys in an air-gapped manner
# $ nix build .#images.erebus
{
  imports = [
    ./boot.nix
    ./desktop.nix
    ./environment.nix
    ./fonts.nix
    ./login.nix
    ./networking.nix
    ./nix.nix
    ./programs.nix
    ./security.nix
    ./services.nix
    ./users.nix
  ];
}
</file>

<file path="hosts/erebus/system/desktop.nix">
{
  # enable sway window manager
  programs.sway = {
    enable = true;
    wrapperFeatures.gtk = true;
  };
}
</file>

<file path="hosts/erebus/system/environment.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
in {
  environment = {
    noXlibs = mkForce false;

    systemPackages = with pkgs; [
      # Yubikey tooling
      yubikey-personalization
      cryptsetup
      pwgen
      paperkey
      gnupg
      ctmg

      # GUI tools
      alacritty # terminal emulator
      zathura # PDF viewer
      imv # image viewer
    ];

    # fix an annoying warning
    etc."mdadm.conf".text = ''
      MAILADDR root
    '';
  };
}
</file>

<file path="hosts/erebus/system/fonts.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
in {
  fonts = {
    fontDir = {
      enable = true;
      decompressFonts = true;
    };

    fontconfig.enable = mkForce true;

    packages = with pkgs; [
      noto-fonts
      noto-fonts-cjk-sans
      noto-fonts-color-emoji
    ];
  };
}
</file>

<file path="hosts/erebus/system/login.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.meta) getExe;
  inherit (lib.strings) concatStringsSep;

  sessionData = config.services.displayManager.sessionData.desktops;
  sessionPaths = concatStringsSep ":" [
    "${sessionData}/share/xsessions"
    "${sessionData}/share/wayland-sessions"
  ];
in {
  environment.systemPackages = with pkgs; [
    grim # screenshot functionality
    slurp # screenshot functionality
    wl-clipboard # wl-copy and wl-paste for copy/paste from stdin / stdout
    mako # notification system developed by swaywm maintainer
  ];

  services = {
    # Enable the gnome-keyring secrets vault.
    # Will be exposed through DBus to programs willing to store secrets.
    gnome.gnome-keyring.enable = true;

    # Log-in automatically to a sway session.
    greetd = {
      enable = true;
      vt = 2;
      settings = {
        default_session = {
          user = "notashelf";
          command = concatStringsSep " " [
            (getExe pkgs.greetd.tuigreet)
            "--time"
            "--remember"
            "--remember-user-session"
            "--asterisks"
            "--sessions '${sessionPaths}'"
          ];
        };

        initial_session = {
          user = "notashelf";
          command = "sway";
        };
      };
    };
  };

  # Suppress error messages on tuigreet. They sometimes obscure the TUI
  # boundaries of the greeter.
  # See: https://github.com/apognu/tuigreet/issues/68#issuecomment-1586359960
  systemd.services.greetd.serviceConfig = {
    Type = "idle";
    StandardInputs = "tty";
    StandardOutput = "tty";
    StandardError = "journal";
    TTYReset = true;
    TTYVHangup = true;
    TTYVTDisallocate = true;
  };
}
</file>

<file path="hosts/erebus/system/networking.nix">
{
  # make sure we are air-gapped
  networking = {
    wireless.enable = false;
    dhcpcd.enable = false;
  };
}
</file>

<file path="hosts/erebus/system/nix.nix">
{
  # Secure defaults
  nixpkgs.config = {
    allowBroken = false; # false breaks zfs kernel - but we don't care about zfs
  };
}
</file>

<file path="hosts/erebus/system/programs.nix">
{
  programs = {
    zsh.enable = true;
    dconf.enable = true;

    ssh.startAgent = false;
    gnupg.agent = {
      enable = true;
      enableSSHSupport = true;
    };
  };
}
</file>

<file path="hosts/erebus/system/security.nix">
{
  security.sudo.wheelNeedsPassword = false;
}
</file>

<file path="hosts/erebus/system/services.nix">
{pkgs, ...}: {
  services = {
    gvfs.enable = true;

    udev.packages = with pkgs; [yubikey-personalization];
    pcscd.enable = true;

    autorandr.enable = true;

    xserver = {
      enable = true;
      xkb.layout = "tr";

      desktopManager.xterm.enable = false;
      displayManager = {
        lightdm.enable = false;
        gdm.enable = false;
      };
    };
  };
}
</file>

<file path="hosts/erebus/system/users.nix">
{pkgs, ...}: {
  users.users."notashelf" = {
    isNormalUser = true;
    extraGroups = ["wheel"];
    shell = pkgs.zsh;
    initialHashedPassword = "$6$BGWK657mkAl3QIfc$RHkH.8P/qHQJpxIqWOA4cIhOhm0xrcvDr4Xqj0xTaFUIqfW/Oond9MMXlkV4SoGbQSAc/XOcNsf5jR5Ms6nMV0";
  };
}
</file>

<file path="hosts/erebus/virtualization/default.nix">
{
  virtualisation.vmVariant = {
    # let the built VM be more responsive
    virtualisation = {
      memorySize = 4096;
      cores = 3;
    };
  };
}
</file>

<file path="hosts/erebus/host.nix">
{
  imports = [
    ./image # ISO image configuration
    ./system # system configuration
    ./virtualization # configure virtual machine
  ];

  config = {
    system.stateVersion = "23.11";
  };
}
</file>

<file path="hosts/gaea/system/programs/neovim/config/init.vim">
"vi:filetype=vim

" add ~/.vim to the beginning of the runtimepath
set runtimepath^=~/.vim

" set the packpath to the runtimepath
let &packpath = &runtimepath

" for plugins to load correctly
filetype plugin indent on

" don't try to be vi compatible
set nocompatible

" use system clipboard
set clipboard+=unnamedplus

" syntax highlighting
syntax enable

" display line numbers
set number relativenumber

" enable mouse support in all modes
set mouse=a

" set indentation to spaces instead of tabs
set noexpandtab

" number of spaces to use for each step of (auto)indent
set shiftwidth=2

" number of spaces that a <Tab> in the file counts for
set tabstop=2

" C-style indenting
set cindent

" 'smart' indenting
set smartindent

" set the indent of new lines
set autoindent

" set the folding method based on syntax
set foldmethod=syntax


" spaces instead of tabs for indentation
set expandtab

" 'smart' tabs that respects 'shiftwidth' for indentation
set smarttab

" number of spaces a <Tab> in the file counts for
set tabstop=4

" number of spaces to use for each step of (auto)indent
set shiftwidth=0

" define backspace behavior in insert mode:
" - 'indent': allows backspace to delete auto-indentation at the start of a line
" - 'eol': enables backspace to delete the end-of-line character, acting as line deletion
" - 'start': allows backspace to delete past the start of insert or typeahead
set backspace=indent,eol,start


" spell Checking
set spelllang=en " spell check langs
set spellsuggest=best,9  " suggestions for spelling corrections
</file>

<file path="hosts/gaea/system/programs/neovim/config/maps.vim">
" map key <F2> to toggle between hiding/showing current line
nmap <F2> zA

" map key <F3> to toggle between reducing/enlarging fold level
nmap <F3> zR

" map key <F4> to fold everything except the cursor line
nmap <F4> zM
</file>

<file path="hosts/gaea/system/programs/neovim/config/plugins.vim">
" customize label for vim-sneak
let g:sneak#label = 1

" Toggle spell checking in normal mode
nnoremap <silent> <F3> :set spell!<CR>

" Toggle spell checking in insert mode
inoremap <silent> <F3> <C-O>:set spell!<CR>

lua << EOF
require('nvim-treesitter.configs').setup {
	highlight = {
		enable = true
    }
}
EOF
</file>

<file path="hosts/gaea/system/programs/neovim/default.nix">
{pkgs, ...}: let
  inherit (builtins) readFile;
in {
  programs.neovim = {
    enable = true;
    defaultEditor = true;

    withRuby = false;
    withPython3 = false;
    withNodeJs = false;

    viAlias = true;
    vimAlias = true;

    configure = {
      customRC = ''
        " -- init --
        ${readFile ./config/init.vim}

        " -- mappings --
        ${readFile ./config/maps.vim}

        " -- plugin configs --
        ${readFile ./config/plugins.vim}

        " -- lua configuration --
        lua EOF <<
        -- set statusline colors
        vim.cmd([[
          hi VertSplit guifg=#151515
          hi User1 guifg=#999999 guibg=#151515
          hi User2 guifg=#eea040 guibg=#151515
          hi User3 guifg=#0072ff guibg=#151515
          hi User4 guifg=#ffffff guibg=#151515
          hi User5 guifg=#777777 guibg=#151515
        ]])

        -- set statusline
        vim.o.statusline = table.concat({
          "%1* %n %*",       -- buffer number
          "%3* %y %*",       -- file type
          -- "%4* %<%F %*",  -- full path
          "%4* %<%f %*",     -- file name
          "%2* %m %*",       -- modified flag
          "%1* %= %5l %*",   -- current line
          "%2* / %L %*",       -- total lines
          "%1* %4v %*",      -- virtual column number
          "%2* 0x%04B %*",   -- character under cursor
          "%5* %{&ff} %*",   -- file format
        })
        EOF
      '';

      packages.myVimPackage = with pkgs.vimPlugins; {
        start = [
          # general utils
          dressing-nvim # better UI components

          leap-nvim # navigation
          undotree # undo history
          vim-signature # marks on signcolumn
          which-key-nvim # mapping manager and cheatsheet
          vim-sneak

          # completion
          nvim-cmp
          cmp-buffer
          cmp-cmdline
          cmp-nvim-lsp
          cmp-path
          cmp_luasnip

          comment-nvim
          todo-comments-nvim

          luasnip
          friendly-snippets

          nvim-lspconfig
          nvim-lint
          fidget-nvim
          aerial-nvim

          telescope-nvim # list of files interface
          telescope-file-browser-nvim
          telescope-fzy-native-nvim

          vim-fugitive # git in vim
          gitsigns-nvim

          targets-vim # text objects
          vim-surround
          vim-expand-region

          nvim-treesitter.withAllGrammars # better highlighting
        ];
      };
    };
  };
}
</file>

<file path="hosts/gaea/system/programs/default.nix">
{
  imports = [
    ./neovim

    ./git.nix
  ];
}
</file>

<file path="hosts/gaea/system/programs/git.nix">
{
  programs.git = {
    enable = true;
    lfs.enable = true;
  };
}
</file>

<file path="hosts/gaea/system/default.nix">
{
  imports = [
    ./programs
  ];
}
</file>

<file path="hosts/gaea/host.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.strings) optionalString;
in {
  imports = [
    ./system
  ];

  services.getty.helpLine =
    ''
      The "nixos" and "root" accounts have empty passwords.
      An ssh daemon is running. You then must set a password
      for either "root" or "nixos" with `passwd` or add an ssh key
      to /home/nixos/.ssh/authorized_keys be able to login.
      If you need a wireless connection, you may use networkmanager
      by invoking `nmcli` or `nmtui`, the ncurses interface.
    ''
    + optionalString config.services.xserver.enable ''
      Type `sudo systemctl start display-manager' to
      start the graphical user interface.
    '';

  # since we don't inherit the core module, this needs to be set here manually
  # otherwise we'll see the stateVersion error - which doesn't actually matter inside the ISO
  # but still annoying and slows down nix flake check
  system.stateVersion = "23.11";
}
</file>

<file path="hosts/helios/fs/default.nix">
{
  imports = [./external.nix];
  config = {
    fileSystems = {
      "/" = {
        device = "/dev/disk/by-uuid/783e926f-acd7-4684-a7b3-f5b1ecefa11b";
        fsType = "ext4";
      };
    };

    swapDevices = [
      {device = "/dev/disk/by-uuid/d1d77f8e-7c77-40c9-a5e8-59d962f4d397";}
    ];
  };
}
</file>

<file path="hosts/helios/fs/external.nix">
{
  fileSystems."/srv/storage" = {
    device = "/dev/disk/by-uuid/19ea8fad-b930-4a48-99e1-04633b2142f8";
    fsType = "ext4";
  };
}
</file>

<file path="hosts/helios/modules/default.nix">
{
  imports = [
    ./device.nix
    ./system.nix
    ./usrEnv.nix
    ./services.nix
  ];
}
</file>

<file path="hosts/helios/modules/device.nix">
{
  config.modules.device = {
    type = "server";
    cpu.type = "amd";
    gpu.type = null;
    hasBluetooth = false;
    hasSound = false;
    hasTPM = false;
  };
}
</file>

<file path="hosts/helios/modules/services.nix">
{
  config.modules.system.services = {
    nextcloud.enable = true;
    mailserver.enable = true;
    vaultwarden.enable = true;
    forgejo.enable = true;
    searxng.enable = true;
    reposilite.enable = true;

    social = {
      mastodon.enable = true;
      matrix.enable = true;
    };

    bincache = {
      harmonia.enable = true;
    };

    networking = {
      headscale.enable = true;
      wireguard.enable = true;
    };

    monitoring = {
      grafana.enable = true;
      prometheus.enable = true;
      loki.enable = false;
      uptime-kuma.enable = true;
    };

    database = {
      mysql.enable = false;
      mongodb.enable = false;
      redis.enable = true;
      postgresql.enable = true;
      garage.enable = true;
    };
  };
}
</file>

<file path="hosts/helios/modules/system.nix">
{pkgs, ...}: {
  config.modules.system = {
    mainUser = "notashelf";
    fs.enabledFilesystems = ["vfat" "exfat" "ext4"];
    video.enable = false;
    sound.enable = false;
    bluetooth.enable = false;
    printing.enable = false;

    boot = {
      secureBoot = false;
      kernel = pkgs.linuxPackages_latest;
      loader = "grub";
      enableKernelTweaks = true;
      initrd.enableTweaks = true;
      loadRecommendedModules = true;
      tmpOnTmpfs = false;
    };

    virtualization = {
      enable = false;
      qemu.enable = true;
      docker.enable = true;
    };

    networking = {
      optimizeTcp = false;
      tarpit.enable = true;
      nftables.enable = true;
      tailscale = {
        enable = true;
        isServer = true;
        isClient = false;
      };
    };

    programs = {
      git.signingKey = "";

      cli.enable = true;
      gui.enable = false;
    };
  };
}
</file>

<file path="hosts/helios/modules/usrEnv.nix">
{
  config.modules.usrEnv = {
    useHomeManager = true;
  };
}
</file>

<file path="hosts/helios/host.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
in {
  imports = [
    ./fs
    ./modules

    ./nftables.nix
  ];

  config = {
    networking.domain = "notashelf.dev";
    services.smartd.enable = mkForce false;

    boot = {
      growPartition = !config.boot.initrd.systemd.enable;
      loader.grub = {
        enable = true;
        useOSProber = mkForce false;
        efiSupport = mkForce false;
        enableCryptodisk = false;
        theme = null;
        backgroundColor = null;
        splashImage = null;
        device = mkForce "/dev/disk/by-label/nixos";
        forceInstall = true;
      };
    };

    # https://docs.hetzner.com/cloud/networks/faq/#are-any-ip-addresses-reserved
    networking = {
      defaultGateway = {
        interface = "ens3";
        address = "172.31.1.1";
      };
      defaultGateway6 = {
        interface = "ens3";
        address = "fe80::1";
      };
    };
  };
}
</file>

<file path="hosts/helios/nftables.nix">
{lib, ...}: let
  inherit (lib) entryBetween;
in {
  networking.nftables.rules = {
    inet.filter.input = {
      # Endless
      endlessh = entryBetween ["basic-icmp6" "basic-icmp" "ping6" "ping"] ["default"] {
        protocol = "tcp";
        field = "dport";
        policy = "accept";
        value = [22];
      };

      # Allow nginx to respond to the domain challenges
      # without passing each service through the firewall
      https = entryBetween ["basic-icmp6" "basic-icmp" "ping6" "ping"] ["default"] {
        protocol = "tcp";
        field = "dport";
        value = [443];
        policy = "accept";
      };

      # Headscale DERP server should be reachable from outside to allow registering
      # new devices on the Tailnet.
      headscale = entryBetween ["basic-icmp6" "basic-icmp" "ping6" "ping"] ["default"] {
        protocol = "udp";
        field = "dport";
        policy = "accept";
        value = [3478];
      };

      # Ports needed by Forgejo's internal services
      forgejo = entryBetween ["basic-icmp6" "basic-icmp" "ping6" "ping"] ["default"] {
        protocol = "tcp";
        field = "dport";
        policy = "accept";
        value = [2222];
      };

      # NOTE: snm has an option to enable firewall ports by default, but my nftables abstractions
      # do not allow for us to use that option, so we'll just open the ports manually
      # I could probably add an entry that propagates the tcpPorts option to the firewall
      # but that does not seem like a very good option since we'll not be able to control policies
      simple-nixos-mailserver = entryBetween ["basic-icmp6" "basic-icmp" "ping6" "ping"] ["default"] {
        protocol = "tcp";
        field = "dport";
        policy = "accept";
        value = [
          25 # smtp
          80 # used for acme-nginx domain challenges
          143 # imap
          993 # imapSsl
          465 # smtpSsl
        ];
      };
    };
  };
}
</file>

<file path="hosts/hermes/fs/default.nix">
{
  boot.initrd.luks.devices."enc".device = "/dev/disk/by-uuid/0eb8b547-3644-4d49-a4e9-c28c395b8568";

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/c9527aaf-947d-4dc0-88ab-3af438e3f5b1";
      fsType = "btrfs";
      options = ["subvol=root" "compress=zstd" "noatime" "x-systemd.device-timeout=0"];
    };

    "/boot" = {
      device = "/dev/disk/by-uuid/4F12-E737";
      fsType = "vfat";
    };

    "/nix" = {
      device = "/dev/disk/by-uuid/c9527aaf-947d-4dc0-88ab-3af438e3f5b1";
      fsType = "btrfs";
      options = ["subvol=nix" "compress=zstd" "noatime"];
    };

    "/persist" = {
      device = "/dev/disk/by-uuid/c9527aaf-947d-4dc0-88ab-3af438e3f5b1";
      fsType = "btrfs";
      neededForBoot = true;
      options = ["subvol=persist" "compress=zstd" "noatime"];
    };

    "/var/log" = {
      device = "/dev/disk/by-uuid/c9527aaf-947d-4dc0-88ab-3af438e3f5b1";
      fsType = "btrfs";
      neededForBoot = true;
      options = ["subvol=log" "compress=zstd" "noatime"];
    };

    "/home" = {
      device = "/dev/disk/by-uuid/c9527aaf-947d-4dc0-88ab-3af438e3f5b1";
      fsType = "btrfs";
      options = ["subvol=home" "compress=zstd"];
    };
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/b55b09f2-b567-4fbf-9150-b05b91710ca2";}
  ];
}
</file>

<file path="hosts/hermes/modules/default.nix">
{
  imports = [
    ./device.nix
    ./profiles.nix
    ./system.nix
    ./usrEnv.nix
    ./style.nix
  ];
}
</file>

<file path="hosts/hermes/modules/device.nix">
{
  modules.device = {
    type = "laptop";
    cpu = {
      type = "amd";
      amd.pstate.enable = true;
      amd.zenpower.enable = true;
    };
    gpu.type = "amd";
    monitors = ["eDP-1"];
    hasBluetooth = true;
    hasSound = true;
    hasTPM = true;
  };
}
</file>

<file path="hosts/hermes/modules/profiles.nix">
{
  config.modules.profiles = {
    workstation.enable = true;
    gaming.enable = true;
  };
}
</file>

<file path="hosts/hermes/modules/style.nix">
{
  config.modules.style = {
    forceGtk = true;
    useKvantum = true;
    gtk.usePortal = true;
  };
}
</file>

<file path="hosts/hermes/modules/system.nix">
{pkgs, ...}: {
  modules.system = {
    mainUser = "notashelf";
    fs.enabledFilesystems = ["btrfs" "ext4" "vfat"];
    impermanence.root.enable = true;

    boot = {
      secureBoot = false;
      kernel = pkgs.linuxPackages_xanmod_latest;
      plymouth.enable = true;
      loader = "systemd-boot";
      enableKernelTweaks = true;
      initrd.enableTweaks = true;
      loadRecommendedModules = true;
      tmpOnTmpfs = true;
    };

    encryption = {
      enable = true;
      device = "enc";
    };

    yubikeySupport.enable = true;
    autoLogin = true;

    video.enable = true;
    sound.enable = true;
    bluetooth.enable = true;
    printing.enable = true;
    emulation.enable = true;

    networking = {
      optimizeTcp = true;
      nftables.enable = true;
      tailscale = {
        enable = true;
        isClient = true;
      };
    };

    security = {
      fixWebcam = false;
      lockModules = true;
      usbguard.enable = true;
    };

    virtualization = {
      enable = true;
      docker.enable = false;
      qemu.enable = true;
      podman.enable = false;
    };

    programs = {
      cli.enable = true;
      gui.enable = true;

      spotify.enable = true;

      git.signingKey = "0xAF26552424E53993";

      gaming = {
        enable = true;
      };

      default = {
        terminal = "foot";
      };
    };
  };
}
</file>

<file path="hosts/hermes/modules/usrEnv.nix">
{
  modules.usrEnv = {
    desktop = "Hyprland";
    useHomeManager = true;

    programs = {
      media.mpv.enable = true;

      launchers = {
        anyrun.enable = true;
        tofi.enable = true;
      };

      screenlock.swaylock.enable = true;
    };
  };
}
</file>

<file path="hosts/hermes/encryption.nix">
{
  config,
  lib,
  ...
}: {
  # mildly improves performance for the disk encryption
  boot.initrd.availableKernelModules = [
    "aesni_intel"
    "cryptd"
    "usb_storage"
  ];

  services.lvm.enable = lib.mkForce true;

  boot.initrd.luks.devices."enc" = {
    # improve performance on ssds
    bypassWorkqueues = true;
    preLVM = true;

    # the device with the maching id will be searched for the key file
    # keyFile = "/dev/disk/by-id/usb-Generic_Flash_Disk_B314B63E-0:0";
    # keyFileSize = 4096;

    # if keyfile is not there, fall back to cryptsetup password
    fallbackToPassword = !config.boot.initrd.systemd.enable; # IMPLIED BY config.boot.initrd.systemd.enable
  };
}
</file>

<file path="hosts/hermes/host.nix">
{
  imports = [
    ./fs
    ./modules

    ./encryption.nix
    ./networking.nix
  ];

  config = {
    boot.kernelParams = [
      "i8042.nomux" # Don't check presence of an active multiplexing controller
      "i8042.nopnp" # Don't use ACPIPn<P / PnPBIOS to discover KBD/AUX controllers
    ];

    system.stateVersion = "23.05";
  };
}
</file>

<file path="hosts/hermes/networking.nix">
{
  #  we don't want the kernel setting up interfaces magically for us
  boot.extraModprobeConfig = "options bonding max_bonds=0";
  networking = {
    useDHCP = false;
    useNetworkd = false;
  };

  systemd.network = {
    enable = true;

    wait-online = {
      enable = false;
      anyInterface = true;
      extraArgs = ["--ipv4"];
    };

    networks = {
      # leave the kernel dummy devies unmanagaed
      "10-dummy" = {
        matchConfig.Name = "dummy*";
        networkConfig = {};
        # linkConfig.ActivationPolicy = "always-down";
        linkConfig.Unmanaged = "yes";
      };

      # let me configure tailscale manually
      "20-tailscale-ignore" = {
        matchConfig.Name = "tailscale*";
        linkConfig = {
          Unmanaged = "yes";
          RequiredForOnline = false;
        };
      };

      "30-network-defaults-wired" = {
        # matchConfig.Name = "en* | eth* | usb*";
        matchConfig.Type = "ether";
        networkConfig = {
          DHCP = "yes";
          IPv6AcceptRA = true;
          IPForward = "yes";
          IPMasquerade = "no";
        };

        dhcpV4Config = {
          ClientIdentifier = "duid"; # "mac"
          Use6RD = "yes";
          RouteMetric = 512;
          UseDNS = false;
          DUIDType = "link-layer";
        };

        dhcpV6Config = {
          RouteMetric = 512;
          PrefixDelegationHint = "::64";
          UseDNS = false;
          DUIDType = "link-layer";
        };
      };

      "30-network-defaults-wireless" = {
        # matchConfig.Name = "wl*";
        matchConfig.Type = "wlan";
        networkConfig = {
          DHCP = "yes";
          IPv6AcceptRA = true;
          IPForward = "yes";
          IPMasquerade = "no";
        };

        dhcpV4Config = {
          ClientIdentifier = "mac";
          RouteMetric = 1500;
          UseDNS = true;
          DUIDType = "link-layer";
          Use6RD = "yes";
        };

        dhcpV6Config = {
          RouteMetric = 1500;
          UseDNS = true;
          DUIDType = "link-layer";
          # routes = [
          #   { routeConfig = { Gateway = "_dhcp4"; Metric = 1500; }; }
          #   { routeConfig = { Gateway = "_ipv6ra"; Metric = 1500; }; }
          # ];
          PrefixDelegationHint = "::64";
        };
      };
    };
  };
}
</file>

<file path="hosts/icarus/fs/default.nix">
{
  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/5e652a20-9dc3-441a-9fc3-949d5263ee7a";
      fsType = "btrfs";
      options = ["subvol=root"];
    };

    "/home" = {
      device = "/dev/disk/by-uuid/5e652a20-9dc3-441a-9fc3-949d5263ee7a";
      fsType = "btrfs";
      options = ["subvol=home"];
    };

    "/nix" = {
      device = "/dev/disk/by-uuid/5e652a20-9dc3-441a-9fc3-949d5263ee7a";
      fsType = "btrfs";
      options = ["subvol=nix"];
    };

    "/persist" = {
      device = "/dev/disk/by-uuid/5e652a20-9dc3-441a-9fc3-949d5263ee7a";
      fsType = "btrfs";
      options = ["subvol=persist"];
    };

    "/var/log" = {
      device = "/dev/disk/by-uuid/5e652a20-9dc3-441a-9fc3-949d5263ee7a";
      fsType = "btrfs";
      options = ["subvol=log"];
    };

    "/boot" = {
      device = "/dev/disk/by-uuid/6ABE-DA15";
      fsType = "vfat";
    };
  };
}
</file>

<file path="hosts/icarus/modules/default.nix">
{
  imports = [
    ./device.nix
    ./system.nix
    ./usrEnv.nix
  ];
}
</file>

<file path="hosts/icarus/modules/device.nix">
{
  config.modules.device = {
    type = "hybrid";
    cpu.type = "intel";
    gpu.type = "intel";
    monitors = ["eDP-1"];
    hasBluetooth = false;
    hasSound = true;
    hasTPM = true;
  };
}
</file>

<file path="hosts/icarus/modules/system.nix">
{
  config.modules.system = {
    mainUser = "notashelf";
    fs.enabledFilesystems = ["btrfs" "ext4" "vfat"];
    autoLogin = true;

    boot = {
      secureBoot = false;
      loader = "systemd-boot";
      enableKernelTweaks = true;
      initrd.enableTweaks = true;
      loadRecommendedModules = true;
      tmpOnTmpfs = false;
    };

    video.enable = true;
    sound.enable = true;
    bluetooth.enable = false;
    printing.enable = false;
    emulation.enable = false;

    networking = {
      optimizeTcp = true;
      tailscale = {
        enable = true;
        isClient = true;
      };
    };

    security = {
      fixWebcam = false;
    };

    virtualization = {
      enable = false;
      docker.enable = false;
      qemu.enable = false;
      podman.enable = false;
    };

    programs = {
      cli.enable = true;
      gui.enable = true;

      git.signingKey = "0x148C61C40F80F8D6";

      gaming = {
        enable = false;
      };

      default = {
        terminal = "foot";
      };
    };
  };
}
</file>

<file path="hosts/icarus/modules/usrEnv.nix">
{
  config.modules.usrEnv = {
    isWayland = true;
    desktop = "Hyprland";
    useHomeManager = true;
  };
}
</file>

<file path="hosts/icarus/host.nix">
{
  imports = [
    ./fs
    ./modules
  ];

  config = {
    fileSystems = {
      "/".options = ["compress=zstd" "noatime"];
      "/home".options = ["compress=zstd"];
      "/persist".options = ["compress=zstd"];
      "/var/log".options = ["compress=zstd"];
      "/nix".options = ["compress=zstd" "noatime"];
    };

    hardware = {
      enableRedistributableFirmware = true;
      enableAllFirmware = true;
    };

    boot = {
      kernelModules = ["iwlwifi"];
      kernelParams = [
        "i915.enable_fbc=1"
        "i915.enable_psr=2"
        "nohibernate"
      ];
    };
  };
}
</file>

<file path="hosts/leto/fs/default.nix">
{
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/4e742f36-b005-4f3b-a25c-dd55ef1bda0a";
    fsType = "btrfs";
    options = ["compress=zstd" "noatime"];
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/8d35941a-dcf0-4659-83f8-458c18d0bb4f";}
  ];
}
</file>

<file path="hosts/leto/modules/default.nix">
{
  imports = [
    ./device.nix
    ./system.nix
    ./usrEnv.nix
  ];
}
</file>

<file path="hosts/leto/modules/device.nix">
{
  config.modules.device = {
    type = "server";
    cpu.type = "intel";
    gpu.type = null;
    hasBluetooth = false;
    hasSound = false;
    hasTPM = false;
  };
}
</file>

<file path="hosts/leto/modules/system.nix">
{
  config.modules.system = {
    mainUser = "notashelf";
    fs.enabledFilesystems = ["vfat" "exfat" "ext4"];
    video.enable = false;
    sound.enable = false;
    bluetooth.enable = false;
    printing.enable = false;

    boot = {
      secureBoot = false;
      loader = "grub";
      enableKernelTweaks = true;
      initrd.enableTweaks = true;
      loadRecommendedModules = true;
      tmpOnTmpfs = false;
    };

    virtualization = {
      enable = true;
      qemu.enable = true;
      docker.enable = true;
    };

    networking = {
      optimizeTcp = false;
      tailscale = {
        enable = false;
        isServer = true;
        isClient = false;
      };
    };
  };
}
</file>

<file path="hosts/leto/modules/usrEnv.nix">
{
  config.modules.usrEnv = {
    useHomeManager = true;
    isWayland = false;
  };
}
</file>

<file path="hosts/leto/host.nix">
{
  modulesPath,
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
in {
  imports = [
    (modulesPath + "/profiles/qemu-guest.nix")

    ./fs
    ./modules
  ];

  config = {
    services.smartd.enable = mkForce false;

    boot = {
      growPartition = !config.boot.initrd.systemd.enable;
      initrd = {
        availableKernelModules = ["ahci" "xhci_pci" "virtio_pci" "sr_mod" "virtio_blk"];
        kernelModules = [];
      };

      loader.grub = {
        enable = true;
        useOSProber = mkForce false;
        efiSupport = mkForce false;
        enableCryptodisk = false;
        theme = null;
        backgroundColor = null;
        splashImage = null;
        device = mkForce "/dev/vda";
      };
    };
  };
}
</file>

<file path="hosts/prometheus/fs/default.nix">
{
  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/b26ec8d8-8203-4252-8c32-0e0de3d90477";
      fsType = "btrfs";
      options = ["subvol=root" "compress=zstd"];
    };

    "/nix" = {
      device = "/dev/disk/by-uuid/b26ec8d8-8203-4252-8c32-0e0de3d90477";
      fsType = "btrfs";
      options = ["subvol=nix" "compress=zstd" "noatime"];
    };

    "/home" = {
      device = "/dev/disk/by-uuid/b26ec8d8-8203-4252-8c32-0e0de3d90477";
      fsType = "btrfs";
      options = ["subvol=home" "compress=zstd"];
    };

    "/boot" = {
      device = "/dev/disk/by-uuid/1EC3-9305";
      fsType = "vfat";
    };
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/2691cd3d-8c61-415f-9260-395050884f02";}
  ];
}
</file>

<file path="hosts/prometheus/modules/default.nix">
{
  imports = [
    ./device.nix
    ./system.nix
    ./usrEnv.nix
  ];
}
</file>

<file path="hosts/prometheus/modules/device.nix">
{
  config.modules.device = {
    type = "laptop";
    cpu.type = "intel";
    gpu.type = "intel"; # nvidia drivers :b:roke
    monitors = ["eDP-1" "HDMI-A-1"];
    hasBluetooth = true;
    hasSound = true;
    hasTPM = true;
  };
}
</file>

<file path="hosts/prometheus/modules/system.nix">
{
  config.modules.system = {
    mainUser = "notashelf";
    fs.enabledFilesystems = ["btrfs" "vfat" "ntfs"];
    autoLogin = true;

    boot = {
      loader = "systemd-boot";
      enableKernelTweaks = true;
      initrd.enableTweaks = true;
      loadRecommendedModules = true;
      tmpOnTmpfs = true;
    };

    video.enable = true;
    sound.enable = true;
    bluetooth.enable = false;
    printing.enable = false;

    networking = {
      optimizeTcp = true;
      tailscale = {
        enable = true;
        isClient = true;
      };
    };

    virtualization = {
      enable = false;
      docker.enable = false;
      qemu.enable = true;
      podman.enable = false;
    };

    programs = {
      cli.enable = true;
      gui.enable = true;

      git.signingKey = "419DBDD3228990BE";

      gaming = {
        enable = true;
      };

      default = {
        terminal = "foot";
      };
    };
  };
}
</file>

<file path="hosts/prometheus/modules/usrEnv.nix">
{
  config.modules.usrEnv = {
    isWayland = true;
    desktop = "Hyprland";
    useHomeManager = true;
  };
}
</file>

<file path="hosts/prometheus/host.nix">
{
  config,
  lib,
  ...
}: let
  inherit (builtins) elem;
  inherit (lib.modules) mkIf mkForce;
  inherit (lib.lists) optionals;

  dev = config.modules.device;
in {
  imports = [
    ./fs
    ./modules
  ];

  config = {
    hardware = {
      nvidia = mkIf (elem dev.gpu ["nvidia" "hybrid-nv"]) {
        open = mkForce false;

        prime = {
          offload.enable = true;
          intelBusId = "PCI:0:2:0";
          nvidiaBusId = "PCI:1:0:0";
        };
      };
    };

    boot = {
      kernelParams = optionals ((dev.cpu == "intel") && (dev.gpu != "hybrid-nv")) [
        "i915.enable_fbc=1"
        "i915.enable_psr=2"
      ];
    };
  };
}
</file>

<file path="hosts/selene/fs/default.nix">
{
  imports = [./external.nix];
  config = {
    fileSystems."/" = {
      device = "/dev/disk/by-uuid/783e926f-acd7-4684-a7b3-f5b1ecefa11b";
      fsType = "ext4";
    };

    swapDevices = [
      {device = "/dev/disk/by-uuid/d1d77f8e-7c77-40c9-a5e8-59d962f4d397";}
    ];
  };
}
</file>

<file path="hosts/selene/fs/external.nix">
{
  fileSystems."/srv/storage" = {
    device = "/dev/disk/by-uuid/19ea8fad-b930-4a48-99e1-04633b2142f8";
    fsType = "ext4";
  };
}
</file>

<file path="hosts/selene/modules/default.nix">
{
  imports = [
    ./device.nix
    ./system.nix
    ./usrEnv.nix
    ./services.nix
  ];
}
</file>

<file path="hosts/selene/modules/device.nix">
{
  config.modules.device = {
    type = "server";
    cpu.type = "amd";
    gpu.type = null;
    hasBluetooth = false;
    hasSound = false;
    hasTPM = false;
  };
}
</file>

<file path="hosts/selene/modules/services.nix">
{
  config.modules.system.services = {
    nextcloud.enable = true;
    mailserver.enable = true;
    vaultwarden.enable = true;
    forgejo.enable = true;
    searxng.enable = true;
    reposilite.enable = true;

    social = {
      mastodon.enable = true;
      matrix.enable = true;
    };

    bincache = {
      harmonia.enable = true;
    };

    networking = {
      headscale.enable = true;
      wireguard.enable = true;
    };

    monitoring = {
      grafana.enable = true;
      prometheus.enable = true;
      loki.enable = false;
      uptime-kuma.enable = true;
    };

    database = {
      mysql.enable = false;
      mongodb.enable = false;
      redis.enable = true;
      postgresql.enable = true;
      garage.enable = true;
    };
  };
}
</file>

<file path="hosts/selene/modules/system.nix">
{pkgs, ...}: {
  config.modules.system = {
    mainUser = "notashelf";
    fs.enabledFilesystems = ["vfat" "exfat" "ext4"];
    video.enable = false;
    sound.enable = false;
    bluetooth.enable = false;
    printing.enable = false;

    boot = {
      secureBoot = false;
      kernel = pkgs.linuxPackages_latest;
      loader = "grub";
      enableKernelTweaks = true;
      initrd.enableTweaks = true;
      loadRecommendedModules = true;
      tmpOnTmpfs = false;
    };

    virtualization = {
      enable = true;
      qemu.enable = true;
      docker.enable = true;
    };

    networking = {
      optimizeTcp = false;
      tarpit.enable = true;
      nftables.enable = true;
      tailscale = {
        enable = true;
        isServer = true;
        isClient = false;
      };
    };

    programs = {
      git.signingKey = "";

      cli.enable = true;
      gui.enable = false;
    };
  };
}
</file>

<file path="hosts/selene/modules/usrEnv.nix">
{
  config.modules.usrEnv = {
    useHomeManager = true;
  };
}
</file>

<file path="hosts/selene/host.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
in {
  imports = [
    ./fs
    ./modules

    ./nftables.nix
  ];

  config = {
    networking.domain = "notashelf.dev";
    services.smartd.enable = mkForce false;

    boot = {
      growPartition = !config.boot.initrd.systemd.enable;
      loader.grub = {
        enable = true;
        useOSProber = mkForce false;
        efiSupport = mkForce false;
        enableCryptodisk = false;
        theme = null;
        backgroundColor = null;
        splashImage = null;
        device = mkForce "/dev/disk/by-label/nixos";
        forceInstall = true;
      };
    };
  };
}
</file>

<file path="hosts/selene/nftables.nix">
{lib, ...}: let
  inherit (lib) entryBetween;
in {
  networking.nftables.rules = {
    inet.filter.input = {
      # endlessh
      endlessh = entryBetween ["basic-icmp6" "basic-icmp" "ping6" "ping"] ["default"] {
        protocol = "tcp";
        field = "dport";
        value = [22];
        policy = "accept";
      };

      # this allows nginx to respond to the domain challenges without passing each service through the firewall
      https = entryBetween ["basic-icmp6" "basic-icmp" "ping6" "ping"] ["default"] {
        protocol = "tcp";
        field = "dport";
        value = [443];
        policy = "accept";
      };

      headscale = entryBetween ["basic-icmp6" "basic-icmp" "ping6" "ping"] ["default"] {
        protocol = "udp";
        field = "dport";
        value = [3478];
        policy = "accept";
      };

      # NOTE: snm has an option to enable firewall ports by default, but my nftables abstractions
      # do not allow for us to use that option, so we'll just open the ports manually
      # I could probably add an entry that propagates the tcpPorts option to the firewall
      # but that doesn not seem like a very good option since we'll not be able to control policies
      simple-nixos-mailserver = entryBetween ["basic-icmp6" "basic-icmp" "ping6" "ping"] ["default"] {
        protocol = "tcp";
        field = "dport";
        value = [
          25 # smtp
          80 # used for acme-nginx domain challenges
          143 # imap
          993 # imapSsl
          465 # smtpSsl
        ];
        policy = "accept";
      };
    };
  };
}
</file>

<file path="hosts/default.nix">
{
  withSystem,
  inputs,
  ...
}: {
  flake.nixosConfigurations = let
    # self.lib is an extended version of nixpkgs.lib
    # mkNixosIso and mkNixosSystem are my own builders for assembling a nixos system
    # provided by my local extended library
    inherit (inputs.self) lib;
    inherit (lib) mkNixosIso mkNixosSystem mkModuleTree';
    inherit (lib.lists) concatLists flatten singleton;

    ## flake inputs ##
    hw = inputs.nixos-hardware.nixosModules; # hardware compat for pi4 and other quirky devices
    agenix = inputs.agenix.nixosModules.default; # secret encryption via age
    hm = inputs.home-manager.nixosModules.home-manager; # home-manager nixos module

    # Specify root path for the modules. The concept is similar to modulesPath
    # that is found in nixpkgs, and is defined in case the modulePath changes
    # depth (i.e modules becomes nixos/modules).
    modulePath = ../modules;

    coreModules = modulePath + /core; # the path where common modules reside
    extraModules = modulePath + /extra; # the path where extra modules reside
    options = modulePath + /options; # the module that provides the options for my system configuration

    ## common modules ##
    # The opinionated defaults for all systems, generally things I want on all hosts
    # regardless of their role in the general ecosystem. E.g. both servers and workstations
    # will share the defaults below.
    common = coreModules + /common; # the self-proclaimed sane defaults for all my systems
    profiles = coreModules + /profiles; # force defaults based on selected profile

    ## roles ##
    # Roles either provide an additional set of defaults on top of the core module
    # or override existing defaults for role-specific optimizations.
    iso = coreModules + /roles/iso; # for providing a uniform ISO configuration for live systems - only the build setup
    headless = coreModules + /roles/headless; # for devices that are of the headless type - provides no GUI
    graphical = coreModules + /roles/graphical; # for devices that are of the graphical type - provides a GUI
    workstation = coreModules + /roles/workstation; # for devices that are of workstation type - any device that is for daily use
    server = coreModules + /roles/server; # for devices that are of the server type - provides online services
    laptop = coreModules + /roles/laptop; # for devices that are of the laptop type - provides power optimizations

    # extra modules - optional but likely critical to a successful build
    sharedModules = extraModules + /shared; # the path where shared modules reside

    # home-manager #
    homesPath = ../homes; # home-manager configurations for hosts that need home-manager
    homes = [hm homesPath]; # combine hm flake input and the home module to be imported together

    # a list of shared modules that ALL systems need
    shared = [
      sharedModules # consume my flake's own nixosModules
      agenix # age encryption for secrets
    ];

    # mkModulesFor generates a list of modules to be imported by any host with
    # a given hostname. Do note that this needs to be called *in* the nixosSystem
    # set, since it generates a *module list*, which is also expected by system
    # builders.
    mkModulesFor = hostname: {
      moduleTrees ? [options common profiles],
      roles ? [],
      extraModules ? [],
    } @ args:
      flatten (
        concatLists [
          # Derive host specific module path from the first argument of the
          # function. Should be a string, obviously.
          (singleton ./${hostname}/host.nix)

          # Recursively import all module trees (i.e. directories with a `module.nix`)
          # for given moduleTree directories, and in addition, roles.
          (map (path: mkModuleTree' {inherit path;}) (concatLists [moduleTrees roles]))

          # And append any additional lists that don't don't conform to the moduleTree
          # API, but still need to be imported somewhat commonly.
          args.extraModules
        ]
      );
  in {
    # My main desktop boasting a RX 6700XT and a Ryzen 5 3600x
    # fully free from nvidia
    # fuck nvidia - Linus "the linux" Torvalds
    enyo = mkNixosSystem {
      inherit withSystem;
      hostname = "enyo";
      system = "x86_64-linux";
      modules = mkModulesFor "enyo" {
        roles = [graphical workstation];
        extraModules = [shared homes];
      };
    };

    # HP Pavilion from 2016
    # superseded by epimetheus
    prometheus = mkNixosSystem {
      inherit withSystem;
      hostname = "prometheus";
      system = "x86_64-linux";
      modules = mkModulesFor "prometheus" {
        roles = [graphical workstation laptop];
        extraModules = [shared homes];
      };
    };

    # Identical twin host for Prometheus
    # provides full disk encryption
    # with passkey/USB authentication
    epimetheus = mkNixosSystem {
      inherit withSystem;
      hostname = "epimetheus";
      system = "x86_64-linux";
      modules = mkModulesFor "epimetheus" {
        roles = [graphical workstation laptop];
        extraModules = [shared homes];
      };
    };

    # HP Pavilion laptop from 2023
    # equipped a Ryzen 7 7730U
    # usually acts as my portable workstation
    # similar to epimetheus, has full disk
    # encryption with ephemeral root using impermanence
    hermes = mkNixosSystem {
      inherit withSystem;
      hostname = "hermes";
      system = "x86_64-linux";
      modules = mkModulesFor "hermes" {
        roles = [graphical workstation laptop];
        extraModules = [shared homes];
      };
    };

    # Hetzner VPS to replace my previous server machines
    # hosts some of my infrastructure
    helios = mkNixosSystem {
      inherit withSystem;
      hostname = "helios";
      system = "x86_64-linux";
      modules = mkModulesFor "helios" {
        roles = [server headless];
        extraModules = [shared homes];
      };
    };

    # Hetzner VPS to replace my previous server machines
    # hosts some of my infrastructure
    selene = mkNixosSystem {
      inherit withSystem;
      hostname = "helios";
      system = "aarch64-linux";
      modules = mkModulesFor "selene" {
        roles = [server headless];
        extraModules = [shared homes];
      };
    };

    # Lenovo Ideapad from 2014
    # Hybrid device
    # acts as a portable server and a "workstation"
    icarus = mkNixosSystem {
      inherit withSystem;
      hostname = "icarus";
      system = "x86_64-linux";
      modules = mkModulesFor "icarus" {
        roles = [graphical workstation laptop server];
        extraModules = [shared homes];
      };
    };

    # Raspberry Pi 400
    # My Pi400 homelab
    # used mostly for testing networking/cloud services
    atlas = mkNixosSystem {
      inherit withSystem;
      hostname = "atlas";
      system = "aarch64-linux";
      modules = mkModulesFor "atlas" {
        roles = [server headless];
        extraModules = [shared hw.raspberry-pi-4];
      };
    };

    # Self-made live recovery environment that overrides or/and configures certain default programs
    # provides tools and fixes the keymaps for my keyboard
    gaea = mkNixosIso {
      hostname = "gaea";
      system = "x86_64-linux";
      specialArgs = {inherit lib;};
      modules = mkModulesFor "gaea" {
        moduleTrees = [];
        roles = [iso headless];
        extraModules = [shared];
      };
    };

    # An air-gapped NixOS live media to deal with
    # sensitive tooling (e.g. Yubikey, GPG, etc.)
    # isolated from all networking
    erebus = mkNixosIso {
      inherit withSystem;
      hostname = "erebus";
      system = "x86_64-linux";
      modules = mkModulesFor "erebus" {
        moduleTrees = [];
        roles = [iso];
        extraModules = [shared];
      };
    };

    # Pretty beefy VM running on my dedicated server
    # is mostly for testing, but can run services at will
    leto = mkNixosSystem {
      inherit withSystem;
      hostname = "leto";
      system = "x86_64-linux";
      modules = mkModulesFor "leto" {
        roles = [server headless];
        extraModules = [shared homes];
      };
    };

    # Twin virtual machine hosts
    # Artemis is x86_64-linux
    artemis = mkNixosSystem {
      inherit withSystem;
      hostname = "artemis";
      system = "x86_64-linux";
      modules = mkModulesFor "artemis" {
        roles = [server headless];
        extraModules = [shared];
      };
    };

    # Apollon is also x86_64-linux
    # but is for testing server-specific services
    apollon = mkNixosSystem {
      inherit withSystem;
      hostname = "apollon";
      system = "aarch64-linux";
      modules = mkModulesFor "apollon" {
        roles = [server headless];
        extraModules = [shared];
      };
    };
  };
}
</file>

<file path="hosts/README.md">
# Design Considerations

## Imports

Guidelines for importing files within the `hosts` directory

- Only importing downwards. This means **no**
  `imports = [ ../../foo/bar/some-module.nix ];` - this is a classic pattern in
  NixOS configurations, but only gets more out of hand in time.
- Only one level of imports. Which means `imports = [./foo.nix]` is fine, but
  `imports = [ ./foo/bar/baz.nix ]` **is not**.
- Do not import defined modules outside `hosts/default.nix`. Meaning
  `hosts/enyo/default.nix` **cannot** have `../../../modules/..` in its
  configurations.

## Module System

Guidelines for using the local module system for enabling or disabling services
and programs

- Hosts should properly define their type and equipment. This means adequately
  defined `device.type`, `device.cpu` and `device.gpu` at the very least
- A host should contain at least **2** files/directories: `modules/` and
  `default.nix` importing the rest of the files
  - `modules/` should follow my local module system:
    `config.modules.{device,system,usrEnv,theme}` where applicable
  - `default.nix` may not contain anything other than an `imports = [ ... ]`
    importing rest of the files
- Additional host-specific configurations may either go into `hosts.nix` (e.g.
  kernel configuration) or have their own file (i.e Wireguard or hardware mount
  configurations) with their own file (i.e `mounts.nix`)
  - Names of per-host files are arbitrary, but they should remain consistent.
    For example, two hosts may not have two identical files with different
    names. (E.g `fs.nix` & `filesystem.nix`)

## Per-host hardware

Guidelines for using `hardware-configuration.nix`

Previously I have required `hardware-configuration.nix` to be available (under
the name `hardware.nix`) for each host. This is no longer a requirement as
almost all host-specific hardware configuration have been moved to hardware
mixins located in `modules/`.

This further reinforces the requirement for the local module system, meaning
hosts **must** specify things like CPU vendors or hardware specific kernel
modules under `modules.device` or `modules.system`.
</file>

<file path="modules/core/common/docs/module.nix">
{
  inputs',
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  ndg-pkgs = inputs'.ndg.packages;
  docs-html = ndg-pkgs.ndg-builder.override {
    rawModules = [config.modules];
  };

  cfg = config.modules.documentation;
in {
  config = mkIf cfg.enable {
    environment.etc = {
      "nyxos/options.html".source = docs-html.outPath;
    };
  };
}
</file>

<file path="modules/core/common/secrets/module.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkAgenixSecret;
  inherit (lib.strings) optionalString;

  sys = config.modules.system;
  cfg = sys.services;
in {
  age.identityPaths = [
    "${optionalString sys.impermanence.root.enable "/persist"}/etc/ssh/ssh_host_ed25519_key"
    "${optionalString sys.impermanence.home.enable "/persist"}/home/notashelf/.ssh/id_ed25519"
  ];

  age.secrets = {
    # TODO: system option for declaring host as a potential builder
    nix-builderKey = mkAgenixSecret true {
      file = "common/nix-builder.age";
    };

    tailscale-client = mkAgenixSecret true {
      file = "client/tailscale.age";
      owner = "notashelf";
      group = "users";
      mode = "400";
    };

    # secrets needed for peers
    spotify-secret = mkAgenixSecret sys.programs.spotify.enable {
      file = "client/spotify.age";
      owner = "notashelf";
      group = "users";
      mode = "400";
    };

    wg-client = mkAgenixSecret true {
      file = "client/wg.age";
      owner = "notashelf";
      group = "users";
      mode = "700";
    };

    client-email = mkAgenixSecret true {
      file = "client/email.age";
      owner = "notashelf";
      group = "users";
      mode = "400";
    };

    # database secrets
    mongodb-secret = mkAgenixSecret cfg.database.mongodb.enable {
      file = "db/mongodb.age";
    };

    garage-env = mkAgenixSecret cfg.database.garage.enable {
      file = "db/garage.age";
      mode = "400";
      owner = "garage";
      group = "garage";
    };

    # service secrets
    wg-server = mkAgenixSecret cfg.networking.wireguard.enable {
      file = "service/wg.age";
    };

    mkm-web = mkAgenixSecret cfg.mkm.enable {
      file = "service/mkm-web.age";
      mode = "400";
    };

    matrix-secret = mkAgenixSecret cfg.social.matrix.enable {
      file = "service/matrix.age";
      owner = "matrix-synapse";
      mode = "400";
    };

    vaultwarden-env = mkAgenixSecret cfg.vaultwarden.enable {
      file = "service/vaultwarden.age";
      owner = "vaultwarden";
      mode = "400";
    };

    searx-secretkey = mkAgenixSecret cfg.searxng.enable {
      file = "service/searx.age";
      mode = "400";
      owner = "searx";
      group = "searx";
    };

    nextcloud-secret = mkAgenixSecret cfg.nextcloud.enable {
      file = "service/nextcloud.age";
      mode = "400";
      owner = "nextcloud";
      group = "nextcloud";
    };

    attic-env = mkAgenixSecret cfg.bincache.atticd.enable {
      file = "service/attic.age";
      mode = "400";
      owner = "atticd";
      group = "atticd";
    };

    harmonia-privateKey = mkAgenixSecret cfg.bincache.harmonia.enable {
      file = "service/harmonia.age";
      mode = "770";
      owner = "harmonia";
      group = "harmonia";
    };

    forgejo-mailer-password = mkAgenixSecret cfg.forgejo.enable {
      file = "service/forgejo-mailer-password.age";
      mode = "400";
      owner = "gitea-runner";
      group = "gitea-runner";
    };

    forgejo-runner-token = mkAgenixSecret cfg.forgejo.enable {
      file = "service/forgejo-runner-token.age";
      mode = "400";
      owner = "gitea-runner";
      group = "gitea-runner";
    };

    forgejo-runner-config = mkAgenixSecret cfg.forgejo.enable {
      file = "service/forgejo-runner-config.age";
      mode = "400";
      owner = "gitea-runner";
      group = "gitea-runner";
    };

    headscale-derp = mkAgenixSecret cfg.networking.headscale.enable {
      file = "service/headscale-derp.age";
      mode = "400";
      owner = "headscale";
      group = "headscale";
    };

    headscale-noise = mkAgenixSecret cfg.networking.headscale.enable {
      file = "service/headscale-noise.age";
      mode = "400";
      owner = "headscale";
      group = "headscale";
    };

    # mailserver secrets
    mailserver-secret = mkAgenixSecret cfg.mailserver.enable {
      file = "mailserver/postmaster.age";
      mode = "400";
    };

    mailserver-forgejo-secret = mkAgenixSecret cfg.forgejo.enable {
      file = "mailserver/forgejo.age";
      owner = "forgejo";
      group = "forgejo";
      mode = "400";
    };

    mailserver-vaultwarden-secret = mkAgenixSecret cfg.vaultwarden.enable {
      file = "mailserver/vaultwarden.age";
      owner = "vaultwarden";
      mode = "400";
    };

    mailserver-cloud-secret = mkAgenixSecret cfg.nextcloud.enable {
      file = "mailserver/cloud.age";
      owner = "nextcloud";
      mode = "400";
    };

    mailserver-matrix-secret = mkAgenixSecret cfg.social.matrix.enable {
      file = "mailserver/matrix.age";
      owner = "matrix-synapse";
      mode = "400";
    };

    mailserver-noreply-secret = mkAgenixSecret cfg.social.mastodon.enable {
      file = "mailserver/noreply.age";
      owner = "mastodon";
      mode = "400";
    };
  };
}
</file>

<file path="modules/core/common/system/activation/module.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
in {
  system.activationScripts = {
    # if system declares that it wants closure diffs, then run the diff script on activation
    # this is useless if you are using nh, which does this for you in a different way
    diff = mkIf config.modules.system.activation.diffGenerations {
      supportsDryActivation = true;
      text = ''
        if [[ -e /run/current-system ]]; then
          echo "=== diff to current-system ==="
          ${pkgs.nvd}/bin/nvd --nix-bin-dir='${config.nix.package}/bin' diff /run/current-system "$systemConfig"
          echo "=== end of the system diff ==="
        fi
      '';
    };

    # <https://github.com/colemickens/nixcfg/blob/main/mixins/ssh.nix>
    # symlink root's ssh config to ours
    # to fix nix-daemon's ability to remote build since it sshs from the root account
    root_ssh_config = let
      sshDir = "/home/notashelf/.ssh";
    in {
      supportsDryActivation = true;
      text = ''
        # Symlink root ssh config to ours so daemon can use our agent/keys/etc...
        mkdir -p /root/.ssh

        ln -sf ${sshDir}/config /root/.ssh/config
        ln -sf ${sshDir}/known_hosts /root/.ssh/known_hosts
        ln -sf ${sshDir}/known_hosts /root/.ssh/known_hosts
      '';
    };
  };
}
</file>

<file path="modules/core/common/system/containers/alpha/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) elem;
  inherit (lib.modules) mkIf;
in {
  config = mkIf (elem "alpha" config.modules.system.containers.enabledContainers) {
    systemd = {
      services."container@alpha".after = ["container@firewall.service"];
      tmpfiles.rules = [
        "D /srv/containers/home 755 root root"
      ];
    };

    containers."alpha" = {
      autoStart = false;
      enableTun = true;
      ephemeral = true;
      privateNetwork = true;
      localAddress = "10.1.0.1";
      hostAddress = "10.1.0.2";
      config = _: {
        _module.args = {inherit lib;};
        nixpkgs.pkgs = pkgs;

        system.stateVersion = "23.05";

        users = {
          groups.alpha = {};
          users.alpha = {
            isNormalUser = true;
            extraGroups = ["alpha"];
            home = "/home/alpha";
            createHome = true;
            initialPassword = "alpha";
          };
        };

        environment.systemPackages = with pkgs; [
          gcc
          openjdk17_headless
          gitMinimal
        ];

        networking.interfaces.ve-alpha = {
          useDHCP = true;
          ipv4 = {
            addresses = [
              {
                address = "10.1.0.1";
                prefixLength = 32;
              }
            ];
            routes = [
              {
                address = "10.1.0.2";
                prefixLength = 32;
                options = {src = "10.1.0.1";};
              }
            ];
          };
        };
      };

      bindMounts = {
        "/home" = {
          hostPath = "/srv/containers/home";
          isReadOnly = false;
        };

        "/run/systemd/ask-password" = {
          hostPath = "/run/systemd/ask-password";
          isReadOnly = false;
        };
        "/run/systemd/ask-password-block" = {
          hostPath = "/run/systemd/ask-password-block";
          isReadOnly = false;
        };
      };
    };
  };
}
</file>

<file path="modules/core/common/system/containers/beta/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) elem;
  inherit (lib.modules) mkIf;
in {
  config = mkIf (elem "beta" config.modules.system.containers.enabledContainers) {
    containers."beta" = {
      autoStart = false;
      enableTun = true;
      ephemeral = true;
      privateNetwork = true;
      localAddress = "10.2.0.1";
      hostAddress = "10.2.0.2";
      config = _: let
        backup_path = "/var/backup/postgresql";
      in {
        system.stateVersion = "23.05";

        services.openssh.enable = true;

        users = {
          groups.beta = {};
          users = {
            root.hashedPassword = "!"; # disable root login
            beta = {
              isNormalUser = true;
              createHome = true;
              group = "beta";
            };
          };
        };

        time.timeZone = "Europe/Berlin";

        networking.interfaces = {
          eth0 = {
            useDHCP = false;
            ipv4.addresses = [
              {
                address = "192.168.6.1";
                prefixLength = 23;
              }
            ];
            ipv6.addresses = [];
          };
        };

        networking.firewall = {
          enable = true;
          allowPing = true;
          allowedTCPPorts = [5432];
        };

        services.postgresql = {
          enable = true;
          enableTCPIP = true;
          package = pkgs.postgresql;
          dataDir = "/var/db/postgresql";
          authentication = ''
            host selfoss selfoss 192.168.6.2/32 trust
          '';
          initialScript = builtins.toFile "pg_initial_script" ''
            CREATE ROLE selfoss LOGIN CREATEDB;
            CREATE DATABASE selfoss OWNER selfoss;
          '';
        };

        systemd.services.postgresql.preStart = ''
          if [ ! -d ${backup_path} ]; then
            mkdir -p ${backup_path}
            chown postgres ${backup_path}
          fi
        '';

        systemd.services.postgresql-dump = {
          path = with pkgs; [postgresql gzip];
          serviceConfig = {
            User = "root";
          };
          script = let
            db_list_command = "psql -l -t -A |cut -d'|' -f 1 |grep -v -e template0 -e template1 -e 'root=CT'";
          in ''
            ${db_list_command}
            for db in `${db_list_command}`; do
              echo "Dumping $db"
              pg_dump --format directory --file ${backup_path}/$db $db
            done
            echo "Dumping all in one gzip"
            pg_dumpall |gzip > ${backup_path}/complete_dump.sql.gz
          '';
          startAt = "daily";
        };
      };
    };
  };
}
</file>

<file path="modules/core/common/system/containers/module.nix">
{
  # this imports all container directories unconditionally, regardless of whether or not
  # they are included in containers.enabledContainers option definition
  # however, as a safeguard, we are required to check if a container is actually meant to be enabled
  # so each container does it's own "builtins.elem ..." bullshit before evaluating the container
  # configuration - hacky? yes. working? also yes.
  imports = [
    ./alpha # sandbox
    ./beta # postgresql
  ];
}
</file>

<file path="modules/core/common/system/emulation/module.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  sys = config.modules.system;
in {
  config = mkIf sys.emulation.enable {
    nix.settings.extra-sandbox-paths = ["/run/binfmt" "${pkgs.qemu}"];

    boot.binfmt = {
      emulatedSystems = sys.emulation.systems;
      registrations = {
        # aarch64 interpreter
        aarch64-linux.interpreter = "${pkgs.qemu}/bin/qemu-aarch64";

        # i686 interpreter
        i686-linux.interpreter = "${pkgs.qemu}/bin/qemu-i686";
      };
    };
  };
}
</file>

<file path="modules/core/common/system/encryption/module.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  cfg = config.modules.system.encryption;
in {
  config = mkIf cfg.enable {
    boot = {
      # Mildly improves performance for the disk encryption
      initrd.availableKernelModules = [
        "aesni_intel"
        "cryptd"
        "usb_storage"
      ];

      # <https://wiki.archlinux.org/title/Dm-crypt/System_configuration#Timeout>
      kernelParams = [
        # Disable password timeout
        "luks.options=timeout=0"
        "rd.luks.options=timeout=0"

        # Assume root device is already there, do not wait
        # for it to appear.
        "rootflags=x-systemd.device-timeout=0"
      ];
    };

    services.lvm.enable = true;

    # TODO: account for multiple encrypted devices
    boot.initrd.luks.devices."${cfg.device}" = {
      # improve performance on ssds
      bypassWorkqueues = true;

      # handle LUKS decryption before LVM
      preLVM = true;

      # the device with the matching id will be searched for the key file
      keyFile = mkIf (cfg.keyFile != null) "${cfg.keyFile}";

      # the size of the key file in bytes
      keyFileSize = cfg.keySize;

      # if keyfile is not there, fall back to cryptsetup password
      fallbackToPassword = cfg.fallbackToPassword; # IMPLIED BY config.boot.initrd.systemd.enable
    };
  };
}
</file>

<file path="modules/core/common/system/gaming/gamemode.nix">
{
  inputs,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf makeBinPath optionalString;
  inherit (config) modules;

  env = modules.usrEnv;
  sys = modules.system;
  prg = sys.programs;

  programs = makeBinPath (with pkgs; [
    inputs.hyprland.packages.${stdenv.system}.default
    coreutils
    power-profiles-daemon
    systemd
    libnotify
  ]);

  startscript = pkgs.writeShellScript "gamemode-start" ''
    ${optionalString (env.desktop == "Hyprland") ''
      export PATH=$PATH:${programs}
      export HYPRLAND_INSTANCE_SIGNATURE=$(ls -w1 /tmp/hypr | tail -1)
      hyprctl --batch 'keyword decoration:blur 0 ; keyword animations:enabled 0 ; keyword misc:vfr 0'
    ''}

    powerprofilesctl set performance
    notify-send -a 'Gamemode' 'Optimizations activated' -u 'low'
  '';

  endscript = pkgs.writeShellScript "gamemode-end" ''
    ${optionalString (env.desktop == "Hyprland") ''
      export PATH=$PATH:${programs}
      export HYPRLAND_INSTANCE_SIGNATURE=$(ls -w1 /tmp/hypr | tail -1)
      hyprctl --batch 'keyword decoration:blur 1 ; keyword animations:enabled 1 ; keyword misc:vfr 1'
    ''}

    powerprofilesctl set balanced
    notify-send -a 'Gamemode' 'Optimizations deactivated' -u 'low'
  '';
in {
  config = mkIf prg.gaming.gamemode.enable {
    programs.gamemode = {
      enable = true;
      enableRenice = true;
      settings = {
        general = {
          softrealtime = "auto";
          renice = 15;
        };

        custom = {
          start = startscript.outPath;
          end = endscript.outPath;
        };
      };
    };

    security.wrappers.gamemode = {
      owner = "root";
      group = "root";
      source = "${pkgs.gamemode}/bin/gamemoderun";
      capabilities = "cap_sys_ptrace,cap_sys_nice+pie";
    };

    # <https://www.phoronix.com/news/Fedora-39-VM-Max-Map-Count>
    # <https://github.com/pop-os/default-settings/blob/master_jammy/etc/sysctl.d/10-pop-default-settings.conf>
    boot.kernel.sysctl = {
      # default on some gaming (SteamOS) and desktop (Fedora) distributions
      # might help with gaming performance
      "vm.max_map_count" = 2147483642;
    };
  };
}
</file>

<file path="modules/core/common/system/gaming/gamescope.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (config) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  config = mkIf prg.gaming.gamescope.enable {
    programs.gamescope = {
      enable = true;
      package = pkgs.gamescope; # the default, here in case I want to override it
    };

    # workaround attempt for letting gamescope bypass YAMA LSM
    # doesn't work, but doesn't hurt to keep this here
    security.wrappers.gamescope = {
      owner = "root";
      group = "root";
      source = "${config.programs.gamescope.package}/bin/gamescope";
      capabilities = "cap_sys_ptrace,cap_sys_nice+pie";
    };
  };
}
</file>

<file path="modules/core/common/system/gaming/module.nix">
{
  imports = [
    ./gamescope.nix
    ./gamemode.nix
    ./steam.nix
  ];
}
</file>

<file path="modules/core/common/system/gaming/steam.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  prg = config.modules.system.programs;
in {
  config = mkIf prg.gaming.steam.enable {
    programs.steam = {
      # Enable steam
      enable = true;

      # An attempt to reduce the closure size of Steam (which by default is *massive* - around 15 gigs)
      # This removes game-specific libraries crammed into the Steam runtime
      # by upstream (nixpkgs) packaging to mitigate errors due to missing libraries.
      # As we strip those libraries, we gain space and lose compatibility - which
      # unfortunately means that it is up to *us* to identify necessary libraries
      # and stick them here.
      package = pkgs.steam-small.override {
        extraEnv = {
          MANGOHUD = true;
          SDL_VIDEODRIVER = "x11";
        };

        extraLibraries = ps:
          with ps; [
            atk
            # for Titanfall 2 Northstar launcher
            libunwind
          ];
      };

      # Whether to open ports in the firewall for Steam Remote Play
      remotePlay.openFirewall = false;

      # Whether to open ports in the firewall for Source Dedicated Server
      dedicatedServer.openFirewall = false;

      # Compatibility tools to install
      # For the accepted format (and the reason behind)
      # the "compattool" attribute, see:
      # <https://github.com/NixOS/nixpkgs/pull/296009>
      extraCompatPackages = [
        pkgs.proton-ge-bin.steamcompattool
      ];
    };

    # udev rules for various controller compatibility.
    services.udev.extraRules = ''
      # This rule is needed for basic functionality of the controller in
      # Steam and keyboard/mouse emulation
      SUBSYSTEM=="usb", ATTRS{idVendor}=="28de", MODE="0666"
      # Valve HID devices over USB hidraw
      KERNEL=="hidraw*", ATTRS{idVendor}=="28de", MODE="0666"
      # Valve HID devices over bluetooth hidraw
      KERNEL=="hidraw*", KERNELS=="*28DE:*", MODE="0666"
      # DualShock 4 over USB hidraw
      KERNEL=="hidraw*", ATTRS{idVendor}=="054c", ATTRS{idProduct}=="05c4", MODE="0666"
      # Dualsense over USB hidraw
      KERNEL=="hidraw*", ATTRS{idVendor}=="054c", ATTRS{idProduct}=="0ce6", MODE="0666"
      # DualShock 4 wireless adapter over USB hidraw
      KERNEL=="hidraw*", ATTRS{idVendor}=="054c", ATTRS{idProduct}=="0ba0", MODE="0666"
      # DualShock 4 Slim over USB hidraw
      KERNEL=="hidraw*", ATTRS{idVendor}=="054c", ATTRS{idProduct}=="09cc", MODE="0666"
      # DualShock 4 over bluetooth hidraw
      KERNEL=="hidraw*", KERNELS=="*054C:05C4*", MODE="0666"
      # DualShock 4 Slim over bluetooth hidraw
      KERNEL=="hidraw*", KERNELS=="*054C:09CC*", MODE="0666"
    '';
  };
}
</file>

<file path="modules/core/common/system/hardware/cpu/amd/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) isx86Linux;
  inherit (lib.modules) mkIf mkMerge;
  inherit (lib.strings) versionOlder versionAtLeast;
  dev = config.modules.device;

  kver = config.boot.kernelPackages.kernel.version;
  inherit (dev.cpu.amd) pstate zenpower;
in {
  config = mkIf (builtins.elem dev.cpu.type ["amd" "vm-amd"]) {
    environment.systemPackages = [pkgs.amdctl];

    hardware.cpu.amd.updateMicrocode = true;
    boot = mkMerge [
      {
        # Always load the kvm-amd module for Virtualization
        # bellow modules allow for Virtualization on AMD cpus
        # `"iommu=pt"` kernel parameter can be passed to remove
        # IOMMU overhead
        kernelModules = ["kvm-amd"];
        kernelParams = ["amd_iommu=on"];
      }

      (mkIf (isx86Linux pkgs) {
        kernelModules = [
          "amd-pstate" # load pstate module in case the device has a newer gpu
          "zenpower" # zenpower is for reading cpu info, i.e voltage
          "msr" # x86 CPU MSR access device
        ];

        extraModulePackages = [config.boot.kernelPackages.zenpower];
      })

      (mkIf (pstate.enable && (versionAtLeast kver "5.17") && (versionOlder kver "6.1")) {
        kernelParams = ["initcall_blacklist=acpi_cpufreq_init"];
        kernelModules = ["amd-pstate"];
      })

      (mkIf (pstate.enable && (versionAtLeast kver "6.1") && (versionOlder kver "6.3")) {
        kernelParams = ["amd_pstate=passive"];
      })

      # For older kernels.
      # See:
      #  <https://github.com/NixOS/nixos-hardware/blob/c256df331235ce369fdd49c00989fdaa95942934/common/cpu/amd/pstate.nix>
      (mkIf (pstate.enable && (versionAtLeast kver "6.3")) {
        kernelParams = ["amd_pstate=active"];
      })
    ];

    # Ryzen cpu control
    systemd.services.zenstates = mkIf zenpower.enable {
      enable = true;
      description = "Undervolt via Zenstates";
      after = ["syslog.target" "systemd-modules-load.service"];

      unitConfig = {ConditionPathExists = "${pkgs.zenstates}/bin/zenstates";};

      serviceConfig = {
        User = "root";
        ExecStart = "${pkgs.zenstates}/bin/zenstates ${zenpower.args}";
      };

      wantedBy = ["multi-user.target"];
    };
  };
}
</file>

<file path="modules/core/common/system/hardware/cpu/intel/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) elem;
  inherit (lib.modules) mkIf;

  dev = config.modules.device;
in {
  config = mkIf (elem dev.cpu.type ["intel" "vm-intel"]) {
    hardware.cpu.intel.updateMicrocode = true;
    boot = {
      kernelModules = ["kvm-intel"];
      kernelParams = ["i915.fastboot=1" "enable_gvt=1"];
    };

    environment.systemPackages = [pkgs.intel-gpu-tools];
  };
}
</file>

<file path="modules/core/common/system/hardware/cpu/default.nix">
_: {
  imports = [
    ./amd
    ./intel
  ];
}
</file>

<file path="modules/core/common/system/hardware/gpu/amd/default.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;

  dev = config.modules.device;
in {
  config = mkIf (builtins.elem dev.gpu.type ["amd" "hybrid-amd"]) {
    # enable amdgpu xorg drivers in case Hyprland breaks again
    services.xserver.videoDrivers = lib.mkDefault ["modesetting" "amdgpu"];

    # enable amdgpu kernel module
    boot = {
      initrd.kernelModules = ["amdgpu"]; # load amdgpu kernel module as early as initrd
      kernelModules = ["amdgpu"]; # if loading somehow fails during initrd but the boot continues, try again later
    };

    environment.systemPackages = [pkgs.nvtopPackages.amd];

    # enables AMDVLK & OpenCL support
    hardware.graphics = {
      extraPackages = with pkgs;
        [
          amdvlk

          # mesa
          mesa

          # vulkan
          vulkan-tools
          vulkan-loader
          vulkan-validation-layers
          vulkan-extension-layer
        ]
        ++ (
          # this is a backwards-compatible way of loading appropriate opencl packages
          # in case the host runs an older revision of nixpkgs
          if pkgs ? rocmPackages.clr
          then with pkgs.rocmPackages; [clr clr.icd]
          else with pkgs; [rocm-opencl-icd rocm-opencl-runtime]
        );

      extraPackages32 = [pkgs.driversi686Linux.amdvlk];
    };
  };
}
</file>

<file path="modules/core/common/system/hardware/gpu/intel/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) elem;
  inherit (lib.modules) mkIf;

  dev = config.modules.device;

  # let me play youtube videos without h.264, please and thank you
  vaapiIntel = pkgs.intel-vaapi-driver.override {enableHybridCodec = true;};
in {
  config = mkIf (elem dev.gpu.type ["intel" "hybrid-intel"]) {
    # Enable the i915 kernel module
    boot.initrd.kernelModules = ["i915"];

    # Provides better performance than the actual Intel driver
    services.xserver.videoDrivers = ["modesetting"];

    # OpenCL support and VAAPI
    hardware.graphics = {
      extraPackages = with pkgs; [
        vaapiIntel
        vaapiVdpau
        intel-compute-runtime
        intel-media-driver
        libvdpau-va-gl
      ];

      extraPackages32 = with pkgs.pkgsi686Linux; [
        vaapiIntel
        vaapiVdpau
        intel-media-driver
        libvdpau-va-gl
        # intel-compute-runtime # FIXME does not build due to unsupported system
      ];
    };

    environment.variables = mkIf (config.hardware.graphics.enable && dev.gpu != "hybrid-nv") {
      VDPAU_DRIVER = "va_gl";
    };
  };
}
</file>

<file path="modules/core/common/system/hardware/gpu/nvidia/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf mkDefault mkMerge versionOlder;

  # use the latest possible nvidia package
  nvStable = config.boot.kernelPackages.nvidiaPackages.stable.version;
  nvBeta = config.boot.kernelPackages.nvidiaPackages.beta.version;

  nvidiaPackage =
    if (versionOlder nvBeta nvStable)
    then config.boot.kernelPackages.nvidiaPackages.stable
    else config.boot.kernelPackages.nvidiaPackages.beta;

  dev = config.modules.device;
  env = config.modules.usrEnv;
in {
  config = mkIf (builtins.elem dev.gpu.type ["nvidia" "hybrid-nv"]) {
    # nvidia drivers are unfree software
    nixpkgs.config.allowUnfree = true;

    services.xserver = mkMerge [
      {
        videoDrivers = ["nvidia"];
      }

      # xorg settings
      (mkIf (!env.isWayland) {
        # disable DPMS
        monitorSection = ''
          Option "DPMS" "false"
        '';

        # disable screen blanking in general
        serverFlagsSection = ''
          Option "StandbyTime" "0"
          Option "SuspendTime" "0"
          Option "OffTime" "0"
          Option "BlankTime" "0"
        '';
      })
    ];

    # blacklist nouveau module so that it does not conflict with nvidia drm stuff
    # also the nouveau performance is godawful, I'd rather run linux on a piece of paper than use nouveau
    # no offense to nouveau devs, I'm sure they're doing their best and they have my respect for that
    # but their best does not constitute a usable driver for me
    boot.blacklistedKernelModules = ["nouveau"];

    environment = {
      sessionVariables = mkMerge [
        {LIBVA_DRIVER_NAME = "nvidia";}

        (mkIf env.isWayland {
          WLR_NO_HARDWARE_CURSORS = "1";
          #__GLX_VENDOR_LIBRARY_NAME = "nvidia";
          #GBM_BACKEND = "nvidia-drm"; # breaks firefox apparently
        })

        (mkIf (env.isWayland && (dev.gpu == "hybrid-nv")) {
          #__NV_PRIME_RENDER_OFFLOAD = "1";
          #WLR_DRM_DEVICES = mkDefault "/dev/dri/card1:/dev/dri/card0";
        })
      ];
      systemPackages = with pkgs; [
        nvtopPackages.nvidia

        # mesa
        mesa

        # vulkan
        vulkan-tools
        vulkan-loader
        vulkan-validation-layers
        vulkan-extension-layer

        # libva
        libva
        libva-utils
      ];
    };

    hardware = {
      nvidia = {
        package = mkDefault nvidiaPackage;
        modesetting.enable = mkDefault true;

        prime.offload = let
          isHybrid = dev.gpu == "hybrid-nv";
        in {
          enable = isHybrid;
          enableOffloadCmd = isHybrid;
        };

        powerManagement = {
          enable = mkDefault true;
          finegrained = mkDefault false;
        };

        # use open source drivers by default, hosts may override this option if their gpu is
        # not supported by the open source drivers
        open = mkDefault true;
        nvidiaSettings = false; # add nvidia-settings to pkgs, useless on nixos
        nvidiaPersistenced = true;
        forceFullCompositionPipeline = true;
      };

      graphics = {
        extraPackages = with pkgs; [nvidia-vaapi-driver];
        extraPackages32 = with pkgs.pkgsi686Linux; [nvidia-vaapi-driver];
      };
    };
  };
}
</file>

<file path="modules/core/common/system/hardware/gpu/default.nix">
_: {
  imports = [
    ./intel
    ./nvidia
    ./amd
  ];
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/servers/pipewire/wireplumber/default.nix">
{config, ...}: {
  # WirePlumber is a modular session / policy manager for PipeWire
  imports = [
    ./devices.nix
    ./settings.nix
  ];

  config = {
    services.pipewire.wireplumber.enable = config.services.pipewire.enable;
  };
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/servers/pipewire/wireplumber/devices.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf mkMerge;
  inherit (lib.lists) singleton;

  dev = config.modules.device;
in {
  # WirePlumber is a modular session / policy manager for PipeWire
  services.pipewire.wireplumber = {
    extraConfig = mkMerge [
      {
        "11-rename-freewheel" = {
          "monitor.alsa.rules" = singleton {
            matches = singleton {
              "node.name" = "Freewheel-Driver";
            };

            actions = {
              update-props = {
                "factory.name" = "support.node.driver";
                "node.name" = "Freewheel-Driver-Custom";
                "node.description" = "Freewheel-Driver-Custom";
                "node.group" = "pipewire.freewheel";
                "node.freewheel" = true;
                "priority.driver" = 19000;
              };
            };
          };
        };

        "11-rename-dummy" = {
          "monitor.alsa.rules" = singleton {
            matches = singleton {
              "node.name" = "Dummy-Driver";
            };

            actions = {
              update-props = {
                "node.name" = "Dummy-Driver-Custom";
                "node.nick" = "Dummy-Driver-Custom";
                "node.description" = "Dummy-Driver-Custom";
                "priority.driver" = 20000;
              };
            };
          };
        };

        "60-hdmi-lowprio" = {
          "monitor.alsa.rules" = singleton {
            matches = singleton {
              "api.alsa.path" = "hdmi:.*";
            };

            actions.update-props = {
              "node.name" = "Low Priority HDMI";
              "node.nick" = "Low Priority HDMI";
              "node.description" = "Low Priority HDMI";
              "priority.session" = 100;
              "node.pause-on-idle" = true;
            };
          };
        };

        "60-onboard-card" = {
          "monitor.alsa.rules" = singleton {
            matches = [
              {"media.class" = "Audio/Device";}
              {"devie.product.name" = "Starship/Matisse HD Audio Controller";}
            ];

            actions.update-props = {
              "node.name" = "Onboard Audio";
              "node.description" = "Onboard Audio";
              "node.nick" = "Onboard Audio";
            };
          };
        };

        "70-device-VP249" = {
          "monitor.alsa.rules" = singleton {
            matches = singleton {
              "node.name" = "alsa_output.pci-0000_0b_00.1.hdmi-stereo-extra3.2";
            };

            actions.update-props = {
              "node.name" = "ASUS VP249/Display Port";
              "node.description" = "ASUS VP249/Display Port";
              "node.nick" = "ASUS VP249/Display Port";
              "priority.session" = 1000;
            };
          };
        };
      }

      (mkIf dev.hasBluetooth {
        "10-bluez" = {
          "monitor.bluez.rules" = singleton {
            matches = singleton {"device.name" = "~bluez_card.*";};
            actions = {
              update-props = {
                "bluez5.roles" = ["hsp_hs" "hsp_ag" "hfp_hf" "hfp_ag"];
                "bluez5.enable-msbc" = true;
                "bluez5.enable-sbc-xq" = true;
                "bluez5.enable-hw-volume" = true;

                # Set quality to high quality instead of the default of auto
                "bluez5.a2dp.ldac.quality" = "hq";
              };
            };
          };
        };
      })
    ];
  };
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/servers/pipewire/wireplumber/settings.nix">
{
  services.pipewire.wireplumber = {
    extraConfig = {
      # Tell wireplumber to be more verbose
      "10-log-level-debug" = {
        "context.properties"."log.level" = "D"; # output debug logs
      };

      # Default volume is by default set to 0.4
      # instead set it to 1.0
      "10-default-volume" = {
        "wireplumber.settings"."device.routes.default-sink-volume" = 1.0;
      };
    };
  };
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/servers/pipewire/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) isx86Linux;
  inherit (lib.modules) mkIf;

  inherit (config) modules;
  sys = modules.system;
  dev = modules.device;
in {
  imports = [
    ./wireplumber

    #./low-latency.nix
    ./settings.nix
  ];

  config = mkIf (sys.sound.enable && dev.hasSound) {
    # Enable PipeWire sound server and additional emulation layers
    # for all kinds of backwards compatibility. Audio on Linux has
    # always been finicky, and this is the best way to ensure that
    # we have the best compatibility with the most software.
    services.pipewire = {
      enable = true;

      # use PipeWire as the primary sound server
      audio.enable = true;

      # Additional emulation layers to enable on top of PipeWire.
      # The backward compatibility provided by below options are impeccable and therefore
      # I choose to keep them. On a minimal system, they can (and probably should)
      # be omitted
      pulse.enable = true; # PulseAudio server emulation
      jack.enable = true; # JACK audio emulation
      alsa = {
        enable = true; # ALSA support
        support32Bit = isx86Linux pkgs; # if we're on x86 linux, we can support 32 bit
      };
    };

    systemd.user.services = {
      pipewire.wantedBy = ["default.target"];
      pipewire-pulse.wantedBy = ["default.target"];
    };
  };
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/servers/pipewire/low-latency.nix">
{lib, ...}: let
  inherit (builtins) toString;
  inherit (lib.lists) singleton;
in {
  # Enable the threadirqs kernel parameter to reduce audio latency
  # See <https://github.com/musnix/musnix/blob/master/modules/base.nix#L56>
  boot.kernelParams = ["threadirqs"];

  services = {
    # configure PipeWire for low latency
    # the below configuration may not fit every use case
    # and you are recommended to experiment with the values
    # in order to find the perfect configuration
    pipewire = let
      # Higher audio rate equals less latency always, unless you
      # increase your quantum.
      # To calculate node latency for your audio device take the
      # quantum size divided by your audio rate
      # => 64/96000 = 0.00066666666 * 1000 = 0.6ms # this is 0.6ms node latency
      # To check client latency use `pw-top`, take the quantum size
      # and the audio rate of the client then use `quantum / audio rate * 1000`
      # to get overall latency for the client
      quantum = toString 64;
      rate = toString 48000;
      qr = "${quantum}/${rate}"; # quantum/rate
    in {
      # Additional configuration files that will be placed in /etc/pipewire/pipewire.conf.d/
      # with the given file name. According to the documentation, those files take JSON therefore
      # nixpkgs' toJSON should be suitable to write the configuration files via Nix expressions.
      # P.S. Using extraConfig already converts the expression to JSON, so toJSON is not necessary
      # Also see: <https://gitlab.freedesktop.org/pipewire/pipewire/-/wikis/Config-PipeWire#quantum-ranges>
      # Useful commands:
      #  pw-top                                            # see live stats
      #  journalctl -b0 --user -u pipewire                 # see logs (spa resync in "bad")
      #  pw-metadata -n settings 0                         # see current quantums
      #  pw-metadata -n settings 0 clock.force-quantum 128 # override quantum
      #  pw-metadata -n settings 0 clock.force-quantum 0   # disable override
      extraConfig = {
        pipewire."92-low-latency" = {
          "context.properties" = {
            "default.clock.rate" = rate;
            "default.clock.quantum" = quantum;
            "default.clock.min-quantum" = quantum;
            "default.clock.max-quantum" = quantum;
            "default.clock.allowed-rates" = [rate];
          };

          "context.modules" = [
            {
              name = "libpipewire-module-rtkit";
              flags = ["ifexists" "nofail"];
              args = {
                "nice.level" = -15;
                "rt.prio" = 90;
                "rt.time.soft" = 200000;
                "rt.time.hard" = 200000;
              };
            }
            {
              name = "libpipewire-module-protocol-pulse";
              args = {
                "server.address" = ["unix:native"];
                "pulse.min.quantum" = qr;
                "pulse.min.req" = qr;
                "pulse.min.frag" = qr;
              };
            }
          ];

          "stream.properties" = {
            "node.latency" = qr;
            "resample.quality" = 1;
          };
        };

        pipewire-pulse."92-low-latency" = {
          "context.modules" = singleton {
            name = "libpipewire-module-protocol-pulse";
            args = {
              "pulse.min.req" = qr;
              "pulse.default.req" = qr;
              "pulse.max.req" = qr;
              "pulse.min.quantum" = qr;
              "pulse.max.quantum" = qr;
            };
          };

          "stream.properties" = {
            "node.latency" = qr;
            "resample.quality" = 4;
          };
        };
      };

      wireplumber = {
        enable = true;
        extraConfig = {
          # Configure each device/card/output to use the low latency configuration
          "92-low-latency" = {
            # Some applications still use the ALSA channels, so the configuration
            # for Wireplumber doesn't properly apply to them. In that case, they should
            # follow the ALSA configuration instead.
            "monitor.alsa.rules" = [
              {
                matches = [
                  # Matches all devices.
                  {"device.name" = "~alsa_card.*";}

                  # Matches all sinks.
                  {"node.name" = "~alsa_output.*";}
                ];

                actions.update-props = {
                  # Give a human-readable name to the matching devices/sources/sinks.
                  "node.description" = "ALSA Low Latency Output";

                  # Low latency configuration
                  "audio.rate" = rate;
                  "audio.format" = "S32LE";
                  "resample.quality" = 4;
                  "resample.disable" = false;
                  # 0 disables suspend
                  "session.suspend-timeout-seconds" = 0;
                  "api.alsa.period-size" = 2;
                  # Default: 0
                  "api.alsa.headroom" = 128;
                  # Default: 2
                  "api.alsa.period-num" = 2;
                  # generally, USB soundcards use the batch mode
                  "api.alsa.disable-batch" = false;
                };
              }
            ];
          };
        };
      };
    };
  };
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/servers/pipewire/settings.nix">
{lib, ...}: let
  inherit (lib.attrsets) mapAttrs;
  inherit (lib.modules) mkBefore mkOptionDefault;
  inherit (lib.lists) singleton;

  mapOptionDefault = mapAttrs (_: mkOptionDefault);
in {
  services.pipewire.extraConfig = {
    pipewire = {
      # Make PipeWire more verbose by default
      "10-logging" = {
        "context.properties"."log.level" = 3;
      };

      # <https://docs.pipewire.org/page_man_pipewire_conf_5.html>
      "10-defaults" = {
        "context.properties" = mapOptionDefault {
          "clock.power-of-two-quantum" = true;
          "core.daemon" = true;
          "core.name" = "pipewire-0";
          "link.max-buffers" = 16; # default is 64, is that really necessary?
          "settings.check-quantum" = true;
        };

        "context.spa-libs" = mapOptionDefault {
          "audio.convert.*" = "audioconvert/libspa-audioconvert";
          "avb.*" = "avb/libspa-avb";
          "api.alsa.*" = "alsa/libspa-alsa";
          "api.v4l2.*" = "v4l2/libspa-v4l2";
          "api.libcamera.*" = "libcamera/libspa-libcamera";
          "api.bluez5.*" = "bluez5/libspa-bluez5";
          "api.vulkan.*" = "vulkan/libspa-vulkan";
          "api.jack.*" = "jack/libspa-jack";
          "support.*" = "support/libspa-support";
          "video.convert.*" = "videoconvert/libspa-videoconvert";
        };
      };
    };

    pipewire-pulse = {
      # <https://docs.pipewire.org/page_man_pipewire-pulse_conf_5.html>
      "10-defaults" = {
        "context.spa-libs" = mapOptionDefault {
          "audio.convert.*" = "audioconvert/libspa-audioconvert";
          "support.*" = "support/libspa-support";
        };

        "pulse.cmd" = mkBefore [
          {
            cmd = "load-module";
            args = "module-always-sink";
            flags = [];
          }
        ];

        "pulse.properties" = {
          "server.address" = mkBefore ["unix:native"];
        };

        "pulse.rules" = mkBefore [
          {
            # skype does not want to use devices that don't have an S16 sample format.
            # we force the S16 format on the device to work around that
            matches = [
              {"application.process.binary" = "teams";}
              {"application.process.binary" = "teams-insiders";}
              {"application.process.binary" = "skypeforlinux";}
            ];

            actions.quirks = ["force-s16-info"];
          }
          {
            # firefox marks the capture streams as don't move and then they
            # can't be moved with pavucontrol or other tools.
            matches = singleton {"application.process.binary" = "firefox";};
            actions.quirks = ["remove-capture-dont-move"];
          }
          {
            # speech dispatcher asks for too small latency and then underruns.
            matches = singleton {"application.name" = "~speech-dispatcher*";};
            actions = {
              update-props = {
                "pulse.min.req" = "1024/48000"; # 21ms
                "pulse.min.quantum " = "1024/48000"; # 21ms
              };
            };
          }
        ];
      };
    };
  };
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/servers/default.nix">
{
  imports = [
    # PipeWire sound server
    # the primary server for most of my systems
    ./pipewire

    # kept for backwards compatibility
    ./pulse.nix
  ];
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/servers/pulse.nix">
{config, ...}: {
  # While PipeWire is an objectively superior sound server to PulseAudio
  # the system should fall back to PulseAudio if (and only if) the system
  # advertises sound support, but PipeWire is disabled.
  hardware.pulseaudio.enable = !config.services.pipewire.enable;
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/default.nix">
{
  imports = [
    ./servers

    ./realtime.nix
    ./rtkit.nix
  ];
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/realtime.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  cfg = config.modules.system.sound;
  dev = config.modules.device;
in {
  config = mkIf (cfg.enable && dev.hasSound) {
    # port of https://gitlab.archlinux.org/archlinux/packaging/packages/realtime-privileges
    # see https://wiki.archlinux.org/title/Realtime_process_management
    # tldr: realtime processes have higher priority than normal processes
    # and that's a good thing
    users = {
      users."${config.modules.system.mainUser}".extraGroups = ["audio"];
      groups.audio = {};
    };

    security.pam.loginLimits = [
      {
        domain = "@audio";
        type = "-";
        item = "rtprio";
        value = 99;
      }
      {
        domain = "@audio";
        type = "-";
        item = "memlock";
        value = "unlimited";
      }
      {
        domain = "@audio";
        type = "-";
        item = "nice";
        value = -11;
      }
      {
        domain = "@audio";
        item = "nofile";
        type = "soft";
        value = "99999";
      }
      {
        domain = "@audio";
        item = "nofile";
        type = "hard";
        value = "524288";
      }
    ];

    services.udev.extraRules = ''
      KERNEL=="cpu_dma_latency", GROUP="audio"
      KERNEL=="rtc0", GROUP="audio"
      KERNEL=="hpet", GROUP="audio"
    '';
  };
}
</file>

<file path="modules/core/common/system/hardware/multimedia/sound/rtkit.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
in {
  # able to change scheduling policies, e.g. to SCHED_RR
  # sounds server use RealtimeKit (rtkit) to acquire
  # realtime priority
  security.rtkit.enable = mkForce config.services.pipewire.enable;
}
</file>

<file path="modules/core/common/system/hardware/multimedia/video/default.nix">
{
  pkgs,
  lib,
  config,
  ...
}: let
  inherit (lib) mkIf isx86Linux;

  sys = config.modules.system;
in {
  config = mkIf sys.video.enable {
    hardware = {
      graphics = {
        enable = true;
        enable32Bit = isx86Linux pkgs;
      };
    };

    # benchmarking tools
    environment.systemPackages = with pkgs; [
      glxinfo
      glmark2
    ];
  };
}
</file>

<file path="modules/core/common/system/hardware/multimedia/default.nix">
{
  imports = [
    ./video
    ./sound
  ];
}
</file>

<file path="modules/core/common/system/hardware/bluetooth.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system.bluetooth;
in {
  config = mkIf sys.enable {
    modules.system.boot.extraKernelParams = ["btusb"];

    hardware.bluetooth = {
      enable = true;
      package = pkgs.bluez5-experimental;
      #hsphfpd.enable = true;
      powerOnBoot = true;
      disabledPlugins = ["sap"];
      settings = {
        General = {
          JustWorksRepairing = "always";
          MultiProfile = "multiple";
          Experimental = true;
        };
      };
    };

    # https://nixos.wiki/wiki/Bluetooth
    services.blueman.enable = true;
  };
}
</file>

<file path="modules/core/common/system/hardware/module.nix">
{
  imports = [
    ./cpu # cpu specific options
    ./gpu # gpu specific options
    ./multimedia # enable multimedia: e.g. sound and video

    ./bluetooth.nix # bluetooth and device management
    ./tpm.nix # trusted platform module
    ./yubikey.nix # yubikey device support and management tools
    ./redistributable.nix # Non-free redstributable software
  ];
}
</file>

<file path="modules/core/common/system/hardware/redistributable.nix">
{lib, ...}: {
  # This enables non-free firmware on devices not recognized by `nixos-generate-config`.
  # Disabling this option will make the system unbootable if such devices are critical
  # in your boot chain - therefore this should remain true until you are running a device
  # with mostly libre firmware. Which there is not many of.
  # on 2021-06-14: disabled this by accident and nuked my GPU drivers
  hardware.enableRedistributableFirmware = lib.mkDefault true;
}
</file>

<file path="modules/core/common/system/hardware/tpm.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  dev = config.modules.device;
in {
  config = mkIf dev.hasTPM {
    boot.kernelModules = ["uhid"];

    security.tpm2 = {
      # Enable Trusted Platform Module 2 support
      enable = true;

      applyUdevRules = true;

      # Enable Trusted Platform 2 userspace resource manager daemon
      # Setting this option to true will have TMP2 as a userspace daemon
      # and set the `security.tmp2.tssUser` that the daemon will run as.
      abrmd.enable = true;

      # The TCTI is the "Transmission Interface" that is used to communicate with a
      # TPM. this option sets TCTI environment variables to the specified values if enabled
      #  - TPM2TOOLS_TCTI
      #  - TPM2_PKCS11_TCTI
      tctiEnvironment.enable = true;

      # enable TPM2 PKCS#11 tool and shared library in system path
      pkcs11.enable = true;
    };

    # Utilities to work with TPM2 on Linux.
    environment.systemPackages = with pkgs; [tpm2-tools tpm2-tss tpm2-abrmd];
  };
}
</file>

<file path="modules/core/common/system/hardware/yubikey.nix">
{
  config,
  pkgs,
  lib,
  ...
}: {
  config = lib.mkIf config.modules.system.yubikeySupport.enable {
    hardware.gpgSmartcards.enable = true;

    services = {
      pcscd.enable = true;
      udev.packages = [pkgs.yubikey-personalization];
    };

    programs = {
      ssh.startAgent = false;
      gnupg.agent = {
        enable = true;
        enableSSHSupport = true;
      };
    };

    environment.systemPackages = with pkgs; [
      # Yubico's official tools
      yubikey-manager # cli
      yubikey-manager-qt # gui
      yubikey-personalization # cli
      yubikey-personalization-gui # gui
      yubico-piv-tool # cli
      yubioath-flutter # gui
    ];
  };
}
</file>

<file path="modules/core/common/system/impermanence/module.nix">
{
  inputs,
  config,
  lib,
  ...
}: let
  inherit (lib) optionalString mkIf mkForce;

  cfg = config.modules.system.impermanence;
in {
  imports = [
    inputs.impermanence.nixosModules.impermanence
  ];

  config = mkIf cfg.enable {
    users = {
      # this option makes it that users are not mutable outside our configurations
      # if you are on nixos, you are probably smart enough to not try and edit users
      # manually outside your configuration.nix or whatever
      # P.S: This option requires you to define a password file for your users
      # inside your configuration.nix - you can generate this password with
      # mkpasswd -m sha-512 > /persist/passwords/notashelf after you confirm /persist/passwords exists
      mutableUsers = false;

      # each existing user needs to have a passwordFile defined here
      # otherwise, they will not be available for a login
      users = {
        root = {
          # passwordFile needs to be in a volume marked with `neededForBoot = true`
          hashedPasswordFile = "/persist/passwords/root";
        };
        notashelf = {
          hashedPasswordFile = "/persist/passwords/notashelf";
        };
      };
    };

    # home.persistence."/persist/home/notashelf" = {};
    environment.persistence."/persist" = {
      directories =
        [
          "/etc/nixos"
          "/etc/nix"
          "/etc/NetworkManager/system-connections"
          "/etc/secureboot"
          "/var/db/sudo"
          "/var/lib/flatpak"
          "/var/lib/libvirt"
          "/var/lib/bluetooth"
          "/var/lib/nixos"
          "/var/lib/pipewire"
          "/var/lib/systemd/coredump"
          "/var/cache/tailscale"
          "/var/lib/tailscale"
        ]
        ++ [config.programs.ccache.cacheDir];

      files = [
        # important state
        "/etc/machine-id"
        # ssh stuff
        /*
        "/etc/ssh/ssh_host_ed25519_key"
        "/etc/ssh/ssh_host_ed25519_key.pub"
        "/etc/ssh/ssh_host_rsa_key"
        "/etc/ssh/ssh_host_rsa_key.pub"
        */
        # other
        # TODO: optionalstring for /var/lib/${lxd, docker}
      ];

      # builtins.concatMap (key: [key.path (key.path + ".pub")]) config.services.openssh.hostKeys
    };

    # for some reason *this* is what makes networkmanager not get screwed completely instead of the impermanence module
    systemd.tmpfiles.rules = [
      "L /var/lib/NetworkManager/secret_key - - - - /persist/var/lib/NetworkManager/secret_key"
      "L /var/lib/NetworkManager/seen-bssids - - - - /persist/var/lib/NetworkManager/seen-bssids"
      "L /var/lib/NetworkManager/timestamps - - - - /persist/var/lib/NetworkManager/timestamps"
    ];

    services.openssh.hostKeys = mkForce [
      {
        bits = 4096;
        path = "/persist/etc/ssh/ssh_host_rsa_key";
        type = "rsa";
      }
      {
        bits = 4096;
        path = "/persist/etc/ssh/ssh_host_ed25519_key";
        type = "ed25519";
      }
    ];

    boot.initrd.systemd.services.rollback = {
      description = "Rollback BTRFS root subvolume to a pristine state";
      wantedBy = ["initrd.target"];
      # make sure it's done after encryption
      # i.e. LUKS/TPM process
      after = ["systemd-cryptsetup@enc.service"];
      # mount the root fs before clearing
      before = ["sysroot.mount"];
      unitConfig.DefaultDependencies = "no";
      serviceConfig.Type = "oneshot";
      script = ''
        mkdir -p /mnt

        # We first mount the btrfs root to /mnt
        # so we can manipulate btrfs subvolumes.
        mount -o subvol=/ /dev/mapper/enc /mnt

        # If home is meant to be impermanent, also mount the home subvolume to be deleted later
        ${optionalString cfg.home.enable "mount -o subvol=/home /dev/mapper/enc /mnt/home"}

        # While we're tempted to just delete /root and create
        # a new snapshot from /root-blank, /root is already
        # populated at this point with a number of subvolumes,
        # which makes `btrfs subvolume delete` fail.
        # So, we remove them first.
        #
        # /root contains subvolumes:
        # - /root/var/lib/portables
        # - /root/var/lib/machines

        btrfs subvolume list -o /mnt/root |
          cut -f9 -d' ' |
          while read subvolume; do
            echo "deleting /$subvolume subvolume..."
            btrfs subvolume delete "/mnt/$subvolume"
          done &&
          echo "deleting /root subvolume..." &&
          btrfs subvolume delete /mnt/root

        echo "restoring blank /root subvolume..."
        btrfs subvolume snapshot /mnt/root-blank /mnt/root

        ${optionalString cfg.home.enable ''
          echo "restoring blank /home subvolume..."
          mount -o subvol=/home /dev/mapper/enc /mnt/home
        ''}

        # Once we're done rolling back to a blank snapshot,
        # we can unmount /mnt and continue on the boot process.
        umount /mnt
      '';
    };

    assertions = [
      {
        assertion = cfg.home.enable -> !cfg.root.enable;
        message = ''
          You have enabled home impermanence without root impermanence. This
          is not supported due to the fact that we handle all all impermanence
          related deletions and creations in a single service. Please enable
          `modules.system.impermanence.root.enable` if you wish to proceed.
        '';
      }
    ];

    # home impermanence is not very safe, and chances are I don't want it. Warn any potential
    # users (which may or may not be me) when it is enabled just to be safe.
    # p.s. I really don't like nix's warnings syntax. why can't it be the same
    # as the assertions format? /rant
    warnings =
      if cfg.home.enable
      then ["Home impermanence is enabled. This is experimental, beware."]
      else [];
  };
}
</file>

<file path="modules/core/common/system/nix/overlays/patches/0001-nix-default-flake.patch">
diff --git a/src/libcmd/installables.cc b/src/libcmd/installables.cc
index ab0e4fd1c..e56c59712 100644
--- a/src/libcmd/installables.cc
+++ b/src/libcmd/installables.cc
@@ -37,6 +37,23 @@ void completeFlakeInputPath(
     }
 }
 
+std::string InstallablesSettings::getDefaultFlake(std::string_view url)
+{
+    std::string res = defaultFlake;
+    if (res == "") {
+        throw UsageError("don't know how to handle installable '%s' without flake URL, because the option 'default-flake' is not set", url);
+    }
+    return res;
+}
+
+InstallablesSettings installablesSettings;
+
+static GlobalConfig::Register rInstallablesSettings(&installablesSettings);
+
+const static std::regex attrPathRegex(
+    R"((?:[a-zA-Z0-9_"-][a-zA-Z0-9_".-]*(?:\^((\*)|([a-z]+(,[a-z]+)*)))?))",
+    std::regex::ECMAScript);
+
 MixFlakeOptions::MixFlakeOptions()
 {
     auto category = "Common flake-related options";
@@ -276,20 +293,34 @@ void completeFlakeRefWithFragment(
     /* Look for flake output attributes that match the
        prefix. */
     try {
+        bool isAttrPath = std::regex_match(prefix.begin(), prefix.end(), attrPathRegex);
         auto hash = prefix.find('#');
+
         if (hash == std::string::npos) {
-            completeFlakeRef(completions, evalState->store, prefix);
-        } else {
+        }
+
+        if (isAttrPath || hash != std::string::npos) {
             completions.setType(AddCompletions::Type::Attrs);
 
-            auto fragment = prefix.substr(hash + 1);
+            auto fragment =
+                isAttrPath
+                ? prefix
+                : prefix.substr(hash + 1);
+
             std::string prefixRoot = "";
             if (fragment.starts_with(".")){
                 fragment = fragment.substr(1);
                 prefixRoot = ".";
             }
-            auto flakeRefS = std::string(prefix.substr(0, hash));
-            auto flakeRef = parseFlakeRef(expandTilde(flakeRefS), absPath("."));
+            auto flakeRefS =
+                isAttrPath
+                ? std::string(installablesSettings.getDefaultFlake(prefix))
+                : expandTilde(std::string(prefix.substr(0, hash)));
+
+            // FIXME: do tilde expansion.
+            auto flakeRef = parseFlakeRef(
+                flakeRefS,
+                isAttrPath ? std::optional<std::string>{} : absPath("."));
 
             auto evalCache = openEvalCache(*evalState,
                 std::make_shared<flake::LockedFlake>(lockFlake(*evalState, flakeRef, lockFlags)));
@@ -299,6 +330,7 @@ void completeFlakeRefWithFragment(
             if (prefixRoot == "."){
                 attrPathPrefixes.clear();
             }
+
             /* Complete 'fragment' relative to all the
                attrpath prefixes as well as the root of the
                flake. */
@@ -323,7 +355,13 @@ void completeFlakeRefWithFragment(
                         auto attrPath2 = (*attr)->getAttrPath(attr2);
                         /* Strip the attrpath prefix. */
                         attrPath2.erase(attrPath2.begin(), attrPath2.begin() + attrPathPrefix.size());
-                        completions.add(flakeRefS + "#" + prefixRoot + concatStringsSep(".", evalState->symbols.resolve(attrPath2)));
+
+                        std::string resolvedAttrPath2 = prefixRoot + concatStringsSep(".", evalState->symbols.resolve(attrPath2));
+
+                        if (isAttrPath)
+                            completions.add(resolvedAttrPath2);
+                        else
+                            completions.add(flakeRefS + "#" + resolvedAttrPath2);
                     }
                 }
             }
@@ -360,7 +398,7 @@ void completeFlakeRef(AddCompletions & completions, ref<Store> store, std::strin
             if (!prefix.starts_with("flake:") && from.starts_with("flake:")) {
                 std::string from2(from, 6);
                 if (from2.starts_with(prefix))
-                    completions.add(from2);
+                    completions.add(from2 + "#");
             } else {
                 if (from.starts_with(prefix))
                     completions.add(from);
@@ -475,7 +513,13 @@ Installables SourceExprCommand::parseInstallables(
             }
 
             try {
-                auto [flakeRef, fragment] = parseFlakeRefWithFragment(std::string { prefix }, absPath("."));
+                bool isAttrPath = std::regex_match(std::string { prefix }, attrPathRegex);
+
+                auto [flakeRef, fragment] =
+                    isAttrPath
+                    ? std::pair { parseFlakeRef(installablesSettings.getDefaultFlake(s), {}), std::string { prefix } }
+                    : parseFlakeRefWithFragment(std::string { prefix }, absPath("."));
+
                 result.push_back(make_ref<InstallableFlake>(
                         this,
                         getEvalState(),
diff --git a/src/libcmd/installables.hh b/src/libcmd/installables.hh
index 95e8841ca..3e43b859d 100644
--- a/src/libcmd/installables.hh
+++ b/src/libcmd/installables.hh
@@ -12,6 +12,16 @@
 
 namespace nix {
 
+struct InstallablesSettings : Config
+{
+    Setting<std::string> defaultFlake{this, "default-flake", "default-flake",
+        "The default flake URL when using the command line interface"};
+
+    std::string getDefaultFlake(std::string_view url);
+};
+
+extern InstallablesSettings installablesSettings;
+
 struct DrvInfo;
 
 enum class Realise {
diff --git a/src/nix/search.cc b/src/nix/search.cc
index 97ef1375e..41d6f1495 100644
--- a/src/nix/search.cc
+++ b/src/nix/search.cc
@@ -23,8 +23,9 @@ std::string wrap(std::string prefix, std::string s)
     return concatStrings(prefix, s, ANSI_NORMAL);
 }
 
-struct CmdSearch : InstallableValueCommand, MixJSON
+struct CmdSearch : SourceExprCommand, MixJSON
 {
+    std::string _installable{installablesSettings.defaultFlake};
     std::vector<std::string> res;
     std::vector<std::string> excludeRes;
 
@@ -40,6 +41,24 @@ struct CmdSearch : InstallableValueCommand, MixJSON
                 excludeRes.push_back(s);
             }},
         });
+
+        bool hasInstallable = false;
+
+        addFlag({
+            .longName = "installable",
+            .shortName = 'i',
+            .description = "Search within this installable",
+            .labels = {"installable"},
+            .handler = {[this, &hasInstallable](std::string ss) {
+                hasInstallable = true;
+                _installable = ss;
+            }},
+            .completer = completePath
+        });
+
+        if (hasInstallable && (file || expr)) {
+            throw UsageError("'--installable' cannot be used together with '--file' or '--expr'");
+        }
     }
 
     std::string description() override
@@ -62,14 +81,21 @@ struct CmdSearch : InstallableValueCommand, MixJSON
         };
     }
 
-    void run(ref<Store> store, ref<InstallableValue> installable) override
+    void run(ref<Store> store) override
     {
+        if (_installable == "" && ! file && ! expr) {
+            throw UsageError("nothing to search from, set 'default-flake' option or specify one of '--installable', '--file', '--expr'");
+        }
+
         settings.readOnlyMode = true;
         evalSettings.enableImportFromDerivation.setDefault(false);
 
+        auto installable = InstallableValue::require(
+            parseInstallable(store, (file || expr) ? "" : _installable));
+
         // Recommend "^" here instead of ".*" due to differences in resulting highlighting
         if (res.empty())
-            throw UsageError("Must provide at least one regex! To match all packages, use '%s'.", "nix search <installable> ^");
+            throw UsageError("Must provide at least one regex! To match all packages, use '%s'.", "nix search ^");
 
         std::vector<std::regex> regexes;
         std::vector<std::regex> excludeRegexes;
diff --git a/tests/functional/completions.sh b/tests/functional/completions.sh
index d3d5bbd48..a5ab90220 100644
--- a/tests/functional/completions.sh
+++ b/tests/functional/completions.sh
@@ -38,8 +38,8 @@ EOF
 [[ "$(NIX_GET_COMPLETIONS=2 nix flake metad)" == $'normal\nmetadata\t' ]]
 
 # Filename completion
-[[ "$(NIX_GET_COMPLETIONS=2 nix build ./f)" == $'filenames\n./foo\t' ]]
-[[ "$(NIX_GET_COMPLETIONS=2 nix build ./nonexistent)" == $'filenames' ]]
+#[[ "$(NIX_GET_COMPLETIONS=2 nix build ./f)" == $'filenames\n./foo\t' ]]
+#[[ "$(NIX_GET_COMPLETIONS=2 nix build ./nonexistent)" == $'filenames' ]]
 
 # Input override completion
 [[ "$(NIX_GET_COMPLETIONS=4 nix build ./foo --override-input '')" == $'normal\na\t' ]]
diff --git a/tests/functional/flakes/flakes.sh b/tests/functional/flakes/flakes.sh
index 3ef518b23..8b88dbb8f 100644
--- a/tests/functional/flakes/flakes.sh
+++ b/tests/functional/flakes/flakes.sh
@@ -116,7 +116,7 @@ nix build -o $TEST_ROOT/result flake1#foo
 [[ -e $TEST_ROOT/result/hello ]]
 
 # Test packages.default.
-nix build -o $TEST_ROOT/result flake1
+nix build -o $TEST_ROOT/result flake1#
 [[ -e $TEST_ROOT/result/hello ]]
 
 nix build -o $TEST_ROOT/result $flake1Dir
diff --git a/tests/functional/search.sh b/tests/functional/search.sh
index d9c7a75da..35f665db6 100644
--- a/tests/functional/search.sh
+++ b/tests/functional/search.sh
@@ -3,43 +3,42 @@ source common.sh
 clearStore
 clearCache
 
-(( $(nix search -f search.nix '' hello | wc -l) > 0 ))
+(( $(nix search -f search.nix hello | wc -l) > 0 ))
 
 # Check descriptions are searched
-(( $(nix search -f search.nix '' broken | wc -l) > 0 ))
+(( $(nix search -f search.nix broken | wc -l) > 0 ))
 
 # Check search that matches nothing
-(( $(nix search -f search.nix '' nosuchpackageexists | wc -l) == 0 ))
+(( $(nix search -f search.nix nosuchpackageexists | wc -l) == 0 ))
 
 # Search for multiple arguments
-(( $(nix search -f search.nix '' hello empty | wc -l) == 2 ))
+(( $(nix search -f search.nix hello empty | wc -l) == 2 ))
 
 # Multiple arguments will not exist
-(( $(nix search -f search.nix '' hello broken | wc -l) == 0 ))
+(( $(nix search -f search.nix hello broken | wc -l) == 0 ))
 
 # No regex should return an error
-(( $(nix search -f search.nix '' | wc -l) == 0 ))
+(( $(nix search -f search.nix | wc -l) == 0 ))
 
 ## Search expressions
 
-# Check that empty search string matches all
-nix search -f search.nix '' ^ | grepQuiet foo
-nix search -f search.nix '' ^ | grepQuiet bar
-nix search -f search.nix '' ^ | grepQuiet hello
+nix search -f search.nix ^ | grepQuiet foo
+nix search -f search.nix ^ | grepQuiet bar
+nix search -f search.nix ^ | grepQuiet hello
 
 ## Tests for multiple regex/match highlighting
 
 e=$'\x1b' # grep doesn't support \e, \033 or even \x1b
 # Multiple overlapping regexes
-(( $(nix search -f search.nix '' 'oo' 'foo' 'oo' | grep -c "$e\[32;1mfoo$e\\[0;1m") == 1 ))
-(( $(nix search -f search.nix '' 'broken b' 'en bar' | grep -c "$e\[32;1mbroken bar$e\\[0m") == 1 ))
+(( $(nix search -f search.nix 'oo' 'foo' 'oo' | grep -c "$e\[32;1mfoo$e\\[0;1m") == 1 ))
+(( $(nix search -f search.nix 'broken b' 'en bar' | grep -c "$e\[32;1mbroken bar$e\\[0m") == 1 ))
 
 # Multiple matches
 # Searching for 'o' should yield the 'o' in 'broken bar', the 'oo' in foo and 'o' in hello
-(( $(nix search -f search.nix '' 'o' | grep -Eoc "$e\[32;1mo{1,2}$e\[(0|0;1)m") == 3 ))
+(( $(nix search -f search.nix 'o' | grep -Eoc "$e\[32;1mo{1,2}$e\[(0|0;1)m") == 3 ))
 # Searching for 'b' should yield the 'b' in bar and the two 'b's in 'broken bar'
 # NOTE: This does not work with `grep -c` because it counts the two 'b's in 'broken bar' as one matched line
-(( $(nix search -f search.nix '' 'b' | grep -Eo "$e\[32;1mb$e\[(0|0;1)m" | wc -l) == 3 ))
+(( $(nix search -f search.nix 'b' | grep -Eo "$e\[32;1mb$e\[(0|0;1)m" | wc -l) == 3 ))
 
 ## Tests for --exclude
 (( $(nix search -f search.nix ^ -e hello | grep -c hello) == 0 ))
</file>

<file path="modules/core/common/system/nix/overlays/patches/0001-nix-make-errors-great.patch">
From 0b80935c22f367b1deecffeddb97c90d7ed985e9 Mon Sep 17 00:00:00 2001
From: Rebecca Turner <rbt@sent.as>
Date: Thu, 7 Dec 2023 10:01:42 -0800
Subject: [PATCH 1/2] Pass positions when evaluating
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This includes position information in more places, making debugging
easier.

Before:

```
$ nix-instantiate --show-trace --eval tests/functional/lang/eval-fail-using-set-as-attr-name.nix
error:
       … while evaluating an attribute name

         at «none»:0: (source not available)

       error: value is a set while a string was expected
```

After:

```
error:
       … while evaluating an attribute name

         at /pwd/lang/eval-fail-using-set-as-attr-name.nix:5:10:

            4| in
            5|   attr.${key}
             |          ^
            6|

       error: value is a set while a string was expected
```
---
 .../rl-next/source-positions-in-errors.md     | 45 +++++++++++++++++++
 src/libexpr/eval-inline.hh                    | 12 ++---
 src/libexpr/eval.cc                           | 18 ++++----
 src/libexpr/nixexpr.hh                        |  1 +
 .../lang/eval-fail-attr-name-type.err.exp     | 20 +++++++++
 .../lang/eval-fail-attr-name-type.nix         |  7 +++
 .../lang/eval-fail-call-primop.err.exp        | 12 +++++
 .../functional/lang/eval-fail-call-primop.nix |  1 +
 .../lang/eval-fail-not-throws.err.exp         | 18 ++++++++
 .../functional/lang/eval-fail-not-throws.nix  |  1 +
 .../eval-fail-using-set-as-attr-name.err.exp  | 11 +++++
 .../lang/eval-fail-using-set-as-attr-name.nix |  5 +++
 12 files changed, 137 insertions(+), 14 deletions(-)
 create mode 100644 doc/manual/rl-next/source-positions-in-errors.md
 create mode 100644 tests/functional/lang/eval-fail-attr-name-type.err.exp
 create mode 100644 tests/functional/lang/eval-fail-attr-name-type.nix
 create mode 100644 tests/functional/lang/eval-fail-call-primop.err.exp
 create mode 100644 tests/functional/lang/eval-fail-call-primop.nix
 create mode 100644 tests/functional/lang/eval-fail-not-throws.err.exp
 create mode 100644 tests/functional/lang/eval-fail-not-throws.nix
 create mode 100644 tests/functional/lang/eval-fail-using-set-as-attr-name.err.exp
 create mode 100644 tests/functional/lang/eval-fail-using-set-as-attr-name.nix

diff --git a/doc/manual/rl-next/source-positions-in-errors.md b/doc/manual/rl-next/source-positions-in-errors.md
new file mode 100644
index 00000000000..00f0b27e8d7
--- /dev/null
+++ b/doc/manual/rl-next/source-positions-in-errors.md
@@ -0,0 +1,45 @@
+synopsis: Source locations are printed more consistently in errors
+issues: #561
+prs: #9555
+description: {
+
+Source location information is now included in error messages more
+consistently. Given this code:
+
+```nix
+let
+  attr = {foo = "bar";};
+  key = {};
+in
+  attr.${key}
+```
+
+Previously, Nix would show this unhelpful message when attempting to evaluate
+it:
+
+```
+error:
+       … while evaluating an attribute name
+
+         at «none»:0: (source not available)
+
+       error: value is a set while a string was expected
+```
+
+Now, the error message displays where the problematic value was found:
+
+```
+error:
+       … while evaluating an attribute name
+
+         at bad.nix:4:11:
+
+            3|   key = {};
+            4| in attr.${key}
+             |           ^
+            5|
+
+       error: value is a set while a string was expected
+```
+
+}
diff --git a/src/libexpr/eval-inline.hh b/src/libexpr/eval-inline.hh
index a988fa40ccf..c37b1d62bb1 100644
--- a/src/libexpr/eval-inline.hh
+++ b/src/libexpr/eval-inline.hh
@@ -103,8 +103,10 @@ void EvalState::forceValue(Value & v, Callable getPos)
             throw;
         }
     }
-    else if (v.isApp())
-        callFunction(*v.app.left, *v.app.right, v, noPos);
+    else if (v.isApp()) {
+        PosIdx pos = getPos();
+        callFunction(*v.app.left, *v.app.right, v, pos);
+    }
     else if (v.isBlackhole())
         error("infinite recursion encountered").atPos(getPos()).template debugThrow<EvalError>();
 }
@@ -121,9 +123,9 @@ template <typename Callable>
 [[gnu::always_inline]]
 inline void EvalState::forceAttrs(Value & v, Callable getPos, std::string_view errorCtx)
 {
-    forceValue(v, noPos);
+    PosIdx pos = getPos();
+    forceValue(v, pos);
     if (v.type() != nAttrs) {
-        PosIdx pos = getPos();
         error("value is %1% while a set was expected", showType(v)).withTrace(pos, errorCtx).debugThrow<TypeError>();
     }
 }
@@ -132,7 +134,7 @@ inline void EvalState::forceAttrs(Value & v, Callable getPos, std::string_view e
 [[gnu::always_inline]]
 inline void EvalState::forceList(Value & v, const PosIdx pos, std::string_view errorCtx)
 {
-    forceValue(v, noPos);
+    forceValue(v, pos);
     if (!v.isList()) {
         error("value is %1% while a list was expected", showType(v)).withTrace(pos, errorCtx).debugThrow<TypeError>();
     }
diff --git a/src/libexpr/eval.cc b/src/libexpr/eval.cc
index 7e68e6f9b74..8a6e07fb0c1 100644
--- a/src/libexpr/eval.cc
+++ b/src/libexpr/eval.cc
@@ -344,7 +344,7 @@ static Symbol getName(const AttrName & name, EvalState & state, Env & env)
     } else {
         Value nameValue;
         name.expr->eval(state, env, nameValue);
-        state.forceStringNoCtx(nameValue, noPos, "while evaluating an attribute name");
+        state.forceStringNoCtx(nameValue, name.expr->getPos(), "while evaluating an attribute name");
         return state.symbols.create(nameValue.string_view());
     }
 }
@@ -1514,7 +1514,7 @@ void ExprOpHasAttr::eval(EvalState & state, Env & env, Value & v)
     e->eval(state, env, vTmp);
 
     for (auto & i : attrPath) {
-        state.forceValue(*vAttrs, noPos);
+        state.forceValue(*vAttrs, getPos());
         Bindings::iterator j;
         auto name = getName(i, state, env);
         if (vAttrs->type() != nAttrs ||
@@ -1683,7 +1683,7 @@ void EvalState::callFunction(Value & fun, size_t nrArgs, Value * * args, Value &
                 if (countCalls) primOpCalls[name]++;
 
                 try {
-                    vCur.primOp->fun(*this, noPos, args, vCur);
+                    vCur.primOp->fun(*this, vCur.determinePos(noPos), args, vCur);
                 } catch (Error & e) {
                     addErrorTrace(e, pos, "while calling the '%1%' builtin", name);
                     throw;
@@ -1731,7 +1731,7 @@ void EvalState::callFunction(Value & fun, size_t nrArgs, Value * * args, Value &
                     // 1. Unify this and above code. Heavily redundant.
                     // 2. Create a fake env (arg1, arg2, etc.) and a fake expr (arg1: arg2: etc: builtins.name arg1 arg2 etc)
                     //    so the debugger allows to inspect the wrong parameters passed to the builtin.
-                    primOp->primOp->fun(*this, noPos, vArgs, vCur);
+                    primOp->primOp->fun(*this, vCur.determinePos(noPos), vArgs, vCur);
                 } catch (Error & e) {
                     addErrorTrace(e, pos, "while calling the '%1%' builtin", name);
                     throw;
@@ -1839,7 +1839,7 @@ values, or passed explicitly with '--arg' or '--argstr'. See
         }
     }
 
-    callFunction(fun, allocValue()->mkAttrs(attrs), res, noPos);
+    callFunction(fun, allocValue()->mkAttrs(attrs), res, pos);
 }
 
 
@@ -1875,7 +1875,7 @@ void ExprAssert::eval(EvalState & state, Env & env, Value & v)
 
 void ExprOpNot::eval(EvalState & state, Env & env, Value & v)
 {
-    v.mkBool(!state.evalBool(env, e, noPos, "in the argument of the not operator")); // XXX: FIXME: !
+    v.mkBool(!state.evalBool(env, e, getPos(), "in the argument of the not operator")); // XXX: FIXME: !
 }
 
 
@@ -2316,7 +2316,7 @@ BackedStringView EvalState::coerceToString(
             std::string result;
             for (auto [n, v2] : enumerate(v.listItems())) {
                 try {
-                    result += *coerceToString(noPos, *v2, context,
+                    result += *coerceToString(pos, *v2, context,
                             "while evaluating one element of the list",
                             coerceMore, copyToStore, canonicalizePath);
                 } catch (Error & e) {
@@ -2463,8 +2463,8 @@ SingleDerivedPath EvalState::coerceToSingleDerivedPath(const PosIdx pos, Value &
 
 bool EvalState::eqValues(Value & v1, Value & v2, const PosIdx pos, std::string_view errorCtx)
 {
-    forceValue(v1, noPos);
-    forceValue(v2, noPos);
+    forceValue(v1, pos);
+    forceValue(v2, pos);
 
     /* !!! Hack to support some old broken code that relies on pointer
        equality tests between sets.  (Specifically, builderDefs calls
diff --git a/src/libexpr/nixexpr.hh b/src/libexpr/nixexpr.hh
index 10099d49e9b..020286815d9 100644
--- a/src/libexpr/nixexpr.hh
+++ b/src/libexpr/nixexpr.hh
@@ -405,6 +405,7 @@ struct ExprOpNot : Expr
 {
     Expr * e;
     ExprOpNot(Expr * e) : e(e) { };
+    PosIdx getPos() const override { return e->getPos(); }
     COMMON_METHODS
 };
 
diff --git a/tests/functional/lang/eval-fail-attr-name-type.err.exp b/tests/functional/lang/eval-fail-attr-name-type.err.exp
new file mode 100644
index 00000000000..5f9a073dd81
--- /dev/null
+++ b/tests/functional/lang/eval-fail-attr-name-type.err.exp
@@ -0,0 +1,20 @@
+error:
+       … while evaluating the attribute 'puppy."${key}"'
+
+         at /pwd/lang/eval-fail-attr-name-type.nix:3:5:
+
+            2|   attrs = {
+            3|     puppy.doggy = {};
+             |     ^
+            4|   };
+
+       … while evaluating an attribute name
+
+         at /pwd/lang/eval-fail-attr-name-type.nix:7:17:
+
+            6| in
+            7|   attrs.puppy.${key}
+             |                 ^
+            8|
+
+       error: value is an integer while a string was expected
diff --git a/tests/functional/lang/eval-fail-attr-name-type.nix b/tests/functional/lang/eval-fail-attr-name-type.nix
new file mode 100644
index 00000000000..a0e76004a39
--- /dev/null
+++ b/tests/functional/lang/eval-fail-attr-name-type.nix
@@ -0,0 +1,7 @@
+let
+  attrs = {
+    puppy.doggy = {};
+  };
+  key = 1;
+in
+  attrs.puppy.${key}
diff --git a/tests/functional/lang/eval-fail-call-primop.err.exp b/tests/functional/lang/eval-fail-call-primop.err.exp
new file mode 100644
index 00000000000..19b407c4706
--- /dev/null
+++ b/tests/functional/lang/eval-fail-call-primop.err.exp
@@ -0,0 +1,12 @@
+error:
+       … while calling the 'length' builtin
+
+         at /pwd/lang/eval-fail-call-primop.nix:1:1:
+
+            1| builtins.length 1
+             | ^
+            2|
+
+       … while evaluating the first argument passed to builtins.length
+
+       error: value is an integer while a list was expected
diff --git a/tests/functional/lang/eval-fail-call-primop.nix b/tests/functional/lang/eval-fail-call-primop.nix
new file mode 100644
index 00000000000..972eb72c769
--- /dev/null
+++ b/tests/functional/lang/eval-fail-call-primop.nix
@@ -0,0 +1 @@
+builtins.length 1
diff --git a/tests/functional/lang/eval-fail-not-throws.err.exp b/tests/functional/lang/eval-fail-not-throws.err.exp
new file mode 100644
index 00000000000..b290afb0aaa
--- /dev/null
+++ b/tests/functional/lang/eval-fail-not-throws.err.exp
@@ -0,0 +1,18 @@
+error:
+       … in the argument of the not operator
+
+         at /pwd/lang/eval-fail-not-throws.nix:1:4:
+
+            1| ! (throw "uh oh!")
+             |    ^
+            2|
+
+       … while calling the 'throw' builtin
+
+         at /pwd/lang/eval-fail-not-throws.nix:1:4:
+
+            1| ! (throw "uh oh!")
+             |    ^
+            2|
+
+       error: uh oh!
diff --git a/tests/functional/lang/eval-fail-not-throws.nix b/tests/functional/lang/eval-fail-not-throws.nix
new file mode 100644
index 00000000000..a74ce4ebeea
--- /dev/null
+++ b/tests/functional/lang/eval-fail-not-throws.nix
@@ -0,0 +1 @@
+! (throw "uh oh!")
diff --git a/tests/functional/lang/eval-fail-using-set-as-attr-name.err.exp b/tests/functional/lang/eval-fail-using-set-as-attr-name.err.exp
new file mode 100644
index 00000000000..811d01b0378
--- /dev/null
+++ b/tests/functional/lang/eval-fail-using-set-as-attr-name.err.exp
@@ -0,0 +1,11 @@
+error:
+       … while evaluating an attribute name
+
+         at /pwd/lang/eval-fail-using-set-as-attr-name.nix:5:10:
+
+            4| in
+            5|   attr.${key}
+             |          ^
+            6|
+
+       error: value is a set while a string was expected
diff --git a/tests/functional/lang/eval-fail-using-set-as-attr-name.nix b/tests/functional/lang/eval-fail-using-set-as-attr-name.nix
new file mode 100644
index 00000000000..48e071a41cf
--- /dev/null
+++ b/tests/functional/lang/eval-fail-using-set-as-attr-name.nix
@@ -0,0 +1,5 @@
+let
+  attr = {foo = "bar";};
+  key = {};
+in
+  attr.${key}

From b9980b377ede0aca542b2baeeef9e4538dec20db Mon Sep 17 00:00:00 2001
From: Robert Hensing <roberth@users.noreply.github.com>
Date: Sat, 9 Dec 2023 02:36:33 +0100
Subject: [PATCH 2/2] Update rl-next/source-positions-in-errors for Nix 2.19+

---
 doc/manual/rl-next/source-positions-in-errors.md | 2 --
 1 file changed, 2 deletions(-)

diff --git a/doc/manual/rl-next/source-positions-in-errors.md b/doc/manual/rl-next/source-positions-in-errors.md
index 00f0b27e8d7..15df884ea7b 100644
--- a/doc/manual/rl-next/source-positions-in-errors.md
+++ b/doc/manual/rl-next/source-positions-in-errors.md
@@ -21,8 +21,6 @@ it:
 error:
        … while evaluating an attribute name
 
-         at «none»:0: (source not available)
-
        error: value is a set while a string was expected
 ```
</file>

<file path="modules/core/common/system/nix/overlays/patches/0001-nix-reject-flake-config.patch">
From 44a29dbd938947c244736fe22fa90ec57b074499 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=A9clairevoyant?=
 <848000+eclairevoyant@users.noreply.github.com>
Date: Wed, 14 Feb 2024 14:22:40 -0500
Subject: [PATCH 1/2] feat: reject-flake-config

---
 src/libexpr/flake/config.cc       | 5 +++++
 src/libfetchers/fetch-settings.hh | 4 ++++
 2 files changed, 9 insertions(+)

diff --git a/src/libexpr/flake/config.cc b/src/libexpr/flake/config.cc
index 3c7ed5d8a..05a29f2e0 100644
--- a/src/libexpr/flake/config.cc
+++ b/src/libexpr/flake/config.cc
@@ -51,6 +51,11 @@ void ConfigFile::apply()
         else
             assert(false);
 
+        if (nix::fetchSettings.rejectFlakeConfig) {
+            warn("ignoring untrusted flake configuration setting '%s' due to the '%s' setting.", name, "reject-flake-config");
+            continue;
+        }
+
         if (!whitelist.count(baseName) && !nix::fetchSettings.acceptFlakeConfig) {
             bool trusted = false;
             auto trustedList = readTrustedList();
diff --git a/src/libfetchers/fetch-settings.hh b/src/libfetchers/fetch-settings.hh
index d085f0d82..9e87d0725 100644
--- a/src/libfetchers/fetch-settings.hh
+++ b/src/libfetchers/fetch-settings.hh
@@ -86,6 +86,10 @@ struct FetchSettings : public Config
         "Whether to accept nix configuration from a flake without prompting.",
         {}, true, Xp::Flakes};
 
+    Setting<bool> rejectFlakeConfig{this, false, "reject-flake-config",
+        "Whether to reject nix configuration (including whitelisted settings) from a flake without prompting.",
+        {}, true, Xp::Flakes};
+
     Setting<std::string> commitLockFileSummary{
         this, "", "commit-lockfile-summary",
         R"(
-- 
2.44.0
</file>

<file path="modules/core/common/system/nix/overlays/patches/0002-zsh-completion-remote-files.patch">
diff --git a/Completion/Unix/Type/_remote_files b/Completion/Unix/Type/_remote_files
index 93e1b7f43..4d4a7abbf 100644
--- a/Completion/Unix/Type/_remote_files
+++ b/Completion/Unix/Type/_remote_files
@@ -60,10 +60,7 @@ if zstyle -T ":completion:${curcontext}:files" remote-access; then
     dirprefix=${dir}/
   fi
 
-  if [[ -z $QIPREFIX ]]
-    then rempat="${dirprefix}${PREFIX%%[^./][^/]#}\*"
-    else rempat="${dirprefix}${(q)PREFIX%%[^./][^/]#}\*"
-  fi
+  rempat="${dirprefix}${(q)PREFIX%%[^./][^/]#}\*"
 
   # remote filenames
   remfiles=(${(M)${(f)"$(
@@ -92,9 +89,9 @@ if zstyle -T ":completion:${curcontext}:files" remote-access; then
   while _tags; do
     while _next_label remote-files expl ${suf:-remote directory}; do
       [[ -n $suf ]] &&
-          compadd "$args[@]" "$expl[@]" -d remdispf -- ${(q)remdispf%[*=|]} && ret=0
+          compadd "$args[@]" "$expl[@]" -d remdispf -- ${remdispf%[*=|]} && ret=0
       compadd ${suf:+-S/} $autoremove "$args[@]" "$expl[@]" -d remdispd \
-	-- ${(q)remdispd%/} && ret=0
+	-- ${remdispd%/} && ret=0
     done
     (( ret )) || return 0
   done
</file>

<file path="modules/core/common/system/nix/overlays/patches/0002-zsh-globquote.patch">
diff --git a/Src/utils.c b/Src/utils.c
index edf5d3df7..2d1712227 100644
--- a/Src/utils.c
+++ b/Src/utils.c
@@ -6205,11 +6205,11 @@ quotestring(const char *s, int instring)
 		continue;
 	    }
 	    else if (ispecial(*u) &&
-		     ((*u != '=' && *u != '~') ||
+		     ((*u != '=' && *u != '~' && *u != '#' && *u != '^') ||
 		      u == s ||
 		      (isset(MAGICEQUALSUBST) &&
-		       (u[-1] == '=' || u[-1] == ':')) ||
+		       (u[-1] == '=' || u[-1] == ':'))
-		      (*u == '~' && isset(EXTENDEDGLOB))) &&
+		     ) &&
 		     (instring == QT_BACKSLASH ||
 		      instring == QT_SINGLE_OPTIONAL ||
 		      (isset(BANGHIST) && *u == (char)bangchar &&
</file>

<file path="modules/core/common/system/nix/overlays/patches/0003-nom-print-traces.patch">
From 738f445082d6d5c8f96701ccd1fe1136a7a47715 Mon Sep 17 00:00:00 2001
From: Daniel Sampliner <samplinerD@gmail.com>
Date: Sun, 31 Mar 2024 16:05:14 -0400
Subject: [PATCH] display trace/warning messages

Fixes issue #128.
---
 lib/NOM/Print.hs  | 15 +++++++++++++++
 lib/NOM/State.hs  |  2 ++
 lib/NOM/Update.hs | 12 ++++++++++++
 3 files changed, 29 insertions(+)

diff --git a/lib/NOM/Print.hs b/lib/NOM/Print.hs
index c48e2a7..0d1bf61 100644
--- a/lib/NOM/Print.hs
+++ b/lib/NOM/Print.hs
@@ -121,6 +121,18 @@ printSections = (upperleft <>) . Text.intercalate (toText (setSGRCode [Reset]) <
 --     (vertical <> " ")
 --     (horizontal <> markup bold " Build Planning:" :| maybeToList message <> (IntMap.elems activities <&> \activity -> unwords (activity.text : ifTimeDiffRelevant now activity.start id)))
 
+printTraces :: Seq Text -> Int -> Text
+printTraces traces maxHeight =
+  prependLines
+    ""
+    (vertical <> " ")
+    (vertical <> " ")
+    (horizontal <> markup (bold . yellow) (" " <> show (length interesting_traces) <> " Traces: ") :| (lines =<< filtered_traces))
+ where
+  interesting_traces = toList traces
+  compact_traces = sum (length . lines <$> interesting_traces) > maxHeight
+  filtered_traces = (if compact_traces then map compactError else id) interesting_traces
+
 printErrors :: Seq Text -> Int -> Text
 printErrors errors maxHeight =
   prependLines
@@ -159,6 +171,7 @@ stateToText config buildState@MkNOMV1State{..} = memo printWithSize . fmap Windo
         $ [
             -- (not (IntMap.null interestingActivities) || isJust evalMessage, printInterestingActivities evalMessage interestingActivities)
             (not (Seq.null nixErrors), const errorDisplay)
+          , (not (Seq.null nixTraces), const traceDisplay)
           , (not (Seq.null forestRoots), buildsDisplay . snd)
           ]
     maxHeight = case maybeWindow of
@@ -171,6 +184,7 @@ stateToText config buildState@MkNOMV1State{..} = memo printWithSize . fmap Windo
         (vertical <> " ")
         (printBuilds buildState hostNums maxHeight now)
     errorDisplay = printErrors nixErrors maxHeight
+    traceDisplay = printTraces nixTraces maxHeight
   -- evalMessage = case evaluationState.lastFileName of
   --   Strict.Just file_name -> Just ("Evaluated " <> show (evaluationState.count) <> " files, last one was '" <> file_name <> "'")
   --   Strict.Nothing -> Nothing
@@ -237,6 +251,7 @@ stateToText config buildState@MkNOMV1State{..} = memo printWithSize . fmap Windo
   finishMarkup
     | numFailedBuilds > 0 = markup red . ((warning <> " Exited after " <> show numFailedBuilds <> " build failures") <>)
     | not (null nixErrors) = markup red . ((warning <> " Exited with " <> show (length nixErrors) <> " errors reported by nix") <>)
+    | not (null nixTraces) = markup yellow . ((warning <> " Finished with " <> show (length nixTraces) <> " traces reported") <>)
     | otherwise = markup green . ("Finished" <>)
   printHosts :: [NonEmpty Entry]
   printHosts =
diff --git a/lib/NOM/State.hs b/lib/NOM/State.hs
index b78a11d..02b1d58 100644
--- a/lib/NOM/State.hs
+++ b/lib/NOM/State.hs
@@ -207,6 +207,7 @@ data NOMV1State = MkNOMV1State
   , touchedIds :: DerivationSet
   , activities :: IntMap ActivityStatus
   , nixErrors :: Seq Text
+  , nixTraces :: Seq Text
   , buildPlatform :: Strict.Maybe Text
   , interestingActivities :: IntMap InterestingActivity
   , evaluationState :: EvalInfo
@@ -264,6 +265,7 @@ initalStateFromBuildPlatform platform = do
       mempty
       mempty
       mempty
+      mempty
       (Strict.toStrict platform)
       mempty
       MkEvalInfo{count = 0, at = 0, lastFileName = Strict.Nothing}
diff --git a/lib/NOM/Update.hs b/lib/NOM/Update.hs
index bdf60aa..7e962e1 100644
--- a/lib/NOM/Update.hs
+++ b/lib/NOM/Update.hs
@@ -224,6 +224,18 @@ processJsonMessage = \case
           whenJust
             (snd <$> parseOneText Parser.oldStyleParser (stripped <> "\n"))
             (\old_style_parse_result -> void $ processResult old_style_parse_result)
+  Message MkMessageAction{message, level = Error}
+    | stripped <- stripANSICodes message
+    , Text.isPrefixOf "trace:" stripped ->
+        {-# SCC "pass_through_error" #-}
+        withChange do
+          traces <- gets (.nixTraces)
+          unless (any (Text.isInfixOf (Text.drop 7 stripped) . stripANSICodes) traces) do
+            modify' (gfield @"nixTraces" %~ (<> (message Seq.<| mempty)))
+            tell [Right (encodeUtf8 message)]
+          whenJust
+            (snd <$> parseOneText Parser.oldStyleParser (stripped <> "\n"))
+            (\old_style_parse_result -> void $ processResult old_style_parse_result)
   Message MkMessageAction{message} | Just suffix <- Text.stripPrefix "evaluating file '" message -> withChange do
     let file_name = Text.dropEnd 1 suffix
     now <- getNow
</file>

<file path="modules/core/common/system/nix/overlays/default.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.trivial) const;
  inherit (lib.lists) length zipListsWith;
  inherit (lib.strings) concatStringsSep escapeShellArg;

  systemNix = config.nix.package;
in {
  # Overlays are by far the most obscure and annoying feature of Nix, and if you have
  # interacted with me on a personal level before, you will find that I actively discourage
  # using them. The below section contains my personal overlays, which are used to add
  # packages to the system closure, or override existing packages. This is a last resort
  # and should be used conservatively. If possible, use override or `overrideAttrs` whenever
  # you are able to.
  nixpkgs.overlays = [
    # Some packages provide their own instances of Nix by adding `nix` to the argset
    # of a derivation. While in most cases a simple `.override` will allow you to easily
    # replace their instance of Nix, you might want to do it across the dependency tree
    # in certain cases. For example if the package you are overriding is a dependency to
    # or is called by other packages.
    (const (prev: {
      nixos-rebuild = prev.nixos-rebuild.override {
        nix = systemNix;
      };

      nix-direnv = prev.nix-direnv.override {
        nix = systemNix;
      };

      nix-index = prev.nix-index.override {
        nix = systemNix;
      };
    }))

    (const (prev: {
      lix = prev.lix.overrideAttrs (old: {
        patches = [
          ./patches/0001-nix-default-flake.patch
          ./patches/0001-nix-reject-flake-config.patch
        ];

        postPatch =
          (old.postPatch or "")
          + ''
            substituteInPlace src/libmain/shared.cc \
              --replace-fail "(Lix, like Nix)" "(Lix, Nix for lesbians)"
          '';

        postInstall =
          (old.postInstall or "")
          + ''
            ln -s $out/bin/nix $out/bin/lix
          '';
      });

      # Patch the everliving shit out of ZSH to remove some of my personal annoyances
      # such as newuser install
      zsh = prev.zsh.overrideAttrs (old: {
        patches = [
          ./patches/0002-zsh-globquote.patch

          # From:
          #  <https://github.com/fugidev/nix-config>
          ./patches/0002-zsh-completion-remote-files.patch
        ];

        configureFlags = (old.configureFlags or []) ++ ["--disable-site-fndir" "--without-tcsetpgrp"];
        postConfigure =
          (old.postConfigure or "")
          + ''
            sed -i -e '/^name=zsh\/newuser/d' config.modules
          '';
      });

      # Create an overlay for nix-output-monitor to match the inconsistent
      # and frankly ugly icons with Nerdfonts ones. they look a little larger
      # than before, but overall consistency is better in general.
      nix-output-monitor = let
        oldIcons = [
          "↑"
          "↓"
          "⏱"
          "⏵"
          "✔"
          "⏸"
          "⚠"
          "∅"
          "∑"
        ];
        newIcons = [
          "f062" # 
          "f063" # 
          "f520" # 
          "f04b" # 
          "f00c" # 
          "f04c" # 
          "f071" # 
          "f1da" # 
          "f04a0" # 󰒠
        ];
      in
        assert length oldIcons == length newIcons;
          prev.nix-output-monitor.overrideAttrs (old: {
            version = "0-unstable-2024-06-22";
            patches =
              (old.patches or [])
              ++ [
                ./patches/0003-nom-print-traces.patch
              ];

            postPatch =
              (old.postPatch or "")
              + ''
                sed -i ${escapeShellArg (
                  concatStringsSep "\n" (zipListsWith (a: b: "s/${a}/\\\\x${b}/") oldIcons newIcons)
                )} lib/NOM/Print.hs

                substituteInPlace lib/NOM/Print/Tree.hs --replace-fail '┌' '╭'
              '';
          });
    }))
  ];
}
</file>

<file path="modules/core/common/system/nix/transcend/default.nix">
# credits go to @eclairevoyant on this one
# lets us import modules from PRs that are not yet merged
# and handles disabling of the relevant module locally
# I've extracted the modules section to make this system more robust and explicit
{
  lib,
  modulesPath,
  ...
}: let
  inherit (builtins) fetchTree getAttr map;
  inherit (lib.attrsets) attrValues;

  modules = {
    # the name here is arbitrary, and is used as an identifier
    # what matters is the presence of owner, module and rev
    "nix-gc" = {
      # https://github.com/NixOS/nixpkgs/pull/260620
      owner = "nobbz";
      repo = "nixpkgs";
      rev = "10ec045f1dc82c72630c85906e1ae1d54340a7e0";
      narHash = "sha256-AV3TXXWp0AxM98wCbEa3iThUQ5AbTMC/3fZAa50lfKI=";
      module = "/services/misc/nix-gc.nix";
    };
  };

  transcendModules =
    map ({
      # repo details
      owner,
      repo,
      rev,
      narHash,
      # module path
      module,
    }: {
      disabledModules = modulesPath + module;
      importedModules =
        (fetchTree {
          type = "github";
          inherit owner repo rev narHash;
        })
        + "/nixos/modules/${module}";
    })
    (attrValues modules);
in {
  disabledModules = map (getAttr "disabledModules") transcendModules;
  imports = map (getAttr "importedModules") transcendModules;
}
</file>

<file path="modules/core/common/system/nix/builders.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.attrsets) recursiveUpdate;
  inherit (lib.lists) filter;
  # a generic builder configuration
  builder = {
    systems = ["x86_64-linux"];
    speedFactor = 4;
    maxJobs = 4;
    supportedFeatures = ["benchmark" "nixos-test"];
    sshKey = "/home/notashelf/.ssh/builder";
    protocol = "ssh-ng";
  };

  # Override generic builder config with extra configuration options
  # and resources, assuming the machine marked as such can adapt to
  # them.
  bigBuilder = recursiveUpdate builder {
    maxJobs = 16;
    speedFactor = 16;
    supportedFeatures = builder.supportedFeatures ++ ["kvm" "big-parallel"];
    systems = builder.systems ++ ["aarch64-linux" "i686-linux"];
  };

  mkBuilder = {
    builderBase ? builder,
    sshProtocol ? "ssh-ng",
    user ? "root",
    host,
    ...
  }:
    recursiveUpdate builderBase {
      hostName = host;
      sshUser = user;
      protocol = sshProtocol;
    };
in {
  nix = {
    distributedBuilds = true;
    buildMachines = filter (builder: builder.hostName != config.networking.hostName) [
      # large build machine
      (mkBuilder {
        builderBase = bigBuilder;
        user = "builder";
        host = "build.neushore.dev";
        sshProtocol = "ssh"; # ssh-ng is not supported by this device
      })
    ];
  };
}
</file>

<file path="modules/core/common/system/nix/documentation.nix">
{
  # faster rebuilding
  documentation = {
    # whether to enable the `doc` output of packages
    # generally in ${pkg}/share/ as plaintext or html
    # can shave off a few megabytes
    doc.enable = false;

    # whether to install the `info` command and the `info`
    # output of packages
    info.enable = false;

    nixos = {
      # I need this enabled for the anyrun-nixos-options plugin
      # but otherwise, it should be disabled to avoid unnecessary rebuilds.
      # Includes:
      # - man pages like configuration.nix(5) if documentation.man.enable is set.
      # - the HTML manual and the nixos-help command if documentation.doc.enable is set.
      # This actually causes the source tree of nixpkgs to be re-evaluated. See:
      # <https://mastodon.online/@nomeata/109915786344697931>
      enable = true;
      options = {
        warningsAreErrors = true;
        splitBuild = true;
      };
    };

    man = {
      # Whether to install manual pages
      # this means packages that provide a `man` output will have said output
      # included in the final closure
      enable = true;

      # Whether to generate the manual page index caches
      # if true, it becomes possible to search for a page or keyword
      # using utilities like apropos(1) and the -k option of man(1).
      generateCaches = true;

      # Whether to enable mandoc as the default man page viewer.
      mandoc.enable = false; # my default manpage viewer is Neovim, so this isn't necessary
    };
  };
}
</file>

<file path="modules/core/common/system/nix/module.nix">
{
  self,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (self) inputs;
  inherit (builtins) elem;
  inherit (lib.trivial) pipe;
  inherit (lib.types) isType;
  inherit (lib.attrsets) mapAttrsToList filterAttrs mapAttrs mapAttrs';
in {
  imports = [
    ./overlays # tree-wide overrides for packages and such
    ./transcend # module that merges trees outside central nixpkgs with our system's

    ./builders.nix # configuration for remote builders
    ./documentation.nix # nixos documentation
    ./nixpkgs.nix # global nixpkgs configuration.nix
    ./system.nix # nixos system configuration
  ];

  # Link selected flake inputs to `/etc/nix/path` for added backwards compatibility.
  # Some of them, as long as they are made compatible with flakes, can be used with
  # nix's discouraged special lookup paths (e.g. <nixpkgs>) if you really need them
  # to. Should be noted, however, that special lookup paths are discouraged and the
  # only real reason they are here is backwards compatibility, and sometimes my own
  # convenience. If you are using a flake, you should be using the flake's outputs.
  environment.etc = let
    inherit (config.nix) registry;
    commonPaths = ["home-manager" "nixpkgs" "nyxexprs"];
  in
    pipe registry [
      (filterAttrs (name: _: (elem name commonPaths)))
      (mapAttrs' (name: value: {
        name = "nix/path/${name}";
        value.source = value.flake;
      }))
    ];

  nix = let
    mappedRegistry = pipe inputs [
      (filterAttrs (_: isType "flake"))
      (mapAttrs (_: flake: {inherit flake;}))
      (flakes: flakes // {nixpkgs.flake = inputs.nixpkgs;})
    ];
  in {
    # Lix, the higher performance Nix fork.
    package = pkgs.lix;

    # Pin the registry to avoid downloading and evaluating
    # a new nixpkgs version on each command causing a re-eval.
    # This will add each flake input as a registry and make
    # nix3 commands consistent with your flake.
    registry = mappedRegistry // {default-flake = mappedRegistry.nixpkgs;};

    # This will additionally add your inputs to the system's legacy channels
    # Making legacy nix commands consistent as well
    nixPath = mapAttrsToList (key: _: "${key}=flake:${key}") config.nix.registry;

    # Run the Nix daemon on lowest possible priority so that my system
    # stays responsive during demanding tasks such as GC and builds.
    # This is especially useful while auto-gc and auto-upgrade are enabled
    # as they can be quite demanding on the CPU.
    daemonCPUSchedPolicy = "idle";
    daemonIOSchedClass = "idle";
    daemonIOSchedPriority = 7;

    # Collect garbage
    gc = {
      automatic = true;
      dates = "Sat *-*-* 03:00";
      options = "--delete-older-than 30d";
      persistent = false; # don't try to catch up on missed GC runs
    };

    # Automatically optimize nix store my removing hard links
    # do it after the gc.
    optimise = {
      automatic = true;
      dates = ["04:00"];
    };

    settings = {
      # Tell nix to use the xdg spec for base directories
      # while transitioning, any state must be carried over
      # manually, as Nix won't do it for us.
      use-xdg-base-directories = true;

      # Allow usage of registry lookups (e.g. flake:*) but
      # disallow internal flake registry by setting it to
      # to a minimal JSON file with no flakes and a version
      # identifier.
      use-registries = true;
      flake-registry = pkgs.writeText "flakes-empty.json" (builtins.toJSON {
        flakes = [];
        version = 2;
      });

      # Free up to 10GiB whenever there is less than 5GB left.
      # this setting is in bytes, so we multiply with 1024 thrice
      min-free = "${toString (5 * 1024 * 1024 * 1024)}";
      max-free = "${toString (10 * 1024 * 1024 * 1024)}";

      # Automatically optimise symlinks
      auto-optimise-store = true;

      # Allow sudo users to mark the following values as trusted
      allowed-users = ["root" "@wheel" "nix-builder"];

      # Only allow sudo users to manage the nix store
      trusted-users = ["root" "@wheel" "nix-builder"];

      # Let the system decide the number of max jobs
      # based on available system specs. Usually this is
      # the same as the number of cores your CPU has.
      max-jobs = "auto";

      # Always build inside sandboxed environments
      sandbox = true;
      sandbox-fallback = false;

      # Supported system features
      system-features = ["nixos-test" "kvm" "recursive-nix" "big-parallel"];

      # Extra architectures supported by my builders. Default list is
      # picked from systems emulated by binfmt.
      extra-platforms = config.boot.binfmt.emulatedSystems;

      # Continue building derivations even if one fails
      keep-going = true;

      # Fallback to local builds after remote builders are unavailable.
      # Setting this too low on a slow network may cause remote builders
      # to be discarded before a connection can be established.
      connect-timeout = 5;

      # If we haven't received data for >= 20s, retry the download
      stalled-download-timeout = 20;

      # Show more logs when a build fails and decides to display
      # a bunch of lines. `nix log` would normally provide more
      # information, but this may save us some time and keystrokes.
      log-lines = 30;

      # Extra features of Nix that are considered unstable
      # and experimental. By default we should always include
      # `flakes` and `nix-command`, while others are usually
      # optional.
      extra-experimental-features = [
        "flakes" # flakes
        "nix-command" # experimental nix commands
        "recursive-nix" # let nix invoke itself
        "ca-derivations" # content addressed nix
        "auto-allocate-uids" # allow nix to automatically pick UIDs, rather than creating nixbld* user accounts
        "cgroups" # allow nix to execute builds inside cgroups
        "repl-flake" # allow passing installables to nix repl
        "no-url-literals" # disallow deprecated url-literals, i.e., URLs without quotation
        "dynamic-derivations" # allow "text hashing" derivation outputs, so we can build .drv files.

        # Those don't actually exist on Lix so they have to be disabled
        # configurable-impure-env" # allow impure environments
        # "git-hashing" # allow store objects which are hashed via Git's hashing algorithm
        # "verified-fetches" # enable verification of git commit signatures for fetchGit
      ];

      # Ensures that the result of Nix expressions is fully determined by
      # explicitly declared inputs, and not influenced by external state.
      # In other words, fully stateless evaluation by Nix at all times.
      pure-eval = false; # pain

      # Don't warn me that my git tree is dirty, I know.
      warn-dirty = false;

      # Maximum number of parallel TCP connections
      # used to fetch imports and binary caches.
      # 0 means no limit, default is 25.
      http-connections = 35; # lower values fare better on slow connections

      # Whether to accept nix configuration from a flake
      # without displaying a Y/N prompt. For those obtuse
      # enough to keep this true, I wish the best of luck.
      # tl;dr: this is a security vulnerability.
      accept-flake-config = false;

      # Whether to execute builds inside cgroups. cgroups are
      # "a Linux kernel feature that limits, accounts for, and
      # isolates the resource usage (CPU, memory, disk I/O, etc.)
      # of a collection of processes."
      # See:
      # <https://en.wikipedia.org/wiki/Cgroups>
      use-cgroups = pkgs.stdenv.isLinux; # only supported on Linux

      # for direnv GC roots
      keep-derivations = true;
      keep-outputs = true;

      # Use binary cache, this is not Gentoo
      # external builders can also pick up those substituters
      builders-use-substitutes = true;

      # Substituters to pull from. While sigs are disabled, we must
      # make sure the substituters listed here are trusted.
      substituters = [
        "https://cache.nixos.org" # funny binary cache
        "https://cache.privatevoid.net" # for nix-super
        "https://nix-community.cachix.org" # nix-community cache
        "https://hyprland.cachix.org" # hyprland
        "https://nixpkgs-unfree.cachix.org" # unfree-package cache
        "https://anyrun.cachix.org" # anyrun program launcher
        "https://nyx.cachix.org" # cached stuff from my flake outputs
        "https://neovim-flake.cachix.org" # a cache for my neovim flake
        "https://cache.garnix.io" # garnix binary cache, hosts prismlauncher
        "https://cache.notashelf.dev" # my own binary cache, served over https
        "https://ags.cachix.org" # ags
      ];

      trusted-public-keys = [
        "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
        "cache.privatevoid.net:SErQ8bvNWANeAvtsOESUwVYr2VJynfuc9JRwlzTTkVg="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc="
        "nixpkgs-unfree.cachix.org-1:hqvoInulhbV4nJ9yJOEr+4wxhDV4xq2d1DK7S6Nj6rs="
        "anyrun.cachix.org-1:pqBobmOjI7nKlsUMV25u9QHa9btJK65/C8vnO3p346s="
        "notashelf.cachix.org-1:VTTBFNQWbfyLuRzgm2I7AWSDJdqAa11ytLXHBhrprZk="
        "neovim-flake.cachix.org-1:iyQ6lHFhnB5UkVpxhQqLJbneWBTzM8LBYOFPLNH4qZw="
        "nyx.cachix.org-1:xH6G0MO9PrpeGe7mHBtj1WbNzmnXr7jId2mCiq6hipE="
        "cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g="
        "cache.notashelf.dev-1:DhlmJBtURj+XS3j4F8SFFukT8dYgSjtFcd3egH8rE6U="
        "ags.cachix.org-1:naAvMrz0CuYqeyGNyLgE010iUiuf/qx6kYrUv3NwAJ8="
      ];
    };
  };

  # By default nix-gc makes no effort to respect battery life by avoiding
  # GC runs on battery and fully commits a few cores to collecting garbage.
  # This will drain the battery faster than you can say "Nix, what the hell?"
  # and contribute heavily to you wanting to build a desktop (do that anyway.)
  # For those curious (such as myself) desktops are always seen as "AC powered"
  # so the service will not fail to fire if you are on a desktop system.
  systemd.services.nix-gc = {
    unitConfig.ConditionACPower = true;
  };
}
</file>

<file path="modules/core/common/system/nix/nixpkgs.nix">
{
  # Global nixpkgs configuration. This is ignored if nixpkgs.pkgs is set
  # which is a case that should be avoided. Everything that is set to configure
  # nixpkgs must go here.
  nixpkgs = {
    # Configuration reference:
    # <https://nixos.org/manual/nixpkgs/unstable/#chap-packageconfig>
    config = {
      # Allow broken packages to be built. Setting this to false means packages
      # will refuse to evaluate sometimes, but only if they have been marked as
      # broken for a specific reason. At that point we can either try to solve
      # the breakage, or get rid of the package entirely.
      allowBroken = false;
      allowUnsupportedSystem = true;

      # Really a pain in the ass to deal with when disabled. True means
      # we are able to build unfree packages without explicitly allowing
      # each unfree package.
      allowUnfree = true;

      # Default to none, add more as necessary. This is usually where
      # electron packages go when they reach EOL.
      permittedInsecurePackages = [];

      # Nixpkgs sets internal package aliases to ease migration from other
      # distributions easier, or for convenience's sake. Even though the manual
      # and the description for this option recommends this to be true, I prefer
      # explicit naming conventions, i.e., no aliases.
      allowAliases = false;

      # Enable parallel building by default. This, in theory, should speed up building
      # derivations, especially rust ones. However setting this to true causes a mass rebuild
      # of the *entire* system closure, so it must be handled with proper care.
      enableParallelBuildingByDefault = false;

      # List of derivation warnings to display while rebuilding.
      #  See: <https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/generic/check-meta.nix>
      # NOTE: "maintainerless" can be added to emit warnings
      # about packages without maintainers but it seems to me
      # like there are more packages without maintainers than
      # with maintainers, so it's disabled for the time being.
      showDerivationWarnings = [];
    };
  };
}
</file>

<file path="modules/core/common/system/nix/system.nix">
{self, ...}: {
  system = {
    # Automatic/Unattended upgrades in general are one of the dumbest things you can set up
    # on virtually any Linux distribution. While NixOS would logically mitigate some of its
    # side effects, you are still risking a system that breaks without you knowing. If the
    # bootloader also breaks during the upgrade, you may not be able to roll back at all.
    # tl;dr: upgrade manually, review changelogs.
    autoUpgrade.enable = false;

    # Globally declare the configurationRevision from shortRev if the git tree is clean,
    # or from dirtyShortRev if it is dirty. This is useful for tracking the current
    # configuration revision in the system profile.
    configurationRevision = self.shortRev or self.dirtyShortRev;
  };

  # Preserve the flake that built the active system revision in /etc
  # for easier rollbacks with nixos-enter in case we contain changes
  # that are not yet staged.
  environment.etc."nyx".source = self;
}
</file>

<file path="modules/core/common/system/os/boot/loaders/grub/default.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkDefault mkIf;

  cfg = config.modules.system;
in {
  config = mkIf (cfg.boot.loader == "grub") {
    boot.loader = {
      grub = {
        enable = mkDefault true;
        useOSProber = true;
        efiSupport = true;
        enableCryptodisk = mkDefault false;
        device = cfg.boot.grub.device;
        theme = null;
        backgroundColor = null;
        splashImage = null;
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/boot/loaders/none/default.nix">
{
  lib,
  config,
  ...
}: let
  inherit (lib) mkIf mkForce;

  cfg = config.modules.system;
in {
  config = mkIf (cfg.boot.loader == "none") {
    boot.loader = {
      grub.enable = mkForce false;
      systemd-boot.enable = mkForce false;
    };
  };
}
</file>

<file path="modules/core/common/system/os/boot/loaders/systemd-boot/default.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkDefault mkIf optionalAttrs;

  cfg = config.modules.system;
in {
  config = mkIf (cfg.boot.loader == "systemd-boot") {
    boot.loader = {
      systemd-boot =
        {
          enable = mkDefault true;
          configurationLimit = null; # unlimited
          consoleMode = mkDefault "max"; # the default is "keep", can be overriden per host if need be

          # Fix a security hole in place for backwards compatibility. See desc in
          # nixpkgs/nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix
          editor = false;
        }
        // optionalAttrs cfg.boot.memtest.enable {
          # https://matrix.to/#/!sgkZKRutwatDMkYBHU:nixos.org/$iKnJUt1L_7E5bq7hStDPwv6_2HTBvNjwfcWxlKlF-k8?via=nixos.org&via=matrix.org&via=nixos.dev
          extraFiles."efi/memtest86plus/memtest.efi" = "${cfg.boot.memtest.package}/memtest.efi";
          extraEntries."memtest86plus.conf" = ''
            title MemTest86+
            efi   /efi/memtest86plus/memtest.efi
          '';
        };
    };
  };
}
</file>

<file path="modules/core/common/system/os/boot/loaders/default.nix">
_: {
  imports = [
    ./grub
    ./systemd-boot
  ];
}
</file>

<file path="modules/core/common/system/os/boot/generic.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkDefault mkForce mkOverride mkMerge mkIf optionals;

  sys = config.modules.system;
in {
  config.boot = {
    # kernel console loglevel
    consoleLogLevel = 3;

    # always use the latest kernel instead of the old-ass lts one
    kernelPackages = mkOverride 500 sys.boot.kernel;

    # additional packages supplying kernel modules
    extraModulePackages = mkDefault sys.boot.extraModulePackages;

    # configuration to be appended to the generated modprobe.conf
    extraModprobeConfig = mkDefault sys.boot.extraModprobeConfig;

    # whether to enable support for Linux MD RAID arrays
    # I don't know why this defaults to true, how many people use RAID anyway?
    # also on > 23.11, this will throw a warning if neither MAILADDR nor PROGRAM are set
    swraid.enable = mkDefault false;

    # settings shared between bootloaders
    # they are set unless system.boot.loader != none
    loader = {
      # if set to 0, space needs to be held to get the boot menu to appear
      timeout = mkForce 2;

      # whether to copy the necessary boot files into /boot
      # so that /nix/store is not needed by the boot loader.
      generationsDir.copyKernels = true;

      # allow installation to modify EFI variables
      efi.canTouchEfiVariables = true;
    };

    # instructions on how /tmp should be handled
    # if your system is low on ram, you should avoid tmpfs to prevent hangups while compiling
    tmp = {
      # /tmp on tmpfs, lets it live on your ram
      # it defaults to FALSE, which means you will use disk space instead of ram
      # enable tmpfs tmp on anything except servers and builders
      useTmpfs = sys.boot.tmpOnTmpfs;

      # If not using tmpfs, which is naturally purged on reboot, we must clean
      # /tmp ourselves. /tmp should be volatile storage!
      cleanOnBoot = mkDefault (!config.boot.tmp.useTmpfs);

      # The size of the tmpfs, in percentage form
      # this defaults to 50% of your ram, which is a good default
      # but should be tweaked based on your systems capabilities
      tmpfsSize = mkDefault "75%";
    };

    # initrd and kernel tweaks
    # if you intend to copy paste this section, read what each parameter or module does before doing so
    # or perish, I am not responsible for your broken system. if you copy paste this section without reading
    # and later realise your mistake, you are a moron.
    initrd = mkMerge [
      (mkIf sys.boot.initrd.enableTweaks {
        # Verbosity of the initrd
        # disabling verbosity removes only the mandatory messages generated by the NixOS
        verbose = false;

        systemd = {
          # enable systemd in initrd
          # extremely experimental, just the way I like it on a production machine
          enable = true;

          # strip copied binaries and libraries from inframs
          # saves 30~ mb space according to the nix derivation
          strip = true;

          # packages that will be added to the PATH in initrd
          # this is useful for debugging if the host provides
          # emergency access
          storePaths = with pkgs; [util-linux pciutils];
          extraBin = {
            fdisk = "${pkgs.util-linux}/bin/fdisk";
            lsblk = "${pkgs.util-linux}/bin/lsblk";
            lspci = "${pkgs.pciutils}/bin/lspci";
          };
        };

        # List of modules that are always loaded by the initrd
        kernelModules = [
          "ahci"
          "nvme"
          "xhci_pci"
          "btrfs"
          "sd_mod"
          "dm_mod"
          "tpm"
        ];

        # the set of kernel modules in the initial ramdisk used during the boot process
        availableKernelModules = [
          "usbhid"
          "sd_mod"
          "sr_mod"
          "dm_mod"
          "uas"
          "usb_storage"
          "rtsx_usb_sdmmc"
          "rtsx_pci_sdmmc" # Realtek PCI-Express SD/MMC Card Interface driver
          "ata_piix"
          "virtio_pci"
          "virtio_scsi"
          "ehci_pci"
        ];
      })

      (mkIf sys.boot.initrd.optimizeCompressor
        {
          compressor = "zstd";
          compressorArgs = ["-19" "-T0"];
        })
    ];

    # https://www.kernel.org/doc/html/latest/admin-guide/kernel-parameters.html
    kernelParams =
      (optionals sys.boot.enableKernelTweaks [
        # https://en.wikipedia.org/wiki/Kernel_page-table_isolation
        # auto means kernel will automatically decide the pti state
        "pti=auto" # on | off

        # CPU idle behaviour
        #  poll: slightly improve performance at cost of a hotter system (not recommended)
        #  halt: halt is forced to be used for CPU idle
        #  nomwait: Disable mwait for CPU C-states
        "idle=nomwait" # poll | halt | nomwait

        # enable IOMMU for devices used in passthrough
        # and provide better host performance in virtualization
        "iommu=pt"

        # disable usb autosuspend
        "usbcore.autosuspend=-1"

        # disables resume and restores original swap space
        "noresume"

        # allows systemd to set and save the backlight state
        "acpi_backlight=native" # none | vendor | video | native

        # prevent the kernel from blanking plymouth out of the fb
        "fbcon=nodefer"

        # disable the cursor in vt to get a black screen during intermissions
        "vt.global_cursor_default=0"

        # disable displaying of the built-in Linux logo
        "logo.nologo"
      ])
      ++ (optionals sys.boot.silentBoot [
        # tell the kernel to not be verbose
        "quiet"

        # kernel log message level
        "loglevel=3" # 1: sustem is unusable | 3: error condition | 7: very verbose

        # udev log message level
        "udev.log_level=3"

        # lower the udev log level to show only errors or worse
        "rd.udev.log_level=3"

        # disable systemd status messages
        # rd prefix means systemd-udev will be used instead of initrd
        "systemd.show_status=auto"
        "rd.systemd.show_status=auto"
      ]);
  };
}
</file>

<file path="modules/core/common/system/os/boot/module.nix">
{
  imports = [
    ./loaders # per-bootloader configurations
    ./secure-boot.nix # secure boot module
    ./generic.nix # generic configuration, such as kernel and tmpfs setup
    ./plymouth.nix # plymouth boot splash
  ];
}
</file>

<file path="modules/core/common/system/os/boot/plymouth.nix">
{
  self',
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (pkgs) plymouth;
  inherit (lib) mkIf;

  cfg = config.modules.system.boot.plymouth;
in {
  config = mkIf cfg.enable {
    # configure plymouth theme
    # <https://github.com/adi1090x/plymouth-themes>
    boot.plymouth = let
      pack = cfg.pack;
      theme = cfg.theme;
    in
      {
        enable = true;
      }
      // lib.optionalAttrs cfg.withThemes {
        themePackages = [(self'.packages.plymouth-themes.override {inherit pack theme;})];

        inherit theme;
      };

    # make plymouth work with sleep
    powerManagement = {
      powerDownCommands = ''
        ${plymouth} --show-splash
      '';
      resumeCommands = ''
        ${plymouth} --quit
      '';
    };
  };
}
</file>

<file path="modules/core/common/system/os/boot/secure-boot.nix">
{
  config,
  pkgs,
  lib,
  inputs,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system.boot;
in {
  imports = [
    inputs.lanzaboote.nixosModules.lanzaboote
  ];

  config = mkIf sys.secureBoot {
    environment.systemPackages = [
      # For debugging and troubleshooting Secure Boot.
      pkgs.sbctl
    ];

    # Lanzaboote currently replaces the systemd-boot module.
    # This setting is usually set to true in configuration.nix
    # generated at installation time. So we force it to false
    # for now.
    boot.loader.systemd-boot.enable = lib.mkForce false;

    boot = {
      bootspec.enable = true;
      lanzaboote = {
        enable = true;
        pkiBundle = "/etc/secureboot";
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/display/wayland/wms/hyprland/default.nix">
{
  inputs',
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  sys = config.modules.system;
  env = config.modules.usrEnv;

  hyprlandPkg = env.desktops.hyprland.package;
in {
  # disables Nixpkgs Hyprland module to avoid conflicts
  disabledModules = ["programs/hyprland.nix"];

  config = mkIf (sys.video.enable && (env.desktop == "Hyprland" && env.isWayland)) {
    services.displayManager.sessionPackages = [hyprlandPkg];

    xdg.portal = {
      enable = true;
      configPackages = [hyprlandPkg];
      extraPortals = [
        (inputs'.xdg-portal-hyprland.packages.xdg-desktop-portal-hyprland.override {
          hyprland = hyprlandPkg;
        })
      ];
    };
  };
}
</file>

<file path="modules/core/common/system/os/display/wayland/wms/default.nix">
{
  imports = [
    ./hyprland
  ];
}
</file>

<file path="modules/core/common/system/os/display/wayland/default.nix">
{
  imports = [
    ./wms

    ./environment.nix
    ./xdg-portals.nix
    ./services.nix
    ./xwayland.nix
  ];
}
</file>

<file path="modules/core/common/system/os/display/wayland/environment.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  env = config.modules.usrEnv;
in {
  config = mkIf (sys.video.enable && env.isWayland) {
    environment.etc."greetd/environments".text = ''
      ${lib.optionalString (env.desktop == "Hyprland") "Hyprland"}
      zsh
    '';

    environment = {
      variables = {
        _JAVA_AWT_WM_NONEREPARENTING = "1";
        NIXOS_OZONE_WL = "1";
        GDK_BACKEND = "wayland,x11";
        ANKI_WAYLAND = "1";
        MOZ_ENABLE_WAYLAND = "1";
        XDG_SESSION_TYPE = "wayland";
        SDL_VIDEODRIVER = "wayland";
        CLUTTER_BACKEND = "wayland";
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/display/wayland/services.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf getExe;

  cfg = config.modules.system.video;
  env = config.modules.usrEnv;
in {
  config = mkIf (cfg.enable && env.isWayland) {
    systemd.services = {
      seatd = {
        enable = true;
        description = "Seat management daemon";
        script = "${getExe pkgs.seatd} -g wheel";
        serviceConfig = {
          Type = "simple";
          Restart = "always";
          RestartSec = "1";
        };
        wantedBy = ["multi-user.target"];
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/display/wayland/xdg-portals.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf mkForce;
  inherit (config) modules;

  sys = modules.system;
  env = modules.usrEnv;
in {
  config = mkIf sys.video.enable {
    xdg.portal = {
      enable = true;

      extraPortals = [
        pkgs.xdg-desktop-portal-gtk
      ];

      config = {
        common = let
          portal =
            if env.desktop == "Hyprland"
            then "hyprland"
            else if env.desktop == "sway"
            then "wlr"
            else "gtk"; # FIXME: does this actually implement what we need?
        in {
          default = ["gtk"];

          # for flameshot to work
          # https://github.com/flameshot-org/flameshot/issues/3363#issuecomment-1753771427
          "org.freedesktop.impl.portal.Screencast" = ["${portal}"];
          "org.freedesktop.impl.portal.Screenshot" = ["${portal}"];
        };
      };

      # xdg-desktop-wlr (this section) is no longer needed, xdg-desktop-portal-hyprland
      # will (and should) override this one
      # however in case I run a different compositor on a Wayland host, it can be enabled
      wlr = {
        enable = mkForce (env.isWayland && env.desktop != "Hyprland");
        settings = {
          screencast = {
            max_fps = 30;
            chooser_type = "simple";
            chooser_cmd = "${pkgs.slurp}/bin/slurp -f %o -or";
          };
        };
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/display/wayland/xwayland.nix">
{programs.xwayland.enable = true;}
</file>

<file path="modules/core/common/system/os/display/xorg/default.nix">
{
  imports = [
    ./environment.nix
    ./xdg-portals.nix
    ./xserver.nix
  ];
}
</file>

<file path="modules/core/common/system/os/display/xorg/environment.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  sys = config.modules.system;
  env = config.modules.usrEnv;
in {
  config = mkIf (sys.video.enable && !env.isWayland) {
    environment.etc."greetd/environments".text = ''
      ${lib.optionalString (env.desktop == "i3") "i3"}
      ${lib.optionalString (env.desktop == "awesome") "awesome"}
      zsh
    '';
  };
}
</file>

<file path="modules/core/common/system/os/display/xorg/xdg-portals.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  sys = config.modules.system;
in {
  config = mkIf sys.video.enable {
    xdg.portal = {
      enable = true;

      extraPortals = [
        pkgs.xdg-desktop-portal-gtk
      ];
    };
  };
}
</file>

<file path="modules/core/common/system/os/display/xorg/xserver.nix">
{pkgs, ...}: {
  services.xserver.excludePackages = [
    pkgs.xterm
  ];
}
</file>

<file path="modules/core/common/system/os/display/module.nix">
{
  imports = [
    ./wayland
    ./xorg
  ];
}
</file>

<file path="modules/core/common/system/os/environment/aliases.nix">
{
  pkgs,
  lib,
  ...
}: {
  environment.shellAliases = let
    nr = "${pkgs.nixos-rebuild}/bin/nixos-rebuild";
  in {
    # nix aliases
    rebuild = "nix-store --verify; pushd ~dotfiles ; ${nr} switch --flake .#$1 --use-remote-sudo && notify-send \"Done\" ; popd";
    deploy = "${nr} switch --flake .#$1 --target-host $1 --use-remote-sudo -Lv";

    # things I do to keep my home directory clean
    wget = "wget --hsts-file='\${XDG_DATA_HOME}/wget-hsts'";

    # init a LICENSE file with my go-to gpl3 license
    "gpl" = "${lib.getExe pkgs.curl} https://www.gnu.org/licenses/gpl-3.0.txt -o LICENSE";
  };
}
</file>

<file path="modules/core/common/system/os/environment/etc.nix">
{
  # https://github.com/NixOS/nixpkgs/issues/72394#issuecomment-549110501
  # the service is enabled by default, but this is not set. so by default, you will seee the error
  # why?
  environment.etc."mdadm.conf".text = ''
    MAILADDR root
  '';
}
</file>

<file path="modules/core/common/system/os/environment/locale.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkDefault;
in {
  services.xserver.xkb = {
    layout = "tr";
    variant = "";
  };

  i18n = let
    defaultLocale = "en_US.UTF-8";
    tr = "tr_TR.UTF-8";
  in {
    inherit defaultLocale;

    extraLocaleSettings = {
      LANG = defaultLocale;
      LC_COLLATE = defaultLocale;
      LC_CTYPE = defaultLocale;
      LC_MESSAGES = defaultLocale;

      LC_ADDRESS = tr;
      LC_IDENTIFICATION = tr;
      LC_MEASUREMENT = tr;
      LC_MONETARY = tr;
      LC_NAME = tr;
      LC_NUMERIC = tr;
      LC_PAPER = tr;
      LC_TELEPHONE = tr;
      LC_TIME = tr;
    };

    supportedLocales = mkDefault [
      "en_US.UTF-8/UTF-8"
      "tr_TR.UTF-8/UTF-8"
    ];

    # IME configuration
    inputMethod = {
      enable = true;
      type = "fcitx5";
      fcitx5.addons = with pkgs; [
        fcitx5-gtk
        fcitx5-lua
        libsForQt5.fcitx5-qt

        # themes
        fcitx5-material-color
      ];
    };
  };
}
</file>

<file path="modules/core/common/system/os/environment/misc.nix">
{pkgs, ...}: {
  environment = {
    # Disable the stub ELF loader added in 24.05 that serves no purpose other than
    # to throw a warning when you try to run a program that requires dynamic loading.
    # Disable this since I'm already aware of the implications of NixOS on dynamic
    # loading, this is exclusively a fallback for morons.
    stub-ld.enable = false;

    # Enable system-wide wordlist. Some Pandoc filters and other programs
    # depend on wordlist available in system path, and shells do not work.
    # I don't like this, but it's a necessary evil.
    wordlist = {
      enable = true;
      lists.WORDLIST = ["${pkgs.scowl}/share/dict/words.txt"];
    };
  };
}
</file>

<file path="modules/core/common/system/os/environment/module.nix">
{
  imports = [
    ./aliases.nix
    ./etc.nix
    ./locale.nix
    ./misc.nix
    ./packages.nix
    ./paths.nix
    ./variables.nix
  ];
}
</file>

<file path="modules/core/common/system/os/environment/packages.nix">
{
  pkgs,
  lib,
  ...
}: {
  environment = {
    # NixOS ships a bunch of packages by default under environment.defaultPackages
    # and while those do not add much to the system closure, but for a little
    # added extra security and as an attempt to reduce my system closure size, I
    # remove the default packages from my system.
    # Defaults:
    #  - perl # No thank you (why is this here?)
    #  - rsync # Already in systemPackages
    #  - strace # Never needed it
    defaultPackages = lib.mkForce [];

    # packages that will be shared across all users and all systems
    # this should generally include tools used for debugging
    # or system administration
    systemPackages = with pkgs; [
      curl
      wget
      rsync
      lshw
      pciutils
      dnsutils
    ];
  };
}
</file>

<file path="modules/core/common/system/os/environment/paths.nix">
{
  # enable completions for system packages
  # and other stuff
  environment.pathsToLink = [
    "/share/zsh" # zsh completions
    "/share/bash-completion" # bash completions
    "/share/nix-direnv" # direnv completions
  ];
}
</file>

<file path="modules/core/common/system/os/environment/variables.nix">
{lib, ...}: let
  inherit (lib.strings) concatStringsSep;
  pagerArgs = [
    "--RAW-CONTROL-CHARS" # Only allow colors.
    "--wheel-lines=5"
    "--LONG-PROMPT"
    "--no-vbell"
    " --wordwrap" # Wrap lines at spaces.
  ];
in {
  # Variables that I want to set globally on all systems
  environment.variables = {
    SSH_AUTH_SOCK = "/run/user/\${UID}/keyring/ssh";

    # editors
    EDITOR = "nvim";
    VISUAL = "nvim";
    SUDO_EDITOR = "nvim";

    # pager stuff
    MANPAGER = "nvim -c 'set ft=man bt=nowrite noswapfile nobk shada=\\\"NONE\\\" ro noma' +Man! -o -";
    SYSTEMD_PAGERSECURE = "true";
    PAGER = "less -FR";
    LESS = concatStringsSep " " pagerArgs;
    SYSTEMD_LESS = concatStringsSep " " (pagerArgs
      ++ [
        "--quit-if-one-screen"
        "--chop-long-lines"
        "--no-init" # Keep content after quit.
      ]);
  };
}
</file>

<file path="modules/core/common/system/os/fs/module.nix">
{
  config,
  lib,
  ...
}: let
  inherit (builtins) elem;
  inherit (lib.modules) mkIf mkDefault;

  sys = config.modules.system;
  inherit (sys) fs;
in {
  config = {
    # Add enabled filesystems to the kernel module list
    # by adding them to supportedFilesystems in `boot` and `boot.initrd`.
    # The former is only required of you plan to use systemd support
    # in stage one.
    boot = {
      supportedFilesystems = fs.enabledFilesystems;
      initrd = {
        supportedFilesystems = fs.enabledFilesystems;
      };
    };

    # If lvm is enabled, then tell it to issue discard. This is
    # good for SSDs and has almost no downsides on HDDs, so
    # it's a good idea to enable it unconditionally.
    environment.etc."lvm/lvm.conf".text = mkIf config.services.lvm.enable ''
      devices {
        issue_discards = 1
      }
    '';

    services = {
      # btrfs-scrub systemd service for periodically scrubbing listed
      # filesystems, which defaults to `/`. The service will be enabled
      # by default if btrfs support is advertised by the host.
      btrfs.autoScrub = mkIf (elem "btrfs" fs.enabledFilesystems) {
        inherit (fs.btrfs.scrub) enable interval fileSystems;
      };

      # I don't use lvm, can be disabled
      lvm.enable = mkDefault false;

      # Discard blocks that are not in use by the filesystem, should be
      # generally good for SSDs. This service is enabled by default, but
      # I am yet to test the performance impact on a system with no SSDs.
      fstrim = {
        # We may enable this unconditionally across all systems because it's performance
        # impact is negligible on systems without a SSD - which means it's a no-op with
        # almost no downsides aside from the service firing once per week.
        enable = true;

        # The timer interval passed to the systemd service. The default is monthly
        # but we prefer trimming weekly as the system receives a lot of writes.
        interval = "weekly";
      };
    };

    # Tweak fstrim service to run only when on AC power
    # and to be nice to other processes. This is a generally
    # a good idea for any service that runs periodically to
    # save power and avoid locking down the system in an
    # unexpected manner, e.g., while working on something else.
    systemd.services.fstrim = {
      unitConfig.ConditionACPower = true;

      serviceConfig = {
        Nice = 19; # lowest priority, be nice to other processes
        IOSchedulingClass = "idle";
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/misc/console.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) attrValues mkDefault;
in {
  console = let
    variant = "v18n";
  in {
    enable = mkDefault true;
    earlySetup = true;
    keyMap = "trq";

    font = "ter-powerline-${variant}";
    packages = attrValues {inherit (pkgs) terminus_font powerline-fonts;};
  };

  # FIXME: kmscon, in my testing, is working as advertised and a performance difference
  # is observable. However, enabling kmscon seems to *completely* ignore silent boot
  # parameters. Not sure if this is a potential conflict with earlySetup (probably not)
  # or kmscon not respecting the kernel parameters (more likely). Either way, I will
  # revisit this in the future.
  services.kmscon = {
    enable = false;
    hwRender = true;
    fonts = [
      {
        name = "Source Code Pro";
        package = pkgs.source-code-pro;
      }
    ];

    extraOptions = "--term xterm-256color";
    extraConfig = ''
      font-size=14
      xkb-layout=${config.console.layout}
    '';
  };
}
</file>

<file path="modules/core/common/system/os/misc/crash.nix">
{
  systemd = {
    # TODO: those tend to include sensitie information, maybe we want to disable this?
    # it could be an override in the security module
    tmpfiles.rules = [
      # Enables storing of the kernel log (including stack trace) into pstore upon a panic or crash.
      "w /sys/module/kernel/parameters/crash_kexec_post_notifiers - - - - Y"
      # Enables storing of the kernel log upon a normal shutdown (shutdown, reboot, halt).
      "w /sys/module/printk/parameters/always_kmsg_dump - - - - N"
    ];
  };
}
</file>

<file path="modules/core/common/system/os/misc/journald.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  dev = config.modules.device;
in {
  # https://wiki.archlinux.org/title/Systemd/Journal#Persistent_journals
  # limit systemd journal size
  # journals get big really fasti and on desktops they are not audited often
  # on servers, however, they are important for both security and stability
  # thus, persisting them as is remains a good idea
  services.journald.extraConfig = mkIf (dev.type != "server") ''
    SystemMaxUse=100M
    RuntimeMaxUse=50M
    SystemMaxFileSize=50M
  '';
}
</file>

<file path="modules/core/common/system/os/misc/module.nix">
{
  imports = [
    ./crash.nix
    ./journald.nix
    ./console.nix
    ./xdg-portals.nix
  ];
}
</file>

<file path="modules/core/common/system/os/misc/xdg-portals.nix">
{
  config,
  lib,
  ...
}: let
  sys = config.modules.system;
  inherit (lib) mkIf;
in {
  config = mkIf sys.video.enable {
    xdg.portal.config = {
      common = {
        "org.freedesktop.impl.portal.Secret" = [
          "gnome-keyring"
        ];
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/firewall/nftables/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf mkRuleset;

  sys = config.modules.system;
  cfg = config.networking.nftables;

  check-results =
    pkgs.runCommand "check-nft-ruleset" {
      nativeBuildInputs = [pkgs.nftables];
      ruleset = pkgs.writeText "nft-ruleset" cfg.ruleset;
    } ''
      mkdir -p $out

      # Validate nftables ruleset
      nft -c -f $ruleset 2>&1 > $out/message \
        && echo false > $out/assertion \
        || echo true > $out/assertion
    '';
in {
  imports = [./rules.nix];
  config = mkIf sys.networking.nftables.enable {
    networking.nftables = {
      enable = true;

      # flush ruleset on each reload
      flushRuleset = true;

      # nftables.tables is semi-verbatim configuration
      # that is inserted **before** nftables.ruleset
      # as per the nftables module.
      tables = {
        "fail2ban" = {
          name = "fail2ban-nftables";
          family = "ip";
          content = ''
            # <https://wiki.gbe0.com/en/linux/firewalling-and-filtering/nftables/fail2ban>
            chain input {
              type filter hook input priority 100;
            }
          '';
        };
      };

      # Our ruleset, built with our local ruleset builder from lib/network/firewall.nix
      # I prefer using this to the nftables.tables.* and verbatim nftables.ruleset = ""
      # kinds of configs, as it allows me to programmatically approach to my ruleset
      # instead of structuring it inside a multiline string. nftables.rules, which is
      # located in ./rules.nix, is easily parsable and modifiable with the help of Nix.
      ruleset = mkRuleset cfg.rules;
    };

    assertions = [
      {
        assertion = import "${check-results}/assertion";
        message = ''
          Bad config:
          ${builtins.readFile "${check-results}/message"}
        '';
      }
    ];

    # Pin IFD used in nftables assertion as a system dependency.
    # Ideally this should use either system.checks or extraDependencies
    # however, the former doesn't include the check in the system closure
    # so it is preferable.
    system.checks = [check-results];
  };
}
</file>

<file path="modules/core/common/system/os/networking/firewall/nftables/rules.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) entryBefore entryBetween entryAfter entryAnywhere;
in {
  networking.nftables.rules = {
    inet = {
      filter = {
        input = {
          # Allow connections from loopback
          loopback = entryAnywhere {
            field = "iifname";
            value = "lo";
            policy = "accept";
          };

          established-locally = entryAfter ["loopback"] {
            protocol = "ct";
            field = "state";
            value = ["established" "related"];
            policy = "accept";
          };

          drop-invalid = entryAfter ["established-locally"] {
            protocol = "ct";
            field = "state";
            value = ["invalid"];
            policy = "drop";
          };

          basic-icmp6 = entryAfter ["drop-invalid"] {
            protocol = "ip6 nexthdr icmpv6 icmpv6";
            field = "type";
            value = [
              "destination-unreachable"
              "packet-too-big"
              "time-exceeded"
              "parameter-problem"
              "nd-router-advert"
              "nd-neighbor-solicit"
              "nd-neighbor-advert"
              #"mld-listener-query" "nd-router-solicit" # for routers
            ];
            policy = "accept";
          };

          basic-icmp = entryAfter ["loopback" "established-locally"] {
            protocol = "ip protocol icmp icmp";
            field = "type";
            value = [
              "destination-unreachable"
              "router-advertisement"
              "time-exceeded"
              "parameter-problem"
            ];
            policy = "accept";
          };

          ping6 = entryBefore ["basic-icmp6"] {
            protocol = "ip6 nexthdr icmpv6 icmpv6";
            field = "type";
            value = "echo-request";
            policy = "accept";
          };

          ping = entryBefore ["basic-icmp"] {
            protocol = "ip protocol icmp icmp";
            field = "type";
            value = "echo-request";
            policy = "accept";
          };

          ssh = entryBetween ["basic-icmp6" "basic-icmp" "ping6" "ping"] ["default"] {
            protocol = "tcp";
            field = "dport";
            value = config.services.openssh.ports;
            policy = "accept";
          };

          # Stop portscanning me.
          malicious = entryBefore ["default"] {
            protocol = "ip saddr";
            value = ["194.169.175.0/24"];
            policy = "drop";
          };

          default = entryAfter ["loopback" "established-locally" "basic-icmp6" "basic-icmp" "ping6" "ping"] {
            policy = lib.mkDefault "drop";
          };
        };

        # accept all outgoing traffic
        output = {
          default = entryAnywhere {
            policy = "accept";
          };
        };

        # let nftables forward traffic
        # we decide whether the host can forward traffic
        # via sysctl settings elsewhere
        forward = {
          default = entryAnywhere {
            policy = "accept";
          };
        };
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/firewall/default.nix">
{
  pkgs,
  lib,
  config,
  ...
}: let
  inherit (lib) mkForce;
  dev = config.modules.device;
  cfg = config.networking.nftables;
in {
  imports = [
    ./nftables

    ./fail2ban.nix
    ./tarpit.nix
  ];

  config = {
    # enable opensnitch firewall
    # inactive until opensnitch UI is opened
    # since the UI cannot be opened on servers, we
    # disable it if dev.type is server
    services.opensnitch.enable = dev.type != "server";

    networking.firewall = {
      enable = !cfg.enable;
      package =
        if cfg.enable
        then pkgs.iptables-nftables-compat
        else pkgs.iptables;
      allowedTCPPorts = [443 8080];
      allowedUDPPorts = [];
      allowPing = dev.type == "server";
      logReversePathDrops = true;
      logRefusedConnections = false; # avoid log spam
      # Leaks IPv6 route table entries due to kernel bug. This leads to degraded
      # IPv6 performance in some situations.
      # checkReversePath = config.boot.kernelPackages.kernelAtLeast "5.16";
      checkReversePath = mkForce false; # Don't filter DHCP packets, according to nixops-libvirtd
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/firewall/fail2ban.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf mkMerge;
  inherit (lib.strings) concatStringsSep;

  sys = config.modules.system;
in {
  # fail2ban firewall jail
  services.fail2ban = {
    enable = true;
    extraPackages = with pkgs; [nftables ipset]; # make nftables accessible to fail2ban service

    ignoreIP = [
      "127.0.0.0/8" # localhost
      "10.0.0.0/8" # wireguard
      "100.64.0.0/16" # tailscale
      "192.168.0.0/16" # local network
    ];

    banaction = "nftables-multiport";
    banaction-allports = lib.mkDefault "nftables-allport";

    maxretry = 7;
    bantime = "10m";
    bantime-increment = {
      enable = true;
      rndtime = "12m";
      overalljails = true;
      multipliers = "4 8 16 32 64 128 256 512 1024 2048";
      maxtime = "5000h"; # get banned for 5000 hours idiot
    };

    daemonSettings = {
      Definition = {
        loglevel = "INFO";
        logtarget = "/var/log/fail2ban/fail2ban.log";
        socket = "/run/fail2ban/fail2ban.sock";
        pidfile = "/run/fail2ban/fail2ban.pid";
        dbfile = "/var/lib/fail2ban/fail2ban.sqlite3";
        dbpurageage = "1d";
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/firewall/tarpit.nix">
# jebait agressive port scanners by wasting their time with connection that'll never make it in
# this *does* have performance implications, however, so be careful which hosts you enable it for
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.networking.tarpit;
in {
  config = mkIf cfg.enable {
    services.endlessh-go = {
      enable = true;
      port = 22;
      openFirewall = true;

      extraOptions = [
        "-alsologtostderr"
        "-geoip_supplier max-mind-db"
        "-max_mind_db ${pkgs.clash-geoip}/etc/clash/Country.mmdb"
      ];

      prometheus = {
        enable = true;
        port = 9105;
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/tailscale/autoconnect.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf mkBefore;
  inherit (config.services) tailscale;

  sys = config.modules.system;
  cfg = sys.networking.tailscale;
in {
  config = mkIf cfg.enable {
    systemd.services = {
      tailscaled.serviceConfig.Environment = mkBefore [
        # lets not send our logs to log.tailscale.io
        # unless I get to know what they do with the logs
        "TS_NO_LOGS_NO_SUPPORT=true"
        # most hosts will be using the local nftables with the chain-built
        # firewall rules. tell tailscale that we are using nftables
        "TS_DEBUG_FIREWALL_MODE=nftables"
      ];

      # oneshot tailscale authentication service
      # TODO: this implies tailscale has been authenticated before with our own login server
      # ideally we should have a way to authenticate tailscale with our own login server in
      # this service, likely through an option in the system module
      tailscale-autoconnect = {
        description = "Automatic connection to Tailscale";

        # make sure tailscale is running before trying to connect to tailscale
        after = ["network-pre.target" "tailscale.service"];
        wants = ["network-pre.target" "tailscale.service"];
        wantedBy = ["multi-user.target"];

        # set this service as a oneshot job
        serviceConfig.Type = "oneshot";

        # have the job run this shell script
        script = ''
          # wait for tailscaled to settle
          sleep 2

          # check if we are already authenticated to Tailscale
          status="$(${tailscale.package}/bin/tailscale status -json | ${pkgs.jq}/bin/jq -r .BackendState)"

          # if so, then do nothing
          if [ $status = "Running" ]; then
            exit 0
          fi

          # otherwise authenticate with tailscale
          ${tailscale.package}/bin/tailscale up ${toString tailscale.extraUpFlags}
        '';
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/tailscale/default.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf mkDefault;
  inherit (config.services) tailscale;

  sys = config.modules.system;
  cfg = sys.networking.tailscale;
in {
  imports = [./autoconnect.nix];
  config = mkIf cfg.enable {
    # Allow all system users to use the `tailscale` command
    # by adding the package used by the tailscale service
    # to their PATH.
    environment.systemPackages = [tailscale.package];

    networking.firewall = {
      # Always allow traffic from the designated tailscale interface
      trustedInterfaces = ["${tailscale.interfaceName}"];
      checkReversePath = "loose";

      # Allow tailscale over UDP
      allowedUDPPorts = [tailscale.port];
    };

    boot.kernel.sysctl = {
      # Enable IP forwarding
      # required for Wireguard & Tailscale/Headscale subnet feature
      # Technically, not all hosts do need to be able to IP forward but this could potentially
      # come in handy when I need to turn a host into an exit node.
      # See:
      #  <https://tailscale.com/kb/1019/subnets/?tab=linux#step-1-install-the-tailscale-client>
      "net.ipv4.ip_forward" = true;
      "net.ipv6.conf.all.forwarding" = true;
    };

    users = {
      groups.tailscaled = {};
      users.tailscaled = {
        group = "tailscaled";
        isSystemUser = true;
      };
    };

    # Enable Tailscale, the inter-machine VPN service
    # with our Headscale coordination server.
    services.tailscale = {
      enable = true;
      permitCertUid = "root";
      useRoutingFeatures = mkDefault "both";
      # TODO: these flags still need to be specified with `tailscale up`
      # for some reason
      extraUpFlags = cfg.flags.final;
    };

    systemd = {
      # Ignore the default Tailscale interface for network.wait-online
      # this should generally mean faster boot, and the interface will
      # be "activated" once the auto-connect service is triggered.
      network.wait-online.ignoredInterfaces = ["${tailscale.interfaceName}"];

      # Wait until network-online and systemd-resolved are up
      # before starting tailscaled.
      services.tailscaled = {
        after = ["network-online.target" "systemd-resolved.service"];
        wants = ["network-online.target" "systemd-resolved.service"];
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/blocker.nix">
{config, ...}: let
  dev = config.modules.device;
in {
  # this should block *most* junk sites
  networking = {
    stevenblack = {
      enable = dev.type != "server"; # don't touch hosts file on a server
      block = [
        "fakenews"
        "gambling"
        "porn"
        #"social" # blocks stuff like reddit, which I occasionally visit
      ];
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/module.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce mkDefault;
in {
  imports = [
    ./firewall
    ./tailscale

    ./blocker.nix
    ./network-manager.nix
    ./optimize.nix
    ./resolved.nix
    ./ssh.nix
    ./tcpcrypt.nix
    ./wireless.nix
  ];

  # network tools that are helpful and nice to have
  boot.kernelModules = ["af_packet"];
  environment.systemPackages = with pkgs; [
    mtr
    tcpdump
    traceroute
  ];

  networking = {
    # generate a unique hostname by hashing the hostname
    # with md5 and taking the first 8 characters of the hash
    # this is especially helpful while using zfs but still
    # ensures that there will be a unique hostId even when
    # we are not using zfs
    hostId = builtins.substring 0 8 (builtins.hashString "md5" config.networking.hostName);

    # global dhcp has been deprecated upstream
    # use the new networkd service instead of the legacy
    # "script-based" network setups. Host may contain individual
    # dhcp interfaces or systemd-networkd configurations in host
    # specific directories
    useDHCP = mkForce false;
    useNetworkd = mkForce true;

    # interfaces are assigned names that contain topology information (e.g. wlp3s0)
    # and thus should be consistent across reboots
    # this already defaults to true, we set it in case it changes upstream
    usePredictableInterfaceNames = mkDefault true;

    # dns
    nameservers = [
      # cloudflare, yuck
      # shares data
      "1.1.1.1"
      "1.0.0.1"
      "2606:4700:4700::1111"
      "2606:4700:4700::1001"

      # quad9, said to be the best
      # shares *less* data
      "9.9.9.9"
      "149.112.112.112"
      "2620:fe::fe"
      "2620:fe::9"
    ];

    # search paths used when resolving domain names
    # this can allow us to find hosts on private networks
    # e.g. wireguard, tailscale and headscale
    search = [
      "notashelf.dev" # referss to the server itself
      "notashelf.notashelf.dev" # headscale network
    ];
  };

  # enable wireless database, it helps with finding the right channels
  hardware.wirelessRegulatoryDatabase = true;

  # allow for the system to boot without waiting for the network interfaces are online
  # speeds up boot times
  systemd = let
    # TODO: allow for the hosts to define those interfaces
    ethernetDevices = [
      "wlp1s0f0u8" # wifi dongle
    ];
  in {
    # according to 23.11 release notes, wait-online target has long been fixed
    # spoiler: no it's not.
    network.wait-online.enable = false;
    services =
      {
        NetworkManager-wait-online.enable = false;

        # disable networkd and resolved from being restarted on configuration changes
        # lets me avoid a short network outage when I change the configuration
        # also means that I **must** reboot to make sure my network changes are
        # are properly propagated
        systemd-networkd.stopIfChanged = false;
        systemd-resolved.stopIfChanged = false;
      }
      // lib.concatMapAttrs (_: v: v) (lib.genAttrs ethernetDevices (device: {
        # Assign an IP address when the device is plugged in rather than on startup. Needed to prevent
        # blocking the boot sequence when the device is unavailable, as it is hotpluggable.
        "network-addresses-${device}".wantedBy = lib.mkForce ["sys-subsystem-net-devices-${device}.device"];
      }));
  };
}
</file>

<file path="modules/core/common/system/os/networking/network-manager.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf mkForce;

  dev = config.modules.device;
  sys = config.modules.system;

  inherit (sys.networking) wireless;
in {
  # we use networkmanager manage network devices locally
  environment.systemPackages = with pkgs; [networkmanagerapplet];
  networking = {
    networkmanager = {
      enable = true;
      plugins = mkForce []; # disable all plugins, we don't need them
      dns = "systemd-resolved"; # use systemd-resolved as dns backend
      unmanaged = [
        "interface-name:tailscale*"
        "interface-name:br-*"
        "interface-name:rndis*"
        "interface-name:docker*"
        "interface-name:virbr*"
        "interface-name:vboxnet*"
        "interface-name:waydroid*"
        "type:bridge"
      ];

      wifi = {
        inherit (wireless) backend; # this can be iwd or wpa_supplicant, use wpa_supp. until iwd support is stable
        macAddress = "random"; # use a random mac address on every boot
        powersave = true; # enable wifi powersaving
        scanRandMacAddress = true; # MAC address randomization of a Wi-Fi device during scanning
      };

      ethernet.macAddress = mkIf (dev.type != "server") "random"; # causes server to be unreachable over SSH
    };

    # enable IPV6 support
    enableIPv6 = true;
  };
}
</file>

<file path="modules/core/common/system/os/networking/optimize.nix">
{
  config,
  lib,
  ...
}: let
  sys = config.modules.system.networking;
  inherit (lib) mkIf;
in {
  config = mkIf sys.optimizeTcp {
    boot = {
      kernelModules = ["tls" "tcp_bbr"];
      kernel.sysctl = {
        # TCP hardening
        # Prevent bogus ICMP errors from filling up logs.
        "net.ipv4.icmp_ignore_bogus_error_responses" = 1;
        # Reverse path filtering causes the kernel to do source validation of
        # packets received from all interfaces. This can mitigate IP spoofing.
        "net.ipv4.conf.default.rp_filter" = 1;
        "net.ipv4.conf.all.rp_filter" = 1;
        # Do not accept IP source route packets (we're not a router)
        "net.ipv4.conf.all.accept_source_route" = 0;
        "net.ipv6.conf.all.accept_source_route" = 0;
        # Don't send ICMP redirects (again, we're on a router)
        "net.ipv4.conf.all.send_redirects" = 0;
        "net.ipv4.conf.default.send_redirects" = 0;
        # Refuse ICMP redirects (MITM mitigations)
        "net.ipv4.conf.all.accept_redirects" = 0;
        "net.ipv4.conf.default.accept_redirects" = 0;
        "net.ipv4.conf.all.secure_redirects" = 0;
        "net.ipv4.conf.default.secure_redirects" = 0;
        "net.ipv6.conf.all.accept_redirects" = 0;
        "net.ipv6.conf.default.accept_redirects" = 0;
        # Protects against SYN flood attacks
        "net.ipv4.tcp_syncookies" = 1;
        # Incomplete protection again TIME-WAIT assassination
        "net.ipv4.tcp_rfc1337" = 1;
        # And other stuff
        "net.ipv4.conf.all.log_martians" = true;
        "net.ipv4.conf.default.log_martians" = true;
        "net.ipv4.icmp_echo_ignore_broadcasts" = true;
        "net.ipv6.conf.default.accept_ra" = 0;
        "net.ipv6.conf.all.accept_ra" = 0;
        "net.ipv4.tcp_timestamps" = 0;

        # TCP optimization
        # TCP Fast Open is a TCP extension that reduces network latency by packing
        # data in the sender’s initial TCP SYN. Setting 3 = enable TCP Fast Open for
        # both incoming and outgoing connections:
        "net.ipv4.tcp_fastopen" = 3;
        # Bufferbloat mitigations + slight improvement in throughput & latency
        "net.ipv4.tcp_congestion_control" = "bbr";
        "net.core.default_qdisc" = "cake";

        # Other stuff that I am too lazy to document
        "net.core.optmem_max" = 65536;
        "net.core.rmem_default" = 1048576;
        "net.core.rmem_max" = 16777216;
        "net.core.somaxconn" = 8192;
        "net.core.wmem_default" = 1048576;
        "net.core.wmem_max" = 16777216;
        "net.ipv4.ip_local_port_range" = "16384 65535";
        "net.ipv4.tcp_max_syn_backlog" = 8192;
        "net.ipv4.tcp_max_tw_buckets" = 2000000;
        "net.ipv4.tcp_mtu_probing" = 1;
        "net.ipv4.tcp_rmem" = "4096 1048576 2097152";
        "net.ipv4.tcp_slow_start_after_idle" = 0;
        "net.ipv4.tcp_tw_reuse" = 1;
        "net.ipv4.tcp_wmem" = "4096 65536 16777216";
        "net.ipv4.udp_rmem_min" = 8192;
        "net.ipv4.udp_wmem_min" = 8192;
        "net.netfilter.nf_conntrack_generic_timeout" = 60;
        "net.netfilter.nf_conntrack_max" = 1048576;
        "net.netfilter.nf_conntrack_tcp_timeout_established" = 600;
        "net.netfilter.nf_conntrack_tcp_timeout_time_wait" = 1;
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/resolved.nix">
{
  services = {
    resolved = {
      # enable systemd DNS resolver daemon
      enable = true;

      # this is necessary to get tailscale picking up your headscale instance
      # and allows you to ping connected hosts by hostname
      domains = ["~."];

      # DNSSEC provides to DNS clients (resolvers) origin authentication of DNS data, authenticated denial of existence
      # and data integrity but not availability or confidentiality.
      # this is considered EXPERIMENTAL and UNSTABLE according to upstream
      # PLEASE SEE <https://github.com/systemd/systemd/issues/25676#issuecomment-1634810897>
      # before you decide to set this. I have it set to false as the issue
      # does not inspire confidence in systemd's ability to manage this
      dnssec = "false";

      # additional configuration to be appeneded to systemd-resolved configuration
      extraConfig = ''
        # <https://wiki.archlinux.org/title/Systemd-resolved#DNS_over_TLS>
        # apparently upstream (systemd) recommends this to be false
        # `allow-downgrade` is vulnerable to downgrade attacks
        DNSOverTLS=yes # or allow-downgrade
      '';

      # ideally our fallbackDns should be something more widely available
      # but I do not want my last resort to sell my data to every company available
      # NOTE: DNS fallback is not a recovery DNS
      # See <https://github.com/systemd/systemd/issues/5771#issuecomment-296673115>
      fallbackDns = ["9.9.9.9"];
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/ssh.nix">
{
  keys,
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkDefault mkForce mkMerge;
  inherit (lib.strings) concatStringsSep;
  inherit (lib.attrsets) mapAttrs;
  inherit (lib.lists) elemAt;
  inherit (lib) mkPubkeyFor;
in {
  services = {
    openssh = {
      # enable openssh
      enable = true;
      openFirewall = true; # the ssh port(s) should be automatically passed to the firewall's allowedTCPports
      ports = [30]; # the port(s) openssh daemon should listen on
      startWhenNeeded = true; # automatically start the ssh daemon when it's required
      settings = {
        # no root login
        PermitRootLogin = mkForce "no";

        # no password auth
        # force publickey authentication only
        PasswordAuthentication = false;
        AuthenticationMethods = "publickey";
        PubkeyAuthentication = "yes";
        ChallengeResponseAuthentication = "no";
        UsePAM = false;

        # remove sockets as they get stale
        # this will unbind gnupg sockets if they exists
        StreamLocalBindUnlink = "yes";

        KbdInteractiveAuthentication = mkDefault false;
        UseDns = false; # no
        X11Forwarding = false; # ew xorg

        # key exchange algorithms recommended by `nixpkgs#ssh-audit`
        KexAlgorithms = [
          "curve25519-sha256"
          "curve25519-sha256@libssh.org"
          "diffie-hellman-group16-sha512"
          "diffie-hellman-group18-sha512"
          "diffie-hellman-group-exchange-sha256"
          "sntrup761x25519-sha512@openssh.com"
        ];

        # message authentication code algorithms recommended by `nixpkgs#ssh-audit`
        Macs = [
          "hmac-sha2-512-etm@openssh.com"
          "hmac-sha2-256-etm@openssh.com"
          "umac-128-etm@openssh.com"
        ];

        # kick out inactive sessions
        ClientAliveCountMax = 5;
        ClientAliveInterval = 60;

        # max auth attempts
        MaxAuthTries = 3;
      };

      hostKeys = mkDefault [
        {
          bits = 4096;
          path = "/etc/ssh/ssh_host_rsa_key";
          type = "rsa";
        }
        {
          bits = 4096;
          path = "/etc/ssh/ssh_host_ed25519_key";
          type = "ed25519";
        }
      ];
    };
    fail2ban.jails = {
      # sshd jail
      sshd = {
        settings = {
          enabled = true;
          filter = "sshd[mode=aggressive]";
          port = concatStringsSep "," (map toString config.services.openssh.ports);
        };
      };
    };
  };

  # Add my SSH keys to initrd for remote unlocking. Backdoor?!
  boot.initrd.network.ssh.authorizedKeys = [keys.notashelf];
  programs.ssh = let
    # a list of hosts that are connected over Tailscale
    # it would be better to construct this list dynamically
    # but we hardcode it because we cannot check if a host is
    # authenticated - that needs manual intervention
    hosts = ["helios" "enyo" "hermes"];

    # generate the ssh config for the hosts
    mkHostConfig = hostname: ''
      # Configuration for ${hostname}
      Host ${hostname}
       HostName ${hostname}
      Port ${toString (elemAt config.services.openssh.ports 0)}
       StrictHostKeyChecking=accept-new
    '';

    hostConfig = concatStringsSep "\n" (map mkHostConfig hosts);
  in {
    startAgent = !config.modules.system.yubikeySupport.enable;
    extraConfig = ''
      ${hostConfig}
    '';

    # Vendor hardcoded GitHub/GitLab/Sourcehut/Openwrt keys to avoid MitM (man in the middle) attacks.
    knownHosts = mkMerge [
      (mkPubkeyFor "github.com" "ssh-rsa" "AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=")
      (mkPubkeyFor "github.com" "ecdsa-sha2-nistp256" "AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=")
      (mkPubkeyFor "github.com" "ssh-ed25519" "AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl")
      (mkPubkeyFor "gitlab.com" "ssh-rsa" "AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9")
      (mkPubkeyFor "gitlab.com" "ecdsa-sha2-nistp256" "AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=")
      (mkPubkeyFor "gitlab.com" "ssh-ed25519" "AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf")
      (mkPubkeyFor "git.openwrt.org" "ssh-rsa" "AAAAB3NzaC1yc2EAAAABIwAAAQEAtnM1w/A1uRZqZuYHhw4ASOe9mr3J2qKAa9K9zR8jG+B+NQVtYlIBSkmCFyP6OuydCmoRZ5Gs1I9pl/hEyi7ieEi6g9yww/JbV322cw04Tli46enIYDG1bnSxF6Qt4aXqvPhcObI3z/1Z3XR6weS1fiLDzLvzq+w1gNM77xExD4Mh27LTPkdwOWjkGa5joNx3EQUC3rzwxUqE4fhOT2Ii93h8FSAUXY9C32jkJj9x7vfaJEsCacs6YTiUKKxyzEB+TvFZdUtGtoRThX7UVICUCD2th/r3UeSp8ItWPg/KqzSg2pRfWeYszlVoD59JZ6YCupSjjRqZddghQc94Hev7oQ==")
      (mkPubkeyFor "git.openwrt.org" "ecdsa-sha2-nistp256" "AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBASOHg+tghASiZF0ClxYb/HEhUcqnD43I86YatRZSUsXNWLEd8yOzjOJExDHHaKtmZtQ/jfEMmoYbCjdEDOYm5g=")
      (mkPubkeyFor "git.openwrt.org" "ssh-ed25519" "AAAAC3NzaC1lZDI1NTE5AAAAIJZFpKQMaLM8bG9lAPfEpTBExrzuiTKMni7PgktmDbJe")
      (mkPubkeyFor "git.sr.ht" "ssh-rsa" "AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ+l/lvYmaeOAPeijHL8d4794Am0MOvmXPyvHTtrqvgmvCJB8pen/qkQX2S1fgl9VkMGSNxbp7NF7HmKgs5ajTGV9mB5A5zq+161lcp5+f1qmn3Dp1MWKp/AzejWXKW+dwPBd3kkudDBA1fa3uK6g1gK5nLw3qcuv/V4emX9zv3P2ZNlq9XRvBxGY2KzaCyCXVkL48RVTTJJnYbVdRuq8/jQkDRA8lHvGvKI+jqnljmZi2aIrK9OGT2gkCtfyTw2GvNDV6aZ0bEza7nDLU/I+xmByAOO79R1Uk4EYCvSc1WXDZqhiuO2sZRmVxa0pQSBDn1DB3rpvqPYW+UvKB3SOz")
      (mkPubkeyFor "git.sr.ht" "ecdsa-sha2-nistp256" "AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCj6y+cJlqK3BHZRLZuM+KP2zGPrh4H66DacfliU1E2DHAd1GGwF4g1jwu3L8gOZUTIvUptqWTkmglpYhFp4Iy4=")
      (mkPubkeyFor "git.sr.ht" "ssh-ed25519" "AAAAC3NzaC1lZDI1NTE5AAAAIMZvRd4EtM7R+IHVMWmDkVU3VLQTSwQDSAvW0t2Tkj60")
    ];
  };
}
</file>

<file path="modules/core/common/system/os/networking/tcpcrypt.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  dev = config.modules.device;
in {
  # get rid of the tcpcrypt module provided by nixpkgs
  # it is unmaintained and I cannot be arsed to PR a fix
  disabledModules = ["services/networking/tcpcrypt.nix"];
  config = mkIf (dev.type != "server") {
    # FIXME: the upstream tcpcrypd service is unmaintained and poorly designed
    # networking.tcpcrypt.enable = true;

    # create a system user for the tcpcrypt service
    # this is the user we will use the systemd service as
    users = {
      groups.tcpcryptd = {};
      users.tcpcryptd = {
        description = "tcpcrypt daemon user";
        group = "tcpcryptd";
        uid = config.ids.uids.tcpcryptd; # nixpkgs already defines a hardcoded uid, use it
      };
    };

    # enable opportunistic TCP encryption
    # this is NOT a pancea, however, if the receiver supports encryption and the attacker is passive
    # privacy will be more plausible (but not guaranteed, unlike what the option docs suggest)
    # NOTE: the systemd service below is rewritten to be an alternative to networking.tcpcrypt.enable
    # it lacks hardening and SHOULD NOT BE USED until further notice.
    systemd.services.tcpcrypt = let
      # borrowed from fedora's tcpcrypt rpm spec
      # <https://src.fedoraproject.org/rpms/tcpcrypt/blob/rawhide/f/tcpcryptd-firewall>
      tcpcryptd-firewall = pkgs.writeShellApplication {
        name = "tcpcryptd-firewall";
        runtimeInputs = [pkgs.iptables];
        text = ''

          # use iptables manually
          if [ "$1" = "start" ]; then
              iptables -t raw -N nixos-tcpcrypt
              iptables -t raw -A nixos-tcpcrypt -p tcp -m mark --mark 0x0/0x10 -j NFQUEUE --queue-num 666
              iptables -t raw -I PREROUTING -j nixos-tcpcrypt

              iptables -t mangle -N nixos-tcpcrypt
              iptables -t mangle -A nixos-tcpcrypt -p tcp -m mark --mark 0x0/0x10 -j NFQUEUE --queue-num 666
              iptables -t mangle -I POSTROUTING -j nixos-tcpcrypt
          fi

          if [ "$1" = "stop" ]; then
              iptables -t mangle -D POSTROUTING -j nixos-tcpcrypt || true
              iptables -t raw -D PREROUTING -j nixos-tcpcrypt || true

              iptables -t raw -F nixos-tcpcrypt || true
              iptables -t raw -X nixos-tcpcrypt || true

              iptables -t mangle -F nixos-tcpcrypt || true
              iptables -t mangle -X nixos-tcpcrypt || true
          fi
        '';
      };
    in {
      description = "tcpcrypt, opportunistic tcp encryption";
      wantedBy = ["multi-user.target"];
      after = ["network.target" "syslog.target"];

      serviceConfig = {
        Restart = "on-failure";
        RestartSec = 10;

        RuntimeDirectory = "tcpcryptd";
        RuntimeDirectoryMode = "0750";
      };

      preStart = ''
        echo -en "Starting tcpcryptd\n"
        ${pkgs.procps}/bin/sysctl -n net.ipv4.tcp_ecn > /run/tcpcryptd/pre-tcpcrypt-ecn-state
        ${pkgs.procps}/bin/sysctl -w net.ipv4.tcp_ecn=0

        # start the firewall
        ${tcpcryptd-firewall}/bin/tcpcryptd-firewall start
      '';

      # -f disables network test
      script = "${pkgs.tcpcrypt}/bin/tcpcryptd -v -f -x 0x10 ";

      postStop = ''
        echo -en "Stopped tcpcrypd, restoring tcp_enc state\n"
        if [ -f /run/tcpcryptd/pre-tcpcrypt-ecn-state ]; then
          ${pkgs.procps}/bin/sysctl -w net.ipv4.tcp_ecn=$(cat /run/tcpcryptd/pre-tcpcrypt-ecn-state)
        fi

        # stop the firewall
        ${tcpcryptd-firewall}/bin/tcpcryptd-firewall stop
      '';
    };
  };
}
</file>

<file path="modules/core/common/system/os/networking/wireless.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (lib.lists) optionals;
  inherit (lib.attrsets) optionalAttrs;
  inherit (lib.meta) getExe;

  sys = config.modules.system;

  inherit (sys.networking) wireless;
in {
  config = {
    environment.systemPackages = optionals (wireless.backend == "iwd") pkgs.iwgtk;
    networking.wireless =
      {
        enable = wireless.backend == "wpa_supplicant";

        # configure iwd
        iwd = {
          enable = wireless.backend == "iwd";
          settings = {
            #Rank.BandModifier5Ghz = 2.0;
            Scan.DisablePeriodicScan = false;
            AutoConnect = true;
            Settings.AutoConnect = true;
            IPv6.Enabled = true;

            General = {
              AddressRandomization = "network";
              AddressRandomizationRange = "full";
              EnableNetworkConfiguration = true;
              RoamRetryInterval = 15;
            };

            Network = {
              EnableIPv6 = true;
              RoutePriorityOffset = 300;
              # NameResolvingService = "resolvconf";
            };
          };
        };
      }
      // optionalAttrs wireless.allowImperative {
        # Imperative Configuration
        userControlled.enable = true;
        allowAuxiliaryImperativeNetworks = true; # patches wpa_supplicant

        extraConfig = ''
          update_config=1
        '';
      };

    # launch indicator as a daemon on login if wireless backend
    # is defined as iwd
    systemd = {
      # make sure we ensure the existence of wpa_supplicant config
      # before we run the wpa_supplicant service
      services.wpa_supplicant.preStart = ''
        touch /etc/wpa_supplicant.conf
      '';

      user.services.iwgtk = mkIf (wireless.backend == "iwd") {
        serviceConfig.ExecStart = "${getExe pkgs.iwgtk} -i";
        wantedBy = ["graphical-session.target"];
        partOf = ["graphical-session.target"];
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/programs/bash.nix">
{
  pkgs,
  lib,
  ...
}: {
  programs.bash = {
    # When entering the interactive shell, set the history file to
    # the config directory to avoid cluttering the $HOME directory
    interactiveShellInit = ''
      export HISTFILE="$XDG_STATE_HOME"/bash_history
    '';

    # Initialize Starship prompt in impromptu (pun intended) bash
    # sessions initialized by, e.g., running a command without
    # entering a shell. This will also cause Starship to be the
    # default shell for the root user.
    promptInit = ''
      eval "$(${lib.getExe pkgs.starship} init bash)"
    '';
  };
}
</file>

<file path="modules/core/common/system/os/programs/direnv.nix">
{pkgs, ...}: {
  programs.direnv = {
    enable = true;

    # Shut up, direnv. SHUT. UP.
    silent = true;

    # Faster, persistent implementation of use_nix and use_flake in
    # direnv based shells.
    nix-direnv.enable = true;

    # Enable loading direnv in nix-shell, nix shell or nix develop
    loadInNixShell = true;

    # From upstream:
    # * `direnv_layour_dir` is called once for every {.direnvrc,.envrc} sourced
    # * The indicator for a different direnv file being sourced is a different $PWD value
    # This means we can hash $PWD to get a fully unique cache path for any given environment
    # See: <https://github.com/direnv/direnv/wiki/Customizing-cache-location>
    direnvrcExtra = ''
      : ''${XDG_CACHE_HOME:=$HOME/.cache}
      declare -A direnv_layout_dirs

      direnv_layout_dir() {
        echo "''${direnv_layout_dirs[$PWD]:=$(
          echo -n "$XDG_CACHE_HOME"/direnv/layouts/
          echo -n "$PWD" | ${pkgs.perl}/bin/shasum | cut -d ' ' -f 1
        )}"
      }
    '';
  };
}
</file>

<file path="modules/core/common/system/os/programs/git.nix">
{pkgs, ...}: {
  programs.git = {
    enable = true;
    package = pkgs.gitMinimal;
  };
}
</file>

<file path="modules/core/common/system/os/programs/module.nix">
{
  imports = [
    ./bash.nix
    ./direnv.nix
    ./git.nix
    ./nano.nix
    ./zsh.nix
  ];

  programs = {
    # less pager
    less.enable = true;

    # run commands without installing the programs
    comma.enable = true;
  };
}
</file>

<file path="modules/core/common/system/os/programs/nano.nix">
{pkgs, ...}: {
  programs.nano = {
    # enabled by default anyway, we can keep it in case my neovim config breaks
    enable = true;
    nanorc = ''
      include ${pkgs.nanorc}/share/*.nanorc # extended syntax highlighting

      # Options
      # https://github.com/davidhcefx/Modern-Nano-Keybindings
      set tabsize 4
      set tabstospaces
      set linenumbers
      set numbercolor yellow,normal
      set indicator                         # side-bar for indicating cur position
      set smarthome                         # `Home` jumps to line start first
      set afterends                         # `Ctrl+Right` move to word ends instead of word starts
      set wordchars "_"                     # recognize '_' as part of a word
      set zap                               # delete selected text as a whole
      set historylog                        # remember search history
      set multibuffer                       # read files into multibuffer instead of insert
      set mouse                             # enable mouse support
      bind M-R  redo            main
      bind ^C   copy            main
      bind ^X   cut             main
      bind ^V   paste           main
      bind ^K   zap             main
      bind ^H   chopwordleft    all
      bind ^Q   exit            all
      bind ^Z   suspend         main
      bind M-/  comment         main
      bind ^Space complete      main

      bind M-C  location        main
      bind ^E   wherewas        all
      bind M-E  findprevious    all
      bind ^R   replace         main
      bind ^B   pageup          all         # vim-like support
      bind ^F   pagedown        all
      bind ^G   firstline       all
      bind M-G  lastline        all

      bind M-1    help          all         # fix ^G been used
      bind Sh-M-C constantshow  main        # fix M-C, M-F and M-b been used
      bind Sh-M-F formatter     main
      bind Sh-M-B linter        main
    '';
  };
}
</file>

<file path="modules/core/common/system/os/programs/zsh.nix">
{
  # While we do have zsh enabled in userspace (i.e. home-manager) we also
  # need it set system-wide since zsh will be our login shell.
  programs.zsh = {
    enable = true;

    shellInit = ''
      # Make sure we always use the correct zsh dotdir.
      export ZDOTDIR=$HOME/.config/zsh
    '';

    # We actually like zsh completion, but its setup belongs in home-manager
    # configuration to better support standalone home-manager installations. We
    # disable completion here to save time by avoiding duplicate compinit calls
    # and other similar duplications. Despite being disabled here, zsh will be
    # able to complete for my home-manager user.
    # See:
    #  <https://github.com/nix-community/home-manager/issues/3965>
    enableCompletion = false;
  };
}
</file>

<file path="modules/core/common/system/os/services/systemd/brightnessd.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  inherit (config) modules;
  env = modules.usrEnv;

  cfg = env.brightness;
in {
  config = mkIf cfg.enable {
    systemd.services."system-brightnessd" = {
      description = "Automatic backlight management with systemd";

      # TODO: maybe this needs to be a part of graphical-session.target?
      # I am not very sure how wantedBy and partOf really work
      wantedBy = ["default.target"];
      partOf = ["graphical-session.target"];

      # TODO: this needs to be hardened
      # not that a backlight service is a security risk, but it's a good habit
      # to keep our systemd services as secure as possible
      serviceConfig = {
        Type = "${cfg.serviceType}";
        ExecStart = "${lib.getExe cfg.package}";
        Restart = "never";
        RestartSec = "5s";
      };
    };
  };
}
</file>

<file path="modules/core/common/system/os/services/systemd/default.nix">
{
  imports = [
    ./brightnessd.nix
    ./oomd.nix
    ./timesyncd.nix
  ];
}
</file>

<file path="modules/core/common/system/os/services/systemd/oomd.nix">
{
  config,
  lib,
  ...
}: {
  systemd = {
    # Systemd OOMd
    # Fedora enables these options by default. See the 10-oomd-* files here:
    # https://src.fedoraproject.org/rpms/systemd/tree/3211e4adfcca38dfe24188e28a65b1cf385ecfd6
    # by default it only kills cgroups. So either systemd services marked for killing under OOM
    # or (disabled by default, enabled by us) the entire user slice. Fedora used to kill root
    # and system slices, but their oomd configuration has since changed.
    # TODO: maybe disable user slice by default?
    oomd = {
      enable = !config.systemd.enableUnifiedCgroupHierarchy;
      enableRootSlice = true;
      enableSystemSlice = true;
      enableUserSlices = true;
      extraConfig = {
        "DefaultMemoryPressureDurationSec" = "20s";
      };
    };

    # make it that nix builds are more likely killed than important services.
    # 100 is the default for user slices and 500 is systemd-coredumpd@
    # this is important because as my system got huge, nix flake check started
    # causing OOMs and killing my desktop environment - which I do not like
    # nuke nix-daemon if it gets too memory hungry
    services.nix-daemon.serviceConfig.OOMScoreAdjust = lib.mkDefault 350;
  };
}
</file>

<file path="modules/core/common/system/os/services/systemd/timesyncd.nix">
{config, ...}: {
  services = {
    # Replace chrony with systemd-timesyncd
    # I am yet to confirm the difference in accuracy
    # but systemd-timesyncd is a part of the systemd
    # ecosystem, which we are already a part of by
    # the virtue of using NixOS.
    chrony.enable = false;
    timesyncd = {
      enable = true;
      servers = config.networking.timeServers; # default value
      extraConfig = ''
        # poll every 128s as opposed to default 32s
        # should help with battery life a little
        PollIntervalMinSec=128
      '';
    };
  };
}
</file>

<file path="modules/core/common/system/os/services/fwupd.nix">
{config, ...}: {
  # firmware updater for machine hardware
  services.fwupd = {
    enable = true;
    daemonSettings.EspLocation = config.boot.loader.efi.efiSysMountPoint;

    # newer hardware may have their firmware in testing
    # e.g. Framework devices don't have their firmware in stable yet
    # TODO: make a system-level option that sets this value for hosts
    # that have testing firmware
    # extraRemotes = [ "lvfs-testing" ];
  };
}
</file>

<file path="modules/core/common/system/os/services/getty.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
  revision =
    if config.system.configurationRevision != null
    then " @ " + config.system.configurationRevision # this is already a string, no need to toString it
    else "";
in {
  services.getty = {
    greetingLine = "<<< Welcome to ${config.meta.hostname}${revision} >>>";
    helpLine = mkForce "";
  };
}
</file>

<file path="modules/core/common/system/os/services/logrotate.nix">
{
  pkgs,
  lib,
  ...
}: {
  services.logrotate.settings.header = {
    # general
    global = true;
    dateext = true;
    dateformat = "-%Y-%m-%d";
    nomail = true;
    missingok = true;
    copytruncate = true;

    # rotation frequency
    priority = 1;
    frequency = "weekly";
    rotate = 7; # special value, means every 7 days
    minage = 7; # avoid removing logs that are less than 7 days old

    # compression
    compress = true; # lets compress logs to save space
    compresscmd = "${lib.getExe' pkgs.zstd "zstd"}";
    compressoptions = " -Xcompression-level 10";
    compressext = "zst";
    uncompresscmd = "${lib.getExe' pkgs.zstd "unzstd"}";
  };
}
</file>

<file path="modules/core/common/system/os/services/module.nix">
{
  imports = [
    ./systemd

    ./fwupd.nix
    ./getty.nix
    ./logrotate.nix
    ./ntpd.nix
    ./thermald.nix
    ./zram.nix
  ];
}
</file>

<file path="modules/core/common/system/os/services/ntpd.nix">
{pkgs, ...}: {
  time = {
    timeZone = "Europe/Istanbul";
    hardwareClockInLocalTime = false; # this somehow breaks if Impermanence is enabled
  };

  networking.timeServers = [
    "0.nixos.pool.ntp.org"
    "1.nixos.pool.ntp.org"
    "2.nixos.pool.ntp.org"
    "3.nixos.pool.ntp.org"
  ];

  # free, easy-to-use implementation of the Network Time Protocol
  # available as a part of the OpenBSD projeect.
  # since BSDs are known for their superior networking stack, this
  # might provide better performance than the defaults
  environment.systemPackages = [pkgs.openntpd];
  services.openntpd = {
    enable = true;
    extraConfig = ''
      listen on 127.0.0.1
      listen on ::1
    '';
  };
}
</file>

<file path="modules/core/common/system/os/services/thermald.nix">
{
  # monitor and control temparature
  services.thermald.enable = true;
}
</file>

<file path="modules/core/common/system/os/services/zram.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;
in {
  # compress half of the ram to use as swap
  # basically, get more memory per memory
  zramSwap = {
    enable = true;
    algorithm = "zstd";
    memoryPercent = 90; # defaults to 50
  };

  # <https://www.kernel.org/doc/html/latest/admin-guide/sysctl/vm.html>
  # <https://github.com/pop-os/default-settings/pull/163>
  boot.kernel.sysctl = mkIf config.zramSwap.enable {
    # zram is relatively cheap, prefer swap
    #  swappiness refers to the kernel's willingness prefer swap
    #  over memory. higher values mean that we'll utilize swap more often
    #  which preserves memory, but will cause performance issues as well
    #  as wear on the drive
    "vm.swappiness" = 180; # 0-200
    # level of reclaim when memory is being fragmented
    "vm.watermark_boost_factor" = 0; # 0 to disable
    # aggressiveness of kswapd
    # it defines the amount of memory left in a node/system before kswapd is woken up
    "vm.watermark_scale_factor" = 125; # 0-300
    # zram is in memory, no need to readahead
    # page-cluster refers to the number of pages up to which
    # consecutive pages are read in from swap in a single attempt
    "vm.page-cluster" = 0;
  };
}
</file>

<file path="modules/core/common/system/os/users/builder.nix">
{keys, ...}: let
  sshOpts = ''command="nix-daemon --stdio",no-agent-forwarding,no-port-forwarding,no-pty,no-user-rc,no-X11-forwarding'';
  mkBuilderKeys = keys: map (key: ''${sshOpts} ${key}'') keys;
in {
  users = {
    groups.builder = {};
    users.builder = {
      useDefaultShell = false;
      isSystemUser = true;
      createHome = true;
      group = "builder";
      home = "/var/empty";
      openssh.authorizedKeys.keys = mkBuilderKeys [keys.notashelf];
    };
  };
}
</file>

<file path="modules/core/common/system/os/users/module.nix">
{pkgs, ...}: {
  # We want to handle user configurations on a per-file basis. What that
  # means is a new user cannot be added via, e.g., useradd unless a new
  # file has been added here to create user configuration.
  # In short:users that are not in users/<username>.nix don't get to
  # be a real user
  imports = [
    ./notashelf.nix
    ./builder.nix
    ./root.nix
  ];

  config = {
    users = {
      # Default user shell package
      defaultUserShell = pkgs.zsh;

      # And other stuff...
      allowNoPasswordLogin = false;
      enforceIdUniqueness = true;
    };
  };
}
</file>

<file path="modules/core/common/system/os/users/notashelf.nix">
{
  keys,
  pkgs,
  ...
}: {
  users.users.notashelf = {
    isNormalUser = true;

    # Home directory
    createHome = true;
    home = "/home/notashelf";

    shell = pkgs.zsh;

    # Should be generated manually. See option documentation
    # for tips on generating it. For security purposes, it's
    # a good idea to use a non-default hash.
    initialHashedPassword = "$2b$05$NI5/uV4JXUt/wq8hEN.NX.5rKCvCtj8JZih/seVcPIXNFIpw61v.y";
    openssh.authorizedKeys.keys = [keys.notashelf];
    extraGroups = [
      "wheel"
      "systemd-journal"
      "audio"
      "video"
      "input"
      "plugdev"
      "lp"
      "tss"
      "power"
      "nix"
      "network"
      "networkmanager"
      "wireshark"
      "mysql"
      "docker"
      "podman"
      "git"
      "libvirtd"
    ];
  };
}
</file>

<file path="modules/core/common/system/os/users/root.nix">
{
  users.users.root.hashedPassword = "*"; # lock root account
}
</file>

<file path="modules/core/common/system/os/README.md">
# system/os

```nix
./activation # activation system for nixos-rebuild
./boot # boot and bootloader configurations
./display # display protocol (wayland/xorg)
./environment # system environment e.g. locale, timezone, packages
./fs # filesystem support options
./misc # things that don't fit anywhere else
./networking # network configuration & tcp optimizations
./programs # general programs
./services # gemeral services
./theme # theming for desktop toolkits e.g. gtk, qt
./users # per user configurations
```
</file>

<file path="modules/core/common/system/security/apparmor.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
in {
  config = mkIf (lib.isx86Linux pkgs) {
    services.dbus.apparmor = "enabled";

    environment.systemPackages = with pkgs; [
      apparmor-pam
      apparmor-utils
      apparmor-parser
      apparmor-profiles
      apparmor-bin-utils
      apparmor-kernel-patches
      libapparmor
    ];

    # apparmor configuration
    security.apparmor = {
      enable = true;

      # whether to enable the AppArmor cache
      # in /var/cache/apparmore
      enableCache = true;

      # whether to kill processes which have an AppArmor profile enabled
      # but are not confined (AppArmor can only confine new processes)
      killUnconfinedConfinables = true;

      # packages to be added to AppArmor’s include path
      packages = [pkgs.apparmor-profiles];

      # apparmor policies
      policies = {
        "default_deny" = {
          enforce = false;
          enable = false;
          profile = ''
            profile default_deny /** { }
          '';
        };

        "sudo" = {
          enforce = false;
          enable = false;
          profile = ''
            ${pkgs.sudo}/bin/sudo {
              file /** rwlkUx,
            }
          '';
        };

        "nix" = {
          enforce = false;
          enable = false;
          profile = ''
            ${config.nix.package}/bin/nix {
              unconfined,
            }
          '';
        };
      };

      # TODO: includes
    };
  };
}
</file>

<file path="modules/core/common/system/security/auditd.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  sys = config.modules.system;
  auditEnabled = sys.security.auditd.enable;
in {
  config = mkIf auditEnabled {
    security = {
      # system audit
      auditd.enable = true;

      audit = {
        enable = true;
        backlogLimit = 8192;
        failureMode = "printk";
        rules = [
          "-a exit,always -F arch=b64 -F euid=0 -S execve"
          "-a exit,always -F arch=b32 -F euid=0 -S execve"
          "-a exit,always -F arch=b64 -F euid=0 -S execveat"
          "-a exit,always -F arch=b32 -F euid=0 -S execveat"

          # Protect logfile
          "-w /var/log/audit/ -k auditlog"

          # Log program executions
          "-a exit,always -F arch=b64 -S execve -F key=progexec"

          # Home path access/modification
          "-a always,exit -F arch=b64 -F dir=/home -F perm=war -F key=homeaccess"

          # Kexec attempts
          "-a always,exit -F arch=b64 -S kexec_load -F key=KEXEC"
          "-a always,exit -F arch=b32 -S sys_kexec_load -k KEXEC"

          # Unauthorized file access
          "-a always,exit -F arch=b64 -S open,creat -F exit=-EACCES -k access"
          "-a always,exit -F arch=b64 -S open,creat -F exit=-EPERM -k access"
          "-a always,exit -F arch=b32 -S open,creat -F exit=-EACCES -k access"
          "-a always,exit -F arch=b32 -S open,creat -F exit=-EPERM -k access"
          "-a always,exit -F arch=b64 -S openat -F exit=-EACCES -k access"
          "-a always,exit -F arch=b64 -S openat -F exit=-EPERM -k access"
          "-a always,exit -F arch=b32 -S openat -F exit=-EACCES -k access"
          "-a always,exit -F arch=b32 -S openat -F exit=-EPERM -k access"
          "-a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EACCES -k access"
          "-a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EPERM -k access"
          "-a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EACCES -k access"
          "-a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EPERM -k access"

          # Failed modification of important mountpoints or files
          "-a always,exit -F arch=b64 -S open -F dir=/etc -F success=0 -F key=unauthedfileaccess"
          "-a always,exit -F arch=b64 -S open -F dir=/bin -F success=0 -F key=unauthedfileaccess"
          "-a always,exit -F arch=b64 -S open -F dir=/var -F success=0 -F key=unauthedfileaccess"
          "-a always,exit -F arch=b64 -S open -F dir=/home -F success=0 -F key=unauthedfileaccess"
          "-a always,exit -F arch=b64 -S open -F dir=/srv -F success=0 -F key=unauthedfileaccess"
          "-a always,exit -F arch=b64 -S open -F dir=/boot -F success=0 -F key=unauthedfileaccess"
          "-a always,exit -F arch=b64 -S open -F dir=/nix -F success=0 -F key=unauthedfileaccess"

          # File deletions by system users
          "-a always,exit -F arch=b64 -S rmdir -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=-1 -F key=delete"

          # Root command executions
          "-a always,exit -F arch=b64 -F euid=0 -F auid>=1000 -F auid!=-1 -S execve -F key=rootcmd"

          # Shared memory access
          "-a exit,never -F arch=b32 -F dir=/dev/shm -k sharedmemaccess"
          "-a exit,never -F arch=b64 -F dir=/dev/shm -k sharedmemaccess"
        ];
      };
    };

    systemd = {
      # a systemd timer to clean /var/log/audit.log daily
      # this can probably be weekly, but daily means we get to clean it every 2-3 days instead of once a week
      timers."clean-audit-log" = {
        description = "Periodically clean audit log";
        wantedBy = ["timers.target"];
        timerConfig = {
          OnCalendar = "daily";
          Persistent = true;
        };
      };

      # clean audit log if it's more than 524,288,000 bytes, which is roughly 500 megabytes
      # it can grow MASSIVE in size if left unchecked
      services."clean-audit-log" = {
        script = ''
          set -eu
          if [[ $(stat -c "%s" /var/log/audit/audit.log) -gt 524288000 ]]; then
            echo "Clearing Audit Log";
            rm -rvf /var/log/audit/audit.log;
            echo "Done!"
          fi
        '';

        serviceConfig = {
          Type = "oneshot";
          User = "root";
        };
      };
    };
  };
}
</file>

<file path="modules/core/common/system/security/clamav.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib.modules) mkIf mkForce;

  sys = config.modules.system;
  security = sys.security;
in {
  config = mkIf sys.security.clamav.enable {
    environment.systemPackages = [pkgs.clamav];

    services.clamav = {
      daemon = {enable = true;} // security.clamav.daemon;
      updater = {enable = true;} // security.clamav.updater;
    };

    systemd = {
      tmpfiles.settings."10-clamscan" = {
        "/var/lib/clamav"."D" = {
          group = "clamav";
          user = "clamav";
          mode = "755";
        };
      };

      services = {
        clamav-daemon = {
          serviceConfig = {
            PrivateTmp = mkForce "no";
            PrivateNetwork = mkForce "no";
            Restart = "always";
          };

          unitConfig = {
            # only start clamav when required database files are present
            # especially useful if you are deploying headlessly and don't want a service fail instantly
            ConditionPathExistsGlob = [
              "/var/lib/clamav/main.{c[vl]d,inc}"
              "/var/lib/clamav/daily.{c[vl]d,inc}"
            ];
          };
        };

        clamav-init-database = {
          wantedBy = ["clamav-daemon.service"];
          before = ["clamav-daemon.service"];
          serviceConfig.ExecStart = "systemctl start clamav-freshclam";
          unitConfig = {
            # opposite condition of clamav-daemon: only run this service if
            # database files are not present in the database directory
            ConditionPathExistsGlob = [
              "!/var/lib/clamav/main.{c[vl]d,inc}"
              "!/var/lib/clamav/daily.{c[vl]d,inc}"
            ];
          };
        };

        clamav-freshclam = {
          wants = ["clamav-daemon.service"];
          serviceConfig = {
            ExecStart = let
              message = "Updating ClamAV database";
            in ''
              ${pkgs.coreutils}/bin/echo -en ${message}
            '';
            SuccessExitStatus = mkForce [11 40 50 51 52 53 54 55 56 57 58 59 60 61 62];
          };
        };
      };

      timers.clamav-freshclam.timerConfig = {
        # The default is to run the timer hourly, but we do not want our entire infra to be overloaded
        # trying to run a ClamAV scan simultaneously. So randomize the timer to something around an hour
        # so that the window is consistent, but the load is not.
        RandomizedDelaySec = "60m";
        FixedRandomDelay = true;
        Persistent = true;
      };
    };
  };
}
</file>

<file path="modules/core/common/system/security/fprint.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
in {
  config = mkIf sys.security.fprint.enable {
    # fingerprint login
    # doesn't work because thanks drivers
    services.fprintd = {
      enable = false;
      tod.enable = true;
      tod.driver = pkgs.libfprint-2-tod1-goodix;
    };

    security.pam.services = {
      login.fprintAuth = true;
      swaylock.fprintAuth = true;
    };
  };
}
</file>

<file path="modules/core/common/system/security/impurity-tracker.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.meta) getExe;

  mkTracer = name: target: exe:
    getExe (pkgs.writeShellScriptBin name ''
      echo "PID $PPID executed ${target}" |& ${config.systemd.package}/bin/systemd-cat --identifier=impurity >/dev/null 2>/dev/null
      exec -a "$0" '${exe}' "$@"
    '');
in {
  environment = {
    usrbinenv = mkTracer "env" "/usr/bin/env" "${pkgs.coreutils}/bin/env";
    binsh = mkTracer "sh" "/bin/sh" "${pkgs.bashInteractive}/bin/sh";
  };
}
</file>

<file path="modules/core/common/system/security/kernel.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) optionals versionOlder mkForce;
  mitigationFlags =
    (
      optionals (versionOlder config.boot.kernelPackages.kernel.version "5.1.13")
      [
        # we don't need restricted indirect branch speculation
        "noibrs"
        # we don't need no indirect branch prediction barrier either, it sounds funny
        "noibpb"
        # allow programs to get data from some other program when they shouldn't be able to - maybe they need it!
        "nospectre_v1"
        "nospectre_v2"
        # why flush the L1 cache? what if we need it later. anyone being able to get it is a small consequence, I think
        "l1tf=off"
        # of course we want to use, not bypass, the stored data
        "nospec_store_bypass_disable"
        "no_stf_barrier" # We don't need no barriers between software, they could be friends
        "mds=off" # Zombieload attacks are fine
      ]
    )
    ++ [
      "mitigations=off" # Of course we don't want no mitigations
    ];

  sys = config.modules.system;
  cfg = sys.security;
in {
  config = {
    # failsafe for idiots, god knows there are plenty
    assertions =
      optionals cfg.mitigations.disable
      [
        {
          assertion = cfg.mitigations.acceptRisk;
          message = ''
            You have enabled `config.modules.system.security.mitigations`.

            To make sure you are not doing this out of sheer idiocy, you must explicitly
            accept the risk of running your kernel without Spectre or Meltdown mitigations.

            Set `config.modules.system.security.mitigations.acceptRisk` to `true` only if you know what your doing!

            If you don't know what you are doing, but still insist on disabling mitigations; perish on your own accord.
          '';
        }
      ];

    security = {
      protectKernelImage = true; # disables hibernation

      # Breaks virtd, wireguard, iptables and many more features by
      # disallowing them from loading modules during runtime. You may
      # enable this module if you wish, but do make sure that the
      # necessary modules are loaded declaratively before doing so.
      # Failing to add those modules may result in an unbootable system!
      lockKernelModules = false;

      # Force-enable the Page Table Isolation (PTI) Linux kernel feature
      # helps mitigate Meltdown and prevent some KASLR bypasses.
      forcePageTableIsolation = true;

      # User namespaces are required for sandboxing. Better than nothing imo.
      allowUserNamespaces = true;

      # Disable unprivileged user namespaces, unless containers are enabled
      # required by podman to run containers in rootless mode.
      unprivilegedUsernsClone = config.virtualisation.containers.enable;

      allowSimultaneousMultithreading = true;
    };

    boot = {
      kernel = {
        # https://docs.kernel.org/admin-guide/sysctl/vm.html
        sysctl = {
          # The Magic SysRq key is a key combo that allows users connected to the
          # system console of a Linux kernel to perform some low-level commands.
          # Disable it, since we don't need it, and is a potential security concern.
          "kernel.sysrq" = mkForce 0;

          # Restrict ptrace() usage to processes with a pre-defined relationship
          # (e.g., parent/child)
          # FIXME: this breaks game launchers, find a way to launch them with privileges (steam)
          # gamescope wrapped with the capabilities *might* solve the issue
          # spoiler: it didn't
          # "kernel.yama.ptrace_scope" = 2;

          # Hide kptrs even for processes with CAP_SYSLOG
          # also prevents printing kernel pointers
          "kernel.kptr_restrict" = 2;

          # Disable bpf() JIT (to eliminate spray attacks)
          "net.core.bpf_jit_enable" = false;

          # Disable ftrace debugging
          "kernel.ftrace_enabled" = false;

          # Avoid kernel memory address exposures via dmesg (this value can also be set by CONFIG_SECURITY_DMESG_RESTRICT).
          "kernel.dmesg_restrict" = 1;

          # Prevent creating files in potentially attacker-controlled environments such
          # as world-writable directories to make data spoofing attacks more difficult
          "fs.protected_fifos" = 2;

          # Prevent unintended writes to already-created files
          "fs.protected_regular" = 2;

          # Disable SUID binary dump
          "fs.suid_dumpable" = 0;

          # Prevent unprivileged users from creating hard or symbolic links to files
          "fs.protected_symlinks" = 1;
          "fs.protected_hardlinks" = 1;

          # Disable late module loading
          # "kernel.modules_disabled" = 1;

          # Disallow profiling at all levels without CAP_SYS_ADMIN
          "kernel.perf_event_paranoid" = 3;

          # Require CAP_BPF to use bpf
          "kernel.unprivileged_bpf_disabled" = true;

          # Prevent boot console kernel log information leaks
          "kernel.printk" = "3 3 3 3";

          # Restrict loading TTY line disciplines to the CAP_SYS_MODULE capability to
          # prevent unprivileged attackers from loading vulnerable line disciplines with
          # the TIOCSETD ioctl
          "dev.tty.ldisc_autoload" = 0;

          # Kexec allows replacing the current running kernel. There may be an edge case where
          # you wish to boot into a different kernel, but I do not require kexec. Disabling it
          # patches a potential security hole in our system.
          "kernel.kexec_load_disabled" = true;

          # Borrowed by NixOS/nixpkgs. Since the security module does not explain what those
          # options do, it is up you to educate yourself dear reader.
          # See:
          #  - <https://docs.kernel.org/admin-guide/sysctl/vm.html#mmap-rnd-bits>
          #  - <https://docs.kernel.org/admin-guide/sysctl/vm.html#mmap-min-addr>
          "vm.mmap_rnd_bits" = 32;
          "vm.mmap_min_addr" = 65536;
        };
      };

      # https://www.kernel.org/doc/html/latest/admin-guide/kernel-parameters.html
      kernelParams =
        [
          # I'm sure we break hibernation in at least 5 other sections of this config, so
          # let's disable hibernation explicitly. Allowing hibernation makes it possible
          # to replace the booted kernel with a malicious one, akin to kexec. This helps
          # us prevent an attack called "Evil Maid" where an attacker with physical access
          # to the device. P.S. I chose to mention "Evil Maid" specifically because it sounds
          # funny. Do not think that is the only attack you are vulnerable to.
          # See: <https://en.wikipedia.org/wiki/Evil_maid_attack>
          "nohibernate"

          # make stack-based attacks on the kernel harder
          "randomize_kstack_offset=on"

          # Disable vsyscalls as they are obsolete and have been replaced with vDSO.
          # vsyscalls are also at fixed addresses in memory, making them a potential
          # target for ROP attacks
          # this breaks really old binaries for security
          "vsyscall=none"

          # reduce most of the exposure of a heap attack to a single cache
          # Disable slab merging which significantly increases the difficulty of heap
          # exploitation by preventing overwriting objects from merged caches and by
          # making it harder to influence slab cache layout
          "slab_nomerge"

          # Disable debugfs which exposes a lot of sensitive information about the
          # kernel. Some programs, such as powertop, use this interface to gather
          # information about the system, but it is not necessary for the system to
          # actually publish those. I can live without it.
          "debugfs=off"

          # Sometimes certain kernel exploits will cause what is known as an "oops".
          # This parameter will cause the kernel to panic on such oopses, thereby
          # preventing those exploits
          "oops=panic"

          # Only allow kernel modules that have been signed with a valid key to be
          # loaded, which increases security by making it much harder to load a
          # malicious kernel module
          "module.sig_enforce=1"

          # The kernel lockdown LSM can eliminate many methods that user space code
          # could abuse to escalate to kernel privileges and extract sensitive
          # information. This LSM is necessary to implement a clear security boundary
          # between user space and the kernel
          #  integrity: kernel features that allow userland to modify the running kernel
          #             are disabled
          #  confidentiality: kernel features that allow userland to extract confidential
          #             information from the kernel are also disabled
          # ArchWiki recommends opting in for "integrity", however since we avoid modifying
          # running kernel (by the virtue of using NixOS and locking module hot-loading) the
          # confidentiality mode is a better solution.
          "lockdown=confidentiality"

          # enable buddy allocator free poisoning
          #  on: memory will befilled with a specific byte pattern
          #      that is unlikely to occur in normal operation.
          #  off (default): page poisoning will be disabled
          "page_poison=on"

          # performance improvement for direct-mapped memory-side-cache utilization
          # reduces the predictability of page allocations
          "page_alloc.shuffle=1"

          # for debugging kernel-level slab issues
          "slub_debug=FZP"

          # ignore access time (atime) updates on files
          # except when they coincide with updates to the ctime or mtime
          "rootflags=noatime"

          # linux security modules
          "lsm=landlock,lockdown,yama,integrity,apparmor,bpf,tomoyo,selinux"

          # prevent the kernel from blanking plymouth out of the fb
          "fbcon=nodefer"

          # the format that will be used for integrity audit logs
          #  0 (default): basic integrity auditing messages
          #  1: additional integrity auditing messages
          "integrity_audit=1"
        ]
        ++ optionals cfg.mitigations.disable mitigationFlags;

      blacklistedKernelModules = lib.concatLists [
        # Obscure network protocols
        [
          "dccp" # Datagram Congestion Control Protocol
          "sctp" # Stream Control Transmission Protocol
          "rds" # Reliable Datagram Sockets
          "tipc" # Transparent Inter-Process Communication
          "n-hdlc" # High-level Data Link Control
          "netrom" # NetRom
          "x25" # X.25
          "ax25" # Amateur X.25
          "rose" # ROSE
          "decnet" # DECnet
          "econet" # Econet
          "af_802154" # IEEE 802.15.4
          "ipx" # Internetwork Packet Exchange
          "appletalk" # Appletalk
          "psnap" # SubnetworkAccess Protocol
          "p8022" # IEEE 802.3
          "p8023" # Novell raw IEEE 802.3
          "can" # Controller Area Network
          "atm" # ATM
        ]

        # Old or rare or insufficiently audited filesystems
        [
          "adfs" # Active Directory Federation Services
          "affs" # Amiga Fast File System
          "befs" # "Be File System"
          "bfs" # BFS, used by SCO UnixWare OS for the /stand slice
          "cifs" # Common Internet File System
          "cramfs" # compressed ROM/RAM file system
          "efs" # Extent File System
          "erofs" # Enhanced Read-Only File System
          "exofs" # EXtended Object File System
          "freevxfs" # Veritas filesystem driver
          "f2fs" # Flash-Friendly File System
          "vivid" # Virtual Video Test Driver (unnecessary, and a historical cause of escalation issues)
          "gfs2" # Global File System 2
          "hpfs" # High Performance File System (used by OS/2)
          "hfs" # Hierarchical File System (Macintosh)
          "hfsplus" # " same as above, but with extended attributes
          "jffs2" # Journalling Flash File System (v2)
          "jfs" # Journaled File System - only useful for VMWare sessions
          "ksmbd" # SMB3 Kernel Server
          "minix" # minix fs - used by the minix OS
          "nfsv3" # " (v3)
          "nfsv4" # Network File System (v4)
          "nfs" # Network File System
          "nilfs2" # New Implementation of a Log-structured File System
          "omfs" # Optimized MPEG Filesystem
          "qnx4" # extent-based file system used by the QNX4 and QNX6 OSes
          "qnx6" # "
          "squashfs" # compressed read-only file system (used by live CDs)
          "sysv" # implements all of Xenix FS, SystemV/386 FS and Coherent FS.
          "udf" # https://docs.kernel.org/5.15/filesystems/udf.html
        ]

        # Disable Thunderbolt and FireWire to prevent DMA attacks
        [
          "thunderbolt"
          "firewire-core"
        ]

        # You might possibly want your webcam to work.
        # We whitelist the module if the system wants
        # webcam to work
        (optionals (!sys.security.fixWebcam) [
          "uvcvideo" # this is why your webcam no worky
        ])

        # if bluetooth is enabled, whitelist the module
        # necessary for bluetooth dongles to work
        (optionals (!sys.bluetooth.enable) [
          "bluetooth" # let bluetooth work
          "btusb" # let bluetooth dongles work
        ])
      ];
    };
  };
}
</file>

<file path="modules/core/common/system/security/memalloc.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkDefault optionals;
in {
  # FIXME: causes a mass rebuild
  # scudo memalloc is unstable
  # environment.memoryAllocator.provider = mkDefault "scudo"; # "graphene-hardened";

  # dhcpcd broken with scudo or graphene malloc
  nixpkgs.overlays = optionals (config.environment.memoryAllocator.provider != "libc") [
    (_final: prev: {
      dhcpcd = prev.dhcpcd.override {enablePrivSep = false;};
    })
  ];
}
</file>

<file path="modules/core/common/system/security/module.nix">
{
  # This is the entry point of the security module.
  # This makes our system generally more secure as opposed to having nothing
  # but keep in mind that certain things (e.g. webcam) might be broken
  # as a result of the configurations provided below. Exercise caution and common sense.
  # DO NOT COPY BLINDLY
  # Also see:
  #  <https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/profiles/hardened.nix>
  #  <https://github.com/fort-nix/nix-bitcoin/blob/master/modules/presets/hardened-extended.nix>
  imports = [
    ./apparmor.nix # apparmor configuration and policies
    ./auditd.nix # auditd
    ./clamav.nix # clamav antivirus
    ./fprint.nix # fingerprint driver and login support
    ./impurity-tracker.nix # find applications that depend on /bin/sh or /usr/bin/env
    ./kernel.nix # kernel hardening
    ./memalloc.nix # memory allocator hardening
    ./pam.nix # pam configuration
    ./pki.nix # pki certificate bundles
    ./polkit.nix # polkit configuration
    ./selinux.nix # selinux support + kernel patches
    ./sudo.nix # sudo rules and configuration
    ./virtualization.nix # hypervisor hardening
    ./usbguard.nix # usbguard
  ];
}
</file>

<file path="modules/core/common/system/security/pam.nix">
{
  security = {
    pam = {
      # fix "too many files open" errors while writing a lot of data at once
      # (e.g. when building a large package)
      # if this, somehow, doesn't meet your requirements you may just bump the numbers up
      loginLimits = [
        {
          domain = "@wheel";
          item = "nofile";
          type = "soft";
          value = "524288";
        }
        {
          domain = "@wheel";
          item = "nofile";
          type = "hard";
          value = "1048576";
        }
      ];

      services = let
        ttyAudit = {
          enable = true;
          enablePattern = "*";
        };
      in {
        # Allow screen lockers such as Swaylock or gtklock) to also unlock the screen.
        swaylock.text = "auth include login";
        gtklock.text = "auth include login";

        login = {
          inherit ttyAudit;
          setLoginUid = true;
        };

        sshd = {
          inherit ttyAudit;
          setLoginUid = true;
        };

        sudo = {
          inherit ttyAudit;
          setLoginUid = true;
        };
      };
    };
  };
}
</file>

<file path="modules/core/common/system/security/pki.nix">
{lib, ...}: {
  security.pki = {
    certificates = lib.mkForce [];
    caCertificateBlacklist = [
      #
      "AC RAIZ FNMT-RCM SERVIDORES SEGUROS"
      "Autoridad de Certificacion Firmaprofesional CIF A62634068"

      # China Financial Certification Authority
      "CFCA EV ROOT"

      # Chunghwa Telecom Co., Ltd
      "ePKI Root Certification Authority"
      "HiPKI Root CA - G1"

      # Dhimyotis
      "Certigna"
      "Certigna Root CA"

      # GUANG DONG CERTIFICATE AUTHORITY
      "GDCA TrustAUTH R5 ROOT"

      # Hongkong Post
      "Hongkong Post Root CA 3"

      # iTrusChina Co.,Ltd.
      "vTrus ECC Root CA"
      "vTrus Root CA"

      # Krajowa Izba Rozliczeniowa S.A.
      "SZAFIR ROOT CA2"

      # NetLock Kft.
      "NetLock Arany (Class Gold) Főtanúsítvány"

      # TAIWAN-CA
      "TWCA Root Certification Authority"
      "TWCA Global Root CA"
    ];
  };
}
</file>

<file path="modules/core/common/system/security/polkit.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf mkDefault;
in {
  security.polkit = {
    enable = true;

    # optionally, log all actions that can be recorded by polkit
    # if polkit debugging has been enabled
    debug = mkDefault true;
    extraConfig = mkIf config.security.polkit.debug ''
      /* Log authorization checks. */
      polkit.addRule(function(action, subject) {
        polkit.log("user " +  subject.user + " is attempting action " + action.id + " from PID " + subject.pid);
      });
    '';
  };
}
</file>

<file path="modules/core/common/system/security/selinux.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.security.selinux;
in {
  config = mkIf cfg.enable {
    # build systemd with SE Linux support so it loads policy at boot and supports file labelling
    systemd.package = pkgs.systemd.override {withSelinux = true;};

    # we cannot have apparmor and security together. disable apparmor
    security.apparmor.enable = lib.mkForce false;

    boot = {
      # tell kernel to use SE Linux by adding necessary parameters
      kernelParams = ["security=selinux" "selinux=1"];

      # compile kernel with SE Linux support
      # with additional support for other LSM modules
      kernelPatches = [
        {
          name = "selinux-config";
          patch = null;
          extraConfig = ''
            SECURITY_SELINUX y
            SECURITY_SELINUX_BOOTPARAM n
            SECURITY_SELINUX_DISABLE n
            SECURITY_SELINUX_DEVELOP y
            SECURITY_SELINUX_AVC_STATS y
            SECURITY_SELINUX_CHECKREQPROT_VALUE 0
            DEFAULT_SECURITY_SELINUX n
          '';
        }
      ];
    };

    environment = {
      systemPackages = with pkgs; [policycoreutils]; # for load_policy, fixfiles, setfiles, setsebool, semodile, and sestatus.

      # write selinux config to /etc/selinux
      etc."selinux/config".text = ''
        # This file controls the state of SELinux on the system.
        # SELINUX= can take one of these three values:
        #     enforcing - SELinux security policy is enforced.
        #     permissive - SELinux prints warnings instead of enforcing.
        #     disabled - No SELinux policy is loaded.
        SELINUX=${cfg.state}

        # SELINUXTYPE= can take one of three two values:
        #     targeted - Targeted processes are protected,
        #     minimum - Modification of targeted policy. Only selected processes are protected.
        #     mls - Multi Level Security protection.
        SELINUXTYPE=${cfg.type}
      '';
    };
  };
}
</file>

<file path="modules/core/common/system/security/sudo.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkDefault mkForce;
  inherit (lib.meta) getExe';
in {
  security = {
    # https://github.com/NixOS/nixpkgs/pull/256491
    # no nixpkgs, you are not breaking my system because of "muh rust" delusions again
    # sudo-rs is still a feature-incomplete sudo fork that can and will mess things up
    # also for the love of god stop rewriting things in rust
    sudo-rs.enable = mkForce false;

    # the ol' reliable
    sudo = {
      enable = true;

      # WARNING: wheelNeedsPassword = false means wheel group can execute commands without a password
      # this is especially useful if you are using --target-host option in nixos-rebuild switch
      # however it's also a massive security flaw - which is why it should be replaced with the
      # extraRules you will see below
      wheelNeedsPassword = mkDefault false;

      # only allow members of the wheel group to execute sudo
      # by setting the executable’s permissions accordingly
      execWheelOnly = mkForce true;

      # additional sudo configuration
      extraConfig = ''
        Defaults lecture = never # rollback results in sudo lectures after each reboot, it's somewhat useless anyway
        Defaults pwfeedback # password input feedback - makes typed password visible as asterisks
        Defaults env_keep += "EDITOR PATH DISPLAY" # variables that will be passed to the root account
        Defaults timestamp_timeout = 300 # makes sudo ask for password less often
      '';

      # additional sudo rules
      # this is a better approach for making certain commands sudo-less instead of
      # allowing the wheel users to run *anything* without password
      # FIXME: something is missing, causing the rebuilds to ask for sudo regardless

      extraRules = let
        sudoRules = with pkgs; [
          {
            package = coreutils;
            command = "sync";
          }
          {
            package = hdparm;
            command = "hdparm";
          }
          {
            package = nixos-rebuild;
            command = "nixos-rebuild";
          }
          {
            package = nvme-cli;
            command = "nvme";
          }
          {
            package = systemd;
            command = "poweroff";
          }
          {
            package = systemd;
            command = "reboot";
          }
          {
            package = systemd;
            command = "shutdown";
          }
          {
            package = systemd;
            command = "systemctl";
          }
          {
            package = util-linux;
            command = "dmesg";
          }
        ];

        mkSudoRule = rule: {
          command = getExe' rule.package rule.command;
          options = ["NOPASSWD"];
        };

        sudoCommands = map mkSudoRule sudoRules;
      in [
        {
          # allow wheel group to run nixos-rebuild without password
          # this is a less vulnerable alternative to having wheelNeedsPassword = false
          # whitelist switch-to-configuration, allows --target-host option
          # to deploy to remote servers without reading password from STDIN
          groups = ["wheel"];
          commands = sudoCommands;
        }
      ];
    };
  };
}
</file>

<file path="modules/core/common/system/security/usbguard.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  env = config.modules.usrEnv;
in {
  config = mkIf sys.security.usbguard.enable {
    services.usbguard = {
      IPCAllowedUsers = ["root" "${env.mainUser}"];
      presentDevicePolicy = "allow";
      rules = ''
        allow with-interface equals { 08:*:* }

        # Reject devices with suspicious combination of interfaces
        reject with-interface all-of { 08:*:* 03:00:* }
        reject with-interface all-of { 08:*:* 03:01:* }
        reject with-interface all-of { 08:*:* e0:*:* }
        reject with-interface all-of { 08:*:* 02:*:* }
      '';
    };

    environment.systemPackages = [pkgs.usbguard];
  };
}
</file>

<file path="modules/core/common/system/security/virtualization.nix">
{
  security.virtualisation = {
    #  flush the L1 data cache before entering guests
    flushL1DataCache = "always";
  };
}
</file>

<file path="modules/core/common/system/switch/module.nix">
{
  system.switch = {
    enable = false;
    enableNg = true;
  };
}
</file>

<file path="modules/core/common/system/virtualization/distrobox.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system.virtualization;
in {
  config = mkIf sys.distrobox.enable {
    environment.systemPackages = with pkgs; [
      distrobox
    ];

    # if distrobox is enabled, update it periodically
    systemd.user = {
      timers."distrobox-update" = {
        enable = true;
        wantedBy = ["timers.target"];
        timerConfig = {
          OnBootSec = "1h";
          OnUnitActiveSec = "1d";
          Unit = "distrobox-update.service";
        };
      };

      services."distrobox-update" = {
        enable = true;
        script = ''
          ${pkgs.distrobox}/bin/distrobox upgrade --all
        '';
        serviceConfig = {
          Type = "oneshot";
        };
      };
    };
  };
}
</file>

<file path="modules/core/common/system/virtualization/module.nix">
{
  imports = [
    ./distrobox.nix
    ./podman.nix
    ./qemu.nix
    ./waydroid.nix
  ];
}
</file>

<file path="modules/core/common/system/virtualization/podman.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  sys = config.modules.system.virtualization;
in {
  config = mkIf (sys.docker.enable || sys.podman.enable) {
    environment.systemPackages = with pkgs; [
      podman-compose
      podman-desktop
    ];

    virtualisation = {
      # Registries to search for images on `podman pull`
      containers.registries.search = [
        "docker.io"
        "quay.io"
        "ghcr.io"
        "gcr.io"
      ];

      podman = {
        enable = true;

        # Make Podman backwards compatible with Docker socket interface.
        # Certain interface elements will be different, but unless any
        # of said values are hardcoded, it should not pose a problem
        # for us.
        dockerCompat = true;
        dockerSocket.enable = true;

        defaultNetwork.settings.dns_enabled = true;

        # Enable Nvidia support for Podman if the Nvidia drivers are found
        # in the list of xserver.videoDrivers.
        enableNvidia = builtins.any (driver: driver == "nvidia") config.services.xserver.videoDrivers;

        # Prune images and containers periodically
        autoPrune = {
          enable = true;
          flags = ["--all"];
          dates = "weekly";
        };
      };
    };
  };
}
</file>

<file path="modules/core/common/system/virtualization/qemu.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system.virtualization;
in {
  config = mkIf sys.qemu.enable {
    environment.systemPackages = with pkgs; [
      virt-manager
      virt-viewer
      qemu_kvm
      qemu
    ];

    virtualisation = {
      kvmgt.enable = true;
      spiceUSBRedirection.enable = true;

      libvirtd = {
        enable = true;
        qemu = {
          package = pkgs.qemu_kvm;
          runAsRoot = false;
          swtpm.enable = true;

          ovmf = {
            enable = true;
            packages = [pkgs.OVMFFull.fd];
          };

          verbatimConfig = ''
            namespaces = []

            # Whether libvirt should dynamically change file ownership
            dynamic_ownership = 0
          '';
        };

        onBoot = "ignore";
        onShutdown = "shutdown";
      };
    };

    # This allows libvirt to use pulseaudio socket
    # which is useful for virt-manager. May be just placebo, but I think
    # I have been experiencing better latency under emulation.
    hardware.pulseaudio.extraConfig = ''
      load-module module-native-protocol-unix auth-group=qemu-libvirtd socket=/tmp/pulse-socket
    '';

    # Additional kernel modules that may be needed by libvirt
    boot.kernelModules = ["vfio-pci"];

    # Trust bridge network interface(s)
    networking.firewall.trustedInterfaces = ["virbr0" "br0"];

    # For passthrough with VFI
    services.udev.extraRules = ''
      # Supporting VFIO
      SUBSYSTEM=="vfio", OWNER="root", GROUP="kvm"
    '';
  };
}
</file>

<file path="modules/core/common/system/virtualization/waydroid.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;

  waydroid-ui = pkgs.writeShellScriptBin "waydroid-ui" ''
    export WAYLAND_DISPLAY=wayland-0
    ${pkgs.weston}/bin/weston -Swayland-1 --width=600 --height=1000 --shell="kiosk-shell.so" &
    WESTON_PID=$!

    export WAYLAND_DISPLAY=wayland-1
    ${pkgs.waydroid}/bin/waydroid show-full-ui &

    wait $WESTON_PID
    waydroid session stop
  '';
in {
  config = mkIf sys.virtualization.waydroid.enable {
    environment.systemPackages = with pkgs; [
      waydroid
      waydroid-ui
    ];

    virtualisation = {
      lxd.enable = sys.waydroid.enable; # TODO: make this also acceept sys.lxd.enable
      waydroid.enable = sys.waydroid.enable;
    };
  };
}
</file>

<file path="modules/core/common/system/README.md">
# common/system

```nix
./containers # hotpluggable systemd-nspawn containers
./emulation # emulation via binfmt for cross-building
./encryption # LUKS encryption
./gaming # available games and gaming utilities such as steam and mangohud
./hardware # hardware capabilities - i.e bluetooth, sound, tpm etc.
./impermanence # impermanence configuration
./nix # configuration for the nix package manager and build tool
./os # configurations for how the system should operate
./security # anything from kernel hardening to audit daemeons
./virtualization # hypervisor and virtualisation related options - docker, QEMU, waydroid etc.
```
</file>

<file path="modules/core/profiles/gaming/module.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;
in {
  config.modules.system.programs = mkIf config.modules.profiles.gaming.enable {
    steam.enable = true;
    gaming.enable = true;
  };
}
</file>

<file path="modules/core/profiles/workstation/module.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;
in {
  config.modules.system.programs = mkIf config.modules.profiles.workstation.enable {
    webcord.enable = true;
    element.enable = true;
    libreoffice.enable = true;
    firefox.enable = true;
    thunderbird.enable = true;
    zathura.enable = true;
  };
}
</file>

<file path="modules/core/roles/graphical/system/security/default.nix">
{
  imports = [
    ./polkit.nix
  ];
}
</file>

<file path="modules/core/roles/graphical/system/security/polkit.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
in {
  # start the Pantheon policykit agent
  # this is based on the GNOME policykit agent
  # but uses a newer GTK version
  systemd = mkIf sys.video.enable {
    user.services.polkit-pantheon-authentication-agent-1 = {
      description = "Pantheon PolicyKit agent";
      serviceConfig = {
        Type = "simple";
        ExecStart = "${pkgs.pantheon.pantheon-agent-polkit}/libexec/policykit-1-pantheon/io.elementary.desktop.agent-polkit";
        Restart = "on-failure";
        RestartSec = 1;
        TimeoutStopSec = 10;
      };

      wantedBy = ["graphical-session.target"];
      wants = ["graphical-session.target"];
      after = ["graphical-session.target"];
    };
  };
}
</file>

<file path="modules/core/roles/graphical/system/services/login/default.nix">
{
  imports = [
    ./greetd.nix
    ./logind.nix
    ./pam.nix
    ./session.nix
  ];
}
</file>

<file path="modules/core/roles/graphical/system/services/login/greetd.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (lib.strings) concatStringsSep;
  inherit (lib.meta) getExe;

  env = config.modules.usrEnv;
  sys = config.modules.system;

  # make desktop session paths available to greetd
  sessionData = config.services.displayManager.sessionData.desktops;
  sessionPaths = concatStringsSep ":" [
    "${sessionData}/share/xsessions"
    "${sessionData}/share/wayland-sessions"
  ];

  initialSession = {
    user = "${sys.mainUser}";
    command = "${env.desktop}";
  };

  defaultSession = {
    user = "greeter";
    command = concatStringsSep " " [
      (getExe pkgs.greetd.tuigreet)
      "--time"
      "--remember"
      "--remember-user-session"
      "--asterisks"
      "--sessions '${sessionPaths}'"
    ];
  };
in {
  services.greetd = {
    enable = true;
    vt = 2;
    restart = !sys.autoLogin;

    # <https://man.sr.ht/~kennylevinsen/greetd/>
    settings = {
      # default session is what will be used if no session is selected
      # in this case it'll be a TUI greeter
      default_session = defaultSession;

      # initial session
      initial_session = mkIf sys.autoLogin initialSession;
    };
  };

  # Suppress error messages on tuigreet. They sometimes obscure the TUI
  # boundaries of the greeter.
  # See: https://github.com/apognu/tuigreet/issues/68#issuecomment-1586359960
  systemd.services.greetd.serviceConfig = {
    Type = "idle";
    StandardInputs = "tty";
    StandardOutput = "tty";
    StandardError = "journal";
    TTYReset = true;
    TTYVHangup = true;
    TTYVTDisallocate = true;
  };
}
</file>

<file path="modules/core/roles/graphical/system/services/login/logind.nix">
{
  # despite being under logind, this has nothing to do with login
  # it's about power management
  services.logind = {
    lidSwitch = "suspend-then-hibernate";
    lidSwitchExternalPower = "lock";
    extraConfig = ''
      HandlePowerKey=suspend-then-hibernate
      HibernateDelaySec=3600
    '';
  };
}
</file>

<file path="modules/core/roles/graphical/system/services/login/pam.nix">
{
  # unlock GPG keyring on login
  security.pam.services = let
    gnupg = {
      enable = true;
      noAutostart = true;
      storeOnly = true;
    };
  in {
    login = {
      enableGnomeKeyring = true;
      inherit gnupg;
    };

    greetd = {
      enableGnomeKeyring = true;
      inherit gnupg;
    };

    tuigreet = {
      enableGnomeKeyring = true;
      inherit gnupg;
    };
  };
}
</file>

<file path="modules/core/roles/graphical/system/services/login/session.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  env = config.modules.usrEnv;
in {
  # adding dessktop items to the environment is generally handled by the programs' respective
  # nixos modules, however, to unify the desktop interface I prefer handling them manually
  # and ignoring the nixos modules entirely.
  services.xserver.displayManager = {
    startx.enable = true;
    session = [
      (mkIf env.desktops.i3.enable {
        name = "i3wm";
        manage = "desktop";
        start = ''
          ${pkgs.xorg.xinit}/bin/startx ${pkgs.i3-rounded}/bin/i3 -- vt2 &
          waitPID=$!
        '';
      })
    ];
  };
}
</file>

<file path="modules/core/roles/graphical/system/services/default.nix">
{
  imports = [
    ./login

    ./xserver.nix
  ];
}
</file>

<file path="modules/core/roles/graphical/system/services/xserver.nix">
{
  config = {
    services.xserver = {
      enable = true;
      displayManager.gdm.enable = false;
      displayManager.lightdm.enable = false;
    };
  };
}
</file>

<file path="modules/core/roles/graphical/system/environment.nix">
{
  environment.variables = {
    # open links with the default browser
    BROWSER = "firefox";
  };
}
</file>

<file path="modules/core/roles/graphical/system/module.nix">
{
  imports = [
    ./security
    ./services

    ./environment.nix
  ];

  system.nixos.tags = ["graphical"];
}
</file>

<file path="modules/core/roles/headless/system/documentation.nix">
{lib, ...}: let
  inherit (lib) mkForce mapAttrs;
in {
  documentation = mapAttrs (_: mkForce) {
    enable = false;
    dev.enable = false;
    doc.enable = false;
    info.enable = false;
    nixos.enable = false;
    man = {
      enable = false;
      generateCaches = false;
      man-db.enable = false;
      mandoc.enable = false;
    };
  };
}
</file>

<file path="modules/core/roles/headless/system/environment.nix">
{lib, ...}: let
  inherit (lib.modules) mkDefault;
in {
  environment = {
    # Disable X11 libraries on headless systems to save as much space as we possibly can.
    # Settings this to true generally breaks a lot of GUI and non-GUI packages that, for
    # some reason, depend on xlibs. If this is true, said packages may also need to be
    # put into overlays. See `./nix.nix` for an example for Nginx.
    noXlibs = mkDefault false;

    # On servers, print the URL instead of trying to open them with a browser.
    variables.BROWSER = "echo";
  };
}
</file>

<file path="modules/core/roles/headless/system/fonts.nix">
{lib, ...}: {
  # we don't need fontconfig on a server
  # since there are no fonts to be configured outside the console
  fonts.fontconfig.enable = lib.mkDefault false;
}
</file>

<file path="modules/core/roles/headless/system/module.nix">
{
  imports = [
    ./environment.nix
    ./systemd.nix
    ./documentation.nix
    ./fonts.nix
    ./nix.nix
    ./programs.nix
    ./users.nix
    ./xdg.nix
  ];

  system.nixos.tags = ["headless"];
}
</file>

<file path="modules/core/roles/headless/system/nix.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (lib.lists) singleton;
  inherit (lib.trivial) const;
in {
  nixpkgs.overlays = mkIf config.environment.noXlibs (singleton (const (super: {
    nginx = super.nginx.override {withImageFilter = false;};
  })));
}
</file>

<file path="modules/core/roles/headless/system/programs.nix">
{
  programs.command-not-found.enable = false;
}
</file>

<file path="modules/core/roles/headless/system/services.nix">
{
  # a headless system shoudld not mount any removable media
  # without explicit user action
  services.udisks2.enable = false;
}
</file>

<file path="modules/core/roles/headless/system/systemd.nix">
{
  # Some values here are borrowed from nix-comunity/srvos project.
  # See:
  #  <https://github.com/nix-community/srvos/blob/e3e8ff545ef14f13c69a0f743078637fde952018/nixos/server/default.nix>
  systemd = {
    # On a headless system, emergency mode is practically useless unless there is
    # a way to physically access a console, e.g., Hetzner's cloud console. Disable
    # emergency mode so that the system goes back into a boot loop that we may be
    # able to use to debug our system.
    enableEmergencyMode = false;

    # For more detail, see:
    #  <https://0pointer.de/blog/projects/watchdog.html>
    watchdog = {
      # Hardcode the watchdog device to /dev/watchdog. This is the default
      # but we'd like to avoid surprises.
      device = "/dev/watchdog";
      # Systemd will send a signal to the hardware watchdog at half
      # the interval defined here, so every 10s.
      # If the hardware watchdog does not get a signal for 20s,
      # it will forcefully reboot the system.
      runtimeTime = "20s";
      # Forcefully reboot if the final stage of the reboot
      # hangs without progress for more than 30s.
      # For more info, see:
      #   https://utcc.utoronto.ca/~cks/space/blog/linux/SystemdShutdownWatchdog
      rebootTime = "30s";
    };

    sleep.extraConfig = ''
      AllowSuspend=no
      AllowHibernation=no
    '';
  };
}
</file>

<file path="modules/core/roles/headless/system/users.nix">
{
  self,
  config,
  pkgs,
  lib,
  ...
}: {
  users.motd = let
    exec = package: program: "${package}/bin/${program}";
    util = exec pkgs.coreutils;
    uptime = exec pkgs.procps "uptime";
    grep = exec pkgs.gnugrep "grep";
    countUsers = ''${util "who"} -q | ${util "head"} -n1 | ${util "tr"} ' ' \\n | ${util "uniq"} | ${util "wc"} -l'';
    countSessions = ''${util "who"} -q | ${util "head"} -n1 | ${util "wc"} -w'';
  in ''
    (

    # Get the common color codes from lib
    ${toString lib.common.shellColors}

    # Color accent to use in any primary text
    CA=$PURPLE
    CAB=$BPURPLE

    echo
    echo -e " █ ''${BWHITE}Welcome back.''${CO}"
    echo    " █"
    echo -e " █ ''${BWHITE}Hostname......:''${CAB} ${config.networking.hostName}''${CO}"
    echo -e " █ ''${BWHITE}OS Version....:''${CO} NixOS ''${CAB}${config.system.nixos.version}''${CO}"
    echo -e " █ ''${BWHITE}Configuration.:''${CO} ''${CAB}${self.rev or "\${BRED}(✘ )\${CO}\${BWHITE} Dirty"}''${CO}"
    echo -e " █ ''${BWHITE}Uptime........:''${CO} $(${uptime} -p | ${util "cut"} -d ' ' -f2- | GREP_COLORS='mt=01;35' ${grep} --color=always '[0-9]*')"
    echo -e " █ ''${BWHITE}SSH Logins....:''${CO} There are currently ''${CAB}$(${countUsers})''${CO} users logged in on ''${CAB}$(${countSessions})''${CO} sessions"
    echo
    )
  '';
}
</file>

<file path="modules/core/roles/headless/system/xdg.nix">
{lib, ...}: let
  inherit (lib) mkForce mapAttrs;
in {
  xdg = mapAttrs (_: mkForce) {
    sounds.enable = false;
    mime.enable = false;
    menus.enable = false;
    icons.enable = false;
    autostart.enable = false;
  };
}
</file>

<file path="modules/core/roles/iso/image/module.nix">
{
  self,
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) substring;
  inherit (lib.sources) cleanSource;
  inherit (lib.modules) mkDefault mkImageMediaOverride;
in {
  # the ISO image must be completely immutable in the sense that we do not
  # want the user to be able modify the ISO image after booting into it
  # the below option will disable rebuild switches (i.e nixos-rebuild switch)
  system.switch.enable = false;

  isoImage = let
    # `hostname` will always be defined as a "top-level" attribute in hosts.nix
    # while the host is being "constructed" so to speak. Therefore we can use
    # networking.hostName (instead of `meta.hostname`) to get the hostname
    # of the system we are building the ISO for without hardcoding anything
    # in this role module, since this is meant to be system-agnostic. Though
    # at the off chance that networking.hostName is not defined, we default to
    # "nixos" as the hostname to avoid errors or empty strings.
    hostname = config.networking.hostName or "nixos";

    # if the system is built from a git repository, we want to include the git revision
    # in the ISO name. If the tree is dirty, we use the term "dirty" to make it explicit
    # and include the date in the ISO name.
    rev = self.shortRev or "${substring 0 8 self.lastModifiedDate}-dirty";

    # the format of the iso will always be uniform:
    # $hostname-$release-$rev-$arch
    # therefore we can set it once to avoid repetition later on
    name = "${hostname}-${config.system.nixos.release}-${rev}-${pkgs.stdenv.hostPlatform.uname.processor}";
  in {
    # this will cause the resulting .iso file to be named as follows:
    # $hostname-$release-$rev-$arch.iso
    isoName = mkImageMediaOverride "${name}.iso";
    # this will cause the label or volume ID of the generated ISO image to be as follows:
    # $hostname-$release-$rev-$arch
    # volumeID is used is used by stage 1 of the boot process, so it must be distintctive
    volumeID = mkImageMediaOverride "${name}";

    # Maximum compression in exchange for speed, assuming ISOs to be built on GHA CI
    # which has a 2GB limit for uploaded artifacts. Use mkDefault to allow hosts that
    # import this role to override the compression options, potentially for faster builds
    # or if the build host has space to spare.
    squashfsCompression = mkDefault "zstd -Xcompression-level 19"; # default uses gzip

    # ISO image should be an EFI-bootable volume
    makeEfiBootable = true;

    # ISO image should be bootable from USB
    # FIXME: the module description is as follows:
    # "Whether the ISO image should be bootable from CD as well as USB."
    # is this supposed to make the ISO image bootable from *CD* instead of USB?
    makeUsbBootable = true;

    # Get rid of "installer" suffix in boot menu. Not all ISO images are
    # installers.
    appendToMenuLabel = "";

    contents = [
      {
        # My module system already contains an option to add memtest86+
        # to the boot menu at will but in case our system is unbootable
        # lets include memtest86+ in the ISO image
        # so that we may test the memory of the system
        # exclusively from the ISO image
        source = pkgs.memtest86plus + "/memtest.bin";
        target = "/boot/memtest.bin";
      }
      {
        # Link system flake to /root/nyx so that the user can
        # can initiate a rebuild without having to clone and wait
        # useful if this installer is meant to be used on a system
        # that cannot access GitHub.
        source = cleanSource self;
        target = "/root/nyx";
      }
    ];
  };
}
</file>

<file path="modules/core/roles/iso/system/misc/console.nix">
{pkgs, ...}: {
  # console locale
  console = let
    variant = "u24n";
  in {
    # hidpi terminal font
    font = "${pkgs.terminus_font}/share/consolefonts/ter-${variant}.psf.gz";
    keyMap = "trq";
  };
}
</file>

<file path="modules/core/roles/iso/system/misc/default.nix">
{
  imports = [
    ./console.nix
  ];
}
</file>

<file path="modules/core/roles/iso/system/services/default.nix">
{
  imports = [
    ./openssh.nix
    ./logrotate.nix
  ];
}
</file>

<file path="modules/core/roles/iso/system/services/logrotate.nix">
{
  # adds an unnecessary gzip dependency to the PATH
  # you probably don't need logrotate in a headless system
  # and especially not in a live iso
  services.logrotate.enable = false;
}
</file>

<file path="modules/core/roles/iso/system/services/openssh.nix">
{
  # Hardened SSH configuration
  services.openssh = {
    extraConfig = ''
      AllowTcpForwarding no
      HostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com
      PermitTunnel no
    '';
    settings = {
      Ciphers = [
        "aes256-gcm@openssh.com"
        "aes256-ctr,aes192-ctr"
        "aes128-ctr"
        "aes128-gcm@openssh.com"
        "chacha20-poly1305@openssh.com"
      ];
      KbdInteractiveAuthentication = false;
      KexAlgorithms = [
        "curve25519-sha256"
        "curve25519-sha256@libssh.org"
        "diffie-hellman-group16-sha512"
        "diffie-hellman-group18-sha512"
        "sntrup761x25519-sha512@openssh.com"
      ];
      Macs = [
        "hmac-sha2-512-etm@openssh.com"
        "hmac-sha2-256-etm@openssh.com"
        "umac-128-etm@openssh.com"
      ];
      X11Forwarding = false;
    };
  };

  # Client side SSH configuration
  programs.ssh = {
    ciphers = [
      "aes256-gcm@openssh.com"
      "aes256-ctr,aes192-ctr"
      "aes128-ctr"
      "aes128-gcm@openssh.com"
      "chacha20-poly1305@openssh.com"
    ];

    hostKeyAlgorithms = [
      "ssh-ed25519"
      "ssh-ed25519-cert-v01@openssh.com"
      "sk-ssh-ed25519@openssh.com"
      "sk-ssh-ed25519-cert-v01@openssh.com"
      "rsa-sha2-512"
      "rsa-sha2-512-cert-v01@openssh.com"
      "rsa-sha2-256"
      "rsa-sha2-256-cert-v01@openssh.com"
    ];

    kexAlgorithms = [
      "curve25519-sha256"
      "curve25519-sha256@libssh.org"
      "diffie-hellman-group16-sha512"
      "diffie-hellman-group18-sha512"
      "sntrup761x25519-sha512@openssh.com"
    ];

    knownHosts = {
      github-rsa = {
        hostNames = ["github.com"];
        publicKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=";
      };
      github-ed25519 = {
        hostNames = ["github.com"];
        publicKey = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl";
      };
      gitlab-rsa = {
        hostNames = ["gitlab.com"];
        publicKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9";
      };
      gitlab-ed25519 = {
        hostNames = ["gitlab.com"];
        publicKey = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf";
      };
    };

    macs = [
      "hmac-sha2-512-etm@openssh.com"
      "hmac-sha2-256-etm@openssh.com"
      "umac-128-etm@openssh.com"
    ];
  };
}
</file>

<file path="modules/core/roles/iso/system/boot.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkDefault mkForce mkAfter mkImageMediaOverride;
in {
  boot = {
    # Force systemd-boot to be disabled.
    loader.systemd-boot.enable = mkForce false;

    # use the latest Linux kernel instead of the default LTS kernel
    # this is useful for hardware support and bug fixes
    kernelPackages = mkDefault pkgs.linuxPackages_latest;

    # ground control to kernel
    # talk to me kernel
    kernelParams = mkAfter ["noquiet" "toram"];

    # no need for systemd in the initrd stage on an installation media
    # being put in to recovery mode, or having systemd in stage one is
    # entirely pointless as this is a live recovery environment.
    initrd.systemd = {
      enable = mkImageMediaOverride false;
      emergencyAccess = mkImageMediaOverride false;
    };

    # Needed for https://github.com/NixOS/nixpkgs/issues/58959
    # tl;dr: ZFS is problematic and we don't want it
    supportedFilesystems = mkForce [
      "btrfs"
      "vfat"
      "f2fs"
      "xfs"
      "ntfs"
      "cifs"
    ];

    # disable software RAID
    swraid.enable = mkForce false;
  };
}
</file>

<file path="modules/core/roles/iso/system/environment.nix">
{
  inputs,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
in {
  environment = {
    # our installer is a minimal, TUI-only environment. I don't find any
    # good reason to keep X11 libs around while we will not be depending
    # on any GUI frameworks.
    noXlibs = true;

    # 24.04 has brought in a stub-ld that will throw a warning if you try to run a
    # dynamically linked binary. This is an installer, so we probably won't try to run
    # dynamically linked binaries on this system. Besides, it's annoying.
    stub-ld.enable = mkForce false;

    # NixOS bundles a few packages by default
    # it's not too large of a list, but I don't need it and I prefer
    # my system containing only the packages I've declared.
    defaultPackages = mkForce [];

    # packages I might want on an installer environment
    systemPackages = with pkgs; [
      gitMinimal
      curl
      wget
      pciutils
      lshw
      rsync
      nixos-install-tools
    ];

    etc = {
      # link a copy of our nixpkgs input as the nixpkgs channel
      "nix/flake-channels/nixpkgs".source = inputs.nixpkgs;

      # fix an annoying warning
      "mdadm.conf".text = ''
        MAILADDR root
      '';

      # Prevent the kernel from unlinking the pstore files on boot. This
      # is to avoid the installer attempting to create additional files on
      # persistent storage.
      # See: <https://www.man7.org/linux/man-pages/man5/pstore.conf.5.html>
      "systemd/pstore.conf".text = ''
        [PStore]
        Unlink=no
      '';
    };
  };
}
</file>

<file path="modules/core/roles/iso/system/hardware.nix">
{
  # provide all hardware drivers, including proprietary ones
  hardware = {
    enableRedistributableFirmware = true;
  };
}
</file>

<file path="modules/core/roles/iso/system/module.nix">
{
  imports = [
    ./misc
    ./services

    ./boot.nix
    ./environment.nix
    ./hardware.nix
    ./networking.nix
    ./nix.nix
    ./security.nix
    ./users.nix
  ];

  system.nixos.tags = ["iso-image"];
}
</file>

<file path="modules/core/roles/iso/system/networking.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkForce;
in {
  networking.networkmanager = {
    enable = true;
    plugins = mkForce [];
  };

  networking.wireless.enable = mkForce false;

  # Enable SSH in the boot process.
  systemd.services.sshd.wantedBy = mkForce ["multi-user.target"];
  users.users.root.openssh.authorizedKeys.keys = [
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHRDg2lu1rXKP4OfyghP17ZVL2csnyJEJcy9Km3LQm4r notashelf@enyo"
  ];
}
</file>

<file path="modules/core/roles/iso/system/nix.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkDefault;
in {
  nix = {
    package = pkgs.nixVersions.latest;
    channel.enable = false; # locks us out of lookup paths such as <nixpkgs>
    nixPath = ["nixpkgs=${config.nix.registry.nixpkgs.to.path}"];

    settings = {
      # Enable flakes. This is mandatory to install this configuration.
      experimental-features = ["nix-command" "flakes"];

      log-lines = 50;
      warn-dirty = false;
      http-connections = 50;
      accept-flake-config = false;
      auto-optimise-store = false;

      # Never run out of disk space. Though the installer is generally
      # designed to be in-memory only, so is this necessary?
      max-free = mkDefault (3000 * 1024 * 1024);
      min-free = mkDefault (512 * 1024 * 1024);

      # Disable built-in registry
      flake-registry = "";

      # Fallback quickly if substituters are not available.
      connect-timeout = 5;

      # Make building installed systems faster
      substituters = [
        "https://cache.nixos.org"
        "https://cache.privatevoid.net"
        "https://nix-community.cachix.org"
        "https://hyprland.cachix.org"
        "https://anyrun.cachix.org"
        "https://nyx.cachix.org"
        "https://neovim-flake.cachix.org"
        "https://cache.notashelf.dev"
        "https://ags.cachix.org"
      ];

      trusted-public-keys = [
        "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
        "cache.privatevoid.net:SErQ8bvNWANeAvtsOESUwVYr2VJynfuc9JRwlzTTkVg="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc="
        "anyrun.cachix.org-1:pqBobmOjI7nKlsUMV25u9QHa9btJK65/C8vnO3p346s="
        "notashelf.cachix.org-1:VTTBFNQWbfyLuRzgm2I7AWSDJdqAa11ytLXHBhrprZk="
        "neovim-flake.cachix.org-1:iyQ6lHFhnB5UkVpxhQqLJbneWBTzM8LBYOFPLNH4qZw="
        "nyx.cachix.org-1:xH6G0MO9PrpeGe7mHBtj1WbNzmnXr7jId2mCiq6hipE="
        "cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g="
        "ags.cachix.org-1:naAvMrz0CuYqeyGNyLgE010iUiuf/qx6kYrUv3NwAJ8="
      ];
    };
  };
}
</file>

<file path="modules/core/roles/iso/system/security.nix">
{
  # attempt to fix "too many open files"
  security.pam.loginLimits = [
    {
      domain = "*";
      item = "nofile";
      type = "-";
      value = "65536";
    }
  ];
}
</file>

<file path="modules/core/roles/iso/system/users.nix">
{
  users = {
    # This is a live environment, and we want it to be as deterministic as possible during
    # its short life. Meaning users should not be able to change their own password from
    # whatever it is defined below this option.
    mutableUsers = false;

    users = {
      root.initialPassword = "";

      nixos = {
        isNormalUser = true;
        uid = 1000;
        initialPassword = "nixos";
        extraGroups = ["wheel"];
      };
    };
  };
}
</file>

<file path="modules/core/roles/laptop/system/power/monitors/scripts/power_monitor.sh">
#!/usr/bin/env bash

BAT=$(echo /sys/class/power_supply/BAT*)
BAT_STATUS="$BAT/status"
BAT_CAP="$BAT/capacity"
AC_PROFILE="performance"
BAT_PROFILE="balanced"

# low and critical battery levels
LOW_BAT_PERCENT=25
CRIT_BAT_PERCENT=5

# how long to wait before suspending
SUSPEND_WAIT=60s

# define the wait & suspend function
wait_and_suspend() {
  sleep "$SUSPEND_WAIT"

  # check if we're still discharging
  if [[ $(cat "$BAT_STATUS") == "Discharging" ]]; then
    systemctl suspend
  fi
}

# wait a while if needed
[[ -z $STARTUP_WAIT ]] || sleep "$STARTUP_WAIT"

# start the monitor loop
prev=0
while true; do
  # read the current state
  if [[ $(cat "$BAT_STATUS") == "Discharging" ]]; then
    profile=$BAT_PROFILE
  else
    profile=$AC_PROFILE
  fi

  # set the new profile
  if [[ $prev != "$profile" ]]; then
    echo -en "Setting power profile to ${profile}\n"
    powerprofilesctl set $profile
  fi
  prev=$profile

  if [[ $(cat "$BAT_CAP") -le $LOW_BAT_PERCENT && $BAT_STATUS == "Discharging" ]]; then
    notify-send --urgency=critical --hint=int:transient:1 --icon=battery_empty "Battery Low" \
      "Consider plugging in."

    for i in $(hyprctl instances -j | jaq ".[].instance" -r); do
      hyprctl -i "$i" --batch 'keyword decoration:blur:enabled false; keyword animations:enabled false'
    done
  fi

  if [[ $(cat "$BAT_CAP") -le $CRIT_BAT_PERCENT && $BAT_STATUS == "Discharging" ]]; then
    notify-send --urgency=critical --hint=int:transient:1 --icon=battery_empty "Battery Critically Low" \
      "Computer will suspend in 60 seconds."
    wait_and_suspend &
  fi

  if [[ $(cat "$BAT_CAP") -gt $LOW_BAT_PERCENT && $BAT_STATUS == "Charging" ]]; then
    for i in $(hyprctl instances -j | jaq ".[].instance" -r); do
      hyprctl -i "$i" --batch 'keyword decoration:blur:enabled true; keyword animations:enabled true'
    done
  fi

  # wait for the next power change event
  inotifywait -qq "$BAT_STATUS" "$BAT_CAP"
done
</file>

<file path="modules/core/roles/laptop/system/power/monitors/auto-cpufreq.nix">
{lib, ...}: let
  inherit (lib.modules) mkDefault;
in {
  # Superior power management for portable and battery powered systems. Plausible
  # but unnecessary on desktop systems.
  # See: <https://github.com/AdnanHodzic/auto-cpufreq>
  services.auto-cpufreq = {
    enable = true;
    settings = let
      MHz = x: x * 1000;
    in {
      charger = {
        # See available governors:
        #  `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors`
        governor = "performance";
        # See available preferences:
        #  `cat /sys/devices/system/cpu/cpu0/cpufreq/energy_performance_available_preferences`
        energy_performance_preference = "performance";
        scaling_min_freq = mkDefault (MHz 1800);
        scaling_max_freq = mkDefault (MHz 3800);
        turbo = "auto";
      };

      battery = {
        governor = "powersave";
        energy_performance_preference = "power";
        scaling_min_freq = mkDefault (MHz 1200);
        scaling_max_freq = mkDefault (MHz 1800);
        turbo = "never";

        # Tresholds for battery, in percent. While those are useful to preserve battery life
        # e.g. to make your system battery live longer before you consider replacement, you
        # probably do not want those on a portable system.
        # enable_thresholds = true
        # start_threshold = 20
        # stop_threshold = 80
      };
    };
  };
}
</file>

<file path="modules/core/roles/laptop/system/power/monitors/power-profiles.nix">
{
  inputs',
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) readFile;
  inherit (lib.modules) mkForce;
  inherit (lib.strings) makeBinPath;

  dependencies = with pkgs;
    [
      coreutils
      power-profiles-daemon
      inotify-tools
      jaq
    ]
    ++ [
      inputs'.hyprland.packages.hyprland
    ];
in {
  config = {
    # Allows changing system behavior based upon user-selected power profiles.
    # The project seems to be archived, and the GitLab page seems to be down
    # more often than it is up. We may consider removing it but lets keep it
    # for documentation. Power management should be handled by auto-cpufreq
    # instead, since it is more actively maintained.
    services.power-profiles-daemon.enable = false;

    # Power state monitor. Switches Power profiles based on charging state.
    # Plugged in - performance
    # Unplugged - power-saver
    systemd.services."power-monitor" = {
      description = "Power Monitoring Service";
      environment.PATH = mkForce "/run/wrappers/bin:${makeBinPath dependencies}";
      script = readFile ./scripts/power_monitor.sh;

      serviceConfig = {
        Type = "simple";
        Restart = "on-failure";
      };

      wants = ["power-profiles-daemon.service"];
      wantedBy = ["default.target"];
    };
  };
}
</file>

<file path="modules/core/roles/laptop/system/power/monitors/tlp.nix">
let
  MHz = x: x * 1000;
in {
  config = {
    services = {
      tlp = {
        enable = false;
        settings = {
          TLP_ENABLE = 1;
          TLP_DEFAULT_MODE = "BAT";

          # Timeout (in seconds) for the audio power saving mode (supports Intel HDA, AC97).
          # A value of 1 is recommended for Linux desktop environments with PulseAudio,
          # systems without PulseAudio may require 10. The value 0 disables power save.
          SOUND_POWER_SAVE_ON_AC = 10;
          SOUND_POWER_SAVE_ON_BAT = 10;

          # SOUND_POWER_SAVE_CONTROLLER = "Y";

          START_CHARGE_THRESH_BAT0 = 80;
          STOP_CHARGE_THRESH_BAT0 = 95;

          RESTORE_THRESHOLDS_ON_BAT = 1;

          # battery care drivers
          # NATACPI_ENABLE = 1;
          # TPACPI_ENABLE = 1;
          # TPSMAPI_ENABLE = 1;

          # DISK_DEVICES = "nvme0n1 mmcblk0";

          # DISK_APM_LEVEL_ON_AC = "254 254";
          # DISK_APM_LEVEL_ON_BAT = "128 128";

          # DISK_IDLE_SECS_ON_AC=0;
          DISK_IDLE_SECS_ON_BAT = 5;

          # Timeout (in seconds) for writing unsaved data in file system buffers to disk.
          # MAX_LOST_WORK_SECS_ON_AC = 15;
          # MAX_LOST_WORK_SECS_ON_BAT = 60;

          # RADEON_DPM_PERF_LEVEL_ON_AC = "auto";
          RADEON_DPM_PERF_LEVEL_ON_BAT = "low";

          # RADEON_DPM_STATE_ON_AC = "performance";
          # RADEON_DPM_STATE_ON_BAT = "battery";

          RADEON_POWER_PROFILE_ON_AC = "high";
          RADEON_POWER_PROFILE_ON_BAT = "low";

          # NMI_WATCHDOG = 0;

          # Sets Wi-Fi power saving mode. Adapter support depends on kernel and driver.
          # WIFI_PWR_ON_AC = "off";
          # WIFI_PWR_ON_BAT = "on";

          # WOL_DISABLE = "Y";

          # Select the platform profile to control system operating characteristics
          # around power/performance levels, thermal and fan speed.
          # PLATFORM_PROFILE_ON_AC = "performance";
          # PLATFORM_PROFILE_ON_BAT = "low-power";

          # <https://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html>
          CPU_SCALING_GOVERNOR_ON_AC = "schedutil";
          CPU_SCALING_GOVERNOR_ON_BAT = "powersave";

          CPU_SCALING_MIN_FREQ_ON_AC = MHz 1400;
          CPU_SCALING_MAX_FREQ_ON_AC = MHz 1700;
          CPU_SCALING_MIN_FREQ_ON_BAT = MHz 1400;
          CPU_SCALING_MAX_FREQ_ON_BAT = MHz 1600;

          CPU_BOOST_ON_AC = 1;
          CPU_BOOST_ON_BAT = 0;

          # SCHED_POWERSAVE_ON_AC = 0;
          # SCHED_POWERSAVE_ON_BAT = 1;

          # Restores radio device state (builtin Bluetooth, Wi-Fi, WWAN) from previous shutdown on boot.
          # RESTORE_DEVICE_STATE_ON_STARTUP = 0;

          DEVICES_TO_DISABLE_ON_STARTUP = "bluetooth wwan";
          DEVICES_TO_ENABLE_ON_STARTUP = "wifi";

          # DEVICES_TO_DISABLE_ON_SHUTDOWN = "bluetooth wifi wwan";
          # DEVICES_TO_ENABLE_ON_SHUTDOWN = "bluetooth wifi wwan";

          # has precedence
          DEVICES_TO_ENABLE_ON_AC = "";
          DEVICES_TO_DISABLE_ON_BAT = "";

          DEVICES_TO_DISABLE_ON_BAT_NOT_IN_USE = "bluetooth wwan";

          DEVICES_TO_DISABLE_ON_LAN_CONNECT = "wwan";
          DEVICES_TO_DISABLE_ON_WIFI_CONNECT = "";
          DEVICES_TO_DISABLE_ON_WWAN_CONNECT = "wifi";

          DEVICES_TO_ENABLE_ON_LAN_DISCONNECT = "wifi";
          DEVICES_TO_ENABLE_ON_WIFI_DISCONNECT = "";
          DEVICES_TO_ENABLE_ON_WWAN_DISCONNECT = "";

          DEVICES_TO_ENABLE_ON_DOCK = "wifi bluetooth";
          # DEVICES_TO_DISABLE_ON_DOCK = "";

          DEVICES_TO_ENABLE_ON_UNDOCK = "";
          DEVICES_TO_DISABLE_ON_UNDOCK = "bluetooth";

          # RUNTIME_PM_ON_AC = "on";
          # RUNTIME_PM_ON_BAT = "auto";

          # RUNTIME_PM_DENYLIST = "11:22.3 44:55.6";
          RUNTIME_PM_DRIVER_DENYLIST = "mei_me nouveau radeon psmouse";

          # RUNTIME_PM_ENABLE="11:22.3";
          # RUNTIME_PM_DISABLE="44:55.6";

          # PCIE_ASPM_ON_AC = "default";
          PCIE_ASPM_ON_BAT = "powersupersave";

          # USB_AUTOSUSPEND = 1;
          # USB_DENYLIST = "1111:2222 3333:4444";
          # USB_EXCLUDE_AUDIO = 1;
          # USB_EXCLUDE_BTUSB = 1;
          # USB_EXCLUDE_PHONE = 1;
          # USB_EXCLUDE_PRINTER = 1;
          # USB_EXCLUDE_WWAN = 0;
          # USB_ALLOWLIST="5555:6666 7777:8888";
          # USB_AUTOSUSPEND_DISABLE_ON_SHUTDOWN = 0;
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/laptop/system/power/default.nix">
{
  config,
  pkgs,
  ...
}: {
  imports = [./monitors/auto-cpufreq.nix];
  config = {
    environment.systemPackages = with pkgs; [
      acpi
      powertop
    ];

    boot = {
      kernelModules = ["acpi_call"];
      extraModulePackages = with config.boot.kernelPackages; [
        acpi_call
        cpupower
      ];
    };

    # Brightness control via xbacklight from users in the video group. This is
    # unnecessary on most systems as brightnessctl in combination with hardware keys
    # will allow you to control the brightness without additional privileges.
    hardware.acpilight.enable = false;

    services = {
      # DBus service that provides power management support to applications. In addition
      # to providing a standard interface for applications to query the power state and
      # request changes, it also provides a central place for applications to listen for
      # power changes. Some services (such as AGS) will inherently depend on this being
      # enabled, so we enable it unconditionally on laptops for power management.
      upower = {
        enable = true;
        percentageLow = 15;
        percentageCritical = 5;
        percentageAction = 3;
        criticalPowerAction = "Hibernate";
      };

      # Handle ACPI events via the ACPI daemon. Some functionality
      # is already provided by logind.
      acpid = {
        enable = true;
        logEvents = true;
      };

      # Undervolting service for Intel CPUs. Provides helpful functions
      # such as temperature target on battery, implied by the below configuration.
      undervolt = {
        # TODO: this is for Intel CPUs only, lets make it CPU gated.
        enable = false;

        # Settings for the undervolting service.
        tempBat = 65; # degrees Celsius
        package = pkgs.undervolt;
      };
    };
  };
}
</file>

<file path="modules/core/roles/laptop/system/module.nix">
{
  imports = [
    ./power

    ./touchpad.nix
  ];

  system.nixos.tags = ["laptop"];
}
</file>

<file path="modules/core/roles/laptop/system/touchpad.nix">
{
  config.services.libinput = {
    # enable libinput
    enable = true;

    # disable mouse acceleration
    mouse = {
      accelProfile = "flat";
      accelSpeed = "0";
      middleEmulation = false;
    };

    # touchpad settings
    touchpad = {
      naturalScrolling = true;
      tapping = true;
      clickMethod = "clickfinger";
      horizontalScrolling = false;
      disableWhileTyping = true;
    };
  };
}
</file>

<file path="modules/core/roles/microvm/system/nix/default.nix">
{pkgs, ...}: {
  nix = {
    settings.trusted-users = ["admin"];
    package = pkgs.nixUnstable;
    keep-outputs = true;
    keep-derivations = true;
    extra-experimental-features = [
      "nix-command"
      "flakes"
    ];
  };
}
</file>

<file path="modules/core/roles/microvm/system/os/programs/default.nix">
{
  imports = [
    ./git.nix
    ./neovim.nix
    ./tmux.nix
    ./zsh.nix
  ];
}
</file>

<file path="modules/core/roles/microvm/system/os/programs/git.nix">
{programs.git.enable = true;}
</file>

<file path="modules/core/roles/microvm/system/os/programs/neovim.nix">
{
  programs.neovim = {
    enable = true;
    viAlias = true;
    vimAlias = true;

    configure.customRC = ''
      syntax enable

      set noexpandtab
      set shiftwidth=2
      set tabstop=2

      set cindent
      set smartindent
      set autoindent
      set foldmethod=syntax
      nmap <F2> zA
      nmap <F3> zR
      nmap <F4> zM
    '';
  };
}
</file>

<file path="modules/core/roles/microvm/system/os/programs/tmux.nix">
{
  programs.tmux = {
    enable = true;
    baseIndex = 1;
    clock24 = true;
    historyLimit = 10000;
    terminal = "tmux-256color";
    extraConfig = ''
      unbind C-b
      set-option -g prefix C-a
      bind-key C-a last-window
      set-option -g set-titles on
      set-option -g set-titles-string '#H:#S.#I.#P #W #T'
      setw -g monitor-activity on
      set-option -g status-justify left
      set-option -g status-bg yellow
      set-option -g status-fg black
    '';
  };
}
</file>

<file path="modules/core/roles/microvm/system/os/programs/zsh.nix">
{
  environment.pathsToLink = ["/share/zsh"];
  programs.zsh = {
    enable = true;
    enableCompletion = true;
    autosuggestions = {
      enable = true;
      async = true;
    };
  };
}
</file>

<file path="modules/core/roles/microvm/system/os/users/admin.nix">
{
  users.users.admin = {
    isNormalUser = true;
    extraGroups = ["wheel"];
    openssh.authorizedKeys.keys = [];
  };
}
</file>

<file path="modules/core/roles/microvm/system/os/users/default.nix">
{
  imports = [
    ./admin.nix
  ];
}
</file>

<file path="modules/core/roles/microvm/system/os/default.nix">
{
  imports = [
    ./programs
    ./users

    ./environment.nix
    ./networking.nix
  ];
}
</file>

<file path="modules/core/roles/microvm/system/os/environment.nix">
{pkgs, ...}: {
  time.timeZone = "UTC";
  i18n.defaultLocale = "en_US.UTF-8";

  console = {
    font = "ter-v32n";
    packages = [pkgs.terminus-font];
  };

  environment = {
    shells = with pkgs; [bash zsh];
    systemPackages = with pkgs; [
      vim
      git
      killall
      bind.dnsutils
      tcpdump
      nmap
      usbutils
      wget
      direnv
      nix-direnv
      rage
      ssh-to-age
      pwgen
      w3m
    ];
  };
}
</file>

<file path="modules/core/roles/microvm/system/os/networking.nix">
{lib, ...}: {
  systemd.network.enable = true;

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;

  networking = {
    useDHCP = false;
    networkmanager.enable = false;
    firewall = {
      enable = true;
      allowPing = lib.mkForce false;
      allowedTCPPorts = lib.mkForce [];
      allowedUDPPorts = lib.mkForce [];
    };
  };
}
</file>

<file path="modules/core/roles/microvm/system/security/default.nix">
{
  security.sudo.extraRules = [
    {
      users = ["admin"];
      commands = [
        {
          command = "ALL";
          options = ["SETENV" "NOPASSWD"];
        }
      ];
    }
  ];
}
</file>

<file path="modules/core/roles/microvm/system/default.nix">
{
  imports = [
    ./nix
    ./os
    ./security
  ];

  system.nixos.tags = ["microvm"];
}
</file>

<file path="modules/core/roles/server/system/services/bincache/atticd.nix">
{
  inputs,
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services.bincache.atticd;

  domain = "cache" + config.networking.domain;
  inherit (cfg.settings) host port;
in {
  imports = [inputs.atticd.nixosModules.atticd];
  config = mkIf cfg.enable {
    environment.systemPackages = [pkgs.attic-client];

    networking.firewall.allowedTCPPorts = [port];

    users = {
      groups.atticd = {};
      users."atticd" = {
        isSystemUser = true;
        group = "atticd";
      };
    };

    systemd.services.atticd = {
      serviceConfig.DynamicUser = lib.mkForce false;
    };

    services = {
      atticd = {
        enable = true;
        credentialsFile = config.age.secrets.attic-env.path;
        user = "atticd";
        group = "atticd";

        settings = {
          listen = "${host}:${toString port}"; # this listens ONLY locally
          database.url = "postgresql:///atticd?host=/run/postgresql";

          allowed-hosts = ["${domain}"];
          api-endpoint = "https://${domain}/";
          require-proof-of-possession = false;

          /*
          storage = {
            type = "s3";
            region = "helios";
            bucket = "attic-cache";
            endpoint = "https://s3.notashelf.dev";
          };
          */

          chunking = let
            KB = x: x * 1024;
          in {
            nar-size-threshold = KB 64;
            min-size = KB 16;
            avg-size = KB 64;
            max-size = KB 256;
          };

          garbage-collection = {
            interval = "24 hours";
            default-retention-period = "6 weeks";
          };
        };
      };

      nginx.virtualHosts."${domain}" = {
        extraConfig = ''
          client_max_body_size 0;

          proxy_read_timeout 300s;
          proxy_send_timeout 300s;
        '';

        locations."/" = {
          recommendedProxySettings = true;
          proxyPass = "http://${host}:${toString port}";
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/bincache/default.nix">
{
  imports = [
    ./atticd.nix
    ./harmonia.nix
  ];
}
</file>

<file path="modules/core/roles/server/system/services/bincache/harmonia.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services.bincache.harmonia;

  inherit (cfg.settings) port host;
in {
  config = mkIf cfg.enable {
    users = {
      groups.harmonia = {};
      users.harmonia = {
        isSystemUser = true;
        createHome = true;
        group = "harmonia";
        home = "/srv/storage/harmonia";
      };
    };

    services = {
      harmonia = {
        enable = true;
        # NOTE: generated via
        # $ nix-store --generate-binary-cache-key cache.domain.tld-1 /var/lib/secrets/harmonia.secret /var/lib/secrets/harmonia.pub
        signKeyPath = config.age.secrets.harmonia-privateKey.path;
        settings = {
          # default ip:hostname to bind to
          bind = "${host}:${toString port}";
          priority = 50; # prefer cache.nixos.org
        };
      };
    };

    nix.settings.allowed-users = ["harmonia"];

    services.nginx = {
      virtualHosts."cache.notashelf.dev" =
        {
          locations."/".extraConfig = ''
            proxy_pass http://127.0.0.1:${toString port};
            proxy_set_header Host $host;
            proxy_redirect http:// https://;
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            zstd on;
            zstd_types application/x-nix-archive;
          '';

          quic = true;
        }
        // lib.sslTemplate;
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/bincache/nix-serve.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
in {
  # TODO: set up service options for nix-server
  # which I may or may not want to use in the future as an alternative to Harmonia
  config = mkIf false {
    /*
    Before enabling this service, you must make sure that a secret key has been generated.
    Run the following commands to generate the key, and paste the contents into an agenix
    secret after setting that up.

    ```
    nix-store --generate-binary-cache-key cache.domain.tld cache-priv-key.pem cache-pub-key.pem
    chown nix-serve cache-priv-key.pem
    cat cache-pub-key.pem
    ```
    */
    services.nix-serve = {
      enable = true;
      openFirewall = true;
      secretKeyFile = config.age.secrets.nix-serve.path;
    };

    services.nginx = {
      virtualHosts."cache.notashelf.dev" =
        {
          locations."/".extraConfig = ''
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_redirect http:// https://;
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            zstd on;
            zstd_types application/x-nix-archive;
          '';

          quic = true;
        }
        // lib.sslTemplate;
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/databases/default.nix">
{
  imports = [
    ./mongodb.nix
    ./postgresql.nix
    ./mysql.nix
    ./redis.nix
    ./garage.nix
  ];
}
</file>

<file path="modules/core/roles/server/system/services/databases/garage.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  config = mkIf cfg.database.garage.enable {
    networking.firewall.allowedTCPPorts = [3900 3901 3903];

    environment.systemPackages = [
      pkgs.garage
    ];

    systemd = let
      sc = config.systemd.services.garage.serviceConfig;
      gc = config.services.garage.settings;
    in {
      tmpfiles.rules = [
        "d /srv/storage/garage 0755 ${sc.User} ${sc.Group}"
        "d '${gc.data_dir}' 0700 ${sc.User} ${sc.Group} - -"
        "d '${gc.metadata_dir}' 0700 ${sc.User} ${sc.Group} - -"
      ];

      services.garage = {
        # this lets custom data directory work by having a real user own the service process
        # the user and its group need to be created in the users section
        serviceConfig = {
          User = "garage";
          Group = "garage";
          ReadWritePaths = [gc.data_dir gc.metadata_dir];
          RequiresMountsFor = [gc.data_dir];
          DynamicUser = false;
          PrivateTmp = true;
          ProtectSystem = true;
        };

        environment = {
          RUST_LOG = "debug";
        };
      };
    };

    users = {
      groups.garage = {};

      users.garage = {
        isSystemUser = true;
        createHome = false;
        group = "garage";
      };
    };

    services = {
      garage = {
        enable = true;
        package = pkgs.garage;

        environmentFile = config.age.secrets.garage-env.path;

        settings = {
          metadata_dir = "/srv/storage/garage/meta";
          data_dir = "/srv/storage/garage/data";
          metadata_fsync = false; # synchronous mode for the database engine

          db_engine = "lmdb";
          replication_mode = "none";
          compression_level = -1;

          # For inter-node comms
          rpc_bind_addr = "[::]:3901";
          rpc_secret_file = config.age.secrets.garage-env.path;
          # rpc_public_addr = "127.0.0.1:3901";

          # Standard S3 api endpoint
          s3_api = {
            s3_region = "helios";
            api_bind_addr = "[::]:3900";
          };

          # Static file serve endpoint
          /*
          s3_web = {
            bind_addr = "[::1]:3902";
            root_domain = "s3.notashelf.dev";
            index = "index.html";
          };

          "k2v_api" = {
           "api_bind_addr" = "[::1]:3904";
          };
          */

          # Admin api endpoint
          admin = {
            api_bind_addr = "[::]:3903";
          };
        };
      };

      nginx.virtualHosts."s3.notashelf.dev" =
        {
          locations."/".proxyPass = "http://127.0.0.1:3900";
          extraConfig = ''
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            # Disable buffering to a temporary file.
            proxy_max_temp_file_size 0;
          '';
        }
        // lib.sslTemplate;
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/databases/mongodb.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  config = mkIf cfg.database.mongodb.enable {
    services.mongodb = {
      enable = true;
      package = pkgs.mongodb;
      enableAuth = true;
      initialRootPassword = config.age.secrets.mongodb-secret.path;
      #bind_ip = "0.0.0.0";
      extraConfig = ''
        operationProfiling.mode: all
      '';
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/databases/mysql.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  config = mkIf cfg.database.mysql.enable {
    services.mysql = {
      enable = true;
      package = pkgs.mariadb;

      # databases and users
      ensureDatabases = ["mkm"];
      ensureUsers = [
        {
          name = "mkm";
          ensurePermissions = {
            "mkm.*" = "ALL PRIVILEGES";
          };
        }
      ];
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/databases/postgresql.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  config = mkIf cfg.database.postgresql.enable {
    services.postgresql = {
      enable = true;
      package = pkgs.postgresql_15;
      dataDir = "/srv/storage/postgresql/${config.services.postgresql.package.psqlSchema}";

      ensureDatabases = [
        "nextcloud"
        "forgejo"
        "grafana"
        "vaultwarden"
        "roundcube"
        "headscale"
        "atticd"
      ];

      ensureUsers = [
        {
          name = "postgres";
          ensureClauses = {
            superuser = true;
            login = true; # not implied by superuser
            createrole = true;
            createdb = true;
            replication = true;
          };
        }
        {
          name = "forgejo";
          ensureDBOwnership = true;
        }
        {
          name = "grafana";
          ensureDBOwnership = true;
        }
        {
          name = "vaultwarden";
          ensureDBOwnership = true;
        }
        {
          name = "nextcloud";
          ensureDBOwnership = true;
        }
        {
          name = "roundcube";
          ensureDBOwnership = true;
        }
        {
          name = "headscale";
          ensureDBOwnership = true;
        }
        {
          name = "atticd";
          ensureDBOwnership = true;
        }
      ];

      checkConfig = true;
      enableTCPIP = false;

      # http://pgconfigurator.cybertec.at/;
      # https://git.darmstadt.ccc.de/maralorn/nixos-config/-/blob/master/nixos/roles/matrix-synapse/postgres-tuning.nix
      settings = {
        # Connectivity;
        max_connections = 100;
        superuser_reserved_connections = 3;

        # Memory Settings;
        shared_buffers = "1024 MB";
        work_mem = "32 MB";
        maintenance_work_mem = "320 MB";
        huge_pages = "off";
        effective_cache_size = "2 GB";
        effective_io_concurrency = 100; # concurrent IO only really activated if OS supports posix_fadvise function;
        random_page_cost = 1.25; # speed of random disk access relative to sequential access (1.0);
        # Monitoring;
        shared_preload_libraries = "pg_stat_statements,auto_explain"; # per statement resource usage stats & log explain statements for slow queries
        track_io_timing = "on"; # measure exact block IO times;
        track_functions = "pl"; # track execution times of pl-language procedures if any;
        # Replication;
        wal_level = "replica"; # consider using at least "replica";
        max_wal_senders = 0;
        synchronous_commit = "on";

        # Checkpointing: ;
        checkpoint_timeout = "15 min";
        checkpoint_completion_target = 0.9;
        max_wal_size = "1024 MB";
        min_wal_size = "512 MB";

        # WAL writing;
        wal_compression = "on";
        wal_buffers = -1; # auto-tuned by Postgres till maximum of segment size (16MB by default);
        wal_writer_delay = "200ms";
        wal_writer_flush_after = "1MB";

        # Background writer;
        bgwriter_delay = "200ms";
        bgwriter_lru_maxpages = 100;
        bgwriter_lru_multiplier = 2.0;
        bgwriter_flush_after = 0;

        # Parallel queries: ;
        max_worker_processes = 6;
        max_parallel_workers_per_gather = 3;
        max_parallel_maintenance_workers = 3;
        max_parallel_workers = 6;
        parallel_leader_participation = "on";

        # Advanced features ;
        enable_partitionwise_join = "on";
        enable_partitionwise_aggregate = "on";
        jit = "on";

        jit_above_cost = 100000;
        jit_inline_above_cost = 150000;
        jit_optimize_above_cost = 500000;

        # log slow queries
        log_min_duration_statement = 100;
        "auto_explain.log_min_duration" = 100;

        # logging configuration
        log_connections = true;
        log_statement = "all";
        logging_collector = true;
        log_disconnections = true;
        log_destination = lib.mkForce "syslog";
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/databases/redis.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  config = mkIf cfg.database.redis.enable {
    services.redis = {
      vmOverCommit = true;
      servers = mkIf cfg.nextcloud.enable {
        nextcloud = {
          enable = true;
          user = "nextcloud";
          port = 0;
        };

        searxng = mkIf cfg.searxng.enable {
          enable = true;
          user = "searx";
          port = 6370;
          databases = 16;
          logLevel = "debug";
          requirePass = "searxng";
        };

        forgejo = mkIf cfg.forgejo.enable {
          enable = true;
          user = "forgejo";
          port = 6371;
          databases = 16;
          logLevel = "debug";
          requirePass = "forgejo";
        };

        mastodon = mkIf cfg.social.mastodon.enable {
          enable = true;
          user = "mastodon";
          port = 6372;
          databases = 16;
          logLevel = "debug";
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/monitoring/grafana/objects/dashboards/dashboard-01.json">
{
  "annotations": {
    "list": [
      {
        "$$hashKey": "object:1058",
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "gnetId": 1860,
  "graphTooltip": 1,
  "id": 17,
  "links": [
    {
      "icon": "external link",
      "tags": [],
      "targetBlank": true,
      "title": "GitHub",
      "type": "link",
      "url": "https://github.com/rfmoz/grafana-dashboards"
    },
    {
      "icon": "external link",
      "tags": [],
      "targetBlank": true,
      "title": "Grafana",
      "type": "link",
      "url": "https://grafana.com/grafana/dashboards/1860"
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 261,
      "panels": [],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Quick CPU / Mem / Disk",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Busy state of all CPU cores together",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgba(50, 172, 45, 0.97)",
                "value": null
              },
              {
                "color": "rgba(237, 129, 40, 0.89)",
                "value": 85
              },
              {
                "color": "rgba(245, 54, 54, 0.9)",
                "value": 95
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 0,
        "y": 1
      },
      "id": 20,
      "links": [],
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "(sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode!=\"idle\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))) * 100",
          "hide": false,
          "instant": true,
          "intervalFactor": 1,
          "legendFormat": "",
          "range": false,
          "refId": "A",
          "step": 240
        }
      ],
      "title": "CPU Busy",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Busy state of all CPU cores together (5 min average)",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgba(50, 172, 45, 0.97)",
                "value": null
              },
              {
                "color": "rgba(237, 129, 40, 0.89)",
                "value": 85
              },
              {
                "color": "rgba(245, 54, 54, 0.9)",
                "value": 95
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 3,
        "y": 1
      },
      "id": 155,
      "links": [],
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg_over_time(node_load5{instance=\"$node\",job=\"$job\"}[$__rate_interval]) * 100 / on(instance) group_left sum by (instance)(irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval]))",
          "format": "time_series",
          "hide": false,
          "instant": true,
          "intervalFactor": 1,
          "range": false,
          "refId": "A",
          "step": 240
        }
      ],
      "title": "Sys Load (5m avg)",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Busy state of all CPU cores together (15 min average)",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgba(50, 172, 45, 0.97)",
                "value": null
              },
              {
                "color": "rgba(237, 129, 40, 0.89)",
                "value": 85
              },
              {
                "color": "rgba(245, 54, 54, 0.9)",
                "value": 95
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 6,
        "y": 1
      },
      "id": 19,
      "links": [],
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "avg_over_time(node_load15{instance=\"$node\",job=\"$job\"}[$__rate_interval]) * 100 / on(instance) group_left sum by (instance)(irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval]))",
          "hide": false,
          "instant": true,
          "intervalFactor": 1,
          "range": false,
          "refId": "A",
          "step": 240
        }
      ],
      "title": "Sys Load (15m avg)",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Non available RAM memory",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgba(50, 172, 45, 0.97)",
                "value": null
              },
              {
                "color": "rgba(237, 129, 40, 0.89)",
                "value": 80
              },
              {
                "color": "rgba(245, 54, 54, 0.9)",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 9,
        "y": 1
      },
      "hideTimeOverride": false,
      "id": 16,
      "links": [],
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "((avg_over_time(node_memory_MemTotal_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval]) - avg_over_time(node_memory_MemFree_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval])) / (avg_over_time(node_memory_MemTotal_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval]) )) * 100",
          "format": "time_series",
          "hide": true,
          "instant": true,
          "intervalFactor": 1,
          "range": false,
          "refId": "A",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "100 - ((avg_over_time(node_memory_MemAvailable_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval]) * 100) / avg_over_time(node_memory_MemTotal_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval]))",
          "format": "time_series",
          "hide": false,
          "instant": true,
          "intervalFactor": 1,
          "range": false,
          "refId": "B",
          "step": 240
        }
      ],
      "title": "RAM Used",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Used Swap",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgba(50, 172, 45, 0.97)",
                "value": null
              },
              {
                "color": "rgba(237, 129, 40, 0.89)",
                "value": 10
              },
              {
                "color": "rgba(245, 54, 54, 0.9)",
                "value": 25
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 12,
        "y": 1
      },
      "id": 21,
      "links": [],
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "((avg_over_time(node_memory_SwapTotal_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval]) - avg_over_time(node_memory_SwapFree_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval])) / (avg_over_time(node_memory_SwapTotal_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval]) )) * 100",
          "instant": true,
          "intervalFactor": 1,
          "range": false,
          "refId": "A",
          "step": 240
        }
      ],
      "title": "SWAP Used",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Used Root FS",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgba(50, 172, 45, 0.97)",
                "value": null
              },
              {
                "color": "rgba(237, 129, 40, 0.89)",
                "value": 80
              },
              {
                "color": "rgba(245, 54, 54, 0.9)",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 3,
        "x": 15,
        "y": 1
      },
      "id": 154,
      "links": [],
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "100 - ((avg_over_time(node_filesystem_avail_bytes{instance=\"$node\",job=\"$job\",mountpoint=\"/\",fstype!=\"rootfs\"}[$__rate_interval]) * 100) / avg_over_time(node_filesystem_size_bytes{instance=\"$node\",job=\"$job\",mountpoint=\"/\",fstype!=\"rootfs\"}[$__rate_interval]))",
          "format": "time_series",
          "instant": true,
          "intervalFactor": 1,
          "range": false,
          "refId": "A",
          "step": 240
        }
      ],
      "title": "Root FS Used",
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Total number of CPU cores",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 18,
        "y": 1
      },
      "id": 14,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "expr": "count(count(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}) by (cpu))",
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "CPU Cores",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "System uptime",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 20,
        "y": 1
      },
      "hideTimeOverride": true,
      "id": 15,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "node_time_seconds{instance=\"$node\",job=\"$job\"} - node_boot_time_seconds{instance=\"$node\",job=\"$job\"}",
          "instant": true,
          "intervalFactor": 1,
          "range": false,
          "refId": "A",
          "step": 240
        }
      ],
      "title": "Uptime",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Total RootFS",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgba(50, 172, 45, 0.97)",
                "value": null
              },
              {
                "color": "rgba(237, 129, 40, 0.89)",
                "value": 70
              },
              {
                "color": "rgba(245, 54, 54, 0.9)",
                "value": 90
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 18,
        "y": 3
      },
      "id": 23,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "node_filesystem_size_bytes{instance=\"$node\",job=\"$job\",mountpoint=\"/\",fstype!=\"rootfs\"}",
          "format": "time_series",
          "hide": false,
          "instant": true,
          "intervalFactor": 1,
          "range": false,
          "refId": "A",
          "step": 240
        }
      ],
      "title": "RootFS Total",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Total RAM",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 20,
        "y": 3
      },
      "id": 75,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "node_memory_MemTotal_bytes{instance=\"$node\",job=\"$job\"}",
          "instant": true,
          "intervalFactor": 1,
          "range": false,
          "refId": "A",
          "step": 240
        }
      ],
      "title": "RAM Total",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Total SWAP",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [
            {
              "options": {
                "match": "null",
                "result": {
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 22,
        "y": 3
      },
      "id": 18,
      "links": [],
      "maxDataPoints": 100,
      "options": {
        "colorMode": "none",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "10.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "node_memory_SwapTotal_bytes{instance=\"$node\",job=\"$job\"}",
          "instant": true,
          "intervalFactor": 1,
          "range": false,
          "refId": "A",
          "step": 240
        }
      ],
      "title": "SWAP Total",
      "type": "stat"
    },
    {
      "collapsed": false,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 5
      },
      "id": 263,
      "panels": [],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Basic CPU / Mem / Net / Disk",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Basic CPU info",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "percent"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Busy Iowait"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#890F02",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Idle"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#052B51",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Busy Iowait"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#890F02",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Idle"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#7EB26D",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Busy System"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#EAB839",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Busy User"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#0A437C",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Busy Other"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#6D1F62",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 6
      },
      "id": 77,
      "links": [],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true,
          "width": 250
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "9.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"system\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
          "format": "time_series",
          "hide": false,
          "intervalFactor": 1,
          "legendFormat": "Busy System",
          "range": true,
          "refId": "A",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"user\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
          "format": "time_series",
          "hide": false,
          "intervalFactor": 1,
          "legendFormat": "Busy User",
          "range": true,
          "refId": "B",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"iowait\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
          "format": "time_series",
          "intervalFactor": 1,
          "legendFormat": "Busy Iowait",
          "range": true,
          "refId": "C",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=~\".*irq\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
          "format": "time_series",
          "intervalFactor": 1,
          "legendFormat": "Busy IRQs",
          "range": true,
          "refId": "D",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode!='idle',mode!='user',mode!='system',mode!='iowait',mode!='irq',mode!='softirq'}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
          "format": "time_series",
          "intervalFactor": 1,
          "legendFormat": "Busy Other",
          "range": true,
          "refId": "E",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "editorMode": "code",
          "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"idle\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
          "format": "time_series",
          "intervalFactor": 1,
          "legendFormat": "Idle",
          "range": true,
          "refId": "F",
          "step": 240
        }
      ],
      "title": "CPU Basic",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Basic memory usage",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Apps"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#629E51",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Buffers"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#614D93",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Cache"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#6D1F62",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Cached"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#511749",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Committed"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#508642",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Free"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#0A437C",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#CFFAFF",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Inactive"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#584477",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "PageTables"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#0A50A1",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Page_Tables"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#0A50A1",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "RAM_Free"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#E0F9D7",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SWAP Used"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#BF1B00",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Slab"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#806EB7",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Slab_Cache"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#E0752D",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Swap"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#BF1B00",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Swap Used"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#BF1B00",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Swap_Cache"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#C15C17",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Swap_Free"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#2F575E",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Unused"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#EAB839",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "RAM Total"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#E0F9D7",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 0
              },
              {
                "id": "custom.stacking",
                "value": {
                  "group": false,
                  "mode": "normal"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "RAM Cache + Buffer"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#052B51",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "RAM Free"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#7EB26D",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Available"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#DEDAF7",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 0
              },
              {
                "id": "custom.stacking",
                "value": {
                  "group": false,
                  "mode": "normal"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 12,
        "y": 6
      },
      "id": 78,
      "links": [],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true,
          "width": 350
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "expr": "node_memory_MemTotal_bytes{instance=\"$node\",job=\"$job\"}",
          "format": "time_series",
          "hide": false,
          "intervalFactor": 1,
          "legendFormat": "RAM Total",
          "refId": "A",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "expr": "node_memory_MemTotal_bytes{instance=\"$node\",job=\"$job\"} - node_memory_MemFree_bytes{instance=\"$node\",job=\"$job\"} - (node_memory_Cached_bytes{instance=\"$node\",job=\"$job\"} + node_memory_Buffers_bytes{instance=\"$node\",job=\"$job\"} + node_memory_SReclaimable_bytes{instance=\"$node\",job=\"$job\"})",
          "format": "time_series",
          "hide": false,
          "intervalFactor": 1,
          "legendFormat": "RAM Used",
          "refId": "B",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "expr": "node_memory_Cached_bytes{instance=\"$node\",job=\"$job\"} + node_memory_Buffers_bytes{instance=\"$node\",job=\"$job\"} + node_memory_SReclaimable_bytes{instance=\"$node\",job=\"$job\"}",
          "format": "time_series",
          "intervalFactor": 1,
          "legendFormat": "RAM Cache + Buffer",
          "refId": "C",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "expr": "node_memory_MemFree_bytes{instance=\"$node\",job=\"$job\"}",
          "format": "time_series",
          "intervalFactor": 1,
          "legendFormat": "RAM Free",
          "refId": "D",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "expr": "(node_memory_SwapTotal_bytes{instance=\"$node\",job=\"$job\"} - node_memory_SwapFree_bytes{instance=\"$node\",job=\"$job\"})",
          "format": "time_series",
          "intervalFactor": 1,
          "legendFormat": "SWAP Used",
          "refId": "E",
          "step": 240
        }
      ],
      "title": "Memory Basic",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Basic network info per interface",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bps"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Recv_bytes_eth2"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#7EB26D",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Recv_bytes_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#0A50A1",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Recv_drop_eth2"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#6ED0E0",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Recv_drop_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#E0F9D7",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Recv_errs_eth2"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#BF1B00",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Recv_errs_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#CCA300",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Trans_bytes_eth2"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#7EB26D",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Trans_bytes_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#0A50A1",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Trans_drop_eth2"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#6ED0E0",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Trans_drop_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#E0F9D7",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Trans_errs_eth2"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#BF1B00",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Trans_errs_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#CCA300",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "recv_bytes_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#0A50A1",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "recv_drop_eth0"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#99440A",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "recv_drop_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#967302",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "recv_errs_eth0"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#BF1B00",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "recv_errs_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#890F02",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "trans_bytes_eth0"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#7EB26D",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "trans_bytes_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#0A50A1",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "trans_drop_eth0"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#99440A",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "trans_drop_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#967302",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "trans_errs_eth0"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#BF1B00",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "trans_errs_lo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#890F02",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*trans.*/"
            },
            "properties": [
              {
                "id": "custom.transform",
                "value": "negative-Y"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 13
      },
      "id": 74,
      "links": [],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "expr": "irate(node_network_receive_bytes_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])*8",
          "format": "time_series",
          "intervalFactor": 1,
          "legendFormat": "recv {{device}}",
          "refId": "A",
          "step": 240
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "expr": "irate(node_network_transmit_bytes_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])*8",
          "format": "time_series",
          "intervalFactor": 1,
          "legendFormat": "trans {{device}} ",
          "refId": "B",
          "step": 240
        }
      ],
      "title": "Network Traffic Basic",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "Y4SSG429DWCGDQ3R"
      },
      "description": "Disk space used of all filesystems mounted",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 12,
        "y": 13
      },
      "id": 152,
      "links": [],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.2.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "expr": "100 - ((node_filesystem_avail_bytes{instance=\"$node\",job=\"$job\",device!~'rootfs'} * 100) / node_filesystem_size_bytes{instance=\"$node\",job=\"$job\",device!~'rootfs'})",
          "format": "time_series",
          "intervalFactor": 1,
          "legendFormat": "{{mountpoint}}",
          "refId": "A",
          "step": 240
        }
      ],
      "title": "Disk Space Used Basic",
      "type": "timeseries"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 20
      },
      "id": 265,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "percentage",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 70,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "smooth",
                "lineWidth": 2,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "percent"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Idle - Waiting for something to happen"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Iowait - Waiting for I/O to complete"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Irq - Servicing interrupts"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Nice - Niced processes executing in user mode"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Softirq - Servicing softirqs"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Steal - Time spent in other operating systems when running in a virtualized environment"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FCE2DE",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "System - Processes executing in kernel mode"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "User - Normal processes executing in user mode"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#5195CE",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 12,
            "w": 12,
            "x": 0,
            "y": 23
          },
          "id": 3,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 250
            },
            "tooltip": {
              "mode": "multi",
              "sort": "desc"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"system\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "System - Processes executing in kernel mode",
              "range": true,
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"user\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "User - Normal processes executing in user mode",
              "range": true,
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"nice\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Nice - Niced processes executing in user mode",
              "range": true,
              "refId": "C",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"iowait\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Iowait - Waiting for I/O to complete",
              "range": true,
              "refId": "E",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"irq\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Irq - Servicing interrupts",
              "range": true,
              "refId": "F",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"softirq\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Softirq - Servicing softirqs",
              "range": true,
              "refId": "G",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"steal\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Steal - Time spent in other operating systems when running in a virtualized environment",
              "range": true,
              "refId": "H",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "sum by(instance) (irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\", mode=\"idle\"}[$__rate_interval])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])))",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Idle - Waiting for something to happen",
              "range": true,
              "refId": "J",
              "step": 240
            }
          ],
          "title": "CPU",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 40,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "normal"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Apps"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#629E51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A437C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#CFFAFF",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "RAM_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap - Swap memory usage"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#2F575E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Unused"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Unused - Free memory unassigned"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Hardware Corrupted - *./"
                },
                "properties": [
                  {
                    "id": "custom.stacking",
                    "value": {
                      "group": false,
                      "mode": "normal"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 12,
            "w": 12,
            "x": 12,
            "y": 23
          },
          "id": 24,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 350
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_MemTotal_bytes{instance=\"$node\",job=\"$job\"} - node_memory_MemFree_bytes{instance=\"$node\",job=\"$job\"} - node_memory_Buffers_bytes{instance=\"$node\",job=\"$job\"} - node_memory_Cached_bytes{instance=\"$node\",job=\"$job\"} - node_memory_Slab_bytes{instance=\"$node\",job=\"$job\"} - node_memory_PageTables_bytes{instance=\"$node\",job=\"$job\"} - node_memory_SwapCached_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Apps - Memory used by user-space applications",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_PageTables_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "PageTables - Memory used to map between virtual and physical memory addresses",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_SwapCached_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "SwapCache - Memory that keeps track of pages that have been fetched from swap but not yet been modified",
              "refId": "C",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Slab_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Slab - Memory used by the kernel to cache data structures for its own use (caches like inode, dentry, etc)",
              "refId": "D",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Cached_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Cache - Parked file data (file content) cache",
              "refId": "E",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Buffers_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Buffers - Block device (e.g. harddisk) cache",
              "refId": "F",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_MemFree_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Unused - Free memory unassigned",
              "refId": "G",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "(node_memory_SwapTotal_bytes{instance=\"$node\",job=\"$job\"} - node_memory_SwapFree_bytes{instance=\"$node\",job=\"$job\"})",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Swap - Swap space used",
              "refId": "H",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_HardwareCorrupted_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working",
              "refId": "I",
              "step": 240
            }
          ],
          "title": "Memory Stack",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bits out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 40,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bps"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "receive_packets_eth0"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "receive_packets_lo"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "transmit_packets_eth0"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "transmit_packets_lo"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Trans.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 12,
            "w": 12,
            "x": 0,
            "y": 35
          },
          "id": 84,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_receive_bytes_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])*8",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Receive",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_transmit_bytes_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])*8",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Transmit",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Network Traffic",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 40,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 12,
            "w": 12,
            "x": 12,
            "y": 35
          },
          "id": 156,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_filesystem_size_bytes{instance=\"$node\",job=\"$job\",device!~'rootfs'} - node_filesystem_avail_bytes{instance=\"$node\",job=\"$job\",device!~'rootfs'}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{mountpoint}}",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Disk Space Used",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "IO read (-) / write (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "iops"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Read.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda2_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BA43A9",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda3_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F4D598",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#962D82",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#9AC48A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#65C5DB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9934E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FCEACA",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9E2D2",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 12,
            "w": 12,
            "x": 0,
            "y": 47
          },
          "id": 229,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_reads_completed_total{instance=\"$node\",job=\"$job\",device=~\"$diskdevices\"}[$__rate_interval])",
              "intervalFactor": 4,
              "legendFormat": "{{device}} - Reads completed",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_writes_completed_total{instance=\"$node\",job=\"$job\",device=~\"$diskdevices\"}[$__rate_interval])",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Writes completed",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Disk IOps",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes read (-) / write (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 40,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "Bps"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "io time"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#890F02",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*read*./"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byType",
                  "options": "time"
                },
                "properties": [
                  {
                    "id": "custom.axisPlacement",
                    "value": "hidden"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 12,
            "w": 12,
            "x": 12,
            "y": 47
          },
          "id": 42,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_read_bytes_total{instance=\"$node\",job=\"$job\",device=~\"$diskdevices\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Successfully read bytes",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_written_bytes_total{instance=\"$node\",job=\"$job\",device=~\"$diskdevices\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Successfully written bytes",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "I/O Usage Read / Write",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "%util",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 40,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "io time"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#890F02",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byType",
                  "options": "time"
                },
                "properties": [
                  {
                    "id": "custom.axisPlacement",
                    "value": "hidden"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 12,
            "w": 12,
            "x": 0,
            "y": 59
          },
          "id": 127,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_io_time_seconds_total{instance=\"$node\",job=\"$job\",device=~\"$diskdevices\"} [$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{device}}",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "I/O Utilization",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "percentage",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "bars",
                "fillOpacity": 70,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "smooth",
                "lineWidth": 2,
                "pointSize": 3,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "max": 1,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/^Guest - /"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#5195ce",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/^GuestNice - /"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#c15c17",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 12,
            "w": 12,
            "x": 12,
            "y": 59
          },
          "id": 319,
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "desc"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "sum by(instance) (irate(node_cpu_guest_seconds_total{instance=\"$node\",job=\"$job\", mode=\"user\"}[1m])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[1m])))",
              "hide": false,
              "legendFormat": "Guest - Time spent running a virtual CPU for a guest operating system",
              "range": true,
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "sum by(instance) (irate(node_cpu_guest_seconds_total{instance=\"$node\",job=\"$job\", mode=\"nice\"}[1m])) / on(instance) group_left sum by (instance)((irate(node_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[1m])))",
              "hide": false,
              "legendFormat": "GuestNice - Time spent running a niced guest  (virtual CPU for guest operating system)",
              "range": true,
              "refId": "B"
            }
          ],
          "title": "CPU spent seconds in guests (VMs)",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "CPU / Memory / Net / Disk",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 21
      },
      "id": 266,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "normal"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Apps"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#629E51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A437C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#CFFAFF",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "RAM_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#2F575E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Unused"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 54
          },
          "id": 136,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 350
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Inactive_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Inactive - Memory which has been less recently used.  It is more eligible to be reclaimed for other purposes",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Active_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Active - Memory that has been used more recently and usually not reclaimed unless absolutely necessary",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Memory Active / Inactive",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Apps"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#629E51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A437C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#CFFAFF",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "RAM_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#2F575E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Unused"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*CommitLimit - *./"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 54
          },
          "id": 135,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 350
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Committed_AS_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Committed_AS - Amount of memory presently allocated on the system",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_CommitLimit_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "CommitLimit - Amount of  memory currently available to be allocated on the system",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Memory Committed",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "normal"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Apps"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#629E51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A437C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#CFFAFF",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "RAM_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#2F575E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Unused"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 64
          },
          "id": 191,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 350
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Inactive_file_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Inactive_file - File-backed memory on inactive LRU list",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Inactive_anon_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Inactive_anon - Anonymous and swap cache on inactive LRU list, including tmpfs (shmem)",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Active_file_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Active_file - File-backed memory on active LRU list",
              "refId": "C",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Active_anon_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Active_anon - Anonymous and swap cache on active least-recently-used (LRU) list, including tmpfs",
              "refId": "D",
              "step": 240
            }
          ],
          "title": "Memory Active / Inactive Detail",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Active"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#99440A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#58140C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Dirty"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#B7DBAB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Mapped"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM + Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "VmallocUsed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 64
          },
          "id": 130,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Writeback_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Writeback - Memory which is actively being written back to disk",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_WritebackTmp_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "WritebackTmp - Memory used by FUSE for temporary writeback buffers",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Dirty_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Dirty - Memory which is waiting to get written back to the disk",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "Memory Writeback and Dirty",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Apps"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#629E51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A437C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#CFFAFF",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "RAM_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#2F575E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Unused"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "ShmemHugePages - Memory used by shared memory (shmem) and tmpfs allocated  with huge pages"
                },
                "properties": [
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "ShmemHugePages - Memory used by shared memory (shmem) and tmpfs allocated  with huge pages"
                },
                "properties": [
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 74
          },
          "id": 138,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 350
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Mapped_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Mapped - Used memory in mapped pages files which have been mapped, such as libraries",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Shmem_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Shmem - Used shared memory (shared between several processes, thus including RAM disks)",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_ShmemHugePages_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "ShmemHugePages - Memory used by shared memory (shmem) and tmpfs allocated  with huge pages",
              "refId": "C",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_ShmemPmdMapped_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "ShmemPmdMapped - Amount of shared (shmem/tmpfs) memory backed by huge pages",
              "refId": "D",
              "step": 240
            }
          ],
          "title": "Memory Shared and Mapped",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "normal"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Active"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#99440A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#58140C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Dirty"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#B7DBAB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Mapped"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM + Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "VmallocUsed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 74
          },
          "id": 131,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_SUnreclaim_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "SUnreclaim - Part of Slab, that cannot be reclaimed on memory pressure",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_SReclaimable_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "SReclaimable - Part of Slab, that might be reclaimed, such as caches",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Memory Slab",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Active"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#99440A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#58140C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Dirty"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#B7DBAB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Mapped"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM + Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "VmallocUsed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 84
          },
          "id": 70,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_VmallocChunk_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "VmallocChunk - Largest contiguous block of vmalloc area which is free",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_VmallocTotal_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "VmallocTotal - Total size of vmalloc memory area",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_VmallocUsed_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "VmallocUsed - Amount of vmalloc area which is used",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "Memory Vmalloc",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Apps"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#629E51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A437C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#CFFAFF",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "RAM_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#2F575E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Unused"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 84
          },
          "id": 159,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 350
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Bounce_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Bounce - Memory used for block device bounce buffers",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Memory Bounce",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Active"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#99440A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#58140C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Dirty"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#B7DBAB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Mapped"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM + Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "VmallocUsed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Inactive *./"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 94
          },
          "id": 129,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_AnonHugePages_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "AnonHugePages - Memory in anonymous huge pages",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_AnonPages_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "AnonPages - Memory in user pages not backed by files",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Memory Anonymous",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Apps"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#629E51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A437C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#CFFAFF",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "RAM_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#2F575E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Unused"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 94
          },
          "id": 160,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 350
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_KernelStack_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "KernelStack - Kernel memory stack. This is not reclaimable",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Percpu_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "PerCPU - Per CPU memory allocated dynamically by loadable modules",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Memory Kernel / CPU",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "pages",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Active"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#99440A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#58140C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Dirty"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#B7DBAB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Mapped"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM + Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "VmallocUsed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 104
          },
          "id": 140,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_HugePages_Free{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "HugePages_Free - Huge pages in the pool that are not yet allocated",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_HugePages_Rsvd{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "HugePages_Rsvd - Huge pages for which a commitment to allocate from the pool has been made, but no allocation has yet been made",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_HugePages_Surp{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "HugePages_Surp - Huge pages in the pool above the value in /proc/sys/vm/nr_hugepages",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "Memory HugePages Counter",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Active"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#99440A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#58140C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Dirty"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#B7DBAB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Mapped"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM + Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "VmallocUsed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 104
          },
          "id": 71,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_HugePages_Total{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "HugePages - Total size of the pool of huge pages",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Hugepagesize_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Hugepagesize - Huge Page size",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Memory HugePages Size",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Active"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#99440A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#58140C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Dirty"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#B7DBAB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Mapped"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM + Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "VmallocUsed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 114
          },
          "id": 128,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_DirectMap1G_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "DirectMap1G - Amount of pages mapped as this size",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_DirectMap2M_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "DirectMap2M - Amount of pages mapped as this size",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_DirectMap4k_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "DirectMap4K - Amount of pages mapped as this size",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "Memory DirectMap",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Apps"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#629E51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A437C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#CFFAFF",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "RAM_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#2F575E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Unused"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 114
          },
          "id": 137,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 350
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Unevictable_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Unevictable - Amount of unevictable memory that can't be swapped out for a variety of reasons",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_Mlocked_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "MLocked - Size of pages locked to memory using the mlock() system call",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Memory Unevictable and MLocked",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Active"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#99440A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#58140C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Dirty"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#B7DBAB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Mapped"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM + Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "VmallocUsed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 124
          },
          "id": 132,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_memory_NFS_Unstable_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "NFS Unstable - Memory in NFS pages sent to the server, but not yet committed to the storage",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Memory NFS",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Memory Meminfo",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 22
      },
      "id": 267,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "pages out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*out/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 41
          },
          "id": 176,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_vmstat_pgpgin{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Pagesin - Page in operations",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_vmstat_pgpgout{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Pagesout - Page out operations",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Memory Pages In / Out",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "pages out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*out/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 41
          },
          "id": 22,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_vmstat_pswpin{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Pswpin - Pages swapped in",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_vmstat_pswpout{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Pswpout - Pages swapped out",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Memory Pages Swap In / Out",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "faults",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "normal"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Apps"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#629E51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A437C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Hardware Corrupted - Amount of RAM that the kernel identified as corrupted / not working"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#CFFAFF",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "RAM_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#806EB7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#2F575E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Unused"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Pgfault - Page major and minor fault operations"
                },
                "properties": [
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  },
                  {
                    "id": "custom.stacking",
                    "value": {
                      "group": false,
                      "mode": "normal"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 51
          },
          "id": 175,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 350
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_vmstat_pgfault{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Pgfault - Page major and minor fault operations",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_vmstat_pgmajfault{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Pgmajfault - Major page fault operations",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_vmstat_pgfault{instance=\"$node\",job=\"$job\"}[$__rate_interval])  - irate(node_vmstat_pgmajfault{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Pgminfault - Minor page fault operations",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "Memory Page Faults",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Active"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#99440A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Buffers"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#58140C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6D1F62",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Cached"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Committed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#508642",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Dirty"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Free"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#B7DBAB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Mapped"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "PageTables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Page_Tables"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Slab_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Swap_Cache"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C15C17",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#511749",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total RAM + Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#052B51",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Total Swap"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "VmallocUsed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 51
          },
          "id": 307,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_vmstat_oom_kill{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "oom killer invocations ",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "OOM Killer",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Memory Vmstat",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 23
      },
      "id": 293,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "seconds",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Variation*./"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#890F02",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 56
          },
          "id": 260,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_timex_estimated_error_seconds{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Estimated error in seconds",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_timex_offset_seconds{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Time offset in between local system and reference clock",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_timex_maxerror_seconds{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Maximum error in seconds",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "Time Synchronized Drift",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 56
          },
          "id": 291,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_timex_loop_time_constant{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Phase-locked loop time adjust",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Time PLL Adjust",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Variation*./"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#890F02",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 66
          },
          "id": 168,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_timex_sync_status{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Is clock synchronized to a reliable server (1 = yes, 0 = no)",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_timex_frequency_adjustment_ratio{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Local clock frequency adjustment",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Time Synchronized Status",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "seconds",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 66
          },
          "id": 294,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_timex_tick_seconds{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Seconds between clock ticks",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_timex_tai_offset_seconds{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "International Atomic Time (TAI) offset",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Time Misc",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "System Timesync",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 24
      },
      "id": 312,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 43
          },
          "id": 62,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_procs_blocked{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Processes blocked waiting for I/O to complete",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_procs_running{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Processes in runnable state",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Processes Status",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "normal"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 43
          },
          "id": 315,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_processes_state{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ state }}",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Processes State",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "forks / sec",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 53
          },
          "id": 148,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_forks_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Processes forks second",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Processes  Forks",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "decbytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Max.*/"
                },
                "properties": [
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 53
          },
          "id": 149,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(process_virtual_memory_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Processes virtual memory size in bytes",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "process_resident_memory_max_bytes{instance=\"$node\",job=\"$job\"}",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Maximum amount of virtual memory available in bytes",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(process_virtual_memory_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Processes virtual memory size in bytes",
              "refId": "C",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(process_virtual_memory_max_bytes{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Maximum amount of virtual memory available in bytes",
              "refId": "D",
              "step": 240
            }
          ],
          "title": "Processes Memory",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "PIDs limit"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F2495C",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 63
          },
          "id": 313,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_processes_pids{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Number of PIDs",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_processes_max_processes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "PIDs limit",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "PIDs Number and Limit",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "seconds",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*waiting.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 63
          },
          "id": 305,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_schedstat_running_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "CPU {{ cpu }} - seconds spent running a process",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_schedstat_waiting_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "CPU {{ cpu }} - seconds spent by processing waiting for this CPU",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Process schedule stats Running / Waiting",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Threads limit"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F2495C",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 73
          },
          "id": 314,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_processes_threads{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Allocated threads",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_processes_max_threads{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Threads limit",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Threads Number and Limit",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "System Processes",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 25
      },
      "id": 269,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 26
          },
          "id": 8,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_context_switches_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Context switches",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_intr_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Interrupts",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Context Switches / Interrupts",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 26
          },
          "id": 7,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_load1{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 4,
              "legendFormat": "Load 1m",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_load5{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 4,
              "legendFormat": "Load 5m",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_load15{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 4,
              "legendFormat": "Load 15m",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "System Load",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "hertz"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Max"
                },
                "properties": [
                  {
                    "id": "custom.lineStyle",
                    "value": {
                      "dash": [
                        10,
                        10
                      ],
                      "fill": "dash"
                    }
                  },
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "blue",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 10
                  },
                  {
                    "id": "custom.hideFrom",
                    "value": {
                      "legend": true,
                      "tooltip": false,
                      "viz": false
                    }
                  },
                  {
                    "id": "custom.fillBelowTo",
                    "value": "Min"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Min"
                },
                "properties": [
                  {
                    "id": "custom.lineStyle",
                    "value": {
                      "dash": [
                        10,
                        10
                      ],
                      "fill": "dash"
                    }
                  },
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "blue",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.hideFrom",
                    "value": {
                      "legend": true,
                      "tooltip": false,
                      "viz": false
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 36
          },
          "id": 321,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "desc"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "node_cpu_scaling_frequency_hertz{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "CPU {{ cpu }}",
              "range": true,
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "avg(node_cpu_scaling_frequency_max_hertz{instance=\"$node\",job=\"$job\"})",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Max",
              "range": true,
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "avg(node_cpu_scaling_frequency_min_hertz{instance=\"$node\",job=\"$job\"})",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Min",
              "range": true,
              "refId": "C",
              "step": 240
            }
          ],
          "title": "CPU Frequency Scaling",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "https://docs.kernel.org/accounting/psi.html",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 10,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Memory some"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "dark-red",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Memory full"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "light-red",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "I/O some"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "dark-blue",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "I/O full"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "light-blue",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 36
          },
          "id": 322,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "rate(node_pressure_cpu_waiting_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "CPU some",
              "range": true,
              "refId": "CPU some",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "rate(node_pressure_memory_waiting_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Memory some",
              "range": true,
              "refId": "Memory some",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "rate(node_pressure_memory_stalled_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "Memory full",
              "range": true,
              "refId": "Memory full",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "rate(node_pressure_io_waiting_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "I/O some",
              "range": true,
              "refId": "I/O some",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "rate(node_pressure_io_stalled_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "I/O full",
              "range": true,
              "refId": "I/O full",
              "step": 240
            }
          ],
          "title": "Pressure Stall Information",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Critical*./"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Max*./"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 46
          },
          "id": 259,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_interrupts_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ type }} - {{ info }}",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Interrupts Detail",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 46
          },
          "id": 306,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_schedstat_timeslices_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "CPU {{ cpu }}",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Schedule timeslices executed by each cpu",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 56
          },
          "id": 151,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_entropy_available_bits{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Entropy available to random number generators",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Entropy",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "seconds",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 56
          },
          "id": 308,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(process_cpu_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Time spent",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "CPU time spent in user and system contexts",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Max*./"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#890F02",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 66
          },
          "id": 64,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "process_max_fds{instance=\"$node\",job=\"$job\"}",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Maximum open file descriptors",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "process_open_fds{instance=\"$node\",job=\"$job\"}",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Open file descriptors",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "File Descriptors",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "System Misc",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 26
      },
      "id": 304,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "temperature",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "celsius"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Critical*./"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Max*./"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 59
          },
          "id": 158,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_hwmon_temp_celsius{instance=\"$node\",job=\"$job\"} * on(chip) group_left(chip_name) node_hwmon_chip_names",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ chip_name }} {{ sensor }} temp",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_hwmon_temp_crit_alarm_celsius{instance=\"$node\",job=\"$job\"} * on(chip) group_left(chip_name) node_hwmon_chip_names",
              "format": "time_series",
              "hide": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ chip_name }} {{ sensor }} Critical Alarm",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_hwmon_temp_crit_celsius{instance=\"$node\",job=\"$job\"} * on(chip) group_left(chip_name) node_hwmon_chip_names",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ chip_name }} {{ sensor }} Critical",
              "refId": "C",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_hwmon_temp_crit_hyst_celsius{instance=\"$node\",job=\"$job\"} * on(chip) group_left(chip_name) node_hwmon_chip_names",
              "format": "time_series",
              "hide": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ chip_name }} {{ sensor }} Critical Historical",
              "refId": "D",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_hwmon_temp_max_celsius{instance=\"$node\",job=\"$job\"} * on(chip) group_left(chip_name) node_hwmon_chip_names",
              "format": "time_series",
              "hide": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ chip_name }} {{ sensor }} Max",
              "refId": "E",
              "step": 240
            }
          ],
          "title": "Hardware temperature monitor",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Max*./"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 59
          },
          "id": 300,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_cooling_device_cur_state{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Current {{ name }} in {{ type }}",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_cooling_device_max_state{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Max {{ name }} in {{ type }}",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Throttle cooling device",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 69
          },
          "id": 302,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_power_supply_online{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ power_supply }} online",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Power supply",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Hardware Misc",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 27
      },
      "id": 296,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 46
          },
          "id": 297,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_systemd_socket_accepted_connections_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ name }} Connections",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Systemd Sockets",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "normal"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Failed"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F2495C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Inactive"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FF9830",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Active"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#73BF69",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Deactivating"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FFCB7D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Activating"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#C8F2C2",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 46
          },
          "id": 298,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_systemd_units{instance=\"$node\",job=\"$job\",state=\"activating\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Activating",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_systemd_units{instance=\"$node\",job=\"$job\",state=\"active\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Active",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_systemd_units{instance=\"$node\",job=\"$job\",state=\"deactivating\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Deactivating",
              "refId": "C",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_systemd_units{instance=\"$node\",job=\"$job\",state=\"failed\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Failed",
              "refId": "D",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_systemd_units{instance=\"$node\",job=\"$job\",state=\"inactive\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Inactive",
              "refId": "E",
              "step": 240
            }
          ],
          "title": "Systemd Units State",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Systemd",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 28
      },
      "id": 270,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "The number (after merges) of I/O requests completed per second for the device",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "IO read (-) / write (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "iops"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Read.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda2_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BA43A9",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda3_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F4D598",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#962D82",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#9AC48A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#65C5DB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9934E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FCEACA",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9E2D2",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 47
          },
          "id": 9,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_reads_completed_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "intervalFactor": 4,
              "legendFormat": "{{device}} - Reads completed",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_writes_completed_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Writes completed",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Disk IOps Completed",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "The number of bytes read from or written to the device per second",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes read (-) / write (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "Bps"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Read.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda2_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BA43A9",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda3_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F4D598",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#962D82",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#9AC48A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#65C5DB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9934E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FCEACA",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9E2D2",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 47
          },
          "id": 33,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_read_bytes_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 4,
              "legendFormat": "{{device}} - Read bytes",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_written_bytes_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Written bytes",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Disk R/W Data",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "The average time for requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "time. read (-) / write (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 30,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Read.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda2_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BA43A9",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda3_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F4D598",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#962D82",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#9AC48A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#65C5DB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9934E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FCEACA",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9E2D2",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 57
          },
          "id": 37,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_read_time_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval]) / irate(node_disk_reads_completed_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "hide": false,
              "interval": "",
              "intervalFactor": 4,
              "legendFormat": "{{device}} - Read wait time avg",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_write_time_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval]) / irate(node_disk_writes_completed_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Write wait time avg",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Disk Average Wait Time",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "The average queue length of the requests that were issued to the device",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "aqu-sz",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "none"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda2_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BA43A9",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda3_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F4D598",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#962D82",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#9AC48A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#65C5DB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9934E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FCEACA",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9E2D2",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 57
          },
          "id": 35,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_io_time_weighted_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "interval": "",
              "intervalFactor": 4,
              "legendFormat": "{{device}}",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Average Queue Size",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "The number of read and write requests merged per second that were queued to the device",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "I/Os",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "iops"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Read.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda2_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BA43A9",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda3_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F4D598",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#962D82",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#9AC48A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#65C5DB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9934E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FCEACA",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9E2D2",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 67
          },
          "id": 133,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_reads_merged_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Read merged",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_writes_merged_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Write merged",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Disk R/W Merged",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "Percentage of elapsed time during which I/O requests were issued to the device (bandwidth utilization for the device). Device saturation occurs when this value is close to 100% for devices serving requests serially.  But for devices  serving requests in parallel, such as RAID arrays and modern SSDs, this number does not reflect their performance limits.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "%util",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 30,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda2_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BA43A9",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda3_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F4D598",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#962D82",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#9AC48A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#65C5DB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9934E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FCEACA",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9E2D2",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 67
          },
          "id": 36,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_io_time_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "interval": "",
              "intervalFactor": 4,
              "legendFormat": "{{device}} - IO",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_discard_time_seconds_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "interval": "",
              "intervalFactor": 4,
              "legendFormat": "{{device}} - discard",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Time Spent Doing I/Os",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "The number of outstanding requests at the instant the sample was taken. Incremented as requests are given to appropriate struct request_queue and decremented as they finish.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "Outstanding req.",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "none"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda2_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BA43A9",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda3_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F4D598",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#962D82",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#9AC48A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#65C5DB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9934E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FCEACA",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9E2D2",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 77
          },
          "id": 34,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_disk_io_now{instance=\"$node\",job=\"$job\"}",
              "interval": "",
              "intervalFactor": 4,
              "legendFormat": "{{device}} - IO now",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Instantaneous Queue Size",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "IOs",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "iops"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EAB839",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#6ED0E0",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EF843C",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#584477",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda2_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BA43A9",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sda3_.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F4D598",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#0A50A1",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#BF1B00",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdb3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0752D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#962D82",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#614D93",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdc3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#9AC48A",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#65C5DB",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9934E",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#EA6460",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde1.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E0F9D7",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sdd2.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#FCEACA",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*sde3.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F9E2D2",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 77
          },
          "id": 301,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_discards_completed_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "interval": "",
              "intervalFactor": 4,
              "legendFormat": "{{device}} - Discards completed",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_disk_discards_merged_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Discards merged",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Disk IOps Discards completed / merged",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Storage Disk",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 29
      },
      "id": 271,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 62
          },
          "id": 43,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_filesystem_avail_bytes{instance=\"$node\",job=\"$job\",device!~'rootfs'}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "{{mountpoint}} - Available",
              "metric": "",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_filesystem_free_bytes{instance=\"$node\",job=\"$job\",device!~'rootfs'}",
              "format": "time_series",
              "hide": true,
              "intervalFactor": 1,
              "legendFormat": "{{mountpoint}} - Free",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_filesystem_size_bytes{instance=\"$node\",job=\"$job\",device!~'rootfs'}",
              "format": "time_series",
              "hide": true,
              "intervalFactor": 1,
              "legendFormat": "{{mountpoint}} - Size",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "Filesystem space available",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "file nodes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 62
          },
          "id": 41,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_filesystem_files_free{instance=\"$node\",job=\"$job\",device!~'rootfs'}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "{{mountpoint}} - Free file nodes",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "File Nodes Free",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "files",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 72
          },
          "id": 28,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_filefd_maximum{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 4,
              "legendFormat": "Max open files",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_filefd_allocated{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "Open files",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "File Descriptor",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "file Nodes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 72
          },
          "id": 219,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_filesystem_files{instance=\"$node\",job=\"$job\",device!~'rootfs'}",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "{{mountpoint}} - File nodes total",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "File Nodes Size",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "normal"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "max": 1,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "/ ReadOnly"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#890F02",
                      "mode": "fixed"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 82
          },
          "id": 44,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_filesystem_readonly{instance=\"$node\",job=\"$job\",device!~'rootfs'}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{mountpoint}} - ReadOnly",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_filesystem_device_error{instance=\"$node\",job=\"$job\",device!~'rootfs',fstype!~'tmpfs'}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{mountpoint}} - Device error",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Filesystem in ReadOnly / Error",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Storage Filesystem",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 30
      },
      "id": 272,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "packets out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "pps"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "receive_packets_eth0"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "receive_packets_lo"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "transmit_packets_eth0"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#7EB26D",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "transmit_packets_lo"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#E24D42",
                      "mode": "fixed"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Trans.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 47
          },
          "id": 60,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_receive_packets_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Receive",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_transmit_packets_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Transmit",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Network Traffic by Packets",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "packets out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "pps"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Trans.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 47
          },
          "id": 142,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_receive_errs_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Receive errors",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_transmit_errs_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Rransmit errors",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Network Traffic Errors",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "packets out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "pps"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Trans.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 57
          },
          "id": 143,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_receive_drop_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Receive drop",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_transmit_drop_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Transmit drop",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Network Traffic Drop",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "packets out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "pps"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Trans.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 57
          },
          "id": 141,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_receive_compressed_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Receive compressed",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_transmit_compressed_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Transmit compressed",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Network Traffic Compressed",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "packets out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "pps"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Trans.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 67
          },
          "id": 146,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_receive_multicast_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Receive multicast",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Network Traffic Multicast",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "packets out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "pps"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Trans.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 67
          },
          "id": 144,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_receive_fifo_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Receive fifo",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_transmit_fifo_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Transmit fifo",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Network Traffic Fifo",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "packets out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "pps"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Trans.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 77
          },
          "id": 145,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_receive_frame_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Receive frame",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Network Traffic Frame",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 77
          },
          "id": 231,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_transmit_carrier_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Statistic transmit_carrier",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Network Traffic Carrier",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Trans.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 87
          },
          "id": 232,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_network_transmit_colls_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{device}} - Transmit colls",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Network Traffic Colls",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "entries",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "NF conntrack limit"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#890F02",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 87
          },
          "id": 61,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_nf_conntrack_entries{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "NF conntrack entries",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_nf_conntrack_entries_limit{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "NF conntrack limit",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "NF Contrack",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "Entries",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 97
          },
          "id": 230,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_arp_entries{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{ device }} - ARP entries",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "ARP Entries",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "decimals": 0,
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 97
          },
          "id": 288,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_network_mtu_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{ device }} - Bytes",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "MTU",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "decimals": 0,
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 107
          },
          "id": 280,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_network_speed_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{ device }} - Speed",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Speed",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "packets",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "decimals": 0,
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "none"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 107
          },
          "id": 289,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_network_transmit_queue_length{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{ device }} -   Interface transmit queue length",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Queue Length",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "packetes drop (-) / process (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Dropped.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 117
          },
          "id": 290,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_softnet_processed_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "CPU {{cpu}} - Processed",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_softnet_dropped_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "CPU {{cpu}} - Dropped",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Softnet Packets",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 117
          },
          "id": 310,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_softnet_times_squeezed_total{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "CPU {{cpu}} - Squeezed",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Softnet Out of Quota",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 127
          },
          "id": 309,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_network_up{operstate=\"up\",instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "{{interface}} - Operational state UP",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_network_carrier{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "instant": false,
              "legendFormat": "{{device}} - Physical link state",
              "refId": "B"
            }
          ],
          "title": "Network Operational Status",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Network Traffic",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 31
      },
      "id": 273,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 48
          },
          "id": 63,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_TCP_alloc{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "TCP_alloc - Allocated sockets",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_TCP_inuse{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "TCP_inuse - Tcp sockets currently in use",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_TCP_mem{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "TCP_mem - Used memory for tcp",
              "refId": "C",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_TCP_orphan{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "TCP_orphan - Orphan sockets",
              "refId": "D",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_TCP_tw{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "TCP_tw - Sockets waiting close",
              "refId": "E",
              "step": 240
            }
          ],
          "title": "Sockstat TCP",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 48
          },
          "id": 124,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_UDPLITE_inuse{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "UDPLITE_inuse - Udplite sockets currently in use",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_UDP_inuse{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "UDP_inuse - Udp sockets currently in use",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_UDP_mem{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "UDP_mem - Used memory for udp",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "Sockstat UDP",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 58
          },
          "id": 125,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_FRAG_inuse{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "FRAG_inuse - Frag sockets currently in use",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_RAW_inuse{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "RAW_inuse - Raw sockets currently in use",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "Sockstat FRAG / RAW",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "bytes",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 58
          },
          "id": 220,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_TCP_mem_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "mem_bytes - TCP sockets in that state",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_UDP_mem_bytes{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "mem_bytes - UDP sockets in that state",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_FRAG_memory{instance=\"$node\",job=\"$job\"}",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "FRAG_memory - Used memory for frag",
              "refId": "C"
            }
          ],
          "title": "Sockstat Memory Size",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "sockets",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 68
          },
          "id": 126,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_sockstat_sockets_used{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Sockets_used - Sockets currently in use",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Sockstat Used",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Network Sockstat",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 32
      },
      "id": 274,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "octets out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Out.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 49
          },
          "id": 221,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_IpExt_InOctets{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "InOctets - Received octets",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_IpExt_OutOctets{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "intervalFactor": 1,
              "legendFormat": "OutOctets - Sent octets",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Netstat IP In / Out Octets",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "datagrams",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 49
          },
          "id": 81,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true,
              "width": 300
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Ip_Forwarding{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Forwarding - IP forwarding",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Netstat IP Forwarding",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "messages out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Out.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 59
          },
          "id": 115,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Icmp_InMsgs{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "InMsgs -  Messages which the entity received. Note that this counter includes all those counted by icmpInErrors",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Icmp_OutMsgs{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "OutMsgs - Messages which this entity attempted to send. Note that this counter includes all those counted by icmpOutErrors",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "ICMP In / Out",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "messages out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Out.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 59
          },
          "id": 50,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Icmp_InErrors{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "InErrors - Messages which the entity received but determined as having ICMP-specific errors (bad ICMP checksums, bad length, etc.)",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "ICMP Errors",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "datagrams out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Out.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Snd.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 69
          },
          "id": 55,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Udp_InDatagrams{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "InDatagrams - Datagrams received",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Udp_OutDatagrams{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "OutDatagrams - Datagrams sent",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "UDP In / Out",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "datagrams",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 69
          },
          "id": 109,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Udp_InErrors{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "InErrors - UDP Datagrams that could not be delivered to an application",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Udp_NoPorts{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "NoPorts - UDP Datagrams received on a port with no listener",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_UdpLite_InErrors{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "interval": "",
              "legendFormat": "InErrors Lite - UDPLite Datagrams that could not be delivered to an application",
              "refId": "C"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Udp_RcvbufErrors{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "RcvbufErrors - UDP buffer errors received",
              "refId": "D",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Udp_SndbufErrors{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "SndbufErrors - UDP buffer errors send",
              "refId": "E",
              "step": 240
            }
          ],
          "title": "UDP Errors",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "datagrams out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Out.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Snd.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 79
          },
          "id": 299,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Tcp_InSegs{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "instant": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "InSegs - Segments received, including those received in error. This count includes segments received on currently established connections",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Tcp_OutSegs{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "OutSegs - Segments sent, including those on current connections but excluding those containing only retransmitted octets",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "TCP In / Out",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 79
          },
          "id": 104,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_TcpExt_ListenOverflows{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "ListenOverflows - Times the listen queue of a socket overflowed",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_TcpExt_ListenDrops{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "ListenDrops - SYNs to LISTEN sockets ignored",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_TcpExt_TCPSynRetrans{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "TCPSynRetrans - SYN-SYN/ACK retransmits to break down retransmissions in SYN, fast/timeout retransmits",
              "refId": "C",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Tcp_RetransSegs{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "interval": "",
              "legendFormat": "RetransSegs - Segments retransmitted - that is, the number of TCP segments transmitted containing one or more previously transmitted octets",
              "refId": "D"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Tcp_InErrs{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "interval": "",
              "legendFormat": "InErrs - Segments received in error (e.g., bad TCP checksums)",
              "refId": "E"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Tcp_OutRsts{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "interval": "",
              "legendFormat": "OutRsts - Segments sent with RST flag",
              "refId": "F"
            }
          ],
          "title": "TCP Errors",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "connections",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*MaxConn *./"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#890F02",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.fillOpacity",
                    "value": 0
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 89
          },
          "id": 85,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_netstat_Tcp_CurrEstab{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "CurrEstab - TCP connections for which the current state is either ESTABLISHED or CLOSE- WAIT",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_netstat_Tcp_MaxConn{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "MaxConn - Limit on the total number of TCP connections the entity can support (Dynamic is \"-1\")",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "TCP Connections",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter out (-) / in (+)",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*Sent.*/"
                },
                "properties": [
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 89
          },
          "id": 91,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_TcpExt_SyncookiesFailed{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "SyncookiesFailed - Invalid SYN cookies received",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_TcpExt_SyncookiesRecv{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "SyncookiesRecv - SYN cookies received",
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_TcpExt_SyncookiesSent{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "SyncookiesSent - SYN cookies sent",
              "refId": "C",
              "step": 240
            }
          ],
          "title": "TCP SynCookie",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "connections",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 99
          },
          "id": 82,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Tcp_ActiveOpens{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "ActiveOpens - TCP connections that have made a direct transition to the SYN-SENT state from the CLOSED state",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "irate(node_netstat_Tcp_PassiveOpens{instance=\"$node\",job=\"$job\"}[$__rate_interval])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "PassiveOpens - TCP connections that have made a direct transition to the SYN-RCVD state from the LISTEN state",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "TCP Direct Transition",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "Enable with --collector.tcpstat argument on node-exporter",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "connections",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 99
          },
          "id": 320,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "node_tcp_connection_states{state=\"established\",instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "established - TCP sockets in established state",
              "range": true,
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "node_tcp_connection_states{state=\"fin_wait2\",instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "fin_wait2 - TCP sockets in fin_wait2 state",
              "range": true,
              "refId": "B",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "node_tcp_connection_states{state=\"listen\",instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "listen - TCP sockets in listen state",
              "range": true,
              "refId": "C",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "editorMode": "code",
              "expr": "node_tcp_connection_states{state=\"time_wait\",instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "time_wait - TCP sockets in time_wait state",
              "range": true,
              "refId": "D",
              "step": 240
            }
          ],
          "title": "TCP Stat",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Network Netstat",
      "type": "row"
    },
    {
      "collapsed": true,
      "datasource": {
        "type": "prometheus",
        "uid": "000000001"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 33
      },
      "id": 279,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "seconds",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "normal"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 66
          },
          "id": 40,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_scrape_collector_duration_seconds{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{collector}} - Scrape duration",
              "refId": "A",
              "step": 240
            }
          ],
          "title": "Node Exporter Scrape Time",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "Y4SSG429DWCGDQ3R"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "counter",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineStyle": {
                  "fill": "solid"
                },
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "links": [],
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byRegexp",
                  "options": "/.*error.*/"
                },
                "properties": [
                  {
                    "id": "color",
                    "value": {
                      "fixedColor": "#F2495C",
                      "mode": "fixed"
                    }
                  },
                  {
                    "id": "custom.transform",
                    "value": "negative-Y"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 66
          },
          "id": 157,
          "links": [],
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "lastNotNull",
                "max",
                "min"
              ],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "pluginVersion": "9.2.0",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_scrape_collector_success{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{collector}} - Scrape success",
              "refId": "A",
              "step": 240
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "Y4SSG429DWCGDQ3R"
              },
              "expr": "node_textfile_scrape_error{instance=\"$node\",job=\"$job\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{collector}} - Scrape textfile error (1 = true)",
              "refId": "B",
              "step": 240
            }
          ],
          "title": "Node Exporter Scrape",
          "type": "timeseries"
        }
      ],
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "000000001"
          },
          "refId": "A"
        }
      ],
      "title": "Node Exporter",
      "type": "row"
    }
  ],
  "refresh": "",
  "revision": 1,
  "schemaVersion": 38,
  "tags": [
    "linux"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "default",
          "value": "default"
        },
        "hide": 0,
        "includeAll": false,
        "label": "datasource",
        "multi": false,
        "name": "DS_PROMETHEUS",
        "options": [],
        "query": "prometheus",
        "queryValue": "",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "current": {
          "selected": true,
          "text": "node_internal",
          "value": "node_internal"
        },
        "datasource": {
          "type": "prometheus",
          "uid": "Y4SSG429DWCGDQ3R"
        },
        "definition": "",
        "hide": 0,
        "includeAll": false,
        "label": "Job",
        "multi": false,
        "name": "job",
        "options": [],
        "query": {
          "query": "label_values(node_uname_info, job)",
          "refId": "Prometheus-job-Variable-Query"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": false,
          "text": "localhost:9101",
          "value": "localhost:9101"
        },
        "datasource": {
          "type": "prometheus",
          "uid": "Y4SSG429DWCGDQ3R"
        },
        "definition": "label_values(node_uname_info{job=\"$job\"}, instance)",
        "hide": 0,
        "includeAll": false,
        "label": "Host",
        "multi": false,
        "name": "node",
        "options": [],
        "query": {
          "query": "label_values(node_uname_info{job=\"$job\"}, instance)",
          "refId": "Prometheus-node-Variable-Query"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": false,
          "text": "[a-z]+|nvme[0-9]+n[0-9]+|mmcblk[0-9]+",
          "value": "[a-z]+|nvme[0-9]+n[0-9]+|mmcblk[0-9]+"
        },
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "diskdevices",
        "options": [
          {
            "selected": true,
            "text": "[a-z]+|nvme[0-9]+n[0-9]+|mmcblk[0-9]+",
            "value": "[a-z]+|nvme[0-9]+n[0-9]+|mmcblk[0-9]+"
          }
        ],
        "query": "[a-z]+|nvme[0-9]+n[0-9]+|mmcblk[0-9]+",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "browser",
  "title": "Node Exporter Full",
  "uid": "rYdddlPWk",
  "version": 3,
  "weekStart": ""
}
</file>

<file path="modules/core/roles/server/system/services/monitoring/grafana/objects/dashboards/dashboard-02.json">
{
	"annotations": {
		"list": [
			{
				"builtIn": 1,
				"datasource": {
					"type": "datasource",
					"uid": "grafana"
				},
				"enable": true,
				"hide": true,
				"iconColor": "rgba(0, 211, 255, 1)",
				"name": "Annotations & Alerts",
				"target": {
					"limit": 100,
					"matchAny": false,
					"tags": [],
					"type": "dashboard"
				},
				"type": "dashboard"
			}
		]
	},
	"description": "Dashboard for endlessh (Update variables on time range changes)",
	"editable": false,
	"fiscalYearStartMonth": 0,
	"gnetId": 15156,
	"graphTooltip": 0,
	"id": 22,
	"links": [
		{
			"asDropdown": false,
			"icon": "external link",
			"includeVars": false,
			"keepTime": false,
			"tags": [],
			"targetBlank": true,
			"title": "GitHub",
			"tooltip": "GitHub",
			"type": "link",
			"url": "https://github.com/shizunge/endlessh-go"
		},
		{
			"asDropdown": false,
			"icon": "external link",
			"includeVars": false,
			"keepTime": false,
			"tags": [],
			"targetBlank": true,
			"title": "Grafana",
			"tooltip": "Grafana Dashboard",
			"type": "link",
			"url": "https://grafana.com/grafana/dashboards/15156"
		}
	],
	"liveNow": false,
	"panels": [
		{
			"datasource": {
				"type": "datasource",
				"uid": "-- Dashboard --"
			},
			"fieldConfig": {
				"defaults": {
					"color": {
						"mode": "thresholds"
					},
					"mappings": [],
					"thresholds": {
						"mode": "absolute",
						"steps": [
							{
								"color": "green",
								"value": null
							}
						]
					}
				},
				"overrides": []
			},
			"gridPos": {
				"h": 3,
				"w": 4,
				"x": 0,
				"y": 0
			},
			"id": 36,
			"options": {
				"colorMode": "value",
				"graphMode": "none",
				"justifyMode": "auto",
				"orientation": "auto",
				"reduceOptions": {
					"calcs": ["lastNotNull"],
					"fields": "/^Total number connections that endlessh trapped$/",
					"values": false
				},
				"text": {},
				"textMode": "auto"
			},
			"pluginVersion": "10.2.0",
			"targets": [
				{
					"datasource": {
						"type": "datasource",
						"uid": "-- Dashboard --"
					},
					"panelId": 49,
					"refId": "A"
				}
			],
			"title": "Connections",
			"transformations": [
				{
					"id": "filterByRefId",
					"options": {
						"include": "Seen"
					}
				},
				{
					"id": "filterByValue",
					"options": {
						"filters": [
							{
								"config": {
									"id": "greaterOrEqual",
									"options": {
										"value": 0
									}
								},
								"fieldName": "Value #Seen"
							}
						],
						"match": "any",
						"type": "include"
					}
				},
				{
					"id": "groupBy",
					"options": {
						"fields": {
							"Value #Seen": {
								"aggregations": ["sum"],
								"operation": "aggregate"
							},
							"ip": {
								"aggregations": [],
								"operation": "groupby"
							}
						}
					}
				},
				{
					"id": "reduce",
					"options": {
						"includeTimeField": false,
						"labelsToFields": false,
						"mode": "reduceFields",
						"reducers": ["sum"]
					}
				},
				{
					"id": "organize",
					"options": {
						"excludeByName": {},
						"indexByName": {},
						"renameByName": {
							"Value #Seen (sum)": "Total number connections that endlessh trapped"
						}
					}
				}
			],
			"type": "stat"
		},
		{
			"datasource": {
				"type": "datasource",
				"uid": "-- Dashboard --"
			},
			"fieldConfig": {
				"defaults": {
					"color": {
						"mode": "thresholds"
					},
					"mappings": [],
					"thresholds": {
						"mode": "absolute",
						"steps": [
							{
								"color": "green",
								"value": null
							}
						]
					},
					"unit": "s"
				},
				"overrides": []
			},
			"gridPos": {
				"h": 3,
				"w": 4,
				"x": 4,
				"y": 0
			},
			"id": 42,
			"options": {
				"colorMode": "value",
				"graphMode": "none",
				"justifyMode": "auto",
				"orientation": "auto",
				"reduceOptions": {
					"calcs": ["lastNotNull"],
					"fields": "/^Time spent on endlessh$/",
					"values": false
				},
				"text": {},
				"textMode": "auto"
			},
			"pluginVersion": "10.2.0",
			"targets": [
				{
					"datasource": {
						"type": "datasource",
						"uid": "-- Dashboard --"
					},
					"panelId": 49,
					"refId": "A"
				}
			],
			"title": "Trapped Time",
			"transformations": [
				{
					"id": "filterByRefId",
					"options": {
						"include": "Trapped"
					}
				},
				{
					"id": "filterByValue",
					"options": {
						"filters": [
							{
								"config": {
									"id": "greaterOrEqual",
									"options": {
										"value": 0
									}
								},
								"fieldName": "Value #Trapped"
							}
						],
						"match": "all",
						"type": "include"
					}
				},
				{
					"id": "groupBy",
					"options": {
						"fields": {
							"Value #Trapped": {
								"aggregations": ["sum"],
								"operation": "aggregate"
							},
							"ip": {
								"aggregations": [],
								"operation": "groupby"
							}
						}
					}
				},
				{
					"id": "reduce",
					"options": {
						"includeTimeField": false,
						"labelsToFields": false,
						"mode": "reduceFields",
						"reducers": ["sum"]
					}
				},
				{
					"id": "organize",
					"options": {
						"excludeByName": {},
						"indexByName": {},
						"renameByName": {
							"Total": "Seconds spent on endlessh",
							"Value #Trapped (sum)": "Time spent on endlessh"
						}
					}
				}
			],
			"type": "stat"
		},
		{
			"datasource": {
				"type": "prometheus",
				"uid": "Y4SSG429DWCGDQ3R"
			},
			"fieldConfig": {
				"defaults": {
					"color": {
						"mode": "thresholds"
					},
					"mappings": [],
					"thresholds": {
						"mode": "absolute",
						"steps": [
							{
								"color": "green",
								"value": null
							}
						]
					},
					"unit": "bytes"
				},
				"overrides": []
			},
			"gridPos": {
				"h": 3,
				"w": 4,
				"x": 8,
				"y": 0
			},
			"id": 18,
			"options": {
				"colorMode": "value",
				"graphMode": "none",
				"justifyMode": "auto",
				"orientation": "auto",
				"reduceOptions": {
					"calcs": ["lastNotNull"],
					"fields": "",
					"values": false
				},
				"text": {},
				"textMode": "auto"
			},
			"pluginVersion": "10.2.0",
			"targets": [
				{
					"datasource": {
						"type": "prometheus",
						"uid": "Y4SSG429DWCGDQ3R"
					},
					"exemplar": true,
					"expr": "sum(increase(endlessh_sent_bytes_total{instance=~\"$host\",job=~\"$job\"}[$__range]))",
					"hide": false,
					"interval": "",
					"legendFormat": "Bytes sent by endlessh",
					"refId": "sent_bytes"
				}
			],
			"title": "Sent Bytes",
			"type": "stat"
		},
		{
			"datasource": {
				"type": "datasource",
				"uid": "-- Dashboard --"
			},
			"fieldConfig": {
				"defaults": {
					"color": {
						"mode": "thresholds"
					},
					"mappings": [],
					"thresholds": {
						"mode": "absolute",
						"steps": [
							{
								"color": "green",
								"value": null
							}
						]
					}
				},
				"overrides": []
			},
			"gridPos": {
				"h": 3,
				"w": 4,
				"x": 12,
				"y": 0
			},
			"id": 38,
			"options": {
				"colorMode": "value",
				"graphMode": "none",
				"justifyMode": "auto",
				"orientation": "auto",
				"reduceOptions": {
					"calcs": ["lastNotNull"],
					"fields": "/^Unique IPs connected$/",
					"values": false
				},
				"text": {},
				"textMode": "auto"
			},
			"pluginVersion": "10.2.0",
			"targets": [
				{
					"datasource": {
						"type": "datasource",
						"uid": "-- Dashboard --"
					},
					"panelId": 49,
					"refId": "A"
				}
			],
			"title": "Unique IPs",
			"transformations": [
				{
					"id": "filterByRefId",
					"options": {
						"include": "Seen"
					}
				},
				{
					"id": "groupBy",
					"options": {
						"fields": {
							"Value #Seen": {
								"aggregations": ["sum"],
								"operation": "aggregate"
							},
							"ip": {
								"aggregations": [],
								"operation": "groupby"
							}
						}
					}
				},
				{
					"id": "reduce",
					"options": {
						"includeTimeField": false,
						"labelsToFields": false,
						"mode": "reduceFields",
						"reducers": ["count"]
					}
				},
				{
					"id": "organize",
					"options": {
						"excludeByName": {},
						"indexByName": {},
						"renameByName": {
							"Value #Seen (sum)": "Unique IPs connected",
							"ip": ""
						}
					}
				}
			],
			"type": "stat"
		},
		{
			"datasource": {
				"type": "datasource",
				"uid": "-- Dashboard --"
			},
			"fieldConfig": {
				"defaults": {
					"color": {
						"mode": "thresholds"
					},
					"links": [
						{
							"targetBlank": true,
							"title": "whois",
							"url": "https://search.arin.net/rdap/?query=${__value.text}"
						}
					],
					"mappings": [],
					"thresholds": {
						"mode": "absolute",
						"steps": [
							{
								"color": "green",
								"value": null
							}
						]
					}
				},
				"overrides": []
			},
			"gridPos": {
				"h": 3,
				"w": 4,
				"x": 16,
				"y": 0
			},
			"id": 45,
			"options": {
				"colorMode": "value",
				"graphMode": "none",
				"justifyMode": "auto",
				"orientation": "auto",
				"reduceOptions": {
					"calcs": ["lastNotNull"],
					"fields": "/^Client IP of the latest connection$/",
					"values": false
				},
				"text": {},
				"textMode": "value"
			},
			"pluginVersion": "10.2.0",
			"targets": [
				{
					"datasource": {
						"type": "datasource",
						"uid": "-- Dashboard --"
					},
					"panelId": 49,
					"refId": "A"
				}
			],
			"title": "Latest Connection",
			"transformations": [
				{
					"id": "filterByRefId",
					"options": {
						"include": "Seen"
					}
				},
				{
					"id": "filterByValue",
					"options": {
						"filters": [
							{
								"config": {
									"id": "greaterOrEqual",
									"options": {
										"value": 0
									}
								},
								"fieldName": "Value #Seen"
							}
						],
						"match": "any",
						"type": "include"
					}
				},
				{
					"id": "groupBy",
					"options": {
						"fields": {
							"Time": {
								"aggregations": ["lastNotNull"],
								"operation": "aggregate"
							},
							"Value #Seen": {
								"aggregations": ["sum"],
								"operation": "aggregate"
							},
							"ip": {
								"aggregations": [],
								"operation": "groupby"
							}
						}
					}
				},
				{
					"id": "sortBy",
					"options": {
						"fields": {},
						"sort": [
							{
								"field": "Time (lastNotNull)"
							}
						]
					}
				},
				{
					"id": "organize",
					"options": {
						"excludeByName": {
							"instance": true,
							"job": true
						},
						"indexByName": {},
						"renameByName": {
							"Time (lastNotNull)": "Time",
							"Value #Seen (sum)": "Count",
							"ip": "Client IP of the latest connection"
						}
					}
				}
			],
			"type": "stat"
		},
		{
			"datasource": {
				"type": "prometheus",
				"uid": "Y4SSG429DWCGDQ3R"
			},
			"fieldConfig": {
				"defaults": {
					"color": {
						"mode": "thresholds"
					},
					"mappings": [],
					"min": 0,
					"thresholds": {
						"mode": "absolute",
						"steps": [
							{
								"color": "green",
								"value": null
							},
							{
								"color": "#EAB839",
								"value": 10
							},
							{
								"color": "red",
								"value": 20
							}
						]
					},
					"unit": "short"
				},
				"overrides": []
			},
			"gridPos": {
				"h": 3,
				"w": 4,
				"x": 20,
				"y": 0
			},
			"id": 20,
			"options": {
				"colorMode": "value",
				"graphMode": "none",
				"justifyMode": "auto",
				"orientation": "auto",
				"reduceOptions": {
					"calcs": ["lastNotNull"],
					"fields": "",
					"values": false
				},
				"text": {},
				"textMode": "auto"
			},
			"pluginVersion": "10.2.0",
			"targets": [
				{
					"datasource": {
						"type": "prometheus",
						"uid": "Y4SSG429DWCGDQ3R"
					},
					"exemplar": true,
					"expr": "sum((endlessh_client_open_count_total{instance=~\"$host\",job=~\"$job\"}) - (endlessh_client_closed_count_total{instance=~\"$host\",job=~\"$job\"} offset $__interval  or endlessh_client_open_count_total{instance=~\"$host\",job=~\"$job\"} * 0))",
					"instant": false,
					"interval": "",
					"legendFormat": "Open Connections",
					"refId": "current_open"
				}
			],
			"title": "Current Connections",
			"type": "stat"
		},
		{
			"datasource": {
				"type": "datasource",
				"uid": "-- Dashboard --"
			},
			"fieldConfig": {
				"defaults": {
					"color": {
						"mode": "palette-classic"
					},
					"custom": {
						"axisBorderShow": false,
						"axisCenteredZero": false,
						"axisColorMode": "text",
						"axisLabel": "",
						"axisPlacement": "auto",
						"barAlignment": 0,
						"drawStyle": "line",
						"fillOpacity": 0,
						"gradientMode": "none",
						"hideFrom": {
							"legend": false,
							"tooltip": false,
							"viz": false
						},
						"insertNulls": false,
						"lineInterpolation": "stepAfter",
						"lineWidth": 1,
						"pointSize": 5,
						"scaleDistribution": {
							"type": "linear"
						},
						"showPoints": "auto",
						"spanNulls": false,
						"stacking": {
							"group": "A",
							"mode": "none"
						},
						"thresholdsStyle": {
							"mode": "off"
						}
					},
					"mappings": [],
					"min": -0.01,
					"thresholds": {
						"mode": "absolute",
						"steps": [
							{
								"color": "green",
								"value": null
							}
						]
					}
				},
				"overrides": []
			},
			"gridPos": {
				"h": 4,
				"w": 12,
				"x": 0,
				"y": 3
			},
			"id": 30,
			"options": {
				"legend": {
					"calcs": [],
					"displayMode": "list",
					"placement": "bottom",
					"showLegend": false
				},
				"tooltip": {
					"mode": "single",
					"sort": "none"
				}
			},
			"targets": [
				{
					"datasource": {
						"type": "datasource",
						"uid": "-- Dashboard --"
					},
					"panelId": 20,
					"refId": "A"
				}
			],
			"title": "Concurrent Connections",
			"type": "timeseries"
		},
		{
			"datasource": {
				"type": "datasource",
				"uid": "-- Dashboard --"
			},
			"fieldConfig": {
				"defaults": {
					"color": {
						"mode": "palette-classic"
					},
					"custom": {
						"hideFrom": {
							"legend": false,
							"tooltip": false,
							"viz": false
						}
					},
					"mappings": []
				},
				"overrides": []
			},
			"gridPos": {
				"h": 8,
				"w": 12,
				"x": 12,
				"y": 3
			},
			"id": 32,
			"options": {
				"displayLabels": [],
				"legend": {
					"displayMode": "table",
					"placement": "right",
					"showLegend": true,
					"values": ["value", "percent"]
				},
				"pieType": "pie",
				"reduceOptions": {
					"calcs": ["lastNotNull"],
					"fields": "",
					"values": false
				},
				"tooltip": {
					"mode": "single",
					"sort": "none"
				}
			},
			"targets": [
				{
					"datasource": {
						"type": "datasource",
						"uid": "-- Dashboard --"
					},
					"panelId": 49,
					"refId": "A"
				}
			],
			"title": "Connections by country",
			"transformations": [
				{
					"id": "filterByRefId",
					"options": {
						"include": "Seen"
					}
				},
				{
					"id": "filterByValue",
					"options": {
						"filters": [
							{
								"config": {
									"id": "greaterOrEqual",
									"options": {
										"value": 0
									}
								},
								"fieldName": "Value #Seen"
							}
						],
						"match": "any",
						"type": "include"
					}
				},
				{
					"id": "groupBy",
					"options": {
						"fields": {
							"Value #Seen": {
								"aggregations": ["sum"],
								"operation": "aggregate"
							},
							"country": {
								"aggregations": ["last"],
								"operation": "aggregate"
							},
							"ip": {
								"aggregations": [],
								"operation": "groupby"
							}
						}
					}
				},
				{
					"id": "groupBy",
					"options": {
						"fields": {
							"Value #Seen (sum)": {
								"aggregations": ["sum"],
								"operation": "aggregate"
							},
							"country (last)": {
								"aggregations": [],
								"operation": "groupby"
							}
						}
					}
				},
				{
					"id": "rowsToFields",
					"options": {}
				}
			],
			"type": "piechart"
		},
		{
			"datasource": {
				"type": "datasource",
				"uid": "-- Dashboard --"
			},
			"fieldConfig": {
				"defaults": {
					"color": {
						"mode": "continuous-GrYlRd"
					},
					"custom": {
						"hideFrom": {
							"legend": false,
							"tooltip": false,
							"viz": false
						}
					},
					"mappings": [],
					"thresholds": {
						"mode": "absolute",
						"steps": [
							{
								"color": "#96D98D",
								"value": null
							}
						]
					}
				},
				"overrides": []
			},
			"gridPos": {
				"h": 12,
				"w": 12,
				"x": 0,
				"y": 7
			},
			"id": 48,
			"links": [],
			"options": {
				"basemap": {
					"config": {},
					"name": "Layer 0",
					"type": "default"
				},
				"controls": {
					"mouseWheelZoom": false,
					"showAttribution": false,
					"showDebug": false,
					"showMeasure": false,
					"showScale": false,
					"showZoom": true
				},
				"layers": [
					{
						"config": {
							"color": {
								"field": "Connections",
								"fixed": "dark-green"
							},
							"fillOpacity": 0.4,
							"shape": "circle",
							"showLegend": false,
							"size": {
								"field": "Connections",
								"fixed": 5,
								"max": 10,
								"min": 2
							},
							"style": {
								"color": {
									"field": "Connections",
									"fixed": "dark-green"
								},
								"size": {
									"field": "Connections",
									"fixed": 5,
									"max": 9,
									"min": 2
								},
								"text": {
									"field": "location (lastNotNull) (lastNotNull)",
									"fixed": "",
									"mode": "fixed"
								}
							}
						},
						"location": {
							"geohash": "Geohash",
							"mode": "geohash"
						},
						"name": "Layer 1",
						"type": "markers"
					}
				],
				"tooltip": {
					"mode": "details"
				},
				"view": {
					"allLayers": true,
					"id": "zero",
					"lat": 0,
					"lon": 0,
					"zoom": 1
				}
			},
			"pluginVersion": "10.2.0",
			"targets": [
				{
					"datasource": {
						"type": "datasource",
						"uid": "-- Dashboard --"
					},
					"panelId": 49,
					"refId": "A"
				}
			],
			"title": "Locations",
			"transformations": [
				{
					"id": "filterByRefId",
					"options": {
						"include": "Seen"
					}
				},
				{
					"id": "filterByValue",
					"options": {
						"filters": [
							{
								"config": {
									"id": "greaterOrEqual",
									"options": {
										"value": 0
									}
								},
								"fieldName": "Value #Seen"
							}
						],
						"match": "any",
						"type": "include"
					}
				},
				{
					"id": "groupBy",
					"options": {
						"fields": {
							"Value #Seen": {
								"aggregations": ["sum"],
								"operation": "aggregate"
							},
							"geohash": {
								"aggregations": ["lastNotNull"],
								"operation": "groupby"
							},
							"location": {
								"aggregations": ["lastNotNull"],
								"operation": "aggregate"
							}
						}
					}
				},
				{
					"id": "organize",
					"options": {
						"excludeByName": {},
						"indexByName": {
							"Value #geo (lastNotNull) (sum)": 2,
							"geohash (lastNotNull)": 0,
							"location (lastNotNull) (lastNotNull)": 1
						},
						"renameByName": {
							"Value #Seen (sum)": "Connections",
							"geohash": "Geohash",
							"location (lastNotNull)": "Location"
						}
					}
				}
			],
			"type": "geomap"
		},
		{
			"datasource": {
				"type": "prometheus",
				"uid": "Y4SSG429DWCGDQ3R"
			},
			"fieldConfig": {
				"defaults": {
					"color": {
						"mode": "thresholds"
					},
					"custom": {
						"align": "auto",
						"cellOptions": {
							"type": "auto"
						},
						"filterable": true,
						"inspect": false,
						"minWidth": 50
					},
					"links": [],
					"mappings": [],
					"thresholds": {
						"mode": "absolute",
						"steps": [
							{
								"color": "green",
								"value": null
							}
						]
					}
				},
				"overrides": [
					{
						"matcher": {
							"id": "byName",
							"options": "Last Connection"
						},
						"properties": [
							{
								"id": "custom.minWidth",
								"value": 150
							},
							{
								"id": "unit",
								"value": "dateTimeAsIso"
							},
							{
								"id": "custom.align",
								"value": "left"
							}
						]
					},
					{
						"matcher": {
							"id": "byName",
							"options": "IP"
						},
						"properties": [
							{
								"id": "links",
								"value": [
									{
										"targetBlank": true,
										"title": "search ARIN",
										"url": "https://search.arin.net/rdap/?query=${__data.fields.IP}"
									}
								]
							}
						]
					},
					{
						"matcher": {
							"id": "byName",
							"options": "Trapped Time"
						},
						"properties": [
							{
								"id": "unit",
								"value": "s"
							}
						]
					}
				]
			},
			"gridPos": {
				"h": 8,
				"w": 12,
				"x": 12,
				"y": 11
			},
			"id": 49,
			"options": {
				"cellHeight": "sm",
				"footer": {
					"countRows": false,
					"fields": "",
					"reducer": ["sum"],
					"show": false
				},
				"frameIndex": 0,
				"showHeader": true,
				"sortBy": [
					{
						"desc": true,
						"displayName": "Last Connection"
					}
				]
			},
			"pluginVersion": "10.2.0",
			"targets": [
				{
					"datasource": {
						"type": "prometheus",
						"uid": "Y4SSG429DWCGDQ3R"
					},
					"exemplar": true,
					"expr": "(endlessh_client_open_count{instance=~\"$host\",job=~\"$job\"} - endlessh_client_open_count{instance=~\"$host\",job=~\"$job\"} offset $__interval) > 0 or (endlessh_client_open_count{instance=~\"$host\",job=~\"$job\"}!=0 unless endlessh_client_open_count{instance=~\"$host\",job=~\"$job\"} offset $__interval)",
					"format": "table",
					"hide": false,
					"interval": "",
					"legendFormat": "Seen {{ip}}",
					"refId": "Seen"
				},
				{
					"datasource": {
						"type": "prometheus",
						"uid": "Y4SSG429DWCGDQ3R"
					},
					"exemplar": true,
					"expr": "(endlessh_client_trapped_time_seconds{instance=~\"$host\",job=~\"$job\"} - endlessh_client_trapped_time_seconds{instance=~\"$host\",job=~\"$job\"} offset $__interval) > 0 or (endlessh_client_trapped_time_seconds{instance=~\"$host\",job=~\"$job\"}!=0 unless endlessh_client_trapped_time_seconds{instance=~\"$host\",job=~\"$job\"} offset $__interval)",
					"format": "table",
					"hide": false,
					"interval": "",
					"legendFormat": "Trapped {{ip}}",
					"refId": "Trapped"
				}
			],
			"title": "Clients",
			"transformations": [
				{
					"id": "filterByValue",
					"options": {
						"filters": [
							{
								"config": {
									"id": "greaterOrEqual",
									"options": {
										"value": 0
									}
								},
								"fieldName": "Value #Seen"
							},
							{
								"config": {
									"id": "greaterOrEqual",
									"options": {
										"value": 0
									}
								},
								"fieldName": "Value #Trapped"
							}
						],
						"match": "any",
						"type": "include"
					}
				},
				{
					"id": "merge",
					"options": {}
				},
				{
					"id": "calculateField",
					"options": {
						"alias": "Seen",
						"mode": "reduceRow",
						"reduce": {
							"include": ["Value #Seen"],
							"reducer": "sum"
						}
					}
				},
				{
					"id": "calculateField",
					"options": {
						"alias": "Trapped",
						"mode": "reduceRow",
						"reduce": {
							"include": ["Value #Trapped"],
							"reducer": "sum"
						}
					}
				},
				{
					"id": "filterByValue",
					"options": {
						"filters": [
							{
								"config": {
									"id": "greaterOrEqual",
									"options": {
										"value": 0
									}
								},
								"fieldName": "Seen"
							},
							{
								"config": {
									"id": "greaterOrEqual",
									"options": {
										"value": 0
									}
								},
								"fieldName": "Trapped"
							}
						],
						"match": "all",
						"type": "include"
					}
				},
				{
					"id": "groupBy",
					"options": {
						"fields": {
							"Seen": {
								"aggregations": ["sum"],
								"operation": "aggregate"
							},
							"Time": {
								"aggregations": ["max"],
								"operation": "aggregate"
							},
							"Trapped": {
								"aggregations": ["sum"],
								"operation": "aggregate"
							},
							"country": {
								"aggregations": ["lastNotNull"],
								"operation": "aggregate"
							},
							"ip": {
								"aggregations": [],
								"operation": "groupby"
							}
						}
					}
				},
				{
					"id": "filterByValue",
					"options": {
						"filters": [
							{
								"config": {
									"id": "isNull",
									"options": {}
								},
								"fieldName": "ip"
							}
						],
						"match": "any",
						"type": "exclude"
					}
				},
				{
					"id": "organize",
					"options": {
						"excludeByName": {},
						"indexByName": {
							"Seen (sum)": 3,
							"Time (max)": 0,
							"Trapped (sum)": 4,
							"country (lastNotNull)": 2,
							"ip": 1
						},
						"renameByName": {
							"Seen (sum)": "Connections",
							"Time (max)": "Last Connection",
							"Trapped (sum)": "Trapped Time",
							"country (lastNotNull)": "Country",
							"ip": "IP"
						}
					}
				}
			],
			"type": "table"
		}
	],
	"refresh": "",
	"schemaVersion": 38,
	"tags": ["prometheus"],
	"templating": {
		"list": [
			{
				"allValue": ".*",
				"current": {
					"selected": false,
					"text": "All",
					"value": "$__all"
				},
				"datasource": {
					"type": "prometheus",
					"uid": "Y4SSG429DWCGDQ3R"
				},
				"definition": "label_values(endlessh_client_open_count_total, job)",
				"hide": 0,
				"includeAll": true,
				"label": "Job",
				"multi": true,
				"name": "job",
				"options": [],
				"query": {
					"query": "label_values(endlessh_client_open_count_total, job)",
					"refId": "StandardVariableQuery"
				},
				"refresh": 2,
				"regex": "",
				"skipUrlSync": false,
				"sort": 1,
				"type": "query"
			},
			{
				"allValue": ".*",
				"current": {
					"selected": false,
					"text": "All",
					"value": "$__all"
				},
				"datasource": {
					"type": "prometheus",
					"uid": "Y4SSG429DWCGDQ3R"
				},
				"definition": "label_values(endlessh_client_open_count_total{job=~\"$job\"}, instance)",
				"hide": 0,
				"includeAll": true,
				"label": "Host",
				"multi": true,
				"name": "host",
				"options": [],
				"query": {
					"query": "label_values(endlessh_client_open_count_total{job=~\"$job\"}, instance)",
					"refId": "StandardVariableQuery"
				},
				"refresh": 2,
				"regex": "",
				"skipUrlSync": false,
				"sort": 1,
				"type": "query"
			}
		]
	},
	"time": {
		"from": "now-24h",
		"to": "now"
	},
	"timepicker": {},
	"timezone": "",
	"title": "Endlessh",
	"uid": "ATIxYkO7k",
	"version": 1,
	"weekStart": ""
}
</file>

<file path="modules/core/roles/server/system/services/monitoring/grafana/dashboards.nix">
{
  lib,
  pkgs,
  ...
}: let
  loadDashboard = file:
    lib.pipe file [
      lib.importJSON
      ({dashboard, ...}: rec {
        name = "provision-dashboard-${dashboard.uid}.json";
        path = builtins.toFile name (builtins.toJSON dashboard);
      })
    ];

  dashboardsDir =
    pkgs.linkFarm
    "grafana-provisioning-dashboards"
    (map loadDashboard (lib.filesystem.listFilesRecursive ./objects/dashboards));
in {
  services.grafana.provision.dashboards.settings = {
    providers = lib.singleton {
      options.path = dashboardsDir;
      allowUiUpdates = true;
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/monitoring/grafana/default.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  # imports = [./dashboards.nix];
  config = mkIf cfg.monitoring.grafana.enable {
    networking.firewall.allowedTCPPorts = [config.services.grafana.settings.server.http_port];

    modules.system.services.database = {
      postgresql.enable = true;
    };

    services = {
      grafana = {
        enable = true;
        settings = {
          server = {
            http_addr = "0.0.0.0";
            http_port = 3000;

            root_url = "https://dash.notashelf.dev";
            domain = "dash.notashelf.dev";
            enforce_domain = true;
          };

          database = {
            type = "postgres";
            host = "/run/postgresql";
            name = "grafana";
            user = "grafana";
            ssl_mode = "disable";
          };

          security = {
            cookie_secure = true;
            disable_gravatar = true;
          };

          analytics = {
            reporting_enabled = false;
            check_for_updates = false;
          };

          "auth.anonymous".enabled = false;
          "auth.basic".enabled = false;

          users = {
            allow_signup = false;
          };
        };

        provision = {
          enable = true;
          datasources.settings = {
            datasources = [
              (mkIf sys.services.monitoring.prometheus.enable {
                name = "Prometheus";
                type = "prometheus";
                access = "proxy";
                orgId = 1;
                uid = "Y4SSG429DWCGDQ3R";
                url = "http://127.0.0.1:${toString config.services.prometheus.port}";
                isDefault = true;
                version = 1;
                editable = true;
                jsonData = {
                  graphiteVersion = "1.1";
                  tlsAuth = false;
                  tlsAuthWithCACert = false;
                };
              })

              (mkIf sys.services.monitoring.loki.enable {
                name = "Loki";
                type = "loki";
                access = "proxy";
                url = "http://127.0.0.1:${toString config.services.loki.configuration.server.http_listen_port}";
              })

              (mkIf sys.services.database.postgresql.enable {
                name = "PostgreSQL";
                type = "postgres";
                access = "proxy";
                url = "http://127.0.0.1:9103";
              })
            ];

            # typos go here
            deleteDatasources = [
              {
                name = "postgres";
                orgId = 0;
              }
              {
                name = "redis";
                orgId = 0;
              }
              {
                name = "Endlessh-go";
                orgId = 0;
              }
            ];
          };
        };
      };

      nginx.virtualHosts."dash.notashelf.dev" =
        {
          locations."/" = {
            proxyPass = with config.services.grafana.settings.server; "http://${toString http_addr}:${toString http_port}/";
            proxyWebsockets = true;
          };

          quic = true;
        }
        // {
          addSSL = true;
          enableACME = true;
        };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/monitoring/default.nix">
{
  imports = [
    ./grafana
    ./prometheus.nix
    ./loki.nix
    ./uptime-kuma.nix
  ];
}
</file>

<file path="modules/core/roles/server/system/services/monitoring/loki.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;

  sys = config.modules.system;
  cfg = config.services.loki;
in {
  config = mkIf sys.services.monitoring.loki.enable {
    services.loki = {
      enable = true;
      dataDir = "/srv/storage/loki";
      extraFlags = ["--config.expand-env=true"];

      configuration = {
        auth_enabled = false;
        server = {
          http_listen_port = 3030;
          log_level = "warn";
        };

        ingester = {
          chunk_idle_period = "1h";
          max_chunk_age = "1h";
          chunk_target_size = 999999;
          chunk_retain_period = "30s";
          lifecycler = {
            address = "127.0.0.1";
            final_sleep = "0s";
            ring = {
              kvstore.store = "inmemory";
              replication_factor = 1;
            };
          };
        };

        schema_config.configs = [
          {
            from = "2022-05-14";
            store = "boltdb";
            object_store = "filesystem";
            schema = "v11";
            index = {
              prefix = "index_";
              period = "168h";
            };
          }
          {
            from = "2023-11-08";
            store = "boltdb-shipper";
            object_store = "s3";
            schema = "v11";
            index = {
              prefix = "index_";
              period = "24h";
            };
          }
        ];

        storage_config = {
          boltdb.directory = "${cfg.dataDir}/boltdb-index";
          filesystem.directory = "${cfg.dataDir}/storage-chunks";

          boltdb_shipper = {
            active_index_directory = "/srv/storage/loki/boltdb-shipper-active";
            cache_location = "/srv/storage/loki/boltdb-shipper-cache";
            cache_ttl = "24h";
          };
        };

        limits_config = {
          reject_old_samples = true;
          reject_old_samples_max_age = "168h";
        };

        table_manager = {
          retention_deletes_enabled = false;
          retention_period = "0s";
        };

        compactor = {
          working_directory = "${cfg.dataDir}/compactor-work";
          compactor_ring.kvstore.store = "inmemory";
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/monitoring/prometheus.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  config = mkIf cfg.monitoring.prometheus.enable {
    services = {
      # Prometheus exporter for Grafana
      prometheus = {
        enable = true;
        port = 9100;

        # relatively frequent scraping intervals
        globalConfig = {
          scrape_interval = "10s";
          scrape_timeout = "2s";
        };

        # enabled exporters
        exporters = {
          node = {
            enable = true;
            port = 9101;
            enabledCollectors = ["systemd" "processes"];
          };

          redis = {
            enable = true;
            port = 9102;
            user = "redis";
          };

          postgres = {
            enable = true;
            port = 9103;
            user = "postgres";
          };

          nginx = {
            enable = false;
            port = 9104;
          };

          smartctl = {
            inherit (config.services.smartd) enable;
            openFirewall = config.services.smartd.enable;
            # Defaults:
            user = "smartctl-exporter";
            group = "disk";
            port = 9110;
          };
        };

        scrapeConfigs = [
          # internal scrape jobs
          {
            job_name = "prometheus";
            scrape_interval = "30s";
            static_configs = [{targets = ["localhost:9100"];}];
          }
          {
            job_name = "node";
            scrape_interval = "30s";
            static_configs = [{targets = ["localhost:9101"];}];
          }
          {
            job_name = "redis";
            scrape_interval = "30s";
            static_configs = [{targets = ["localhost:9102"];}];
          }
          {
            job_name = "postgres";
            scrape_interval = "30s";
            static_configs = [{targets = ["localhost:9103"];}];
          }
          {
            job_name = "nginx";
            scrape_interval = "30s";
            static_configs = [{targets = ["localhost:9104"];}];
          }
          {
            job_name = "endlessh-go";
            scrape_interval = "30s";
            static_configs = [{targets = ["localhost:9105"];}];
          }

          # TODO: exterenal scrape jobs - over tailscale/wireguard mesh
        ];
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/monitoring/uptime-kuma.nix">
{
  config,
  lib,
  ...
}: let
  domain = "up.notashelf.dev";
in {
  users = {
    users.uptime-kuma = {
      isSystemUser = true;
      group = "uptime-kuma";
    };
    groups.uptime-kuma = {};
  };

  systemd.services.uptime-kuma = {
    serviceConfig = {
      DynamicUser = lib.mkForce false;
      User = "uptime-kuma";
      Group = "uptime-kuma";
    };
  };

  services = {
    uptime-kuma = {
      enable = true;
      settings = {
        PORT = "4000";
      };
    };

    nginx.virtualHosts."${domain}" =
      {
        locations."/" = {
          proxyPass = "http://127.0.0.1:${toString config.services.uptime-kuma.settings.PORT}";
          proxyWebsockets = true;
        };
      }
      // lib.sslTemplate;
  };
}
</file>

<file path="modules/core/roles/server/system/services/networking/headscale/acls.nix">
{
  pkgs,
  lib,
  ...
}: let
  mkAcl = action: src: dst: {inherit action src dst;};
  mkSshAcl = action: src: dst: users: {inherit action src dst users;};
in {
  services.headscale.settings.acl_policy_path = pkgs.writeTextFile {
    name = "headscale-acl.hujson";
    text = builtins.toJSON {
      acls = [
        (mkAcl "accept" ["tag:client"] ["tag:client:*"]) # client <-> client
        (mkAcl "accept" ["tag:client"] ["tag:server:*"]) # client -> server
      ];

      ssh = [
        (mkSshAcl "accept" ["tag:client"] ["tag:server" "tag:client"] ["notashelf"]) # client -> client; client -> server
      ];

      tagOwners = let
        users = ["notashelf"];
        tags = map (name: "tag:${name}") ["server" "client"];
      in
        lib.genAttrs tags (_: users);

      tags = [
        "tag:client"
        "tag:server"
      ];

      autoApprovers = {
        exitNode = ["*"];
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/networking/headscale/default.nix">
{
  inputs',
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  imports = [
    ./acls.nix
    ./derp.nix
    ./dns.nix
  ];

  config = mkIf cfg.networking.headscale.enable {
    environment.systemPackages = [config.services.headscale.package];
    networking.firewall.allowedUDPPorts = [3478 8086]; # DERP

    services = {
      headscale = {
        enable = true;
        address = "127.0.0.1";
        port = 8085;

        settings = {
          noise.private_key_path = config.age.secrets.headscale-noise.path;

          # grpc
          grpc_listen_addr = "127.0.0.1:50443";
          grpc_allow_insecure = false;

          server_url = "https://hs.notashelf.dev";
          tls_cert_path = null;
          tls_key_path = null;

          # default headscale prefix
          ip_prefixes = [
            "100.64.0.0/10"
            "fd7a:115c:a1e0::/48"
          ];

          # database
          db_type = "sqlite3"; # postgres
          db_path = "/var/lib/headscale/db.sqlite";
          db_name = "headscale";
          db_user = config.services.headscale.user;

          # misc
          metrics_listen_addr = "127.0.0.1:8086";
          randomize_client_port = false;
          disable_check_updates = true;
          ephemeral_node_inactivity_timeout = "30m";
          node_update_check_interval = "10s";

          # logging
          log = {
            format = "text";
            level = "info";
          };

          logtail.enabled = false;
        };
      };

      nginx.virtualHosts."hs.notashelf.dev" = {
        forceSSL = true;
        enableACME = true;
        quic = true;
        http3 = true;

        locations = {
          "/" = {
            proxyPass = "http://localhost:${toString config.services.headscale.port}";
            proxyWebsockets = true;
          };

          "/metrics" = {
            proxyPass = "http://${toString config.services.headscale.settings.metrics_listen_addr}/metrics";
          };

          # see <https://github.com/gurucomputing/headscale-ui/blob/master/SECURITY.md> before
          # possibly using the web frontend
          "/web" = {
            root = "${inputs'.nyxexprs.packages.headscale-ui}/share";
          };
        };

        extraConfig = ''
          add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        '';
      };
    };

    systemd.services = {
      tailscaled.after = ["headscale.service"];
      headscale = {
        # reduce headscale stop timer duration
        # so that restarting Headscale is a lot faster
        # serviceConfig.TimeoutStopSec = "30s";
        environment = {
          HEADSCALE_EXPERIMENTAL_FEATURE_SSH = "1";

          HEADSCALE_DEBUG_TAILSQL_ENABLED = "1";
          HEADSCALE_DEBUG_TAILSQL_STATE_DIR = "${config.users.users.headscale.home}/tailsql";
        };

        # TODO: consider enabling postgresql storage
        # postgresql is normally pretty neat, but unless you expect your setup to receive
        # very frequent logins, sqlite (default) storage may be more performant
        # headscale.requires = ["postgresql.service"];
      };

      create-headscale-user = {
        description = "Create a headscale user and preauth keys for this server";

        wantedBy = ["multi-user.target"];
        after = ["headscale.service"];

        serviceConfig = {
          Type = "oneshot";
          User = "headscale";
        };

        path = [pkgs.headscale];
        script = ''
          if ! headscale users list | grep notashelf; then
            headscale users create notashelf
            headscale --user notashelf preauthkeys create --reusable --expiration 100y > /var/lib/headscale/preauth.key
          fi
        '';
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/networking/headscale/derp.nix">
{
  services.headscale.settings.derp = {
    server = {
      enabled = true;
      stun_listen_addr = "0.0.0.0:3478";

      # Region code and name are displayed in the Tailscale UI to identify a DERP region
      region_code = "headscale";
      region_name = "Headscale Embedded DERP";
      region_id = 999;
    };

    urls = [];
    paths = [];

    auto_update_enabled = false;
    update_frequency = "6h";
  };
}
</file>

<file path="modules/core/roles/server/system/services/networking/headscale/dns.nix">
{
  services.headscale.settings.dns_config = {
    override_local_dns = true;
    magic_dns = true;
    base_domain = "notashelf.dev";
    domains = [];
    nameservers = [
      "9.9.9.9" # no cloudflare, nice
    ];

    /*
    extra_records = [
      {
        name = "idm.notashelf.dev";
        type = "A";
        value = "100.64.0.1"; # NOTE: this should be the address of the "host" node - which is the server
      }
    ];
    */
  };
}
</file>

<file path="modules/core/roles/server/system/services/networking/wireguard/default.nix">
{
  imports = [
    ./server.nix
  ];
}
</file>

<file path="modules/core/roles/server/system/services/networking/wireguard/server.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;

  dev = config.modules.device;
  acceptedTypes = ["server" "hybrid"];
in {
  config = mkIf ((builtins.elem dev.type acceptedTypes) && cfg.networking.wireguard.enable) {
    networking = {
      nat = {
        enable = true;
        externalInterface = "ens3";
        internalInterfaces = ["wg0"];
      };

      firewall = {
        allowedUDPPorts = [51820];
        trustedInterfaces = ["wg0"];
      };
    };

    boot.kernelModules = [
      "wireguard"
    ];

    # Wireguard Server Peer Setup
    networking.wireguard = {
      enable = true;
      interfaces = {
        wg0 = {
          # General settings
          privateKeyFile = config.age.secrets.wg-server.path;
          listenPort = 51820;

          # IPs
          ips = [
            "10.255.255.10/24" # v4 general
            "10.255.255.254/24" # v4 adtl
            "fe80::10/64" # v6 link local
            "2a01:4f9:c010:2cf9:f::10/80" #v6 general
            "2a01:4f9:c010:2cf9:f::ffff/80" #v6 adtl
          ];

          # Peers
          peers = [
            # enyo
            {
              allowedIPs = [
                "10.255.255.11/32"
                "fe80::11/128"
                "2a01:4f9:c010:2cf9:f::11/128"
              ];
              publicKey = "u5Riuu4NEWEH06qATdnrPO+LacZTspoghqMnoWQ+uEQ=";
            }
          ];
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/networking/wireguard/wg-quick.nix">
{
  config,
  lib,
  ...
}: {
  networking = {
    firewall.allowedUDPPorts = [51820 51821];

    nat.internalInterfaces = ["wg0"];

    wireguard.interfaces = {
      wg0 = {
        ips = ["10.0.0.1/24"];
        listenPort = 51820;
        privateKeyFile = config.age.secrets.wireguard.path;
        peers = [
          {
            # enyo
            publicKey = "vv190fxSVr+u7Zv0ujPcwE4aYs0QcbObHwzWGwUNSUA=";
            allowedIPs = ["10.0.0.2/32"];
          }
          /*
          {
            # test
            publicKey = "";
            allowedIPs = ["10.0.0.3/32"];
          }
          */
        ];
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/networking/default.nix">
{
  imports = [
    ./headscale
    ./wireguard
  ];
}
</file>

<file path="modules/core/roles/server/system/services/nginx/static/gpg.txt">
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBGSPW8UBEADcTMSnVlcCo19szLa1Lr5pHP7w+7pd+W+msaNBYkIC1d6FPAvK
PgAJVaRb1fHll2y8MRQXdYmkNwu1L0w57TK/Sm7/vdCAJ2BUYdwMmTY55vOZNQod
aAMPHRLjIGxAYt3HzgwePrTzXG1HtO/Vt7y9//9UJ+ZUGZ/fNmZCkFm9JTYmNpvc
Ami52IEOB/TGI4fwLODMX7q0MHMZQKthlrSfGebr283AOEamx18h5I8xGYp4bKt0
cOwNURRkeGz/o0vQ41qQfgk9Virt/Pvxk5VJnV+hE81bclIIVsWY/xUTGEX7sw+b
vZg3RemI3IX4+nFe0llBWsrXVAFvivuMMv1m7GcpAO2c0QjtrazhNJpgfJa8aPXC
jSOoNxhCmWhTMpnudzKuIF+5xTJmvrzNbfcw5xzlPC52gvmiGtvOko34WWB3QbVY
BNxeVznUUAJqJz5AV+EjDQjGhpottY1j1/hYwH/MpwGjSyQMFdY7ZOK3/5/wIpnz
zQrTKO9aSPD5f87dSRTkGvI3Z53erpOpQHS8/cWIwTqp2Ht2lRu2lunfZ7MfA7HA
i/c1AHYIYFLONoVpDaDPlsyhcXbiMZ/bmg+wmlIhg4cEZGkjBco56fMOur+CTSl9
5ylYWuKHR3oykOyxeHcqytM1/92oW/QrcLIU67r0HfaDRj4vQtEr5XamIQARAQAB
tB1Ob3RBU2hlbGYgPHJhZkBub3Rhc2hlbGYuZGV2PokCUgQTAQoAPBYhBF4bNk6K
zTPvDzln5LpGvMNukSkiBQJkj1vFAhsBBQkB4TOABAsJCAcEFQoJCAUWAgMBAAIe
BQIXgAAKCRC6RrzDbpEpInanEACaj0K5mPmqVRPwNBxwXDXYgoa0cwmP+5OZVKce
xTgDvkpTAItWrcdqXN8gYROSr0dymnWkRbvgzVLxny9TpO0dRGgg8b+ZCl6fAjgl
oN5818zm9Tj8HhTNXMr9770QLWjAd8+LTMeOLsXmzRXVx5nQn2H545PGeCxkIlBP
mwZLlPN99OW3vnv1HNzOlo4s9VqbycZQZS8i2MoaWX0ZDYtT5p4+d2wy+JEGJRoB
cb/gcHfUXk1nit7o+MxzwaE30wMFezZ3i4ufOGv1Iab6gdO+kGvXEIO4ybxQmB5Z
B4BzB2NsFvoD1gUul4RSdK8Rlp3Bs+ldzhZuqSFR75sAqwGrxI0Ub2KQCTSuVe8Q
AC5x8qcKJG6DfMV33s7+6ICqFdcs8KoBJCONYFAbwIlia31UcU9KGURwU5gChHIL
l5lzqD7/cs0FkltJuzjG942DGPkQHFmWmkmdI6690wHwg2EBJkQQyXRGiamOaCK9
aXbX2MAGbY2bu+2Xw9L/wrh2GTbp34nunCCaQ7TGaGXImIIZOrK9htI9+u1uuSBo
G7REn+h8fua4AJ1NIu6LK3+G+2kCZVnxUr2mJ5n25O2EWsxkDK4syXtUGgcCQN0U
pjr1Bn3PcVvmznF2taGHxd7FXfmHXCTUsoUXwD8aSWb/veDXLb3ZvS9Jo0TtVVrH
avMRyrkCDQRkj1wTARAAvKtVro4KZKQq/aeZTW5ECsz5+Wpvmrqva/iTKQeXqspY
z1hjkXHeh0wDUY80IUDDR7wKkGm83pzHwq+cjXNytzPymXa+1b0yuUa97XRCb+kr
uW/w/LUds/mCNgkD4ps8cH0/WlApy7NXXiGG1Gf8/2K7z6GdJXb4A5LH2QqcQ5ix
0Tn+zTRRZUI1+PUMT8hJHeX+eaMc+shKnT1VZWHesLuzAmNkuYQdZ6LxyXm4Ocnm
dZ0/cpP4YzYFi0QWqbAji3CzFcxqJ9bCULy5jT3udgu+cDDI0nhIz1Dt7pSmJLx4
9H7jmPD2Sln+69wWkGk1okQkMym6fZ5GYGSzrKkcdc42rRMVCfUJ7PWMQ2Xvv4Wu
gxVQp76GAYYwJ1i7GDqxT1UoS6c98Zou1GQzcCjaNiEGUduA/SuOE8BHI5SWU17s
Lf91r4gEgaMvo2ieB86azHcmaUC6SpDMOYJrj4V8ufn7jnsvGqPPI6sNBOyBu5Vo
097Wzd8cAFVTj3ezX8Rq5yzBZr5cPKZnpCOJxrSymZTKd2QJVQIbCnP/mpLMPswq
aavuCQUgiqSXZ7U7OxvweN9E7Fn3Vb+Uq1gm/sOkD15+Im3DiUbxpifTaYlmFtDk
Bglai/Kak4I6RmUXkWlfUoYaFzM74O/mUb+30LD4Ap0SQjqiDoImJj499eOCHt8A
EQEAAYkEcgQYAQoAJhYhBF4bNk6KzTPvDzln5LpGvMNukSkiBQJkj1wTAhsCBQkB
4TOAAkAJELpGvMNukSkiwXQgBBkBCgAdFiEERj+D8ob3yxzaZG3KAtHdP6CLaykF
AmSPXBMACgkQAtHdP6CLaymGbQ/+Oc5WQPQ+DVeanbeHggXv+zMkX+aayuOQWkAc
kZIUSn/3ZfJurJPdjSsuatYmN3lGaa1m6RgDDg5RBctHq6j7zv66Z2jEVL1+yWCt
VP60MauY22a2DVNqwjbBpIXE9tEb1Pjy320+c8p/SS03R0ShtiUJBCYgmPRou2k+
XmpdU1dZJN5Bp5io2pOLcjqfAN5DWAqp+lKbbNmpskoa+PBZdFH4bkRojmQWO04U
uasa6yimPmpe9ZoynVPobNKPHWiUkRHKWz7dwGHNjts0CM6kbVe7q0T0mHLXgiLm
oO6gImOHfP1YBoNJ1KBeJ4/L9WF3/iXhDaGJqZ3ArUrw1r3B96s8b//k8OK/EGbL
9f3rFc9heN2SeTGCeFskYfeeCTvWKXHPI9oZ+2XM3cfYAfkO74BFS9/ETHWYZL66
1A3FCxUCmnoZoW5oNumfK9Hbxyukg/wFMLSE3L9Mv3f4vsrrTeko3tNWFK0FhzCW
atpQX1c9HCfKflWCwZH/U19gcqXEMFcFdnxvTq4XcFbvDxtk/2gXqS6rTggwHufx
IggD9/aFgwC2w7a4GzWnYGbC/dOb3hy1tdXGLv/y6aavD8CrbDQ/SXARoIPgcETo
/RsLMqOPG+jPC5+3SFr8xVDT+8+Hh90AQ2Ebx7vbTjEPO5rjgq4zSeQaBF/+sHLn
dya6rU7a2g//S9+V0e4/IyBLYjxdHGyocmNoujVRoR1E9WII3zYh4jm0qLzjDEk4
VfZ4t9VBqWat5fimqVwF68Z6KKoBo26TEuWDok3kzD6iLt6TqvPUiE4R2V+qO8dD
Gg95ZO7tAZXhFuq1/xSf0KIpfeCJ5PxisrxjZmVgcMM0gyae05rrxpWcaxiawlCl
0oPNN5oFfBwq1d94g/wJ2qywbVTnCjFhN7fl494C5rMRXeBo996XttlvILCci98U
m1xecq3vG6ZBGxwNe61NXkTtOZrJzoXTI9WHez0YJS0uXhlUmVy4T9r05UQWbzoT
hV2MSIEqdvE67K+MpLNhdTuSH/4zVug5/G4eMfxGi2fgzgm3WW862dpfUh2GQFuf
VfpBxWcdN7zffi44v509BnJe0kJmyPYgcvtmbigrsXLQjA2WM0QA1/Gi6IAPWcUc
KNvqZbsr3w2PZU6rrKEwDHlm2Lj9qyJFS53eImdaw7NnJBp4ujsC6abSCjkR7/gM
3qXS67cTcd1PeW4ephvMUVWSoy5bnhw2WwT2gPYX2diQWjbRIkuPl74foA4BM5XF
RpGozEV8ID3BqMWkYTbck0njpYr0h3SMw472tcMWtVVbeK2C4sLu3cTyxQtbgmXd
lrPzUVzOONGAygI9uleRYNMM58zNa/fLqHqf56ALcGTXybs97ko17be5Ag0EZI9c
JgEQAKFovIAsXHzUm2yFlPK/+XsHe7JvHHAbQqC1OTHz6DLT3/ADSqB/lLYGVKDA
ubPwc+5f+xWM3zBZchWbye9eoZ1TFNLnayXtKkoOY220u8uK4v3+o72Xj5B7CDLB
VIEPfDnAIXd2kc3X5l3LFzsiiM0joFSaoChdALAZpH8QLAxOGo68DuxvkVwjxpbH
fUxLahuKyiP375FTA1lV4WEV1f8+IJ5QxBPhDZG2rodV7ZlX05QzEMaxMoTRWiiB
WJ0U2nar4MXFbjPgxQkIcMxd2bfvcasi3GIVIkLmdE8PnMhmN/eO5xfWJgW7bYoJ
wA5tEGaX9mD+32yD/WTk2XyP9MS2e+RNFjBuNKNeVbnEzio31va8DiQ2JSB8mXkb
43jdBUnf/wPaHAx5CQG5mLUpmm2MpT6pTffHAwUdpejwfIFcU0rmFtq3ypKGKk2W
jjxbUBv+fGOAgyLcu5l8WWlZaBS2gN6TF43JAKw/arCTBVig+RHGcvlUhFqj4N/7
5ese12s4yp+qUsg/Om5gDsfNEl5ZgaG4+ymmaG6WTl04qi9LsIGAmV90CcQkaoab
ipC8vibm82vus7AzTgZKWKD0l3OQtYw6FlhY0H0lDBs6v6Tn1Y9i7nMbS2cikSqP
Wi5/awq4C4Lu9sjT4+FK5IokzWOi0VzUtrJO42w0IOTl9WqRABEBAAGJAjwEGAEK
ACYWIQReGzZOis0z7w85Z+S6RrzDbpEpIgUCZI9cJgIbDAUJAeEzgAAKCRC6RrzD
bpEpIsDmEACgRFbI26SrZnKJ99UGPFbDkx+PT5237qaWTssK0BKADZ+uXDRHrGeN
8sJhiKK2L6nsuSmtHTkUVUuNEqA8bxSGGq231JBja8tdhqqV0TGMz6t9q7ZC/HsW
TBtsbgj8aSjkCzgRaYj7zlDrtrN//Z2vniNgk/5z4nxWx/crbuVI8utJrddXETsP
Q/bnpWcbI67bOWPF5Ku2sv65sxgYp7WFvMhF9Gov7+VE1rimkXb6nkjVSadlNafE
n8U16CnEDQRVhxaIbylGdsGBgUO1p/mReAv+XFJT/LN+xDKMgvJtazQK++bzwB/b
E7fvnbaEt5aTmEdwcP+zZhSIX0qpNvpCmH9l+nT+Xdy3pLFdd59S+N50Jm5oRP59
aZYjaDYxlQMf4Jc+dIrVvMtksmBc+mphevkLk3eKM8eXyUmaOqjZO11bxHcE/Z1a
7e3WA3GzpL5IE4sdNEYwLaIjzbaMJ/B+oeZ9lTa5lZSINStl691mCNi2xgalVEza
JS7gS7UThCHmvYAdJpKeSEOh4FrMknsA6DaQjmcOymperK4qInNTusgnHvEiTaGH
4gJ5ylJ6B8XZDdIuVG8pfV7Kjlgo+iTDumvcx3Po1QRh1kL+qdj5k19l0V0Lfwi0
cgKHWU5iZSLhu6Rbn+RgboxNN2sg0uHgGT63+8HyjTMcdg8MtiXKW7kCDQRkj1w1
ARAAv+YZ+B8ijdsTwZVVztHTPuHYpe/RL4kv4JOFf0W9+J+emp1t1wRtxJAFPzu/
lfG7T11ab7V/tg3q99fSxhLDsmspv4mNI0MB4JUv5xFf7AnNkod16JmTKmVEjgcj
vtGEsR3DzY0/Q4FT8baYbCk+YouxChu3Sm9YJFjOYzt7Vu/q0ESWM8tGpM9uz8FQ
RmAlWl57tsOBZwR0167EKeLPbp+fLQtNXToHi4neZi7UKhysLyQq2bvE6LOZ42cE
jGtU6mcVmdg6cHKBaxbDKdQlhf+cVjR2ngxFq3ok+/r5M/aH24YC0tOaXheXeG0u
mahQzVUbILei/BzqqWpdLd3GV43YQHYlKGplYT2OrX+DBGh89sn3XVL8DZuAInPm
j2uq3e23uEJHdwUF31cvHM7MntQcHQqDRYvNIkr2koz6EDkeaxT987g4xNXvtQZY
yL4uxDCErRDnAC9cqXwfCVfGzztvXBsQIikSnv/Ifv0ZsuOo5mo8Eiw0PWABIKne
O2C5MIWyOyuJJj+dhIzETu/rTH/9J5illHpy/ZJnGfbGz/c6cemTHfyFuVoWW3Wn
kPVERAR+Nb7/L9eZQVZY6sg4bNBv0sCHxwUrD/1kM+IvVcndVug3OxnUhB4+Bb/V
ZvhXH895Pk9V9epRKO0Bk+3vTEReUSq/u/tFFfyiD5cTbk8AEQEAAYkCPAQYAQoA
JhYhBF4bNk6KzTPvDzln5LpGvMNukSkiBQJkj1w1AhsgBQkB4TOAAAoJELpGvMNu
kSkia48QAJts/EAObyO1jGyuUwnEfDugHKRl3WT6jxOUoZiKrogkFmloGRMi6aw4
2WF+TXrMwhQc39+qMicdqwjnjs1SVYngkrzmg8bCUcuJAvO2eTM4ukmynKTVgIBW
e0/WSYw8NG08m9Uh3YfCbJ0OZKaC7tewQPs7JgjA+TPvOpEcfhRve449SX0+x0Vh
ahDeGqeZZW/xfGJ4v2PsVCYPCj2Xrj/UP4P8H4tb23QWB5yCr/HhFxt0+Sm0go6w
/HUm2mdbVwngd2k6P4pz8TPpclfTUmCHVbcWrzMNmb4k1piMrF6a60n6ULBP8X04
i9PW3a+Z3WvK92x5NhAjYDJ+QR1Q90L6uK6jdBcs1FwsQNFSXeMwyA5EYKTqarM8
W0/4JiR1UmoerVXZAEo332UMg11ivbISH8gJTe7ImorT6F4dUtOBVsC6CtmYSxZ6
ut5i9QuwHuyI7yJGk2jGRyshAmZslqCqSUJRhi8ajgk9azc60M3QOqmBLDAmQHzz
hKEB6tFwl+GwlozvzSfeUJNo8oR2dOY2v+/cZ0JCEvMqlmTZttqSyY4pM+0SAc4c
KNvlXqQdE86Zjq9LGVaHvJFnXbdERn+e0dJIaU13XFT52jMFGAnl5mOlfuVVq3QO
YDjs3k+jOpkNZLwDQrF7RpATQiP1/+0tW6KRajlO4ss/KIBv5RN/
=QQXP
-----END PGP PUBLIC KEY BLOCK-----
</file>

<file path="modules/core/roles/server/system/services/nginx/static/header.txt">
_            _          _  __
 _ __   ___ | |_ __ _ ___| |__   ___| |/ _|
| '_ \ / _ \| __/ _` / __| '_ \ / _ \ | |_
| | | | (_) | || (_| \__ \ | | |  __/ |  _|
|_| |_|\___/ \__\__,_|___/_| |_|\___|_|_|.dev
</file>

<file path="modules/core/roles/server/system/services/nginx/static/root.txt">
Howdy!

I'm raf, more commonly known as NotAShelf on most online spaces. This
is my personal webpage, which is actually pure plaintext due to my utmosts
disdain for modern web technologies.

Frequently Asked Questions

***

Q: What do you do for a living?

A: I am a professional sailmaker. I design, manufacture and sell sails. I also
work as a part-time Political Science instructor for the time being. Sometimes
I do digital art, other times I do sailing as a sport.

***

Q: Did you study Computer Science? Why do you know programming?

A: No, I graduated as an International Relations major. I've been teaching
myself programming and Linux system administration since 2018. I mostly enjoy
open-source software, and my primary stack (as of now) is mostly backend
development in Go. Programming is something I enjoy as a tool to help me get
from point A to point B, which is why I am interested in learning new
technologies as much as I can.

***

Q: How are the International Relations?

A: They're good, thanks for asking.

***

Q: What programming languages do you know?

A: I mostly work with JavaScript, Typescript, Go, C and Nix. I also have some
experience with Rust, C++ and Python. There are other languages I've used, but
don't really consider noteworthy. I hate PHP. PHP probably hates me back. Good.

***

Q: What do you do now?

A: I am currently working on my PhD in Political Science where I conduct
research on the impact of digital technologies on political participation and
executive functions as well as the effects of open-source software. on said
fields. I would love to go into further detail but I also would like to avoid
doxxing myself. Just know that I get the prefix of "Doctor" when I'm done.

I frequently work with Nix and NixOS, embedded programming and Linux systems
in general. I also do some web development in my free time.

***

If you want to contact me for any reason, you may just shoot me an email
@ raf [at] notashelf [dot] dev. In case you were unable to reach me
via email (e.g. your smtp server uses an outdated cipher, or my domain is
blacklisted by your provider), you may contact me via Matrix or Mastodon using
the links below. I am also on Discord, going by the same handle as my github
username. My public gpg key is available at https://notashelf.dev/gpg which
is also in plaintext. If you're a bot, you're probably having a field day.

On that note, please stop scraping my website. I **do not** have anything
of your interest.

***

List of stuff you might find interesting if you came here and are a human:

- E-mail | raf [at] notashelf [dot] dev
- Matrix | https://matrix.to/#/@raf:notashelf.dev
- Mastodon | https://social.notashelf.dev/
- Github | https://github.com/notashelf
  - https://github.com/notashelf/nvf
  - https://github.com/schizofox/schizofox
  - https://github.com/notashelf/catApi
  - https://github.com/notashelf/goblin


If you have found a vulnerability on this server, I'd be very grateful if you
told me about it. Contact me through any of the ways above.

***

I can't have a footer but this is a good place to put a shoutout to the
awesome motherfuckingwebsite.com.

***
</file>

<file path="modules/core/roles/server/system/services/nginx/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) readFile;
  inherit (lib.modules) mkIf mkDefault mkForce;
  inherit (lib.strings) fileContents;
  inherit (lib.attrsets) mapAttrs;

  sys = config.modules.system;
  cfg = sys.services;

  inherit (config.networking) domain;
in {
  config = mkIf cfg.nginx.enable {
    security = {
      acme = {
        acceptTerms = true;
        defaults.email = "me@notashelf.dev";
      };
    };

    services = {
      nginx = {
        enable = true;
        package = pkgs.nginxQuic.override {withKTLS = true;};

        # makes /nginx_status endpoint available t o localhost
        statusPage = true;

        recommendedTlsSettings = true;
        recommendedBrotliSettings = true;
        recommendedOptimisation = true;
        recommendedGzipSettings = true;
        recommendedProxySettings = true;
        recommendedZstdSettings = true;

        clientMaxBodySize = mkDefault "512m";
        serverNamesHashBucketSize = 1024;
        appendHttpConfig = ''
          # set the maximum size of the headers hash tables to 1024 bytes
          # this applies to the total size of all headers in a client request
          # or a server response.
          proxy_headers_hash_max_size 1024;

          # set the bucket size for the headers hash tables to 256 bytes
          #  bucket size determines how many entries can be stored in
          # each hash table bucket
          proxy_headers_hash_bucket_size 256;
        '';

        # lets be more picky on our ciphers and protocols
        sslCiphers = "EECDH+aRSA+AESGCM:EDH+aRSA:EECDH+aRSA:+AES256:+AES128:+SHA1:!CAMELLIA:!SEED:!3DES:!DES:!RC4:!eNULL";
        sslProtocols = "TLSv1.3 TLSv1.2";

        commonHttpConfig = ''
          # map the scheme (HTTP or HTTPS) to the HSTS header for HTTPS
          # the header includes max-age, includeSubdomains and preload
          map $scheme $hsts_header {
            https "max-age=31536000; includeSubdomains; preload";
          }

          # add the Referrer-Policy header with a value of "no-referrer"
          # which instructs the browser not to send the 'Referer' header in
          # subsequent requests
          add_header "Referrer-Policy" "no-referrer";

          # adds the Strict-Transport-Security header with a value derived from the mapped HSTS header
          # which instructs the browser to always use HTTPS instead of HTTP
          add_header Strict-Transport-Security $hsts_header;

          # sets the path for cookies to "/", and adds attributes "secure", "HttpOnly", and "SameSite=strict"
          #  "secure": ensures that the cookie is only sent over HTTPS
          #  "HttpOnly":  prevents the cookie from being accessed by JavaScript
          #  "SameSite=strict": restricts the cookie to be sent only in requests originating from the same site
          proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";

          # define a new map that anonymizes the remote address
          # by replacing the last octet of IPv4 addresses with 0
          map $remote_addr $remote_addr_anon {
            ~(?P<ip>\d+\.\d+\.\d+)\.    $ip.0;
            ~(?P<ip>[^:]+:[^:]+):       $ip::;
            default                     0.0.0.0;
          }

          # define a new log format that anonymizes the remote address
          # and adds the remote user name, the time, the request line,
          log_format combined_anon '$remote_addr_anon - $remote_user [$time_local] '
                                   '"$request" $status $body_bytes_sent '
                                   '"$http_referer" "$http_user_agent"';

          # write the access log to a file with the combined_anon format
          # and a buffer size of 32k, flushing every 5 minutes
          access_log /var/log/nginx/access.log combined_anon buffer=32k flush=5m;

          # define a new log format that anonymizes the remote address
          # and adds remote user name, local time, the request line and http3
          # this is important for debugging quic enabled requests
          log_format quic '$remote_addr_anon - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" "$http3"';

          # write the access log to a file with the quic format
          access_log /var/log/nginx/quic-access.log quic;

          # error log should log only "warn" level and above
          error_log /var/log/nginx/error.log warn;
        '';

        virtualHosts = {
          /*
          # FIXME: this conflicts with the cache server
          "_" = {
            default = true;
            locations."/".return = "404";
          };
          */

          "${domain}" = {
            default = true;
            serverAliases = ["www.${domain}"];

            locations = let
              commonConfig = ''
                try_files $uri $uri/ =404;

                default_type text/plain;
                charset utf-8;
              '';

              # takes a path to a file and returns a
              # configuration for a location that serves that file
              mkStaticPage = {
                name,
                root,
                header ? "",
                footer ? "",
              }: let
                builtIndex = pkgs.writeTextDir "${name}" ''
                  ${header}
                  ${fileContents root}
                  ${footer}
                '';
              in {
                index = name;
                root = builtIndex.outPath;
                extraConfig = commonConfig;
              };
            in {
              # root location
              "/" = mkStaticPage {
                root = ./static/root.txt;
                name = "root.txt";
                header = readFile ./static/header.txt;
                footer = "> served by ${pkgs.nginx.outPath}";
              };

              # /gpg endpoint for my gpg key
              "/gpg" = mkStaticPage {
                name = "gpg.txt";
                root = ./static/gpg.txt;
              };
            };
          };
        };
      };

      fail2ban.jails = {
        nginx-bad-request.settings.enabled = true;
        nginx-http-auth.settings = {
          enabled = true;
          filter = "nginx-http-auth";
          action = ''nftables-multiport[name=NGINXAUTH, port="443", protocol=tcp]'';
        };

        nginx-botsearch.settings = {
          enabled = true;
          filter = "nginx-botsearch";
          action = ''nftables-multiport[name=NGINXBOT, port="443", protocol=tcp]'';
        };
      };

      # Periodically rotate the logs
      logrotate.settings.nginx = {
        enable = true;
        minsize = "50M";
        rotate = "4"; # 4 files of 50mb each
        compress = true;
      };
    };

    systemd.services.nginx.serviceConfig = mapAttrs (_: mkForce) {
      SupplementaryGroups = ["shadow"];
      NoNewPrivileges = false;
      PrivateDevices = false;
      ProtectHostname = false;
      ProtectKernelTunables = false;
      ProtectKernelModules = false;
      RestrictAddressFamilies = [];
      LockPersonality = false;
      MemoryDenyWriteExecute = false;
      RestrictRealtime = false;
      RestrictSUIDSGID = false;
      SystemCallArchitectures = "";
      ProtectClock = false;
      ProtectKernelLogs = false;
      RestrictNamespaces = false;
      SystemCallFilter = "";
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/social/default.nix">
{
  imports = [
    ./matrix.nix # matrix communication server
    ./mastodon.nix # decentralized social
  ];
}
</file>

<file path="modules/core/roles/server/system/services/social/mastodon.nix">
{
  inputs',
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services.social;
in {
  config = mkIf cfg.mastodon.enable {
    modules.system.services = {
      elasticsearch.enable = true;
      database = {
        postgresql.enable = true;
        redis.enable = true;
      };
    };

    services = {
      mastodon = {
        enable = true;
        package = inputs'.nyxexprs.packages.mastodon-bird-ui;

        user = "mastodon";

        configureNginx = false;
        trustedProxy = "127.0.0.1";
        localDomain = "social.notashelf.dev";
        streamingProcesses = 2;

        webPort = 55001;
        sidekiqPort = 55002;
        enableUnixSocket = true;
        sidekiqThreads = 12;

        elasticsearch.host = "127.0.0.1";

        redis = {
          createLocally = false;
          host = "localhost";
          port = 6372;
        };

        database = {
          createLocally = true;
          host = "/run/postgresql";
          name = "mastodon";
          user = "mastodon";
        };

        # configure smtp
        smtp = {
          authenticate = true;
          createLocally = false;
          fromAddress = "noreply@notashelf.dev";
          user = "noreply";
          host = "mail.notashelf.dev";
          passwordFile = config.age.secrets.mailserver-noreply-secret.path;
        };

        # extra config
        extraConfig = {
          SINGLE_USER_MODE = "true";
          WEB_DOMAIN = "social.notashelf.dev";
          AUTHORIZED_FETCH = "true";
        };
      };

      # this does what configureNginx option under the mastodon service is supposed to
      # to be able to fine-grain the service, we move it to its own configuration block
      # and also, I don't trust nixpkgs maintainers to properly maintain a service - so this is a safety net
      # in case they break another thing without proper documentation
      # /rant
      nginx = {
        virtualHosts."social.notashelf.dev" =
          {
            root = "${config.services.mastodon.package}/public/";
            quic = true;

            locations = {
              "/" = {
                tryFiles = "$uri @proxy";
              };

              "/system/".alias = "/var/lib/mastodon/public-system/";

              "@proxy" = {
                proxyPass = "http://unix:/run/mastodon-web/web.socket";
                proxyWebsockets = true;
              };

              "/api/v1/streaming/" = {
                proxyPass = "http://unix:/run/mastodon-streaming/streaming.socket";
                proxyWebsockets = true;
              };
            };
          }
          // lib.sslTemplate;
      };
    };

    users.groups.mastodon.members = [config.services.nginx.user];
  };
}
</file>

<file path="modules/core/roles/server/system/services/social/matrix.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services.social;

  inherit (cfg.matrix.settings) port;
  bindAddress = "::1";
  serverConfig."m.server" = "${config.services.matrix-synapse.settings.server_name}:443";
  clientConfig = {
    "m.homeserver".base_url = "https://${config.networking.domain}";
    "m.identity_server" = {};
  };

  mkWellKnown = data: ''
    add_header Content-Type application/json;
    add_header Access-Control-Allow-Origin *;
    add_header 'Referrer-Policy' 'origin-when-cross-origin';
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    return 200 '${builtins.toJSON data}';
  '';
in {
  config = mkIf cfg.matrix.enable {
    networking.firewall.allowedTCPPorts = [port];

    modules.system.services.database = {
      postgresql.enable = true;
    };

    services = {
      postgresql = {
        initialScript = pkgs.writeText "synapse-init.sql" ''
          CREATE ROLE "matrix-synapse" WITH LOGIN PASSWORD 'synapse';
          CREATE DATABASE "matrix-synapse" WITH OWNER "matrix-synapse"
            TEMPLATE template0
            LC_COLLATE = "C"
            LC_CTYPE = "C";
        '';
      };

      nginx.virtualHosts = {
        "notashelf.dev" =
          {
            serverAliases = ["matrix.notashelf.dev"];
            locations = {
              "= /.well-known/matrix/server".extraConfig = mkWellKnown serverConfig;
              "= /.well-known/matrix/client".extraConfig = mkWellKnown clientConfig;
              "/_matrix".proxyPass = "http://[${bindAddress}]:${toString port}";
              "/_synapse/client".proxyPass = "http://[${bindAddress}]:${toString port}";
            };

            quic = true;
            http3 = true;
          }
          // lib.sslTemplate;
      };

      matrix-synapse = {
        enable = true;

        extraConfigFiles = [config.age.secrets.matrix-secret.path];
        settings = {
          server_name = "notashelf.dev";
          public_baseurl = "https://notashelf.dev";

          federation_client_minimum_tls_version = "1.2";
          suppress_key_server_warning = true;
          user_directory.prefer_local_users = true;

          withJemalloc = true;
          enable_registration = true;
          registration_requires_token = true;

          bcrypt_rounds = 14;

          # Don't report anonymized usage statistics
          report_stats = false;

          # db
          database = {
            name = "psycopg2";
            args = {
              host = "/run/postgresql";
              user = "matrix-synapse";
              database = "matrix-synapse";
              cp_min = 5;
              cp_max = 10;
            };
          };

          # media
          media_retention.remote_media_lifetime = "30d";
          max_upload_size = "100M";
          url_preview_enabled = true;
          url_preview_ip_range_blacklist = [
            "127.0.0.0/8"
            "10.0.0.0/8"
            "172.16.0.0/12"
            "192.168.0.0/16"
            "100.64.0.0/10"
            "192.0.0.0/24"
            "169.254.0.0/16"
            "192.88.99.0/24"
            "198.18.0.0/15"
            "192.0.2.0/24"
            "198.51.100.0/24"
            "203.0.113.0/24"
            "224.0.0.0/4"
            "::1/128"
            "fe80::/10"
            "fc00::/7"
            "2001:db8::/32"
            "ff00::/8"
            "fec0::/10"
          ];

          thumbnail_sizes = [
            {
              width = 32;
              height = 32;
              method = "crop";
            }
            {
              width = 96;
              height = 96;
              method = "crop";
            }
            {
              width = 320;
              height = 240;
              method = "scale";
            }
            {
              width = 640;
              height = 480;
              method = "scale";
            }
            {
              width = 800;
              height = 600;
              method = "scale";
            }
          ];

          # listener configuration
          listeners = [
            {
              inherit port;
              bind_addresses = ["${bindAddress}"];
              resources = [
                {
                  names = ["client" "federation"];
                  compress = true;
                }
              ];
              tls = false;
              type = "http";
              x_forwarded = true;
            }
          ];

          experimental_features = {
            msc3202_device_masquerading = true;
            msc3202_transaction_extensions = true;
            msc2409_to_device_messages_enabled = true;
          };

          logConfig = ''
            version: 1

            # In systemd's journal, loglevel is implicitly stored, so let's omit it
            # from the message text.
            formatters:
                journal_fmt:
                    format: '%(name)s: [%(request)s] %(message)s'

            filters:
                context:
                    (): synapse.util.logcontext.LoggingContextFilter
                    request: ""

            handlers:
                journal:
                    class: systemd.journal.JournalHandler
                    formatter: journal_fmt
                    filters: [context]
                    SYSLOG_IDENTIFIER: synapse

            root:
                level: WARNING
                handlers: [journal]

            disable_existing_loggers: False
          '';
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/default.nix">
{
  imports = [
    # essentials
    ./databases # mysql, postgreqsl, redis and more
    ./nginx # base nginx webserver configuration

    # other services
    ./bincache # atticd and harmonia
    ./monitoring # prometheus, grafana, loki and uptime-kuma
    ./networking # wireguard and headscale
    ./social # mastodon and matrix
    ./forgejo.nix # lightweight git service, fork of gitea
    ./forgejo-runner.nix # self-hosted runner for forgejo
    ./nextcloud.nix # cloud storage (not a backup solution)
    ./vaultwarden.nix # bitwarden compatible password manager
    ./mailserver.nix # nixos-mailserver setup
    ./jellyfin.nix # media server
    ./tor.nix # tor relay
    ./searxng.nix # searx search engine
    ./reposilite.nix # self-hosted maven repository
    ./elasticsearch.nix # elasticsearch
    ./kanidm.nix # kanidm identity management

    # misc
    ./mkm.nix # holy fuck
  ];
}
</file>

<file path="modules/core/roles/server/system/services/elasticsearch.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  config = mkIf cfg.elasticsearch.enable {
    services.elasticsearch = {
      enable = true;
      single_node = true;
      cluster_name = "elasticsearch-${config.networking.hostName}";

      extraConf = ''
        xpack.security.enabled: false
      '';
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/forgejo-runner.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (config.meta) hostname;

  cfg = config.modules.system.services;
in {
  config = mkIf cfg.forgejo.enable {
    users = {
      groups.gitea-runner = {};
      users.gitea-runner = {
        isSystemUser = true;
        createHome = true;
        home = "/var/lib/gitea-runner";
        group = "gitea-runner";
        extraGroups = ["docker"];
      };
    };

    services.gitea-actions-runner = {
      package = pkgs.forgejo-runner;
      instances = {
        "${hostname}" = {
          enable = true;

          # Identify and register this runner based on hostname
          name = "${hostname}";
          url = "https://git.notashelf.dev";
          tokenFile = config.age.secrets.forgejo-runner-token.path;

          # NOTE: changing (i.e adding or removing) labels causes your old registration token to expire
          # make sure your labels are final before deploying
          labels = [
            "debian-latest:docker://node:18-bullseye"
            "ubuntu-latest:docker://node:18-bullseye"
            "act:docker://ghcr.io/catthehacker/ubuntu:act-latest"
            #"native:host"
          ];

          settings = {
            runner = {
              # After acquiring a toker, this can be generated with act_runner to
              # create the runner configuration that includes the token file.
              # file = config.age.secrets.forgejo-runner-config.path;

              capacity = 2;
              timeout = "3h";

              # Whether skip verifying the TLS certificate of the Forgejo instance.
              insecure = false;

              # The timeout for the runner to wait for running jobs to finish when shutting down.
              # Any running jobs that haven't finished after this timeout will be cancelled.
              shutdown_timeout = "3s";

              fetch_timeout = "7s";
              fetch_interval = "3s";
            };

            cache.enabled = true;
            container = {
              network = "host";
              # Pull docker image(s) even if already present
              force_pull = false;
              # Rebuild docker image(s) even if already present
              force_rebuild = false;
            };

            # packages that'll be made available to the host
            # when the runner is configured with a host execution label.
            hostPackages = with pkgs; [
              bash
              curl
              coreutils
              wget
              gitMinimal
            ];
          };
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/forgejo.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib.modules) mkIf mkForce;

  cfg = config.modules.system.services;
  domain = "git.notashelf.dev";

  dataDir = "/srv/storage/forgejo";
  dumpDir = "/srv/storage/forgejo-dump";

  inherit (cfg.forgejo.settings) port;
in {
  config = mkIf cfg.forgejo.enable {
    modules.system.services = {
      nginx.enable = true;
      database = {
        redis.enable = true;
        postgresql.enable = true;
      };
    };

    networking.firewall.allowedTCPPorts = [2222];

    systemd.tmpfiles.rules = let
      # Disallow crawlers from indexing this site.
      robots = pkgs.writeText "forgejo-robots-txt" ''
        User-agent: *
        Disallow: /
      '';
    in [
      "L+ ${config.services.forgejo.customDir}/public/robots.txt - - - - ${robots.outPath}"
    ];

    services = {
      forgejo = {
        enable = true;
        package = pkgs.forgejo.override {pamSupport = false;};
        stateDir = dataDir;
        database.type = "postgres";

        # This was mailerPasswordFile before 24.11
        secrets.mailer.PASSWD = config.age.secrets.forgejo-mailer-password.path;
        lfs.enable = true;

        # <https://forgejo.org/docs/latest/admin/config-cheat-sheet>
        settings = {
          DEFAULT.APP_NAME = "The Secret Shelf";
          badges.ENABLED = true;

          database = {
            DB_TYPE = "postgres";

            # If DB_TYPE is postgres
            HOST = "/run/postgresql";
            NAME = "forgejo";
            USER = "forgejo";
            PASSWD = "forgejo";
          };

          cache = {
            ENABLED = true;
            ADAPTER = "redis";
            HOST = "redis://:forgejo@localhost:6371";
          };

          ui = {
            DEFAULT_THEME = "forgejo-dark";
            EXPLORE_PAGING_NUM = 5;
            SHOW_USER_EMAIL = false; # hide user email in the explore page
            GRAPH_MAX_COMMIT_NUM = 200;
          };

          "ui.meta" = {
            AUTHOR = "NotAShelf's Private Git Instance";
            DESCRIPTION = ''
              NotAShelf's private Git instance for software that sucks more.
            '';
          };

          attachment.ALLOWED_TYPES = "*/*";
          service.DISABLE_REGISTRATION = true;
          packages.ENABLED = false;
          log.LEVEL = "Debug";

          repository = {
            DISABLE_STARS = true; # I'm alone on here...

            PREFERRED_LICENSES = "MIT,GPL-3.0,GPL-2.0,LGPL-3.0,LGPL-2.1";
            ENABLE_PUSH_CREATE_USER = true;

            DEFAULT_PRIVATE = "public";
            DEFAULT_PRIVATE_PUSH_CREATE = true;
            DEFAULT_MERGE_STYLE = "rebase-merge";
            DEFAULT_REPO_UNITS = "repo.code, repo.issues, repo.pulls, repo.actions";
          };

          "repository.upload" = {
            FILE_MAX_SIZE = 100;
            MAX_FILES = 10;
          };

          actions = {
            ENABLED = true;
            DEFAULT_ACTIONS_URL = "https://code.forgejo.org";
          };

          other = {
            SHOW_FOOTER_VERSION = false;
            SHOW_FOOTER_TEMPLATE_LOAD_TIME = false;
          };

          session = {
            COOKIE_SECURE = true;
            SAME_SITE = "strict";
          };

          security = {
            INSTALL_LOCK = true;
            PASSWORD_CHECK_PWN = true;
            PASSWORD_COMPLEXITY = "lower,upper,digit,spec";
            LOGIN_REMEMBER_DAYS = 7;
          };

          server = {
            PROTOCOL = "http+unix"; # unix socket is used by Nginx, deefault is "http"
            HTTP_PORT = port;
            ROOT_URL = "https://${domain}";
            DOMAIN = "${domain}";
            DISABLE_ROUTER_LOG = true;
            LANDING_PAGE = "/explore";

            # Internal SSH server configuration
            START_SSH_SERVER = true;
            SSH_PORT = 2222;
            SSH_LISTEN_PORT = 2222;
          };

          "repository.pull_request" = {
            WORK_IN_PROGRESS_PREFIXES = "WIP:,[WIP],DRAFT,[DRAFT]";
            ADD_CO_COMMITTERS_TRAILERS = true;
          };

          "git.timeout" = {
            DEFAULT = 3600;
            MIGRATE = 3600;
            MIRROR = 3600;
            CLONE = 3600;
          };

          "markup.asciidoc" = {
            ENABLED = true;
            NEED_POSTPROCESS = true;
            FILE_EXTENSIONS = ".adoc,.asciidoc";
            RENDER_COMMAND = "${pkgs.asciidoctor}/bin/asciidoctor --embedded --out-file=- -";
            IS_INPUT_FILE = false;
          };

          session = {
            PROVIDER = "redis";
            PROVIDER_CONFIG = "redis://:forgejo@localhost:6371";
          };

          mailer = mkIf config.modules.system.services.mailserver.enable {
            ENABLED = true;
            PROTOCOL = "smtps";
            SMTP_ADDR = "mail.notashelf.dev";
            SMTP_PORT = 465;
            FROM = "Forgejo <forgejo@notashelf.dev>";
            USER = "forgejo@notashelf.dev";
            SEND_AS_PLAIN_TEXT = true;
            SENDMAIL_PATH = "${pkgs.system-sendmail}/bin/sendmail";
          };

          federation = {
            ENABLED = true;
          };

          metrics = {
            ENABLED = true;
            ENABLED_ISSUE_BY_REPOSITORY = true;
            ENABLED_ISSUE_BY_LABEL = true;
          };
        };

        # backup
        dump = {
          enable = true;
          backupDir = dumpDir;
          interval = "06:00";
          type = "tar.zst";
        };
      };

      nginx.virtualHosts."${domain}" =
        {
          locations."/" = {
            recommendedProxySettings = true;
            proxyPass = "http://unix:/run/forgejo/forgejo.sock";
          };

          quic = true;
        }
        // lib.sslTemplate;

      fail2ban.jails.forgejo = {
        settings = {
          filter = "forgejo";
          action = "nftables-multiport";
          mode = "aggressive";
          maxretry = 3;
          findtime = 3600;
          bantime = 900;
        };
      };
    };

    environment.etc = {
      "fail2ban/filter.d/forgejo.conf".text = ''
        [Definition]
        failregex = ^.*(Failed authentication attempt|invalid credentials|Attempted access of unknown user).* from <HOST>$
        journalmatch = _SYSTEMD_UNIT=forgejo.service
      '';
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/jellyfin.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  config = mkIf cfg.jellyfin.enable {
    modules.system.services = {
      nginx.enable = true;
    };

    services = {
      jellyfin = {
        enable = true;
        group = "jellyfin";
        user = "jellyfin";
        openFirewall = true;
      };

      nginx.virtualHosts. "fin.notashelf.dev" =
        {
          locations."/" = {
            # TODO: the port is not customizable in the upstream service, PR nixpkgs
            proxyPass = "http://127.0.0.1:${cfg.jellyfin.settings.port}/";
            proxyWebsockets = true;
            extraConfig = "proxy_pass_header Authorization;";
          };

          quic = true;
        }
        // lib.sslTemplate;
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/kanidm.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  domain = "idm.notashelf.dev";
  certDir = config.security.acme.certs.${domain}.directory;

  sys = config.modules.system;
  cfg = sys.services;

  inherit (cfg.kanidm.settings) host port;
in {
  config = mkIf cfg.kanidm.enable {
    services.kanidm = {
      enableServer = true;
      serverSettings = {
        inherit domain;
        origin = "https://${domain}";
        bindaddress = "${host}:${toString port}";
        trust_x_forward_for = true;
        #tls_chain = "${certDir}/fullchain.pem";
        #tls_key = "${certDir}/key.pem";
        online_backup = {
          path = "/srv/storage/kanidm/backups";
          schedule = "0 0 * * *"; # Every day at midnight.
        };
      };
    };

    systemd.services.kanidm = {
      after = ["acme-selfsigned-internal.${domain}.target"];
      serviceConfig = {
        SupplementaryGroups = [config.security.acme.certs.${domain}.group];
        BindReadOnlyPaths = [certDir];
      };
    };

    services.nginx.virtualHosts.${domain} = {
      forceSSL = true;
      enableACME = true;
      locations."/".proxyPass = "https://${host}:${toString port}";
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/mailserver.nix">
{
  config,
  lib,
  pkgs,
  inputs,
  ...
}: let
  inherit (lib) mkIf;
  inherit (config.age) secrets;

  sys = config.modules.system;
  cfg = sys.services;
in {
  imports = [
    inputs.simple-nixos-mailserver.nixosModule
  ];

  config = mkIf cfg.mailserver.enable {
    # required for roundcube
    networking.firewall.allowedTCPPorts = [80 443];

    mailserver = {
      enable = true;
      fqdn = "mail.notashelf.dev";
      certificateScheme = "acme-nginx";
      domains = ["notashelf.dev"];

      mailDirectory = "/srv/storage/mail/vmail";
      dkimKeyDirectory = "/srv/storage/mail/dkim";
      sieveDirectory = "/srv/storage/mail/sieve";

      # Ports & Security
      enableImap = true;
      enableImapSsl = true;
      enablePop3 = false;
      enablePop3Ssl = false;
      enableSubmission = false;
      enableSubmissionSsl = true;

      hierarchySeparator = "/";
      localDnsResolver = false;
      lmtpSaveToDetailMailbox = "yes";
      maxConnectionsPerUser = 25;
      loginAccounts = {
        "raf@notashelf.dev" = {
          hashedPasswordFile = secrets.mailserver-secret.path;
          aliases = [
            "me@notashelf.dev"
            "admin@notashelf.dev"
            "root@notashelf.dev"
            "postmaster@notashelf.dev"
          ];
        };

        "noreply@notashelf.dev" = {
          hashedPasswordFile = secrets.mailserver-noreply-secret.path;
          sendOnly = true;
          sendOnlyRejectMessage = "";
          quota = "1G";
        };

        "forgejo@notashelf.dev" = mkIf cfg.forgejo.enable {
          aliases = ["git@notashelf.dev"];
          hashedPasswordFile = secrets.mailserver-forgejo-secret.path;
          sendOnly = true;
          sendOnlyRejectMessage = "";
          quota = "1G";
        };

        "vaultwarden@notashelf.dev" = mkIf cfg.vaultwarden.enable {
          aliases = ["vault@notashelf.dev"];
          hashedPasswordFile = secrets.mailserver-vaultwarden-secret.path;
          sendOnly = true;
          sendOnlyRejectMessage = "";
          quota = "1G";
        };

        "matrix@notashelf.dev" = mkIf cfg.social.matrix.enable {
          hashedPasswordFile = secrets.mailserver-matrix-secret.path;
          sendOnly = true;
          sendOnlyRejectMessage = "";
          quota = "1G";
        };

        "cloud@notashelf.dev" = mkIf cfg.nextcloud.enable {
          aliases = ["nextcloud@notashelf.dev"];
          hashedPasswordFile = secrets.mailserver-cloud-secret.path;
          sendOnly = true;
          sendOnlyRejectMessage = "";
          quota = "1G";
        };
      };

      mailboxes = {
        Archive = {
          auto = "subscribe";
          specialUse = "Archive";
        };

        Drafts = {
          auto = "subscribe";
          specialUse = "Drafts";
        };

        Sent = {
          auto = "subscribe";
          specialUse = "Sent";
        };

        Junk = {
          auto = "subscribe";
          specialUse = "Junk";
        };

        Trash = {
          auto = "no";
          specialUse = "Trash";
        };
      };

      fullTextSearch = {
        enable = true;
        # index new email as they arrive
        autoIndex = true;
        # this only applies to plain text attachments, binary attachments are never indexed
        indexAttachments = true;
        enforced = "body";
      };

      vmailUserName = "vmail";
      vmailGroupName = "vmail";

      useFsLayout = true;
    };

    services = {
      roundcube = {
        enable = true;
        database.username = "roundcube";
        maxAttachmentSize = 50;
        dicts = with pkgs.aspellDicts; [en tr de];
        # this is the url of the vhost, not necessarily the same as the fqdn of
        # the mailserver
        hostName = "webmail.notashelf.dev";
        extraConfig = ''
          $config['imap_host'] = array(
            'tls://mail.notashelf.dev' => "NotAShelf's Mail Server",
            'ssl://imap.gmail.com:993' => 'Google Mail',
          );
          $config['username_domain'] = array(
            'mail.notashelf.dev' => 'notashelf.dev',
            'mail.gmail.com' => 'gmail.com',
          );
          $config['x_frame_options'] = false;
          # starttls needed for authentication, so the fqdn required to match
          # the certificate
          $config['smtp_host'] = "tls://${config.mailserver.fqdn}";
          $config['smtp_user'] = "%u";
          $config['smtp_pass'] = "%p";
          $config['plugins'] = [ "carddav" ];
        '';
      };

      postfix = {
        dnsBlacklists = [
          "all.s5h.net"
          "b.barracudacentral.org"
          "bl.spamcop.net"
          "blacklist.woody.ch"
        ];
        dnsBlacklistOverrides = ''
          notashelf.dev OK
          mail.notashelf.dev OK
          127.0.0.0/8 OK
          192.168.0.0/16 OK
        '';
        headerChecks = [
          {
            action = "IGNORE";
            pattern = "/^User-Agent.*Roundcube Webmail/";
          }
        ];

        config = {
          smtp_helo_name = config.mailserver.fqdn;
        };
      };

      phpfpm.pools.roundcube.settings = {
        "listen.owner" = config.services.nginx.user;
        "listen.group" = config.services.nginx.group;
      };

      nginx.virtualHosts = {
        "mail.notashelf.dev" = {quic = true;} // lib.sslTemplate;
        "webmail.notashelf.dev" = {quic = true;} // lib.sslTemplate;
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/miniflux.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf getExe';

  dev = config.modules.device;
  cfg = config.modules.system.services;
  acceptedTypes = ["server" "hybrid"];
in {
  config = mkIf ((builtins.elem dev.type acceptedTypes) && cfg.miniflux.enable) {
    # https://github.com/Gerg-L/nixos/blob/master/hosts/gerg-desktop/services/miniflux.nix
    # miniflux setup courtesy of the funny frog man (he's bald)

    systemd.services = {
      miniflux = {
        description = "Miniflux service";
        wantedBy = ["multi-user.target"];
        requires = ["miniflux-dbsetup.service"];
        after = ["network.target" "postgresql.service" "miniflux-dbsetup.service"];
        script = getExe' pkgs.miniflux "miniflux";

        serviceConfig = {
          User = "miniflux";
          RuntimeDirectory = "miniflux";
          RuntimeDirectoryMode = "0770";
          EnvironmentFile = config.age.secrets.miniflux-env.path;

          # Hardening
          CapabilityBoundingSet = [""];
          DeviceAllow = [""];
          LockPersonality = true;
          MemoryDenyWriteExecute = true;
          PrivateDevices = true;
          PrivateUsers = true;
          ProcSubset = "pid";
          ProtectClock = true;
          ProtectControlGroups = true;
          ProtectHome = true;
          ProtectHostname = true;
          ProtectKernelLogs = true;
          ProtectKernelModules = true;
          ProtectKernelTunables = true;
          ProtectProc = "invisible";
          RestrictAddressFamilies = ["AF_INET" "AF_INET6" "AF_UNIX"];
          RestrictNamespaces = true;
          RestrictRealtime = true;
          RestrictSUIDSGID = true;
          SystemCallArchitectures = "native";
          SystemCallFilter = ["@system-service" "~@privileged"];
          UMask = "0077";
        };

        environment = {
          BASE_URL = "https://flux.notashelf.dev";
          LISTEN_ADDR = "/run/miniflux/miniflux.sock";
          DATABASE_URL = "user=miniflux host=/run/postgresql dbname=miniflux";
          RUN_MIGRATIONS = "1";
          CREATE_ADMIN = "1";
        };
      };
      miniflux-dbsetup = {
        description = "Miniflux database setup";
        requires = ["postgresql.service"];
        after = ["network.target" "postgresql.service"];
        script = ''
          ${lib.getExe' config.services.postgresql.package "psql"} "miniflux" -c "CREATE EXTENSION IF NOT EXISTS hstore"
        '';
        serviceConfig = {
          Type = "oneshot";
          User = config.services.postgresql.superUser;
        };
      };
    };
    users = {
      groups.miniflux = {
        gid = 377;
      };
      users = {
        miniflux = {
          group = "miniflux";
          extraGroups = ["postgres"];
          isSystemUser = true;
          uid = 377;
        };
        ${config.services.nginx.user}.extraGroups = ["miniflux"];
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/mkm.nix">
{
  inputs',
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;
  cfg = config.modules.system.services;
in {
  config = mkIf cfg.mkm.enable {
    virtualisation.oci-containers = {
      backend = "podman";
      containers = {
        "mkm-web" = mkIf (config.networking.hostName == "helios") {
          autoStart = true;
          environmentFiles = [
            config.age.secrets.mkm-web.path
          ];
          ports = [
            "3005:3005"
            "3306:3306"
          ];
          extraOptions = ["--network=host"];

          image = "mkm-web";
          imageFile = inputs'.mkm.packages.dockerImage;
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/nextcloud.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (lib.meta) getExe;

  domain = "cloud.notashelf.dev";

  sys = config.modules.system;
  cfg = sys.services;
in {
  config = mkIf cfg.nextcloud.enable {
    modules.system.services = {
      nginx.enable = true;
      database = {
        redis.enable = true;
        postgresql.enable = true;
      };
    };

    users.users.nextcloud = {
      extraGroups = ["render"]; # access /dev/dri/renderD128
      packages = [pkgs.ffmpeg-headless];
    };

    services = {
      nextcloud = {
        enable = true;
        package = pkgs.nextcloud29;

        https = true;
        hostName = domain;
        nginx.recommendedHttpHeaders = true;

        home = "/srv/storage/nextcloud";
        maxUploadSize = "4G";
        enableImagemagick = true;

        extraApps = let
          inherit (config.services.nextcloud.package.packages) apps;
        in {
          # wtf is this formatting
          inherit (apps) mail polls onlyoffice contacts calendar tasks bookmarks deck forms cookbook impersonate groupfolders;
        };

        autoUpdateApps = {
          enable = true;
          startAt = "03:00";
        };

        caching = {
          apcu = true;
          memcached = true;
          redis = true;
        };

        config = {
          # admin user settings
          # only effective during setup
          adminuser = "notashelf";
          adminpassFile = config.age.secrets.nextcloud-secret.path;

          # database
          dbtype = "pgsql";
          dbhost = "/run/postgresql";
          dbname = "nextcloud";
          dbuser = "nextcloud";
        };

        settings = {
          "memories.exiftool" = getExe pkgs.exiftool;
          "memories.vod.vaapi" = true;
          "memories.vod.ffmpeg" = getExe pkgs.ffmpeg-headless;
          "memories.vod.ffprobe" = "${pkgs.ffmpeg-headless}/bin/ffprobe";

          jpeg_quality = 60;
          preview_max_filesize_image = 128; # MB
          preview_max_memory = 512; # MB
          preview_max_x = 2048; # px
          preview_max_y = 2048; # px

          # be very specific about the preview providers
          enabledPreviewProviders = [
            "OC\\Preview\\BMP"
            "OC\\Preview\\GIF"
            "OC\\Preview\\JPEG"
            "OC\\Preview\\Krita"
            "OC\\Preview\\MarkDown"
            "OC\\Preview\\MP3"
            "OC\\Preview\\OpenDocument"
            "OC\\Preview\\PNG"
            "OC\\Preview\\TXT"
            "OC\\Preview\\XBitmap"
            "OC\\Preview\\HEIC"

            # <https://github.com/nextcloud/server/tree/master/lib/private/Preview>
            ''OC\Preview\Font''
            ''OC\Preview\PDF''
            ''OC\Preview\SVG''
            ''OC\Preview\WebP''
          ];

          # run maintenance jobs at low-load hours
          # i.e. 01:00am UTC and 05:00am UTC
          maintenance_window_start = 1;

          # force https
          overwriteprotocol = "https";
          trusted_domains = ["https://${toString domain}"];
          trusted_proxies = ["https://${toString domain}"];

          redis = {
            host = "/run/redis-default/redis.sock";
            dbindex = 0;
            timeout = 3;
          };

          # other stuff
          default_phone_region = "TR";
          lost_password_link = "disabled";
        };

        phpOptions = {
          "opcache.enable" = "1";
          "opcache.enable_cli" = "1";
          "opcache.validate_timestamps" = "0";
          "opcache.save_comments" = "1";

          # <https://docs.nextcloud.com/server/latest/admin_manual/installation/server_tuning.html>
          "opcache.jit" = "1255";
          "opcache.jit_buffer_size" = "256M";

          # fix the opcache "buffer is almost full" error in admin overview
          "opcache.interned_strings_buffer" = "16";
          # try to resolve delays in displaying content or incomplete page rendering
          "output_buffering" = "off";

          "pm" = "dynamic";
          "pm.max_children" = "50";
          "pm.start_servers" = "15";
          "pm.min_spare_servers" = "15";
          "pm.max_spare_servers" = "25";
          "pm.max_requests" = "500";
        };

        phpExtraExtensions = ext: [ext.redis];
      };

      nginx.virtualHosts."cloud.notashelf.dev" =
        {
          quic = true;
          http3 = true;
        }
        // lib.sslTemplate;
    };

    systemd.services = {
      phpfpm-nextcloud.aliases = ["nextcloud.service"];
      "nextcloud-setup" = {
        requires = ["postgresql.service"];
        after = ["postgresql.service"];
        serviceConfig = {
          Restart = "on-failure";
          RestartSec = "10s";
        };
      };

      /*
      "nextcloud-preview" = {
        description = "Generate previews for all images that haven't been rendered";
        startAt = "01:00:00";
        requires = ["nextcloud.service"];
        after = ["nextcloud.service"];
        path = [config.services.nextcloud.occ];
        script = "nextcloud-occ preview:generate";

        serviceConfig = {
          Restart = "on-failure";
          RestartSec = "10s";
        };
      };
      */
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/reposilite.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) sslTemplate;
  inherit (lib.modules) mkIf;

  sys = config.modules.system;
  cfg = sys.services;

  inherit (cfg.reposilite.settings) port;
in {
  config = mkIf sys.services.reposilite.enable {
    modules.system.services = {
      nginx.enable = true;
    };

    services.reposilite = {
      enable = true;
      package = pkgs.reposilite;
      dataDir = "/srv/storage/reposilite";

      openFirewall = true;

      user = "reposilite";
      group = "reposilite";

      settings = {
        inherit port;
      };
    };

    services.nginx.virtualHosts = {
      "repo.notashelf.dev" =
        {
          locations."/".proxyPass = "http://127.0.0.1:${toString port}";
          extraConfig = ''
            access_log /var/log/nginx/reposilite-access.log;
            error_log /var/log/nginx/reposilite-error.log;
          '';
        }
        // sslTemplate;
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/searxng.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;

  inherit (cfg.searxng.settings) host port;
in {
  config = mkIf cfg.searxng.enable {
    networking.firewall.allowedTCPPorts = [port];

    modules.system.services = {
      nginx.enable = true;
      database.redis.enable = true;
    };

    users = {
      users.searx = {
        isSystemUser = true;
        createHome = false;
        group = lib.mkForce "searx-redis";
      };

      groups.searx-redis = {};
    };

    services = {
      searx = {
        enable = true;
        package = pkgs.searxng;
        environmentFile = config.age.secrets.searx-secretkey.path;
        settings = {
          use_default_settings = true;

          general = {
            instance_name = "NotASearx";
            privacypolicy_url = false;
            donation_url = "https://ko-fi.com/notashelf";
            contact_url = "mailto:raf@notashelf.dev";
            enable_metrics = true;
            debug = false;
          };

          search = {
            safe_search = 2; # 0 = None, 1 = Moderate, 2 = Strict
            formats = ["html" "json" "rss"];
            autocomplete = "google"; # "dbpedia", "duckduckgo", "google", "startpage", "swisscows", "qwant", "wikipedia" - leave blank to turn it off by default
            default_lang = "en";
          };

          server = {
            inherit port;
            method = "GET";
            secret_key = "@SEARX_SECRET_KEY@"; # set in the environment file
            limiter = false;
            image_proxy = false; # no thanks, lol
            default_http_headers = {
              X-Content-Type-Options = "nosniff";
              X-XSS-Protection = "1; mode=block";
              X-Download-Options = "noopen";
              X-Robots-Tag = "noindex, nofollow";
              Referrer-Policy = "no-referrer";
            };
          };

          ui = {
            query_in_title = true;
            theme_args.simple_style = "dark"; # auto, dark, light
            results_on_new_tab = false;
          };

          redis = {
            url = "unix://searxng:localhost@/run/redis-searxng?db=0";
            #url = "unix:///run/redis-searxng/redis.sock?db=0";
            #url = "redis://searxng@localhost:6370/0";
          };

          outgoing = {
            request_timeout = 15.0;
            max_request_timeout = 30.0;
          };

          engines = [
            {
              name = "wikipedia";
              engine = "wikipedia";
              shortcut = "w";
              base_url = "https://wikipedia.org/";
            }
            {
              name = "duckduckgo";
              engine = "duckduckgo";
              shortcut = "ddg";
            }
            {
              name = "google";
              engine = "google";
              shortcut = "g";
              use_mobile_ui = false;
            }
            {
              name = "archwiki";
              engine = "archlinux";
              shortcut = "aw";
            }
            {
              name = "github";
              engine = "github";
              categories = "it";
              shortcut = "gh";
            }
            {
              name = "nixpkgs";
              shortcut = "nx";
              engine = "elasticsearch";
              categories = "dev,nix";
              base_url = "https://nixos-search-5886075189.us-east-1.bonsaisearch.net:443";
              index = "latest-31-nixos-unstable";
              query_type = "match";
            }
          ];
        };
      };

      nginx.virtualHosts."search.notashelf.dev" =
        {
          locations."/".proxyPass = "http://${host}:${toString port}";
          extraConfig = ''
            access_log /dev/null;
            error_log /dev/null;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
          '';

          quic = true;
        }
        // lib.sslTemplate;
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/tor.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
  cfg = sys.services;
in {
  config = mkIf cfg.tor.enable {
    services = {
      tor = {
        settings = {
          AutomapHostsOnResolve = true;
          AutomapHostsSuffixes = [".exit" ".onion"];
          EnforceDistinctSubnets = true;
          ExitNodes = "{de}";
          EntryNodes = "{de}";
          NewCircuitPeriod = 120;
          DNSPort = 9053;
          BandWidthRate = "15 MBytes";
        };

        relay.onionServices = {
          # hide ssh from script kiddies
          ssh = {
            version = 3;
            map = [{port = builtins.elemAt config.services.openssh.ports 0;}];
          };
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/services/vaultwarden.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.modules) mkIf mkForce;

  sys = config.modules.system;
  cfg = sys.services;

  user = config.users.users.vaultwarden.name;
  group = config.users.groups.vaultwarden.name;

  dataDir = "/srv/storage/vaultwarden";
  backupDir = "/srv/storage/bitwarden-backup";

  inherit (cfg.vaultwarden.settings) port host;
in {
  config = mkIf cfg.vaultwarden.enable {
    modules.system.services = {
      nginx.enable = true;
    };

    systemd.tmpfiles.settings = {
      "10-vaultwarden" = {
        "${dataDir}" = {
          d = {
            inherit user group;
            mode = "0700";
          };
        };

        "${backupDir}" = {
          d = {
            inherit user group;
            mode = mkForce "0750";
            age = "30d";
          };
        };
      };
    };

    services = {
      vaultwarden = {
        enable = true;
        inherit backupDir;

        # Sensitive configuration options go here
        environmentFile = config.age.secrets.vaultwarden-env.path;

        config = {
          DATA_FOLDER = dataDir;
          ATTACHMENTS_FOLDER = "${dataDir}/attachments";
          ICON_CACHE_FOLDER = "${dataDir}/icon_cache";

          DOMAIN = "https://vault.notashelf.dev";

          # Rocket server configuration
          ROCKET_ADDRESS = host;
          ROCKET_PORT = port;
          ROCKET_LIMITS = "{json=10485760}"; # 10MB limit for posted json in the body

          # No password hint
          SHOW_PASSWORD_HINT = false;

          # Log to system journal
          extendedLogging = true;
          EXTENDED_LOGGING = true;
          USE_SYSLOG = true;
          LOG_LEVEL = "warn";

          # Only allow signups from my own domain
          # or the admin panel.
          INVITATIONS_ALLOWED = false;

          SIGNUPS_ALLOWED = false;
          SIGNUPS_VERIFY = true;
          SIGNUPS_DOMAINS_WHITELIST = "notashelf.dev";

          # Push notifications
          PUSH_ENABLED = true;
          PUSH_RELAY_URI = "https://api.bitwarden.eu";
          PUSH_IDENTITY_URI = "https://identity.bitwarden.eu";

          # SMTP Settings
          smtpAuthMechanism = "Login";
          smtpFrom = "vaultwarden@notashelf.dev";
          smtpFromName = "NotAShelf's Vaultwarden Service";
          smtpHost = "mail.notashelf.dev";
          smtpPort = 465;
          smtpSecurity = "force_tls";
        };
      };

      nginx.virtualHosts."vault.notashelf.dev" =
        {
          locations."/" = {
            proxyPass = "http://${host}:${toString port}";
            extraConfig = "proxy_pass_header Authorization;";
          };

          quic = true;
        }
        // lib.sslTemplate;

      fail2ban.jails = {
        vaultwarden-web = {
          filter = {
            INCLUDES.before = "common.conf";
            Definition = {
              failregex = "^.*Username or password is incorrect\. Try again\. IP: <ADDR>\. Username:.*$";
              ignoreregex = "";
            };
          };

          settings = {
            backend = "systemd";
            port = "80,443,8222";
            filter = "vaultwarden-web[journalmatch='_SYSTEMD_UNIT=vaultwarden.service']";
            banaction = "%(banaction_allports)s";
            maxretry = 3;
            bantime = 14400;
            findtime = 14400;
          };
        };

        vaultwarden-admin = {
          filter = {
            INCLUDES.before = "common.conf";
            Definition = {
              failregex = "^.*Invalid admin token\. IP: <ADDR>.*$";
              ignoreregex = "";
            };
          };

          settings = {
            backend = "systemd";
            port = "80,443,8222";
            filter = "vaultwarden-admin[journalmatch='_SYSTEMD_UNIT=vaultwarden.service']";
            banaction = "%(banaction_allports)s";
            maxretry = 3;
            bantime = 14400;
            findtime = 14400;
          };
        };
      };
    };

    systemd.services = {
      vaultwarden.serviceConfig = {
        ReadWriteDirectories = dataDir;
      };

      backup-vaultwarden = {
        environment.DATA_FOLDER = mkForce dataDir;
        serviceConfig = {
          ReadWriteDirectories = dataDir;
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/server/system/module.nix">
{
  imports = [
    ./services
  ];

  system.nixos.tags = ["server"];
}
</file>

<file path="modules/core/roles/workstation/system/programs/ccache.nix">
{
  config,
  lib,
  ...
}: {
  # https://nixpk.gs/pr-tracker.html?pr=316558
  programs.ccache = {
    enable = false;
    cacheDir = "/var/cache/sccache";
  };

  systemd.tmpfiles.rules = [
    "z ${config.programs.ccache.cacheDir} 770 root nixbld - -"
  ];

  nix.settings.extra-sandbox-paths = [
    config.programs.ccache.cacheDir
  ];

  nixpkgs.overlays = lib.mkIf (config.programs.ccache.enable && config.programs.ccache.packageNames == []) [
    (_: super: {
      ccacheWrapper = super.ccacheWrapper.override {
        extraConfig = ''
          export CCACHE_COMPRESS=1
          export CCACHE_DIR="${config.programs.ccache.cacheDir}"
          export CCACHE_UMASK=007
          export CCACHE_SLOPPINESS=include_file_mtime,time_macros
          export CCACHE_NODIRECT=1
          if [ ! -d "$CCACHE_DIR" ]; then
            echo "====="
            echo "Directory '$CCACHE_DIR' does not exist"
            echo "Please create it with:"
            echo "  sudo mkdir -m0770 '$CCACHE_DIR'"
            echo "  sudo chown root:nixbld '$CCACHE_DIR'"
            echo "====="
            exit 1
          fi
          if [ ! -w "$CCACHE_DIR" ]; then
            echo "====="
            echo "Directory '$CCACHE_DIR' is not accessible for user $(whoami)"
            echo "Please verify its access permissions"
            echo "====="
            exit 1
          fi
        '';
      };
    })
  ];
}
</file>

<file path="modules/core/roles/workstation/system/programs/default.nix">
{
  imports = [
    ./ccache.nix
    ./flatpak.nix
    ./java.nix
    ./misc.nix
    ./nh.nix
    ./wine.nix
    ./xdg-ninja.nix
  ];
}
</file>

<file path="modules/core/roles/workstation/system/programs/flatpak.nix">
{
  # enable flatpak, as well as xdgp to communicate with the host filesystems
  services.flatpak.enable = false;

  environment.sessionVariables.XDG_DATA_DIRS = ["/var/lib/flatpak/exports/share"];
}
</file>

<file path="modules/core/roles/workstation/system/programs/java.nix">
{
  pkgs,
  lib,
  ...
}: {
  # "saying java is good because it runs on all systems is like saying
  # anal sex is good because it works on all species"
  # - sun tzu
  programs.java = {
    # adds JAVA_HOME to the global environment
    # by sourcing the jdk’s setup-hook on shell init
    # slightly slows down the shell since the java path needs
    # to be realised
    enable = true;

    # jdk package to use
    package = pkgs.jre;

    # whether to enable binfmt for executing
    # java jar’s and classes. This can be a security
    # exploit.
    binfmt = lib.mkForce false;
  };
}
</file>

<file path="modules/core/roles/workstation/system/programs/misc.nix">
{
  programs = {
    # allow users to mount fuse filesystems with allow_other
    fuse.userAllowOther = true;

    # show network usage
    bandwhich.enable = true;

    # registry for linux, thanks to gnome
    dconf.enable = true;

    # network inspection utility
    wireshark.enable = true;

    # gnome's keyring manager
    seahorse.enable = true;

    # networkmanager tray uility
    nm-applet.enable = true;
  };
}
</file>

<file path="modules/core/roles/workstation/system/programs/nh.nix">
{pkgs, ...}: {
  # This is set by `programs.nh.flake` by itself. We're just setting it here
  # so that we have a FLAKE variable set even when nh is disabled.
  environment.variables.FLAKE = "/home/notashelf/.config/nyx";

  programs.nh = {
    enable = true;
    package = pkgs.nh;

    # path to the system flake
    flake = "/home/notashelf/.config/nyx";

    # whether to let nh run gc on the store weekly
    clean = {
      enable = false; # nix-auto-gc is enabled on all systems, nh isn't.
      dates = "weekly";
    };
  };
}
</file>

<file path="modules/core/roles/workstation/system/programs/wine.nix">
{
  config,
  pkgs,
  ...
}: let
  env = config.modules.usrEnv;
in {
  # determine which version of wine to be used
  # then add it to systemPackages
  environment.systemPackages = with pkgs; let
    winePackage =
      if env.isWayland
      then wineWowPackages.waylandFull
      else wineWowPackages.stableFull;
  in [winePackage];
}
</file>

<file path="modules/core/roles/workstation/system/programs/xdg-ninja.nix">
{lib, ...}: let
  template = import lib.xdgTemplate "nixos";
in {
  environment = {
    variables = template.glEnv;
    sessionVariables = template.sysEnv;
    etc = {inherit (template) pythonrc npmrc;};
  };
}
</file>

<file path="modules/core/roles/workstation/system/security/default.nix">
{
  imports = [
    ./firejail.nix
    ./tor.nix
  ];
}
</file>

<file path="modules/core/roles/workstation/system/security/firejail.nix">
{
  lib,
  pkgs,
  ...
}: let
  inherit (lib) getExe;
in {
  programs.firejail = let
    profiles = "${pkgs.firejail}/etc/firejail";
  in {
    enable = true;
    wrappedBinaries = with pkgs; {
      thunderbird = {
        executable = getExe thunderbird;
        profile = "${profiles}/thunderbird.profile";
      };

      spotify = {
        executable = getExe spotify;
        profile = "${profiles}/spotify.profile";
      };

      mpv = {
        executable = getExe mpv;
        profile = "${profiles}/mpv.profile";
      };

      imv = {
        executable = pkgs.imv + /bin/imv;
        profile = "${profiles}/imv.profile";
      };

      zathura = {
        executable = getExe zathura;
        profile = "${profiles}/zathura.profile";
      };
    };
  };
}
</file>

<file path="modules/core/roles/workstation/system/security/tor.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
in {
  config = mkIf sys.security.tor.enable {
    services = {
      tor = {
        enable = true;
        torsocks.enable = true;
        client = {
          enable = true;
          dns.enable = true;
        };
      };

      networkd-dispatcher = {
        enable = true;
        rules."restart-tor" = {
          onState = ["routable" "off"];
          script = ''
            #!${pkgs.runtimeShell}
            if [[ $IFACE == "wlan0" && $AdministrativeState == "configured" ]]; then
              echo "Restarting Tor ..."
              systemctl restart tor
            fi
            exit 0
          '';
        };
      };
    };

    programs.proxychains = {
      enable = true;
      quietMode = false;
      proxyDNS = true;
      package = pkgs.proxychains-ng;
      proxies = {
        tor = {
          type = "socks5";
          host = "127.0.0.1";
          port = 9050;
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/workstation/system/services/adb.nix">
{pkgs, ...}: {
  programs.adb.enable = true;

  services.udev = {
    packages = [
      pkgs.android-udev-rules
    ];

    extraRules = ''
      # add my android device to adbusers
      SUBSYSTEM=="usb", ATTR{idVendor}=="04e8", MODE="0666", GROUP="adbusers"
    '';
  };
}
</file>

<file path="modules/core/roles/workstation/system/services/dbus.nix">
{pkgs, ...}: {
  services.dbus = {
    enable = true;
    packages = with pkgs; [dconf gcr udisks2];

    # Use the faster dbus-broker instead of the classic dbus-daemon
    # this setting is experimental, but after testing I've come to realise it broke nothing
    implementation = "broker";
  };
}
</file>

<file path="modules/core/roles/workstation/system/services/default.nix">
{
  imports = [
    ./adb.nix
    ./dbus.nix
    ./earlyoom.nix
    ./gnome.nix
    ./location.nix
    ./printing.nix
    ./misc.nix
    ./runners.nix
    ./systemd.nix
    ./zswap.nix
  ];
}
</file>

<file path="modules/core/roles/workstation/system/services/earlyoom.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.strings) concatStringsSep;
in {
  # Avoid the Linux kernel locking itself when we're putting too much
  # strain on the memory. This helps avoid having to shut down
  # forcefully when we OOM - which is preferable since we also disable SysRq.
  # See:
  #  <https://dataswamp.org/~solene/2022-09-28-earlyoom.html>
  services.earlyoom = {
    enable = true;
    enableNotifications = true; # annoying, but we want to know what's killed
    reportInterval = 0;
    freeSwapThreshold = 2;
    freeMemThreshold = 4;
    extraArgs = let
      # applications that we would like to avoid killing
      # when system is under high memory pressure
      appsToAvoid = concatStringsSep "|" [
        "Hyprland" # avoid killing the graphical session
        "foot" # terminal, might have unsaved files
        "cryptsetup" # avoid killing the disk encryption manager
        "dbus-.*" # avoid killing the dbus daemon & the dbus broker
        "Xwayland" # avoid killing the X11 server
        "gpg-agent" # avoid killing the gpg agent
        "systemd" # avoid killing systemd
        "systemd-.*" # avoid killing systemd microservices
        "ssh-agent" # avoid killing the ssh agent
      ];

      # apps that we would like killed first
      # those are likely the ones draining most memory
      appsToPrefer = concatStringsSep "|" [
        # browsers
        "Web Content"
        "Isolated Web Co"
        "chromium.*"
        # electron applications
        "electron" # I wish we could kill electron permanently
        ".*.exe"
        "java.*"
        # added 2024-05-12: PipeWire locked down my system as it failed to acquire RT privileges
        "pipewire(.*)" # catch pipewire and pipewire-pulse
      ];
    in [
      "-g" # kill all processes within a process group
      "--avoid '^(${appsToAvoid})$'" # things we want to not kill
      "--prefer '^(${appsToPrefer})$'" # things we want to kill as soon as possible
    ];

    # we should ideally write the logs into a designated log file; or even better, to the journal
    # for now we can hope this echo sends the log to somewhere we can observe later
    killHook = pkgs.writeShellScript "earlyoom-kill-hook" ''
      echo "Process $EARLYOOM_NAME ($EARLYOOM_PID) was killed"
    '';
  };

  # Harden the earlyoom service based on some upstream defaults
  # and some other options that I prefer having set. Normally
  # I look at a stable distro, such as Fedora, before setting
  # serviceConfig options but as far as I can tell, Fedora does
  # not provide a serviceConfig for earlyOOM.
  systemd.services.earlyoom.serviceConfig = {
    # from upstream
    DynamicUser = true;
    AmbientCapabilities = "CAP_KILL CAP_IPC_LOCK";
    Nice = -20;
    OOMScoreAdjust = -100;
    ProtectSystem = "strict";
    ProtectHome = true;
    Restart = "always";
    TasksMax = 10;
    MemoryMax = "50M";

    # Protection rules. Mostly from the `systemd-oomd` service
    # with some of them already included upstream.
    CapabilityBoundingSet = "CAP_KILL CAP_IPC_LOCK";
    PrivateDevices = true;
    ProtectClock = true;
    ProtectHostname = true;
    ProtectKernelLogs = true;
    ProtectKernelModules = true;
    ProtectKernelTunables = true;
    ProtectControlGroups = true;
    RestrictNamespaces = true;
    RestrictRealtime = true;

    PrivateNetwork = true;
    IPAddressDeny = "any";
    RestrictAddressFamilies = "AF_UNIX";

    SystemCallArchitectures = "native";
    SystemCallFilter = ["@system-service" "~@resources @privileged"];
  };
}
</file>

<file path="modules/core/roles/workstation/system/services/gnome.nix">
{pkgs, ...}: {
  config = {
    services = {
      udev.packages = [pkgs.gnome.gnome-settings-daemon];
      gnome = {
        # Whether to enable gnome-keyring. This is usually necessary for storing
        # secrets for programming applications such as VSCode or GitHub desktop.
        # It is also optional to use google/nextcloud calendar.
        gnome-keyring.enable = true;
      };
    };
  };
}
</file>

<file path="modules/core/roles/workstation/system/services/location.nix">
{config, ...}: {
  location.provider = "geoclue2";

  services.geoclue2 = {
    # enable geoclue2 only if location.provider is geoclue2
    enable = config.location.provider == "geoclue2";

    # TODO: make gammastep fall back to local if geoclue2 is disabled
    appConfig.gammastep = {
      isAllowed = true;
      isSystem = false;
    };
  };
}
</file>

<file path="modules/core/roles/workstation/system/services/misc.nix">
{config, ...}: {
  config = {
    services = {
      # enable GVfs, a userspace virtual filesystem.
      gvfs.enable = true;

      # storage daemon required for udiskie auto-mount
      udisks2 = {
        enable = !config.boot.isContainer;
        settings = {
          # general udisks2 configuration
          "udisks2.conf" = {
            defaults = {
              encryption = "luks2"; # alternatively, luks1
            };

            udisks2 = {
              modules = ["*"];
              modules_load_preference = "ondemand";
            };
          };
        };
      };
    };
  };
}
</file>

<file path="modules/core/roles/workstation/system/services/printing.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkIf;

  sys = config.modules.system;
in {
  config = mkIf sys.printing.enable {
    # enable cups and add some drivers for common printers
    services = {
      printing = {
        enable = true;
        drivers = with pkgs; [
          gutenprint
          hplip
        ];
      };

      # required for network discovery of printers
      avahi = {
        enable = true;
        # resolve .local domains for printers
        nssmdns4 = true;
        # pass avahi port(s) to the firewall
        openFirewall = true;
      };
    };
  };
}
</file>

<file path="modules/core/roles/workstation/system/services/runners.nix">
{
  pkgs,
  lib,
  ...
}: {
  config = {
    environment.systemPackages = [pkgs.appimage-run];

    # run appimages with appimage-run
    boot.binfmt.registrations = lib.genAttrs ["appimage" "AppImage"] (_: {
      wrapInterpreterInShell = false;
      interpreter = "${pkgs.appimage-run}/bin/appimage-run";
      recognitionType = "magic";
      offset = 0;
      mask = "\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\xff\\xff\\xff";
      magicOrExtension = "\\x7fELF....AI\\x02";
    });

    # run unpatched linux binaries with nix-ld
    programs.nix-ld = {
      enable = true;
      libraries = with pkgs; [
        stdenv.cc.cc
        openssl
        curl
        glib
        util-linux
        glibc
        icu
        libunwind
        libuuid
        zlib
        libsecret
        # graphical
        freetype
        libglvnd
        libnotify
        SDL2
        vulkan-loader
        gdk-pixbuf
        xorg.libX11
      ];
    };
  };
}
</file>

<file path="modules/core/roles/workstation/system/services/systemd.nix">
{lib, ...}: let
  inherit (lib.modules) mkForce;
  inherit (lib.attrsets) mapAttrs;
in {
  systemd = let
    timeoutConfig = ''
      DefaultTimeoutStartSec=10s
      DefaultTimeoutStopSec=10s
      DefaultTimeoutAbortSec=10s
      DefaultDeviceTimeoutSec=10s
    '';
  in {
    # Set the default timeout for starting, stopping, and aborting services to
    # avoid hanging the system for too long on boot or shutdown.
    extraConfig = timeoutConfig;
    user.extraConfig = timeoutConfig;

    # Disable all virtual terminals. I usually don't need to switch between
    # TTYs, however, I may get locked out of my desktop session and this
    # may come to bite me in the ass when that happens.
    services = mapAttrs (_: mkForce) {
      "getty@tty1".enable = false;
      "autovt@tty1".enable = false;
      "getty@tty7".enable = false;
      "autovt@tty7".enable = false;
      "kmsconvt@tty1".enable = false;
      "kmsconvt@tty7".enable = false;
    };
  };
}
</file>

<file path="modules/core/roles/workstation/system/services/zswap.nix">
{
  # compress memory and store in RAM before swapping to disk
  boot.kernelParams = ["zswap.enabled=1"];

  # use lz4 and z3fold for zswap
  boot.kernelModules = [
    "lz4"
    "z3fold"
  ];

  systemd.services.config-zswap = {
    description = "";

    after = ["systemd-modules-load.service"];
    wantedBy = ["multi-user.target"];

    serviceConfig.Type = "oneshot";

    script = ''
      echo lz4 > /sys/module/zswap/parameters/compressor
      echo z3fold > /sys/module/zswap/parameters/zpool
    '';
  };
}
</file>

<file path="modules/core/roles/workstation/system/fonts.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.attrsets) mapAttrs;
in {
  fonts = {
    enableDefaultPackages = false;

    fontconfig = {
      enable = true;
      hinting.enable = true;
      antialias = true;
      defaultFonts = let
        # fonts that should be in each font family
        # if applicable
        common = [
          "Iosevka Nerd Font"
          "Symbols Nerd Font"
          "Noto Color Emoji"
        ];
      in
        mapAttrs (_: fonts: fonts ++ common) {
          serif = ["Noto Serif"];
          sansSerif = ["Lexend"];
          emoji = ["Noto Color Emoji"];
          monospace = [
            "Source Code Pro Medium"
            "Source Han Mono"
          ];
        };
    };

    fontDir = {
      enable = true;
      decompressFonts = true;
    };

    # font packages that should be installed
    packages = with pkgs; [
      # defaults worth keeping
      dejavu_fonts
      freefont_ttf
      gyre-fonts
      liberation_ttf # for PDFs, Roman
      unifont
      roboto

      # programming fonts
      sarasa-gothic
      (nerdfonts.override {fonts = ["Iosevka" "JetBrainsMono" "NerdFontsSymbolsOnly"];})

      # desktop fonts
      corefonts # MS fonts
      b612 # high legibility
      material-icons # used in widgets and such
      material-design-icons
      work-sans
      comic-neue
      source-sans
      inter
      lato
      lexend
      dejavu_fonts
      noto-fonts
      noto-fonts-cjk-sans

      # emojis
      noto-fonts-color-emoji
      twemoji-color-font
      openmoji-color
      openmoji-black
    ];
  };
}
</file>

<file path="modules/core/roles/workstation/system/misc.nix">
{lib, ...}: let
  inherit (lib.modules) mkForce;
in {
  # Firefox cache on tmpfs
  fileSystems."/home/notashelf/.cache/mozilla/firefox" = {
    device = "tmpfs";
    fsType = "tmpfs";
    noCheck = true;
    options = ["noatime" "nodev" "nosuid" "size=128M"];
  };

  # enable the unified cgroup hierarchy (cgroupsv2)
  # NOTE: we use mkForce ensure that we are making cgroupsv2 the default
  # some services, i.e. lxd,  tries to disable it
  systemd.enableUnifiedCgroupHierarchy = mkForce true;
}
</file>

<file path="modules/core/roles/workstation/system/module.nix">
{
  imports = [
    ./programs
    ./services
    ./security

    ./fonts.nix
    ./misc.nix
  ];

  system.nixos.tags = ["workstation"];
}
</file>

<file path="modules/extra/exported/onedev/default.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib.modules) mkIf;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.types) raw package nullOr str;
  cfg = config.services.onedev;

  onedev-package = pkgs.fetchurl {
    url = "https://code.onedev.io/~downloads/projects/160/builds/3835/artifacts/onedev-8.4.2.tar.gz";
    sha256 = "01spl71zdl0ywh5hf83p5d2pxqb9zqhi0akijxv04j3jzkgv2dm6";
  };
in {
  options = {
    services.onedev = {
      enable = mkEnableOption "Onedev server";
      package = mkOption {
        default = onedev-package;
        type = raw;
      };

      javaPackage = mkOption {
        default = pkgs.jdk11_headless;
        type = package;
      };

      user = mkOption {
        default = "onedev";
        type = nullOr str;
      };
    };
  };

  config = let
    user =
      if cfg.user == null
      then "onedev"
      else "${cfg.user}";
  in
    mkIf cfg.enable {
      systemd.user.services."onedev-agent-${toString user}" = {
        enable = true;
        unitConfig = {
          ConditionUser = "${toString user}";
        };
        wantedBy = ["default.target"];
        after = ["network.target"];
        description = "onedev-agent-${toString user}";
        path = [config.system.path];
        serviceConfig = let
          java = "${lib.getExe cfg.javaPackage}";
        in {
          ExecStart = "${java} -cp '${cfg.package}/lib/1.8.21/*' io.onedev.agent.Agent";
          Type = "simple";
        };
      };
    };
}
</file>

<file path="modules/extra/shared/home-manager/gtklock/default.nix">
{
  config,
  lib,
  pkgs,
  ...
}:
with builtins; let
  cfg = config.programs.gtklock;

  inherit (lib) types mkIf mkOption mkEnableOption mkPackageOption literalExpression optionals optionalString;
  inherit (lib.generators) toINI;

  # the main config includes two very niche options: style (which takes a path) and modules, which takes a list of module paths
  # concatted by ";"
  # for type checking purposes, I prefer templating the main section of the config and let the user safely choose options
  # extraConfig takes an attrset, and converts it to the correct INI format - it's mostly just strings and integers, so that's fine
  baseConfig = ''
    [main]
    ${optionalString (cfg.config.gtk-theme != "") "gtk-theme=${cfg.config.gtk-theme}"}
    ${optionalString (cfg.config.style != "") "style=${cfg.config.style}"}
    ${optionalString (cfg.config.modules != []) "modules=${concatStringsSep ";" cfg.config.modules}"}
  '';

  finalConfig = baseConfig + optionals (cfg.extraConfig != null) (toINI {} cfg.extraConfig);
in {
  meta.maintainers = [maintainers.NotAShelf];
  options.programs.gtklock = {
    enable = mkEnableOption "GTK-based lockscreen for Wayland";
    package = mkPackageOption pkgs "gtklock" {};

    config = {
      gtk-theme = mkOption {
        type = types.str;
        default = "";
        description = ''
          GTK theme to use for gtklock.
        '';
        example = "Adwaita-dark";
      };

      style = mkOption {
        type = with types; oneOf [str path];
        default = "";
        description = ''
          The css file to be used for gtklock.
        '';
        example = literalExpression ''
          pkgs.writeText "gtklock-style.css" '''
            window {
              background-size: cover;
              background-repeat: no-repeat;
              background-position: center;
            }
          '''
        '';
      };

      modules = mkOption {
        type = with types; listOf (either package str);
        default = [];
        description = ''
          A list of gtklock modulesto use. Can either be packages, absolute paths, or strings.
        '';
        example = literalExpression ''
          [
            "${pkgs.gtklock-powerbar-module.outPath}/lib/gtklock/powerbar-module.so"
            "${pkgs.gtklock-playerctl-module.outPath}/lib/gtklock/playerctl-module.so"
          ];
        '';
      };
    };

    extraConfig = mkOption {
      type = with types; nullOr attrs;
      default = {
        countdown = {
          countdown-position = "top-right";
          justify = "right";
          countdown = 20;
        };
      };
      description = ''
        Extra configuration to append to gtklock configuration file.
        Mostly used for appending module configurations.
      '';
      example = literalExpression ''
        countdown = {
          countdown-position = "top-right";
          justify = "right";
          countdown = 20;
        }
      '';
    };
  };

  config = mkIf cfg.enable {
    home.packages = [cfg.package];

    xdg.configFile."gtklock/config.ini".source = pkgs.writeText "gtklock-config.ini" finalConfig;
  };
}
</file>

<file path="modules/extra/shared/home-manager/transience/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkOption mkEnableOption types;

  cfg = config.services.transience;
in {
  meta.maintainers = [lib.maintainers.NotAShelf];
  options.services.transience = {
    enable = mkEnableOption "transience";

    user = mkOption {
      type = with types; nullOr string;
      default = null;
      description = "The user that the directories will be relative to";
    };

    days = mkOption {
      type = types.int;
      default = 30;
      description = "Number of days after which files are deleted";
    };

    directories = mkOption {
      type = with types; listOf path;
      default = [];
      description = ''
        A list of directories that will be cleaned.

        Must be relative to the user's home directory.
      '';
    };
  };

  config = {
    assertions = [
      {
        assertion = cfg.enable -> cfg.user == null;
        message = ''
          You have enabled services.transience, but have not specified your user. You must specify a "main user"
          for your system for Transience to work properly.
        '';
      }
      {
        assertion = cfg.directories == [];
        message = ''
          You have enabled services.transience, but have not specified any directories to clean up. Please specify
          at least one folder. This option defaults to an empty list, but you must specify a list of directories for
          Transience to work properly.
        '';
      }
    ];

    systemd.user.services.transience = let
      dirs =
        map (
          x:
            config.home-manager.users.${cfg.user}.home.homeDirectory + "/" + x
        )
        cfg.directories;
    in {
      Install.wantedBy = ["default.target"];
      Service.ExecStart = ''
        ${builtins.concatStringsSep "\n" (map (x: "find ${
            lib.escapeShellArg x
          } -mtime +${cfg.days} -exec rm -rv {} + -depth;")
          dirs)}
      '';

      Unit.Description = "Clean up transient directories";
    };
  };
}
</file>

<file path="modules/extra/shared/home-manager/vifm/default.nix">
{
  config,
  lib,
  pkgs,
  ...
}:
with builtins; let
  inherit (lib) types mkIf mkOption mkEnableOption mkPackageOption literalExpression;

  cfg = config.programs.vifm;
in {
  meta.maintainers = [maintainers.NotAShelf];
  options.programs.vifm = {
    enable = mkEnableOption "vifm, file manager with curses interface, which provides Vim-like environment for managing objects within file systems";

    package = mkPackageOption pkgs "vifm" {};

    config = mkOption {
      type = types.lines;
      default = "";
      description = "Vifm configuration to be written in vifmrc";

      example = literalExpression ''
        " vim:ft=vifm
        set vicmd="nvim"
        set runexec
      '';
    };

    extraConfigFiles = mkOption {
      type = with types; listOf str;
      default = [];
      example = ["~/.config/vifm/vifmrc.local"];
      description = ''
        Extra vifm configuration files to be sourced in vifmrc

        Can be an absolute path, or a path relative to `$XDG_CONFIG_HOME/vifm`
      '';
    };
  };

  config = mkIf cfg.enable {
    home.packages = [cfg.package];

    xdg.configFile."vifm/vifmrc".source = pkgs.writeText "vifmrc" (
      (lib.concatLines (lib.forEach cfg.extraConfigFiles (x: "source ${x}")))
      + cfg.config
    );
  };
}
</file>

<file path="modules/extra/shared/home-manager/xplr/default.nix">
{
  config,
  lib,
  pkgs,
  ...
}:
with builtins; let
  inherit (lib) types mkIf mkOption mkEnableOption mkPackageOption literalExpression;

  cfg = config.programs.xplr;
  initialConfig = ''
    version = '${cfg.package.version}'
  '';
  # we provide a default version line within the configuration file, which is obtained from the package's attributes
  # merge the initial configFile, a mapped list of plugins and then the user defined configuration to obtain the final configuration
  pluginPath =
    if cfg.plugins != []
    then ("package.path=\n" + (concatStringsSep " ..\n" (map (p: ''"${p}/init.lua;"'') cfg.plugins)) + " ..\npackage.path\n")
    else "\n";
  configFile = initialConfig + pluginPath + cfg.config;
in {
  meta.maintainers = [maintainers.NotAShelf];
  options.programs.xplr = {
    enable = mkEnableOption "xplr, terminal UI based file explorer" // {default = true;};

    package = mkPackageOption pkgs "xplr" {};

    plugins = mkOption {
      type = with types; nullOr (listOf (either package str));
      default = [];
      defaultText = literalExpression "[]";
      description = ''
        Plugins to be added to your configuration file. Must be a package, an absolute plugin path, or string
        to be recognized by xplr. Paths will be relative to $XDG_CONFIG_HOME/xplr/init.lua unless they are absolute.
      '';
    };

    # TODO: rename, this is the main configuration
    config = mkOption {
      type = types.lines;
      default = "";
      description = ''
        Extra xplr configuration.
      '';

      example = literalExpression ''
        require("wl-clipboard").setup {
          copy_command = "wl-copy -t text/uri-list",
          paste_command = "wl-paste",
          keep_selection = true,
        }
      '';
    };
  };

  config = mkIf cfg.enable {
    home.packages = [cfg.package];

    xdg.configFile."xplr/init.lua".source = pkgs.writeText "init.lua" configFile;
  };
}
</file>

<file path="modules/extra/shared/home-manager/default.nix">
{}
</file>

<file path="modules/extra/shared/nixos/comma/default.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) mkOption mkEnableOption types literalExpression;

  cfg = config.programs.comma;
in {
  options.programs.comma = {
    enable = mkEnableOption "comma, a wrapper to run software without installing it";

    package = mkOption {
      type = types.package;
      default = pkgs.comma.override {nix-index-unwrapped = config.programs.nix-index.package;};
      defaultText = literalExpression "pkgs.comma.override { nix-index-unwrapped = config.programs.nix-index.package; }";
      description = "Package providing the `comma` tool.";
    };
  };

  config = lib.mkIf cfg.enable {
    environment.systemPackages = [cfg.package];

    programs = {
      command-not-found.enable = lib.mkForce false;

      nix-index.enable = true;
    };
  };
}
</file>

<file path="modules/extra/shared/nixos/reposilite/default.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkOption mkEnableOption mkPackageOption types mkIf getExe;

  writeServiceConfig = config:
    lib.concatStringsSep "\n" (lib.mapAttrsToList (name: value: "${name}: ${
        (
          if (lib.isBool value)
          then (lib.boolToString value)
          else (toString value)
        )
      }")
      config);

  cfg = config.services.reposilite;
in {
  options.services.reposilite = {
    enable = mkEnableOption "reposilite - maven repository manager";

    package = mkPackageOption pkgs "reposilite" {};

    dataDir = mkOption {
      type = types.path;
      default = "/var/lib/reposilite";
      description = "Working directory";
    };

    openFirewall = mkOption {
      type = types.bool;
      default = false;
      description = "Open firewall for reposilite";
    };

    user = mkOption {
      type = types.str;
      default = "reposilite";
      description = "User to run reposilite as";
    };

    group = mkOption {
      type = types.str;
      default = "reposilite";
      description = "Group to run reposilite as";
    };

    settings = mkOption {
      default = {};
      description = "Settings to pass to reposilite";
      type = with types;
        submodule {
          freeformType = attrs;
          options = {
            hostname = mkOption {
              type = types.str;
              default = "0.0.0.0";
              description = "Hostname to listen on";
            };

            port = mkOption {
              type = types.int;
              default = 8080;
              description = "Port to listen on";
            };

            database = mkOption {
              type = types.str;
              default = "sqlite reposilite.db";
              description = ''
                Database configuration. Supported storage providers:
                  - mysql localhost:3306 database user password
                  - sqlite reposilite.db
                  - sqlite --temporary
                Experimental providers (not covered with tests):
                  - postgresql localhost:5432 database user password
                  - h2 reposilite
              '';
            };

            sslEnabled = mkOption {
              type = types.bool;
              default = false;
              example = true;
              description = "Support encrypted connections";
            };

            sslPort = mkOption {
              type = types.int;
              default = 443;
              description = "Port to listen on for SSL connections";
            };

            keyPath = mkOption {
              type = with types; nullOr str;
              default = "$${WORKING_DIRECTORY}/cert.pem $${WORKING_DIRECTORY}/key.pem";
              example = "${cfg.dataDir}/cert.pem ${cfg.dataDir}/key.pem";
              description = ''
                Key file to use. You can specify absolute path to the given file or use {option}`services.reposilite.dataDir` variable.
                If you want to use .pem certificate you need to specify its path next to the key path.
              '';
            };

            keyPassword = mkOption {
              type = with types; nullOr str;
              default = "";
              example = "reposilite";
              description = "Key password to use";
            };

            enforceSsl = mkOption {
              type = types.bool;
              default = false;
              description = "Redirect http traffic to https";
            };

            webThreadPoolSize = mkOption {
              type = types.addCheck types.int (x: x >= 5);
              default = 16;
              description = "Max amount of threads used by core thread pool (min: 5)";
            };

            ioThreadPool = mkOption {
              type = types.addCheck types.int (x: x >= 2);
              default = 8;
              description = "IO thread pool handles all tasks that may benefit from non-blocking IO (min: 2)";
            };

            databaseThreadPool = mkOption {
              type = types.addCheck types.int (x: x >= 1);
              default = 8;
              description = "Database thread pool manages open connections to database (min: 1)";
            };

            compressionStrategy = mkOption {
              type = types.enum ["none" "gzip"];
              default = "none";
              description = ''
                Select compression strategy used by this instance.
                Using 'none' reduces usage of CPU & memory, but ends up with higher transfer usage.
                GZIP is better option if you're not limiting resources that much to increase overall request times.
              '';
            };

            idleTimeout = mkOption {
              type = types.int;
              default = 30000;
              description = "Default idle timeout used by Jetty";
            };

            bypassExternalCache = mkOption {
              type = types.bool;
              default = true;
              description = ''
                Bypass external cache and use internal one.
                Adds cache bypass headers to each request from `/api/*` scope served by this instance
              '';
            };

            cachedLogSize = mkOption {
              type = types.int;
              default = 50;
              description = "Amount of messages stored in cached logger";
            };

            defaultFrontend = mkOption {
              type = types.bool;
              default = true;
              description = "Enable default frontend with dashboard";
            };

            basePath = mkOption {
              type = types.str;
              default = "/";
              description = ''
                Set custom base path for Reposilite instance.
                It's not recommended to mount Reposilite under custom base path
                and you should always prioritize subdomain over this option.
              '';
            };

            debugEnabled = mkOption {
              type = types.bool;
              default = false;
              description = "Debug mode";
            };
          };
        };
    };
  };

  config = mkIf cfg.enable {
    environment = {
      systemPackages = [cfg.package];
      etc."reposilite/configuration.cdn" = mkIf (cfg.settings != {}) {
        text = writeServiceConfig cfg.settings;
      };
    };

    networking.firewall.allowedTCPPorts = mkIf cfg.openFirewall [cfg.settings.port];

    users = {
      groups.reposilite = {
        name = cfg.group;
      };

      users.reposilite = {
        group = cfg.user;
        home = cfg.dataDir;

        isSystemUser = true;
        createHome = true;
      };
    };

    systemd.services."reposilite" = {
      description = "Reposilite - Maven repository";
      wantedBy = ["multi-user.target"];
      script = let
        inherit (cfg) dataDir;
        staticConfig = ''--local-config "/etc/reposilite/configuration.cdn" --local-configuration-mode none'';
      in ''
        ${getExe cfg.package} --working-directory "${dataDir}" ${staticConfig}
      '';

      serviceConfig = {
        inherit (cfg) user group;

        WorkingDirectory = cfg.dataDir;
        SuccessExitStatus = 0;
        TimeoutStopSec = 10;
        Restart = "on-failure";
        RestartSec = 5;
      };
    };
  };
}
</file>

<file path="modules/extra/shared/nixos/wakapi/default.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) concatStrings mapAttrsToList concatMapAttrs optionalAttrs optionalString foldl' stringLength elem substring head lowerChars toUpper isBool isList boolToString types mkIf optional mkOption mkEnableOption;

  cfg = config.services.wakapi;
  user = config.users.users.wakapi.name;
  group = config.users.groups.wakapi.name;
  configFile = pkgs.writeText "wakapi.env" (concatStrings (mapAttrsToList (name: value: "${name}=${value}\n") configEnv));

  # Convert name from camel case (e.g. disable2FARemember) to upper case snake case (e.g. DISABLE_2FA_REMEMBER).
  nameToEnvVar = name: let
    parts = builtins.split "([A-Z0-9]+)" name;
    partsToEnvVar = parts:
      foldl' (key: x: let
        last = stringLength key - 1;
      in
        if isList x
        then key + optionalString (key != "" && substring last 1 key != "_") "_" + head x
        else if key != "" && elem (substring 0 1 x) lowerChars
        then # to handle e.g. [ "disable" [ "2FAR" ] "emember" ]
          substring 0 last key + optionalString (substring (last - 1) 1 key != "_") "_" + substring last 1 key + toUpper x
        else key + toUpper x) ""
      parts;
  in
    if builtins.match "[A-Z0-9_]+" name != null
    then name
    else partsToEnvVar parts;

  # Due to the different naming schemes allowed for config keys,
  # we can only check for values consistently after converting them to their corresponding environment variable name.
  configEnv = let
    configEnv = concatMapAttrs (name: value:
      optionalAttrs (value != null) {
        ${nameToEnvVar name} =
          if isBool value
          then boolToString value
          else toString value;
      })
    cfg.config;
  in
    configEnv;
in {
  options.services.wakapi = with types; {
    enable = mkEnableOption "wakapi";

    package = mkOption {
      type = package;
      default = pkgs.wakapi;
      defaultText = literalExpression "pkgs.wakapi";
      description = "wakapi package to use.";
    };

    stateDirectory = mkOption {
      type = str;
      default = "wakapi";
      defaultText = literalExpression "wakapi";
      description = "The state directory for the systemd service. Will be located in /var/lib";
    };

    config = mkOption {
      type = attrsOf (nullOr (oneOf [bool int str]));
      default = {
        config = {};
      };
      example = literalExpression ''
        {
          WAKAPI_LISTEN_IPV4=127.0.0.1
          WAKAPI_LISTEN_IPV6=::1
          WAKAPI_PORT=3000
        }
      '';
      description = ''
        The configuration of wakatime is done through environment variables,
        therefore it is recommended to use upper snake case (e.g. {env}`WAKAPI_DATA_CLEANUP_TIME`).

        However, camel case (e.g. `wakapiDataCleanupTime`) is also supported:
        The NixOS module will convert it automatically to
        upper case snake case (e.g. {env}`WAKAPI_DATA_CLEANUP_TIME`).
        In this conversion digits (0-9) are handled just like upper case characters,
        so `foo2` would be converted to {env}`FOO_2`.
        Names already in this format remain unchanged, so `FOO2` remains `FOO2` if passed as such,
        even though `foo2` would have been converted to {env}`FOO_2`.
        This allows working around any potential future conflicting naming conventions.

        Based on the attributes passed to this config option an environment file will be generated
        that is passed to wakapi's systemd service.

        The available configuration options can be found in
        [self-hostiing guide](https://github.com/muety/wakapi#-configuration-options) to
        find about the environment variables you can use.
      '';
    };

    environmentFile = mkOption {
      type = with types; nullOr path;
      default = null;
      example = "/etc/wakapi.env";
      description = ''
        Additional environment file as defined in {manpage}`systemd.exec(5)`.

        Sensitive secrets such as {env}`WAKAPI_PASSWORD_SALT` and {env}`WAKAPI_DB_PASSWORD`
        may be passed to the service while avoiding potentially making them world-readable in the nix store or
        to convert an existing non-nix installation with minimum hassle.

        Note that this file needs to be available on the host on which
        `wakapi` is running.
      '';
    };
  };

  config = mkIf cfg.enable {
    users.users.wakapi = {
      inherit group;
      isSystemUser = true;
    };
    users.groups.wakapi = {};

    systemd.services.wakapi = {
      after = ["network.target"];
      #path = with pkgs; [openssl];
      serviceConfig = {
        User = user;
        Group = group;
        EnvironmentFile = [configFile] ++ optional (cfg.environmentFile != null) cfg.environmentFile;
        ExecStart = "${cfg.package}/bin/wakapi";
        LimitNOFILE = "1048576";
        PrivateTmp = "true";
        PrivateDevices = "true";
        ProtectHome = "true";
        ProtectSystem = "strict";
        AmbientCapabilities = "CAP_NET_BIND_SERVICE";
        StateDirectory = "${cfg.stateDirectory}";
        WorkingDirectory = "/var/lib/${cfg.stateDirectory}";
        StateDirectoryMode = "0700";
        Restart = "always";
      };
      wantedBy = ["multi-user.target"];
    };
    systemd.tmpfiles.rules = [
      "D /var/lib/${cfg.stateDirectory}/data 755 ${user} ${group} - -"
    ];
  };
}
</file>

<file path="modules/extra/shared/nixos/default.nix">
{
  imports = [
    ./comma
    ./wakapi
    ./reposilite
  ];
}
</file>

<file path="modules/extra/shared/default.nix">
{
  imports = [
    ./nixos
    ./home-manager
  ];
}
</file>

<file path="modules/options/device/capabilities.nix">
{lib, ...}: let
  inherit (lib.options) mkOption;
  inherit (lib.types) bool;
in {
  options.modules.device = {
    # Bluetooth is an insecure protocol, especially if it has been left unchecked.
    # While this defaults to true (as most devices *do* have bluetooth), bluetooth.enable
    # should not default to true unless it's explicitly desired.
    hasBluetooth = mkOption {
      type = bool;
      default = true;
      description = "Whether or not the system has bluetooth support";
    };

    hasSound = mkOption {
      type = bool;
      default = true;
      description = "Whether the system has sound support (usually true except for servers)";
    };

    hasTPM = mkOption {
      type = bool;
      default = false;
      description = "Whether the system has tpm support";
    };
  };
}
</file>

<file path="modules/options/device/hardware.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.types) nullOr listOf enum str;
in {
  options.modules.device = {
    type = mkOption {
      type = enum ["laptop" "desktop" "server" "hybrid" "lite" "vm"];
      default = "";
      description = ''
        The type/purpose of the device that will be used within the rest of the configuration.
          - laptop: portable devices with batter optimizations
          - desktop: stationary devices configured for maximum performance
          - server: server and infrastructure
          - hybrid: provide both desktop and server functionality
          - lite: a lite device, such as a raspberry pi
          - vm: a virtual machine
      '';
    };

    # the type of cpu your system has - vm and regular cpus currently do not differ
    # as I do not work with vms, but they have been added for forward-compatibility
    # TODO: make this a list - apparently more than one cpu on a device is still doable
    cpu = {
      type = mkOption {
        type = nullOr (enum ["pi" "intel" "vm-intel" "amd" "vm-amd"]);
        default = null;
        description = ''
          The manifaturer/type of the primary system CPU.

          Determines which ucode services will be enabled
          and provides additional kernel packages based on
          the type passed. In case of some vendors, this
          option may also enable additional daemons to
          assist with device health or safety.
        '';
      };

      amd = {
        pstate.enable = mkEnableOption "AMD P-State Driver";
        zenpower = {
          enable = mkEnableOption "AMD Zenpower Driver";
          args = mkOption {
            type = str;
            default = "-p 0 -v 3C -f A0"; # Pstate 0, 1.175 voltage, 4000 clock speed
            description = ''
              The percentage of the maximum clock speed that the CPU will be limited to.

              This is useful for reducing power consumption and heat generation on laptops
              and desktops
            '';
          };
        };
      };
    };

    gpu = {
      type = mkOption {
        type = nullOr (enum ["pi" "amd" "intel" "nvidia" "hybrid-nv" "hybrid-amd"]);
        default = null;
        description = ''
          The manifaturer/type of the primary system GPU. Allows the correct GPU
          drivers to be loaded, potentially optimizing video output performance
        '';
      };
    };

    monitors = mkOption {
      type = listOf str;
      default = [];
      description = ''
        A list of monitors connected to the system.

        This does not affect any drivers and such, it is only necessary for
        declaring things like monitors in window manager configurations.
        It is not necessary to declare this, but wallpaper and workspace
        configurations will be affected by the monitors list

        ::: {.tip}
          Monitors should be listed from left to right in the order they are placed
          assuming the leftmost (first element) is the primary one. This is not a
          solution to the possibility of a monitor being placed above or below another
          but it currently works.
        :::
      '';
    };
  };

  config.assertions = [
    {
      assertion = config.modules.device.type != null;
      message = ''
        ${config.meta.hostname} is missing a device type. Please define it
        in the appropriate host configuration!
      '';
    }
  ];
}
</file>

<file path="modules/options/device/module.nix">
{
  imports = [
    ./capabilities.nix
    ./hardware.nix
  ];
}
</file>

<file path="modules/options/docs/module.nix">
{lib, ...}: let
  inherit (lib.options) mkEnableOption;
in {
  options.modules.documentation = {
    enable = mkEnableOption ''
      generation of internal module documentation for my system configuration. If enabled
      the module options will be rendered with pandoc and linked to `/etc/nyxos`
    '';

    warningsAreErrors = mkEnableOption ''
      automatically failing documentation builds on missing option descriptions. While
      disabled, warnings will be displayed, but will not cause the build to fail.
    '';
  };
}
</file>

<file path="modules/options/internal/module.nix">
{
  imports = [
    ./removed.nix
    ./renamed.nix
  ];
}
</file>

<file path="modules/options/internal/removed.nix">
{lib, ...}: let
  inherit (lib.modules) mkRemovedOptionModule;
in {
  imports = [
    (mkRemovedOptionModule ["modules" "services" "override"] ''
      service overrides have been removed in favor of the new `modules.services.<name>.enable` syntax
    '')

    (mkRemovedOptionModule ["modules" "usrEnv" "noiseSuppressor"] ''
      `modules.usrEnv.noiseSuppressor` has been removed as programs managed by the module
      are better enabled manually and individually under `modules.system.programs.<name>.enable`
    '')

    /*
    (mkRemovedOptionModule ["modules" "usrEnv" "isWayland"] ''
      `isWayland` has been moved to the meta module as a read-only option that will be set internally
      based on the desktop environments the host is running, and can no longer be set manually. Please
      move to using `modules.usrEnv.desktop` and `modules.usrEnv.desktops.<name>.enable` instead.
    '')
    */
  ];
}
</file>

<file path="modules/options/internal/renamed.nix">
{lib, ...}: let
  inherit (lib.modules) mkRenamedOptionModule;
in {
  imports = [
    # renamed modules for the device module
    (mkRenamedOptionModule ["modules" "device" "yubikeySupport"] ["modules" "system" "yubikeySupport"])

    # renamed modules for the userEnv module
    (mkRenamedOptionModule ["modules" "usrEnv" "autologin"] ["modules" "system" "autoLogin"])
    (mkRenamedOptionModule ["modules" "usrEnv" "isWayland"] ["meta" "isWayland"])

    # renamed options for the system module
    (mkRenamedOptionModule ["modules" "system" "networking" "wirelessBackend"] ["modules" "system" "networking" "wireless" "backend"])
    (mkRenamedOptionModule ["modules" "system" "networking" "useTailscale"] ["modules" "system" "networking" "tailscale" "client" "enable"])
    (mkRenamedOptionModule ["modules" "system" "networking" "tailscale" "defaultFlags"] ["modules" "system" "networking" "tailscale" "flags" "default"])
    (mkRenamedOptionModule ["modules" "system" "networking" "tailscale" "client" "enable"] ["modules" "system" "networking" "tailscale" "isClient"])
    (mkRenamedOptionModule ["modules" "system" "networking" "tailscale" "server" "enable"] ["modules" "system" "networking" "tailscale" "isServer"])

    (mkRenamedOptionModule ["modules" "system" "services" "atticd" "enable"] ["modules" "system" "services" "bincache" "atticd" "enable"])
    (mkRenamedOptionModule ["modules" "system" "services" "wireguard" "enable"] ["modules" "system" "services" "networking" "wireguard" "enable"])
    (mkRenamedOptionModule ["modules" "system" "services" "headscale" "enable"] ["modules" "system" "services" "networking" "headscale" "enable"])

    (mkRenamedOptionModule ["modules" "system" "boot" "enableInitrdTweaks"] ["modules" "system" "boot" "initrd" "enableTweaks"])
    (mkRenamedOptionModule ["modules" "system" "security" "secureBoot"] ["modules" "system" "boot" "secureBoot"])

    (mkRenamedOptionModule ["modules" "system" "services" "gitea" "enable"] ["modules" "system" "services" "forgejo" "enable"])
    (mkRenamedOptionModule ["modules" "system" "services" "mastodon" "enable"] ["modules" "system" "services" "social" "mastodon" "enable"])
    (mkRenamedOptionModule ["modules" "system" "services" "matrix" "enable"] ["modules" "system" "services" "social" "matrix" "enable"])
  ];
}
</file>

<file path="modules/options/meta/module.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.options) mkOption;
  inherit (lib.types) nullOr bool str strMatching;

  env = config.modules.usrEnv;
in {
  options.meta = {
    hostname = mkOption {
      type = str;
      default = config.networking.hostName;
      readOnly = true;
      description = ''
        The canonical hostname of the machine.

        Is usually used to identify, i.e., name machines internally
        or on the same Headscale network. This option must be declared
        in {file}`hosts.nix` alongside host system.
      '';
    };

    system = mkOption {
      type = str;
      default = pkgs.stdenv.system;
      readOnly = true;
      description = ''
        The architecture of the machine.

        By default, this is is an alias for {option}`pkgs.stdenv.system` and
        {option}`nixpkgs.hostPlatform` in a top-level configuration.
      '';
    };

    nodeAddress = mkOption {
      type = nullOr (strMatching "^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$"); # :D?
      default = null;
      readOnly = true;
      description = ''
        The node address of the host on an internal network.

        This will be used to communicate between machines directly
        by using the internal network address instead of hostnames
        on, e.g., a Tailscale network.
      '';
    };

    isWayland = mkOption {
      type = bool;
      # TODO: there must be a better way to do this
      default = with env.desktops; (sway.enable || hyprland.enable);
      defaultText = "This will default to true if a Wayland compositor has been enabled";
      description = ''
        Whether to enable Wayland exclusive modules, this contains a wariety
        of packages, modules, overlays, XDG portals and so on.

        Generally includes:
          - Wayland nixpkgs overlay
          - Wayland only services
          - Wayland only programs
          - Wayland compatible versions of packages as opposed
          to the defaults
      '';
    };
  };
}
</file>

<file path="modules/options/profiles/module.nix">
{lib, ...}: let
  inherit (lib) mkEnableOption;
in {
  options.modules.profiles = {
    workstation.enable = mkEnableOption ''
      the Desktop profile

      This profile is intended for systems that are workstations: i.e
      systems that must contain a suite of applications tailored for
      daily usage, mainly for working, studying or programming.
    '';

    gaming.enable = mkEnableOption ''
      the Gaming profile

      This profile contains basic platforms and utilities that can be
      used for gaming, such as but not limited to Steam and Lutris.
    '';
  };
}
</file>

<file path="modules/options/style/palettes/angel-light.nix">
{
  colorscheme = {
    slug = "angel-light";
    name = "Angel";
    variant = "light";
    palette = {
      base00 = "#140e10";
      base01 = "#8E7C86";
      base02 = "#C47E81";
      base03 = "#988791";
      base04 = "#AB9196";
      base05 = "#B39BA8";
      base06 = "#CEA6A9";
      base07 = "#e2d4d8";
      base08 = "#9e9497";
      base09 = "#8E7C86";
      base0A = "#C47E81";
      base0B = "#988791";
      base0C = "#AB9196";
      base0D = "#B39BA8";
      base0E = "#CEA6A9";
      base0F = "#e2d4d8";
    };
  };
}
</file>

<file path="modules/options/style/palettes/black-metal.nix">
{
  colorscheme = {
    slug = "black-metal";
    name = "Black Metal";
    variant = "dark";
    palette = {
      base00 = "#000000";
      base01 = "#121212";
      base02 = "#222222";
      base03 = "#333333";
      base04 = "#999999";
      base05 = "#c1c1c1";
      base06 = "#999999";
      base07 = "#c1c1c1";
      base08 = "#5f8787";
      base09 = "#aaaaaa";
      base0A = "#a06666";
      base0B = "#dd9999";
      base0C = "#aaaaaa";
      base0D = "#888888";
      base0E = "#999999";
      base0F = "#444444";
    };
  };
}
</file>

<file path="modules/options/style/palettes/carbon-dark.nix">
{
  colorscheme = {
    slug = "carbon-dark";
    name = "Carbon Dark";
    variant = "dark";
    valette = {
      base00 = "#161616";
      base01 = "#262626";
      base02 = "#393939";
      base03 = "#525252";
      base04 = "#6F6F6F";
      base05 = "#FAFAFA";
      base06 = "#FAFAFA";
      base07 = "#FFFFFF";
      base08 = "#be95ff";
      base09 = "#3ddbd9";
      base0A = "#0043ce";
      base0B = "#33b1ff";
      base0C = "#ff7eb6";
      base0D = "#42be65";
      base0E = "#be95ff";
      base0F = "#3ddbd9";
    };
  };
}
</file>

<file path="modules/options/style/palettes/catppuccin-frappe.nix">
{
  colorscheme = {
    slug = "catppuccin-frappe";
    name = "Catppuccin Frappe";
    variant = "dark";
    palette = {
      base00 = "#303446"; # Base
      base01 = "#292c3c"; # Mantle
      base02 = "#414559"; # Surface0
      base03 = "#51576d"; # Surface1
      base04 = "#626880"; # Surface2
      base05 = "#c6d0f5"; # Text
      base06 = "#f2d5cf"; # Rosewater
      base07 = "#babbf1"; # Lavender
      base08 = "#e78284"; # Red
      base09 = "#ef9f76"; # Peach
      base0A = "#e5c890"; # Yellow
      base0B = "#a6d189"; # Green
      base0C = "#81c8be"; # Teal
      base0D = "#8caaee"; # Blue
      base0E = "#ca9ee6"; # Mauve
      base0F = "#eebebe"; # Flamingo
    };
  };
}
</file>

<file path="modules/options/style/palettes/catppuccin-macchiato.nix">
{
  colorscheme = {
    slug = "catppuccin-mocha";
    name = "Catppuccin Mocha";
    variant = "dark";
    palette = {
      base00 = "#24273a"; # Base
      base01 = "#1e2030"; # Mantle
      base02 = "#363a4f"; # Surface0
      base03 = "#494d64"; # Surface1
      base04 = "#5b6078"; # Surface2
      base05 = "#cad3f5"; # Text
      base06 = "#f4dbd6"; # Rosewater
      base07 = "#b7bdf8"; # Lavender
      base08 = "#ed8796"; # Red
      base09 = "#f5a97f"; # Peach
      base0A = "#eed49f"; # Yellow
      base0B = "#a6da95"; # Green
      base0C = "#8bd5ca"; # Teal
      base0D = "#8aadf4"; # Blue
      base0E = "#c5a0f6"; # Mauve
      base0F = "#f0c6c6"; # Flamingo
    };
  };
}
</file>

<file path="modules/options/style/palettes/catppuccin-mocha.nix">
{
  colorscheme = {
    slug = "catppuccin-mocha";
    name = "Catppuccin Mocha";
    variant = "dark";
    palette = {
      base00 = "#1e1e2e"; # Base
      base01 = "#181825"; # Mantle
      base02 = "#313244"; # Surface0
      base03 = "#45475a"; # Surface1
      base04 = "#585b70"; # Surface2
      base05 = "#cdd6f4"; # text
      base06 = "#f5e0dc"; # rosewater
      base07 = "#b4befe"; # lavender
      base08 = "#f38ba8"; # red
      base09 = "#fab387"; # peach
      base0A = "#a6e3a1"; # yellow
      base0B = "#94e2d5"; # green
      base0C = "#94e2d5"; # teal
      base0D = "#89b4fa"; # blue
      base0E = "#cba6f7"; # mauve
      base0F = "#f2cdcd"; # flamingo
    };
  };
}
</file>

<file path="modules/options/style/palettes/decay-dark.nix">
{
  colorscheme = {
    slug = "decay-dark";
    name = "Decay Dark";
    variant = "dark";
    palette = {
      base00 = "#10101a"; # Base
      base01 = "#12121c"; # Mantle
      base02 = "#171721"; # Surface0
      base03 = "#1c1c26"; # Surface1
      base04 = "#2b2b35"; # Surface2
      base05 = "#c3cddb"; # text
      base06 = "#c3cddb"; # "
      base07 = "#c8d2e0"; # white
      base08 = "#c8d2e0"; # "
      base09 = "#fa9a9a"; # red
      base0A = "#f8e7b7"; # yellow
      base0B = "#b0e2ae"; # green
      base0C = "#93cff7"; # teal
      base0D = "#8cbef7"; # blue
      base0E = "#bfa6fa"; # magenta
      base0F = "#fa9a9a"; # red again
    };
  };
}
</file>

<file path="modules/options/style/palettes/default-dark.nix">
{
  colorscheme = {
    slug = "default-dark";
    name = "Default Dark";
    variant = "dark";
    palette = {
      base00 = "#181818";
      base01 = "#282828";
      base02 = "#383838";
      base03 = "#585858";
      base04 = "#b8b8b8";
      base05 = "#d8d8d8";
      base06 = "#e8e8e8";
      base07 = "#f8f8f8";
      base08 = "#ab4642";
      base09 = "#dc9656";
      base0A = "#f7ca88";
      base0B = "#a1b56c";
      base0C = "#86c1b9";
      base0D = "#7cafc2";
      base0E = "#ba8baf";
      base0F = "#a16946";
    };
  };
}
</file>

<file path="modules/options/style/palettes/monochrome.nix">
{
  colorscheme = {
    slug = "monochrome";
    name = "monochrome";
    variant = "dark";
    palette = {
      base00 = "#121517"; # Base
      base01 = "#2e3338"; # Mantle
      base02 = "#4a5159"; # Surface0
      base03 = "#6c757d"; # Surface1
      base04 = "#6c757d"; # Surface2
      base05 = "#e9ecef"; # text
      base06 = "#e9ecef"; # "
      base07 = "#f8f9fa"; # white
      base08 = "#f8f9fa"; # white
      base09 = "#f8f9fa"; # white
      base0A = "#f8f9fa"; # white
      base0B = "#f8f9fa"; # white
      base0C = "#f8f9fa"; # white
      base0D = "#f8f9fa"; # white
      base0E = "#f8f9fa"; # white
      base0F = "#f8f9fa"; # white
    };
  };
}
</file>

<file path="modules/options/style/palettes/noelle.nix">
{
  colorscheme = {
    slug = "noelle";
    name = "noelle";
    variant = "dark";
    palette = {
      base00 = "#111111"; # Base
      base01 = "#282a2e"; # Mantle
      base02 = "#373b41"; # Surface0
      base03 = "#373b41"; # Surface1
      base04 = "#626880"; # Surface2
      base05 = "#eae7ee"; # Text
      base06 = "#c5c8c6"; # Rosewater
      base07 = "#c6c8c6"; # Lavender
      base08 = "#922b3c"; # Red
      base09 = "#a84757"; # Peach
      base0A = "#bd8964"; # Yellow
      base0B = "#a3ad64"; # Green
      base0C = "#922b3c"; # Teal
      base0D = "#a84757"; # Blue
      base0E = "#9876a4"; # Magenta
      base0F = "#ae93b7"; # Flamingo
    };
  };
}
</file>

<file path="modules/options/style/palettes/oxocarbon-dark.nix">
{
  colorscheme = {
    slug = "oxocarbon-dark";
    name = "Oxocarbon Dark";
    variant = "dark";
    palette = {
      base00 = "#161616";
      base01 = "#262626";
      base02 = "#393939";
      base03 = "#525252";
      base04 = "#dde1e6";
      base05 = "#f2f4f8";
      base06 = "#ffffff";
      base07 = "#08bdba";
      base08 = "#3ddbd9";
      base09 = "#78a9ff";
      base0A = "#ee5396";
      base0B = "#33b1ff";
      base0C = "#ff7eb6";
      base0D = "#42be65";
      base0E = "#be95ff";
      base0F = "#82cfff";
    };
  };
}
</file>

<file path="modules/options/style/palettes/tokyo-night.nix">
{
  colorscheme = {
    slug = "tokyo-night";
    name = "Tokyo Night";
    variant = "dark"; # bet
    palette = {
      base00 = "#24283b";
      base01 = "#1f2335";
      base02 = "#292e42";
      base03 = "#565f89";
      base04 = "#a9b1d6";
      base05 = "#c0caf5";
      base06 = "#c0caf5";
      base07 = "#c0caf5";
      base08 = "#c0caf5";
      base09 = "#f7768e";
      base0A = "#e0af68";
      base0B = "#9ece6a";
      base0C = "#1abc9c";
      base0D = "#41a6b5";
      base0E = "#bb9af7";
      base0F = "#ff007c";
    };
  };
}
</file>

<file path="modules/options/style/palettes/varda-theme.nix">
{
  colorscheme = {
    slug = "varda-theme";
    name = "Varda Theme";
    variant = "dark";
    palette = {
      base00 = "#0C0E11"; # Base
      base01 = "#141619"; # Mantle
      base02 = "#2E3436"; # Surface0
      base03 = "#3b4444"; # Surface1
      base04 = "#3b4444"; # Surface2
      base05 = "#D0EBEE"; # text
      base06 = "#D0EBEE"; # "
      base07 = "#E5FFFF"; # white
      base08 = "#E5FFFF"; # "
      base09 = "#733447"; # red
      base0A = "#C78C56"; # yellow
      base0B = "#257B76"; # green
      base0C = "#52677C"; # teal
      base0D = "#52677C"; # blue
      base0E = "#604575"; # magenta
      base0F = "#733447"; # red again
    };
  };
}
</file>

<file path="modules/options/style/colors.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.options) mkOption literalExpression;
  inherit (lib.types) str nullOr enum mkOptionType attrsOf coercedTo;
  inherit (lib.strings) removePrefix hasPrefix isString;
  inherit (lib) serializeTheme;

  cfg = config.modules.style;

  hexColorType = mkOptionType {
    name = "hex-color";
    descriptionClass = "noun";
    description = "RGB color in hex format";
    check = x: isString x && !(hasPrefix "#" x);
  };
  colorType = attrsOf (coercedTo str (removePrefix "#") hexColorType);

  getPaletteFromScheme = slug:
    if builtins.pathExists ./palettes/${slug}.nix
    then (import ./palettes/${slug}.nix).colorscheme.palette
    else throw "The following colorscheme was imported but not found: ${slug}";
in {
  options.modules.style = {
    # choose a colorscheme
    colorScheme = {
      # "Name Of The Scheme"
      name = mkOption {
        type = nullOr (enum ["Catppuccin Mocha" "Tokyonight Storm" "Oxocarbon Dark"]);
        description = "The colorscheme that should be used globally to theme your system.";
        default = "Catppuccin Mocha";
      };

      # "name-of-the-scheme"
      slug = mkOption {
        type = str;
        default = serializeTheme "${toString cfg.colorScheme.name}"; # toString to avoid type errors if null, returns ""
        description = ''
          The serialized slug for the colorScheme you are using.

          Defaults to a lowercased version of the theme name with spaces
          replaced with hyphens.

          Must only be changed if the slug is expected to be different than
          the serialized theme name."
        '';
      };

      # this module option is taken from nix-colors by Misterio77
      # and is adapted for my personal use. Main difference is that
      # certain additional options (e.g. author or palette) have been
      # removed as they are handled by the rest of the style module.
      # <https://github.com/Misterio77/nix-colors/blob/main/module/colorscheme.nix>
      colors = mkOption {
        type = colorType;
        default = getPaletteFromScheme cfg.colorScheme.slug;
        description = ''
          An attribute set containing active colors of the system. Follows base16
          scheme by default but can be expanded to base24 or anything "above" as
          seen fit as the module option is actually not checked in any way
        '';
        example = literalExpression ''
          {
            base00 = "#002635";
            base01 = "#00384d";
            base02 = "#517F8D";
            base03 = "#6C8B91";
            base04 = "#869696";
            base05 = "#a1a19a";
            base06 = "#e6e6dc";
            base07 = "#fafaf8";
            base08 = "#ff5a67";
            base09 = "#f08e48";
            base0A = "#ffcc1b";
            base0B = "#7fc06e";
            base0C = "#14747e";
            base0D = "#5dd7b9";
            base0E = "#9a70a4";
            base0F = "#c43060";
          }
        '';
      };

      variant = mkOption {
        type = enum ["dark" "light"];
        default =
          if builtins.substring 0 1 cfg.colorScheme.colors.base00 < "5"
          then "dark"
          else "light";
        description = ''
          Whether the scheme is dark or light
        '';
      };
    };
  };
}
</file>

<file path="modules/options/style/gtk.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) pathExists;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.types) str package int;

  cfg = config.modules.style.gtk;
in {
  # Theming options for GTK programs. Will be passed verbatim to home-manager
  # in some cases.
  options.modules.style.gtk = {
    enable = mkEnableOption "GTK theming options";
    usePortal = mkEnableOption "native desktop portal use for filepickers [xdg-desktop-portal-gtk]";

    theme = {
      name = mkOption {
        type = str;
        default = "catppuccin-mocha-blue-standard+normal";
        description = "The name for the GTK theme package";
      };

      package = mkOption {
        type = package;
        description = "The theme package to be used for GTK programs";
        default = pkgs.catppuccin-gtk.override {
          variant = "mocha";
          size = "standard";
          accents = ["blue"];
          tweaks = ["normal"];
        };
      };
    };

    iconTheme = {
      name = mkOption {
        type = str;
        description = "The name for the icon theme that will be used for GTK programs";
        default = "Papirus-Dark";
      };

      package = mkOption {
        type = package;
        description = "The GTK icon theme to be used";
        default = pkgs.catppuccin-papirus-folders.override {
          accent = "blue";
          flavor = "mocha";
        };
      };
    };

    font = {
      name = mkOption {
        type = str;
        description = "The name of the font that will be used for GTK applications";
        default = "Lexend";
      };

      size = mkOption {
        type = int;
        description = "The size of the font";
        default = 14;
      };
    };
  };

  config = {
    assertions = [
      (let
        themePath = cfg.theme.package + /share/themes + "/${cfg.theme.name}";
      in {
        assertion = cfg.enable -> pathExists themePath;
        message = ''
          ${toString themePath} set by the GTK module does not exist!

          To suppress this message, make sure that
          `config.modules.style.gtk.theme.package` contains
          the path `${cfg.theme.name}`
        '';
      })
    ];
  };
}
</file>

<file path="modules/options/style/module.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.options) mkOption;
  inherit (lib.types) either listOf package str int bool;
in {
  imports = [
    ./gtk.nix
    ./qt.nix
    ./colors.nix
  ];

  options.modules.style = {
    forceGtk = mkOption {
      type = bool;
      default = false;
      description = "Whether to force QT applications to try and use the GTK theme.";
    };

    useKvantum = mkOption {
      type = bool;
      default = false;
      description = "Whether to use Kvantum for theming QT applications";
    };

    pointerCursor = {
      package = mkOption {
        type = package;
        default = pkgs.catppuccin-cursors.mochaDark;
        description = "The package providing the cursors";
      };

      name = mkOption {
        type = str;
        default = "catppuccin-mocha-dark-cursors";
        description = "The name of the cursor inside the package";
      };

      size = mkOption {
        type = int;
        default = 24;
        description = "The size of the cursor";
      };
    };

    wallpapers = mkOption {
      type = either str (listOf str);
      default = [];
      description = "Wallpaper or wallpapers to use";
    };
  };
}
</file>

<file path="modules/options/style/qt.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.types) package str;

  cfg = config.modules.style.qt;
in {
  options.modules.style.qt = {
    enable = mkEnableOption "QT Style Module";
    theme = {
      package = mkOption {
        type = package;
        default = pkgs.catppuccin-kde.override {
          flavour = ["mocha"];
          accents = ["blue"];
          winDecStyles = ["modern"];
        };

        description = ''
          The theme package to be used for QT programs.

          This package will be used to acquire source files
          for program themes, and as such it should always
          contain conventional theming related filepaths.
        '';
      };

      name = mkOption {
        type = str;
        default = "Catppuccin-Mocha-Dark";
        description = "The name for the QT theme package";
      };
    };

    # Additional sources for theme packages.
    kvantum = {
      package = mkOption {
        type = package;
        default = pkgs.catppuccin-kvantum.override {
          accent = "Blue";
          variant = "Mocha";
        };

        description = ''
          Path to the kvantum theme package to be used for QT programs.
        '';
      };

      kvconfig = mkOption {
        type = str;
        default = "${cfg.kvantum.package}/share/Kvantum/Catppuccin-Mocha-Blue/Catppuccin-Mocha-Blue.kvconfig";
        description = ''
          Path to the kvantum theme package to be used
          for QT programs (configuration).
        '';
      };

      svg = mkOption {
        type = str;
        default = "${cfg.kvantum.package}/share/Kvantum/Catppuccin-Mocha-Blue/Catppuccin-Mocha-Blue.svg";
        description = ''
          Path to the kvantum theme package to be used
          for QT programs (vectors).
        '';
      };
    };

    kdeglobals = {
      package = mkOption {
        type = str;
        default = "${cfg.theme.package}/share/color-schemes/CatppuccinMochaBlue.colors";
        description = "The source file for the kdeglobals file. Usually provided by the qt theme package";
      };

      colors = mkOption {
        type = str;
        default = "${cfg.theme.package}/share/color-schemes/CatppuccinMochaBlue.colors";
        description = "The source file for the kdeglobals file. Usually provided by the qt theme package";
      };
    };
  };
}
</file>

<file path="modules/options/system/networking/default.nix">
{lib, ...}: let
  inherit (lib) mkEnableOption mkOption types;
in {
  imports = [
    ./nftables.nix
    ./tailscale.nix
  ];
  options.modules.system.networking = {
    nftables.enable = mkEnableOption "nftables firewall";
    tarpit.enable = mkEnableOption "endlessh-go tarpit";
    optimizeTcp = mkEnableOption "TCP optimizations";

    wireless = {
      allowImperative = mkEnableOption ''
        imperative networking via wpa_cli.

        Enabling this option will make it so that users in the wheel group will
        be able to manage networking via wpa_cli.
      '';

      backend = mkOption {
        type = types.enum ["iwd" "wpa_supplicant"];
        default = "wpa_supplicant";
        description = ''
          Backend that will be used for wireless connections using either
          `networking.wireless` or `networking.networkmanager.wifi.backend`

          Defaults to wpa_supplicant until iwd is stable.
        '';
      };
    };

    # TODO: optionally use encrypted DNS
    # encryptDns = mkOption {};
  };
}
</file>

<file path="modules/options/system/networking/nftables.nix">
{lib, ...}: let
  inherit (lib) mkTable mkPrerouteChain mkForwardChain mkOutputChain mkInputChain mkPostrouteChain mkIngressChain;
in {
  options.networking.nftables.rules = {
    # man nft(8)
    netdev = mkTable "netdev address family netfilter table" {
      filter.ingress = mkIngressChain "netdev";
    };

    bridge = mkTable "bridge address family netfilter table" {
      filter = {
        prerouting = mkPrerouteChain "bridge";
        input = mkInputChain "bridge";
        forward = mkForwardChain "bridge";
        output = mkOutputChain "bridge";
        postrouting = mkPostrouteChain "bridge";
      };
    };

    inet = mkTable "internet (IPv4/IPv6) address family netfilter table" {
      filter = {
        prerouting = mkPrerouteChain "inet";
        input = mkInputChain "inet";
        forward = mkForwardChain "inet";
        output = mkOutputChain "inet";
        postrouting = mkPostrouteChain "inet";
      };

      nat = {
        prerouting = mkPrerouteChain "inet";
        input = mkInputChain "inet";
        output = mkOutputChain "inet";
        postrouting = mkPostrouteChain "inet";
      };
    };

    arp = mkTable "ARP (IPv4) address family netfilter table" {
      filter = {
        input = mkInputChain "arp";
        output = mkOutputChain "arp";
      };
    };

    ip = mkTable "internet (IPv4) address family netfilter table" {
      filter = {
        prerouting = mkPrerouteChain "ip";
        input = mkInputChain "ip";
        forward = mkForwardChain "ip";
        output = mkOutputChain "ip";
        postrouting = mkPostrouteChain "ip";
      };

      nat = {
        prerouting = mkPrerouteChain "ip";
        input = mkInputChain "ip";
        output = mkOutputChain "ip";
        postrouting = mkPostrouteChain "ip";
      };

      route.output = mkForwardChain "ip";
    };

    ip6 = mkTable "internet (IPv6) address family netfilter table" {
      filter = {
        prerouting = mkPrerouteChain "ip6";
        input = mkInputChain "ip6";
        forward = mkForwardChain "ip6";
        output = mkOutputChain "ip6";
        postrouting = mkPostrouteChain "ip6";
      };

      nat = {
        prerouting = mkPrerouteChain "ip6";
        input = mkInputChain "ip6";
        output = mkOutputChain "ip6";
        postrouting = mkPostrouteChain "ip6";
      };

      route.output = mkForwardChain "ip6";
    };
  };
}
</file>

<file path="modules/options/system/networking/tailscale.nix">
{
  config,
  lib,
  ...
}: let
  inherit (builtins) concatStringsSep;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.lists) optionals concatLists;
  inherit (lib.types) str listOf bool nullOr;

  sys = config.modules.system;
  cfg = sys.networking.tailscale;
in {
  options.modules.system.networking.tailscale = {
    enable = mkEnableOption "Tailscale inter-machine VPN service";
    autoLogin = mkEnableOption ''
      the tailscale-autologin systemd-service for bootstrapping a Tailscale
      connection automatically
    '';

    endpoint = mkOption {
      type = str;
      default = "https://hs.notashelf.dev";
      description = ''
        The URL of the Tailscale control server to use. In case you
        would like to use a self-hosted Headscale server, such as
        the default value, you may change this value accordingly.
      '';
    };

    operator = mkOption {
      type = str;
      default = sys.mainUser;
      description = ''
        The name of the Tailscale operator to use. This is used to
        avoid using sudo in command-line operations and if set, will
        run the auto-authentication service as the specified user.
      '';
    };

    authkey = mkOption {
      type = nullOr str;
      default = config.age.secrets.tailscale-client.path;
      description = ''
        The path to the Tailscale authentication key file.

        This is used to authenticate the target host with the
        Tailscale coordination server.

        ::: {.warning}
        It *is* possible to use a single key for multiple hosts
        but for security and auditing purposes, I would advise
        against doing so.
        :::
      '';
    };

    flags = {
      default = mkOption {
        type = listOf str;
        default = ["--ssh"];
        description = ''
          A list of command-line flags that will be passed to the Tailscale
          daemon automatically when it is started, using
          {option}`config.services.tailscale.extraUpFlags`

          If `isServer` is set to true, the server-specific values will be
          appended to the list defined in this option.
        '';
      };

      final = mkOption {
        type = listOf str;
        internal = true;
        readOnly = true;
        default = concatLists [
          cfg.flags.default
          (optionals (cfg.authkey != null) ["--authkey file:${config.age.secrets.tailscale-client.path}"])
          (optionals (cfg.endpoint != null) ["--login-server" "${cfg.endpoint}"])
          (optionals (cfg.operator != null) ["--operator ${cfg.operator}"])
          (optionals (cfg.tags != []) ["--advertise-tags" (concatStringsSep "," cfg.tags)])
          (optionals cfg.isServer ["--advertise-exit-node"])
        ];

        description = ''
          The constructed command-line argument string that will be
          passed to Tailscaled or the tailscale-autologin service.
        '';
      };
    };

    tags = mkOption {
      type = listOf str;
      default =
        if cfg.isClient
        then ["tag:client"]
        else if cfg.isServer
        then ["tag:server"]
        else [];

      defaultText = ''
        If host advertises itself as a client, the default value will be
        `["tag:client"]`, and if it advertises itself as a server, the default
        value will be `["tag:server"]`.

        If neither `isClient` nor `isServer` is set, the default value will be
        an empty list.
      '';

      description = ''
        A list of tags that will be assigned to the target host using
        the "force advertise tags" feature of Tailscale. This will
        be used by the Headscale control server to set up ACLs.
      '';
    };

    isClient = mkOption {
      type = bool;
      default = cfg.enable;
      example = true;
      description = ''
        Whether the target host should utilize Tailscale client features";

        This option is mutually exclusive with {option}`tailscale.isServer`
        as they both configure Taiscale, but with different flags
      '';
    };

    isServer = mkOption {
      type = bool;
      default = false;
      example = true;
      description = ''
        Whether the target host should utilize Tailscale server features.

        This option is mutually exclusive with {option}`tailscale.isClient`
        as they both configure Taiscale, but with different flags
      '';
    };
  };
}
</file>

<file path="modules/options/system/programs/default.nix">
{lib, ...}: let
  inherit (lib) mkEnableOption mkOption types;
in {
  imports = [
    ./gaming.nix
  ];

  options.modules.system.programs = {
    gui.enable = mkEnableOption "GUI package sets" // {default = true;};
    cli.enable = mkEnableOption "CLI package sets" // {default = true;};
    dev.enable = mkEnableOption "development related package sets";

    libreoffice.enable = mkEnableOption "LibreOffice suite";
    discord.enable = mkEnableOption "Discord messenger";
    element.enable = mkEnableOption "Element Matrix client";
    obs.enable = mkEnableOption "OBS Studio";
    spotify.enable = mkEnableOption "Spotify music player";
    thunderbird.enable = mkEnableOption "Thunderbird mail client";
    vscode.enable = mkEnableOption "Visual Studio Code";
    steam.enable = mkEnableOption "Steam game client";
    kdeconnect.enable = mkEnableOption "KDE Connect utility";
    webcord.enable = mkEnableOption "Webcord Discord client";
    zathura.enable = mkEnableOption "Zathura document viewer";
    nextcloud.enable = mkEnableOption "Nextcloud sync client";
    rnnoise.enable = mkEnableOption "RNNoise noise suppression plugin";
    noisetorch.enable = mkEnableOption "NoiseTorch noise suppression plugin";

    chromium = {
      enable = mkEnableOption "Chromium browser";
      ungoogle = mkOption {
        type = types.bool;
        default = true;
        description = "Enable ungoogled-chromium features";
      };
    };

    firefox = {
      enable = mkEnableOption "Firefox browser";
      schizofox.enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable Schizofox Firefox Tweaks";
      };
    };

    editors = {
      neovim.enable = mkEnableOption "Neovim text editor";
      helix.enable = mkEnableOption "Helix text editor";
    };

    terminals = {
      kitty.enable = mkEnableOption "Kitty terminal emulator";
      wezterm.enable = mkEnableOption "WezTerm terminal emulator";
      foot.enable = mkEnableOption "Foot terminal emulator";
    };

    git = {
      signingKey = mkOption {
        type = types.str;
        default = "";
        description = "The default gpg key used for signing commits";
      };
    };

    # default program options
    default = {
      # what program should be used as the default terminal
      terminal = mkOption {
        type = types.enum ["foot" "kitty" "wezterm"];
        default = "kitty";
      };

      fileManager = mkOption {
        type = types.enum ["thunar" "dolphin" "nemo"];
        default = "dolphin";
      };

      browser = mkOption {
        type = types.enum ["firefox" "librewolf" "chromium"];
        default = "firefox";
      };

      editor = mkOption {
        type = types.enum ["neovim" "helix" "emacs"];
        default = "neovim";
      };

      launcher = mkOption {
        type = types.enum ["rofi" "wofi" "anyrun"];
        default = "rofi";
      };
    };
  };
}
</file>

<file path="modules/options/system/programs/gaming.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.options) mkEnableOption;
  inherit (config) modules;

  prg = modules.system.programs;
in {
  options.modules.system.programs.gaming = {
    enable = mkEnableOption ''
      packages, services and warappers required for the device to be gaming-ready.

      Setting this option to true will also enable certain other options with
      the option to disable them explicitly.
    '';

    steam.enable = mkEnableOption "Steam client" // {default = prg.gaming.enable;};
    gamemode.enable = mkEnableOption "Feral-Interactive's Gamemode with userspace optimizations" // {default = prg.gaming.enable;};
    gamescope.enable = mkEnableOption "Gamescope compositing manager" // {default = prg.gaming.enable;};
    mangohud.enable = mkEnableOption "MangoHud overlay" // {default = prg.gaming.enable;};
  };
}
</file>

<file path="modules/options/system/services/bincache.nix">
{lib, ...}: let
  inherit (lib) mkService;
in {
  options.modules.system.services = {
    # binary cache backends
    bincache = {
      harmonia = mkService {
        name = "Harmonia";
        type = "binary cache";
        host = "[::]";
        port = 5000;
      };

      atticd = mkService {
        name = "Atticd";
        type = "binary cache";
        port = 8100;
      };
    };
  };
}
</file>

<file path="modules/options/system/services/databases.nix">
{lib, ...}: let
  inherit (lib) mkService;
in {
  options.modules.system.services = {
    # database backends
    database = {
      mysql = mkService {
        name = "MySQL";
        type = "database";
        port = 3306;
      };

      mongodb = mkService {
        name = "MongoDB";
        type = "database";
        port = 27017;
      };

      redis = mkService {
        name = "Redis";
        type = "database";
        port = 6379;
      };

      postgresql = mkService {
        name = "PostgreSQL";
        type = "database";
        port = 5432;
      };

      garage = mkService {
        name = "Garage";
        type = "S3 storage";
        port = 5432;
      };
    };
  };
}
</file>

<file path="modules/options/system/services/default.nix">
{lib, ...}: let
  inherit (lib) mkService;
  inherit (lib.options) mkEnableOption;
in {
  imports = [
    ./bincache.nix
    ./databases.nix
    ./monitoring.nix
    ./networking.nix
    ./social.nix
  ];

  options.modules.system = {
    services = {
      mailserver.enable = mkEnableOption "nixos-mailserver service";
      mkm.enable = mkEnableOption "mkm-ticketing service";

      nextcloud = mkService {
        name = "Nextcloud";
        type = "cloud storage";
      };

      nginx = mkService {
        name = "Nginx";
        type = "webserver";
      };

      vaultwarden = mkService {
        name = "Vaultwarden";
        type = "password manager";
        port = 8222;
        host = "127.0.0.1";
      };

      forgejo = mkService {
        name = "Forgejo";
        type = "forge";
        port = 7000;
      };

      quassel = mkService {
        name = "Quassel";
        type = "IRC";
        port = 4242;
      };

      jellyfin = mkService {
        name = "Jellyfin";
        type = "media";
        port = 8096;
      };

      searxng = mkService {
        name = "Searxng";
        type = "meta search engine";
        port = 8888;
      };

      miniflux = mkService {
        name = "Miniflux";
        type = "RSS reader";
      };

      reposilite = mkService {
        name = "Reposilite";
        port = 8084;
      };

      elasticsearch = mkService {
        name = "Elasticsearch";
        port = 9200;
      };

      kanidm = mkService {
        name = "Kanidm";
        port = 8443;
      };
    };
  };
}
</file>

<file path="modules/options/system/services/monitoring.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkEnableOption;

  sys = config.modules.system;
  cfg = sys.services;

  # mkEnableOption is the same as mkEnableOption but with the default value being equal to cfg.monitoring.enable
  mkEnableOption' = desc: mkEnableOption "${desc}" // {default = cfg.monitoring.enable;};
in {
  # Monitoring tools.
  options.modules.system.services = {
    # TODO: How do I mkService those? They feature multiple host-specific parts
    # that need to be addressed, so seems difficult to move over easily. Perhaps move
    # over the mkEnableOption' usage to the module option root?
    monitoring = {
      enable = mkEnableOption "system monitoring stack";
      prometheus.enable = mkEnableOption' "Prometheus monitoring service";
      grafana.enable = mkEnableOption' "Grafana monitoring service";
      loki.enable = mkEnableOption' "Loki monitoring service";
      uptime-kuma.enable = mkEnableOption' "Uptime Kuma monitoring service";
    };
  };
}
</file>

<file path="modules/options/system/services/networking.nix">
{lib, ...}: let
  inherit (lib) mkEnableOption mkService;
  inherit (lib.types) str;
in {
  options.modules.system.services = {
    # networking
    networking = {
      wireguard.enable = mkEnableOption "Wireguard service";
      headscale = mkService {
        name = "Headscale";
        type = "networking";
        port = 8085;
        /*
        extraOptions = {
          domain = mkOption {
            type = str;
            example = "headscale.example.com";
            description = "The domain name to use for headscale";
          };
        };
        */
      };
    };
  };
}
</file>

<file path="modules/options/system/services/social.nix">
{lib, ...}: let
  inherit (lib) mkService;
in {
  options.modules.system.services = {
    # self-hosted/decentralized social networks
    social = {
      mastodon = mkService {
        name = "Mastodon";
        type = "social";
      };
      matrix = mkService {
        name = "Matrix";
        type = "social";
        port = 8008;
      };
    };
  };
}
</file>

<file path="modules/options/system/activation.nix">
{lib, ...}: let
  inherit (lib) mkEnableOption;
in {
  options.modules.system.activation = {
    diffGenerations = mkEnableOption "diff view between rebuilds";
  };
}
</file>

<file path="modules/options/system/boot.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit (lib) literalExpression mkEnableOption mkOption types;

  cfg = config.modules.system.boot;
in {
  # pre-boot and bootloader configurations
  options.modules.system.boot = {
    enableKernelTweaks = mkEnableOption "security and performance related kernel parameters";
    recommendedLoaderConfig = mkEnableOption "tweaks for common bootloader configs per my liking";
    loadRecommendedModules = mkEnableOption "kernel modules that accommodate for most use cases";
    tmpOnTmpfs =
      mkEnableOption ''
        `/tmp` living on tmpfs. false means it will be cleared manually on each reboot

        This option defaults to `true` if the host provides patches to the kernel package in
        `boot.kernelPatches`
      ''
      // {default = config.boot.kernelPatches == [];};

    secureBoot = mkEnableOption ''
      secure-boot with the necessary packages. Requires systemd-boot to be disabled
    '';

    silentBoot =
      mkEnableOption ''
        almost entirely silent boot process through `quiet` kernel parameter
      ''
      // {default = config.modules.system.boot.plymouth.enable;};

    initrd = {
      enableTweaks = mkEnableOption "quality of life tweaks for the initrd stage";
      optimizeCompressor = mkEnableOption ''
        initrd compression algorithm optimizations for size.

        Enabling this option will force initrd to use zstd (default) with
        level 19 and -T0 (STDIN). This will reduce the initrd size greatly
        at the cost of compression speed.

        Not recommended for low-end hardware.
      '';
    };

    kernel = mkOption {
      type = with types; nullOr raw;
      default = pkgs.linuxPackages_latest;
      example = literalExpression "pkgs.linuxPackages_latest";
      description = "The kernel to use for the system.";
    };

    extraModprobeConfig = mkOption {
      type = types.str;
      default = ''options hid_apple fnmode=1'';
      description = "Extra modprobe config that will be passed to system modprobe config.";
    };

    extraKernelParams = mkOption {
      type = with types; listOf str;
      default = [];
      description = "Extra kernel parameters to be added to the kernel command line.";
    };

    extraModulePackages = mkOption {
      type = with types; listOf package;
      default = [];
      example = literalExpression ''with config.boot.kernelPackages; [acpi_call]'';
      description = "Extra kernel modules to be loaded.";
    };

    loader = mkOption {
      type = types.enum ["none" "grub" "systemd-boot"];
      default = "none";
      description = "The bootloader that should be used for the device.";
    };

    grub = {
      device = mkOption {
        type = with types; nullOr str;
        default = "nodev";
        description = "The device to install the bootloader to.";
      };
    };

    plymouth = {
      enable = mkEnableOption "Plymouth boot splash";
      withThemes = mkEnableOption ''
        Whether or not themes from https://github.com/adi1090x/plymouth-themes
        should be enabled and configured
      '';

      pack = mkOption {
        type = types.enum [1 2 3 4];
        default = 3;
        description = "The pack number for the theme to be selected from.";
      };

      theme = mkOption {
        type = types.str;
        default = "hud_3";
        description = "The theme name from the selected theme pack";
      };
    };

    memtest = {
      enable = mkEnableOption "memtest86+";
      package = mkOption {
        type = types.package;
        default = pkgs.memtest86plus;
        description = "The memtest package to use.";
      };
    };
  };

  config = {
    assertions = [
      {
        assertion = cfg.kernel != null;
        message = ''
          Your system does not specify a kernel package. This is intended behaviour
          and is to avoid specifying default kernels that are not compatible with
          active hardware.

          To supress this error, you must set `config.modules.system.boot.kernel`
          to a valid kernel package.
        '';
      }
    ];
  };
}
</file>

<file path="modules/options/system/containers.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkEnableOption mkOption types literalExpression;

  cfg = config.modules.system.containers;
in {
  options.modules.system.containers = {
    enable = mkEnableOption "systemd-nspawn containers";

    availableContainers = mkOption {
      type = with types; listOf str;
      default = ["alpha" "beta" "gamma"];
      readOnly = true;
      internal = true;
      description = ''
        Containers that are made available to the host system, and can freely be enabled using
        the {option}`enabledContainers` option.

        Do keep in mind that nspawn-containers not yet provide host isolation, and elevated privileges
        inside the container can be used to escape the container and gain access to the host system.

        Only enable containers that you know are properly sandboxed.
      '';
    };

    enabledContainers = mkOption {
      type = with types; listOf (enum cfg.availableContainers);
      default = [];
      example = literalExpression ''["alpha" "beta"]'';
      description = ''
        A list of enabled containers selected from the list of available containers.

        Enabling a container may not always mean it will start automatically, and must
        done so with care.

        Container Specialization:
          - alpha: Sandboxed playground for testing software, networking and builds.
          - beta: Minimal container for running an ephemeral PostgreSQL database.
      '';
    };
  };
}
</file>

<file path="modules/options/system/emulation.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (builtins) filter;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.types) listOf str;
in {
  options.modules.system.emulation = {
    # should we enable emulation for additional architectures?
    # enabling this option will make it so that you can build for, e.g.
    # aarch64 on x86_&4 and vice verse - not recommended on weaker machines
    enable = mkEnableOption ''
      emulation of additional arcitechtures via binfmt. Enabling this
      option will make it so that the system can build for additional
      systems such as aarch64 on x86_64 and vice versa.
    '';

    systems = mkOption {
      type = listOf str;
      default = filter (sys: sys != pkgs.stdenv.system) ["aarch64-linux" "i686-linux" "armv7l-linux"];
      description = ''
        Systems that will be emulated by the host system.

        If overriding the default, you must make sure that the list of systems
        does not contain the same system as the host in order to avoid
        an unbootable machine.
      '';
    };
  };
}
</file>

<file path="modules/options/system/encryption.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkEnableOption mkOption types mkIf;
in {
  config = mkIf config.modules.system.encryption.enable {
    warnings =
      if config.modules.system.encryption.device == ""
      then [
        ''
          You have enabled LUKS encryption, but have not selected a device, you may not be able to decrypt your disk on boot.
        ''
      ]
      else [];
  };
  options.modules.system.encryption = {
    enable = mkEnableOption "LUKS encryption";

    device = mkOption {
      type = types.str; # this should actually be a list
      default = "";
      description = ''
        The LUKS label for the device that will be decrypted on boot.
        Currently does not support multiple devices at once.
      '';
    };

    keyFile = mkOption {
      type = with types; nullOr str;
      default = null;
      description = ''
        The path to the keyfile that will be used to decrypt the device.
        Needs to be an absolute path, and the file must exist. Set to `null`
        to disable.
      '';
    };

    keySize = mkOption {
      type = types.int;
      default = 4096;
      description = ''
        The size of the keyfile in bytes.
      '';
    };

    fallbackToPassword = mkOption {
      type = types.bool;
      default = !config.boot.initrd.systemd.enable;
      description = ''
        Whether or not to fallback to password authentication if the keyfile
        is not present.
      '';
    };
  };
}
</file>

<file path="modules/options/system/fs.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.lists) optionals;
  inherit (lib.types) listOf str enum;

  # Filesystems supported by my module system. To make sure no
  # additional filesystems sneak into the supportedFilesystems lists
  # of the `boot` and `boot.initrd` module options, we define them
  # inside an enum that will be checked.
  supportedFilesystems = ["vfat" "ext4" "btrfs" "exfat" "ntfs"];
in {
  options.modules.system.fs = {
    enabledFilesystems = mkOption {
      type = listOf (enum supportedFilesystems);
      default = ["vfat"];
      description = ''
        List of filesystems that will be supported by the current host.

        Adding a valid filesystem to this list will automatically add
        said filesystem to the `supportedFilesystems` attribute of the
        `boot` and `boot.initrd` module options.

        It would be a good idea to keep vfat and ext4 so you can mount
        common external storage.

        ::: {.note}
        The default value contains vfat, as it is a common filesystem
        for boot partitions. If you wish to override this option, you
        may want to `mkForce` your preferred list of filesystems to
        override the default.
        :::
      '';
    };

    # FS specific options
    # BTRFS
    btrfs = {
      scrub = {
        enable = mkEnableOption "automatic scrubbing of btrfs subvolumes" // {default = true;};
        interval = mkOption {
          type = str;
          default = "weekly";
          description = ''
            Interval at which the scrubbing of btrfs subvolumes should
            be performed.

            See {manpage}`systemd.time(7)` for more information on the
            syntax.
          '';
        };

        fileSystems = mkOption {
          type = listOf str;
          default = ["/"];
          description = ''
            List of btrfs subvolumes to scrub. By default, only the
            root subvolume will be scrubbed.
          '';
        };
      };
    };
  };

  config = {
    warnings = optionals (config.modules.system.fs == []) [
      ''
        You have not added any filesystems to be supported by your system! Without
        any filesystems enabled, you may end up with an unbootable system! You should
        consider {option}`config.modules.system.fs` in your configuration with one or
        two filesysteems used by your booted disks.

        If this is an installation media, you may discard this warning.
      ''
    ];
  };
}
</file>

<file path="modules/options/system/impermanence.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib) mkEnableOption mkOption literalExpression;

  cfg = config.modules.system.impermanence;
in {
  options.modules.system.impermanence = {
    enable = mkOption {
      default = cfg.root.enable || cfg.home.enable;
      readOnly = true;
      description = ''
        Internal option for deciding if Impermanence module is enabled
        based on the values of `modules.system.impermanence.root.enable`
        and `modules.system.impermanence.home.enable`.
      '';
    };

    root = {
      enable = mkEnableOption ''
        the Impermanence module for persisting important state directories.
        By default, Impermanence will not touch user's $HOME, which is not
        ephemeral unlike root.
      '';

      extraFiles = mkOption {
        default = [];
        example = literalExpression ''["/etc/nix/id_rsa"]'';
        description = ''
          Additional files in the root to link to persistent storage.
        '';
      };

      extraDirectories = mkOption {
        default = [];
        example = literalExpression ''["/var/lib/libvirt"]'';
        description = ''
          Additional directories in the root to link to persistent
          storage.
        '';
      };
    };

    home = {
      enable = mkEnableOption ''
        the Impermanence module for persisting important state directories.
        This option will also make user's home ephemeral, on top of the root subvolume
      '';

      mountDotfiles = mkOption {
        default = true;
        description = ''
          Whether the repository with my configuration flake should be bound to a location
          in $HOME after a rebuild. It will symlink ''${self} to ~/.config/nyx where I
          usually put my configuration files
        '';
      };

      extraFiles = mkOption {
        default = [];
        example = literalExpression ''
          [
            ".gnupg/pubring.kbx"
            ".gnupg/sshcontrol"
            ".gnupg/trustdb.gpg"
            ".gnupg/random_seed"
          ]
        '';
        description = ''
          Additional files in the home directory to link to persistent
          storage.
        '';
      };

      extraDirectories = mkOption {
        default = [];
        example = literalExpression ''[".config/gsconnect"]'';
        description = ''
          Additional directories in the home directory to link to
          persistent storage.
        '';
      };
    };
  };
}
</file>

<file path="modules/options/system/module.nix">
{
  config,
  lib,
  ...
}: let
  inherit (builtins) elemAt;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.modules) mkMerge;
  inherit (lib.lists) optionals;
  inherit (lib.types) enum listOf str nullOr bool package;
in {
  imports = [
    # configuration options for nixos activation scripts
    ./activation.nix

    # boot/impermanence mounts
    ./boot.nix
    ./impermanence.nix

    # network and overall hardening
    ./networking
    ./security.nix
    ./encryption.nix

    # filesystems
    ./fs.nix

    # emulation and virtualization
    ./emulation.nix
    ./virtualization.nix

    # package and program related options
    ./services
    ./programs

    # systemd-nspawn containers
    ./containers.nix
  ];
  config = {
    warnings = mkMerge [
      (optionals (config.modules.system.users == []) [
        ''
          You have not added any users to be supported by your system. You may end up with an unbootable system!

          Consider setting {option}`config.modules.system.users` in your configuration
        ''
      ])
    ];
  };

  options.modules.system = {
    mainUser = mkOption {
      type = enum config.modules.system.users;
      default = elemAt config.modules.system.users 0;
      description = ''
        The username of the main user for your system.

        In case of a multiple systems, this will be the user with priority in ordered lists and enabled options.
      '';
    };

    users = mkOption {
      type = listOf str;
      default = ["notashelf"];
      description = "A list of home-manager users on the system.";
    };

    autoLogin = mkOption {
      type = bool;
      default = false;
      description = ''
        Whether to enable passwordless login. This is generally useful on systems with
        FDE (Full Disk Encryption) enabled. It is a security risk for systems without FDE.
      '';
    };

    yubikeySupport = {
      enable = mkEnableOption "yubikey support";
      deviceType = mkOption {
        type = nullOr (enum ["NFC5" "nano"]);
        default = null;
        description = "A list of device models to enable Yubikey support for";
      };
    };

    sound = {
      enable = mkEnableOption "sound related programs and audio-dependent programs";
    };

    video = {
      enable = mkEnableOption "video drivers and programs that require a graphical user interface";
    };

    bluetooth = {
      enable = mkEnableOption "bluetooth modules, drivers and configuration program(s)";
    };

    # should the device enable printing module and try to load common printer modules
    # you might need to add more drivers to the printing module for your printer to work
    printing = {
      enable = mkEnableOption "printing";
      extraDrivers = mkOption {
        type = listOf str;
        default = [];
        description = "A list of extra drivers to enable for printing";
      };

      "3d" = {
        enable = mkEnableOption "3D printing suite";
        extraPrograms = mkOption {
          type = listOf package;
          default = [];
          description = "A list of extra programs to enable for 3D printing";
        };
      };
    };
  };
}
</file>

<file path="modules/options/system/security.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkOption mkEnableOption types;
in {
  options.modules.system.security = {
    fixWebcam = mkEnableOption "the purposefully disabled webcam by un-blacklisting the related kernel module.";
    fprint.enable = mkEnableOption "Fingerprint reader service";
    tor.enable = mkEnableOption "Tor daemon";
    usbguard.enable = mkEnableOption "USBGuard service for blocking unauthorized USB devices";
    lockModules = mkEnableOption ''
      kernel module locking to prevent kernel modules that are not specified in the config from being loaded

      This is a highly breaking option, and will break many things including virtualization
      and firewall if the required modules are not explicitly loaded in your kernel configuration.
    '';

    mitigations = {
      disable = mkOption {
        type = types.bool;
        default = false;
        example = true;
        description = ''
          Whether to disable spectre and meltdown mitigations in the kernel. This is rather a sandbox
          option than something you should consider on a production/mission critical system. Unless
          you know what *exactly* you are doing, do not enable this.
        '';
      };

      acceptRisk = mkOption {
        type = types.bool;
        default = false;
        example = true;
        description = ''
          You are either really stupid, or very knowledable. In either case,
          this must be explicitly true in order to ensure users know what they are doing
          when they disable security mitigations.
        '';
      };
    };

    selinux = {
      enable = mkEnableOption "system SELinux support + kernel patches";
      state = mkOption {
        type = with types; enum ["enforcing" "permissive" "disabled"];
        default = "enforcing";
        description = ''
          SELinux state to boot with. The default is enforcing.
        '';
      };

      type = mkOption {
        type = with types; enum ["targeted" "minimum" "mls"];
        default = "targeted";
        description = ''
          SELinux policy type to boot with. The default is targeted.
        '';
      };
    };

    auditd = {
      enable = mkEnableOption "the audit daemon.";
      autoPrune = {
        enable = mkEnableOption "auto-pruning of old audit logs.";

        size = mkOption {
          type = types.int;
          default = 524288000; # roughly 500 megabytes
          description = "The maximum size of the audit log in bytes. The default is 500MBs";
        };

        dates = mkOption {
          type = types.str;
          default = "daily";
          example = "weekly";
          description = "How often cleaning is triggered. Passed to systemd.time";
        };
      };
    };

    clamav = {
      enable = mkEnableOption "ClamAV daemon.";
      daemon = {
        settings = mkOption {
          type = with types; attrsOf (oneOf [bool int str (listOf str)]);
          default = {
            LogFile = "/var/log/clamd.log";
            LogTime = true;
            DetectPUA = true;
            VirusEvent = lib.escapeShellArgs [
              "${pkgs.libnotify}/bin/notify-send"
              "--"
              "ClamAV Virus Scan"
              "Found virus: %v"
            ];
          };

          description = ''
            ClamAV configuration. Refer to <https://linux.die.net/man/5/clamd.conf>,
            for details on supported values.
          '';
        };
      };

      updater = {
        enable = mkEnableOption "ClamAV freshclam updater";

        frequency = mkOption {
          type = types.int;
          default = 12;
          description = ''
            Number of database checks per day.
          '';
        };

        interval = mkOption {
          type = types.str;
          default = "hourly";
          description = ''
            How often freshclam is invoked. See systemd.time(7) for more
            information about the format.
          '';
        };

        settings = mkOption {
          type = with types; attrsOf (oneOf [bool int str (listOf str)]);
          default = {};
          description = ''
            freshclam configuration. Refer to <https://linux.die.net/man/5/freshclam.conf>,
            for details on supported values.
          '';
        };
      };
    };
  };
}
</file>

<file path="modules/options/system/virtualization.nix">
{lib, ...}: let
  inherit (lib) mkEnableOption;
in {
  options.modules.system.virtualization = {
    enable = mkEnableOption "virtualization";
    libvirt = {enable = mkEnableOption "libvirt";};
    docker = {enable = mkEnableOption "docker";};
    podman = {enable = mkEnableOption "podman";};
    qemu = {enable = mkEnableOption "qemu";};
    waydroid = {enable = mkEnableOption "waydroid";};
    distrobox = {enable = mkEnableOption "distrobox";};
  };
}
</file>

<file path="modules/options/usrEnv/programs/default.nix">
{
  imports = [
    ./gaming.nix
    ./launchers.nix
    ./lockers.nix
    ./media.nix
  ];
}
</file>

<file path="modules/options/usrEnv/programs/gaming.nix">
{
  config,
  lib,
  ...
}: let
  inherit (lib.options) mkEnableOption;
  inherit (config) modules;

  sys = modules.system;
  prg = sys.programs;
in {
  options.modules.usrEnv.programs.gaming = {
    enable = mkEnableOption "userspace gaming programs" // {default = prg.gaming.enable;};
    emulation.enable = mkEnableOption "programs required to emulate other platforms" // {default = prg.gaming.enable;};
    minecraft.enable = mkEnableOption "Minecraft launcher & JDKs" // {default = prg.gaming.enable;};
    chess.enable = mkEnableOption "Chess programs and engines" // {default = prg.gaming.enable;};
    mangohud.enable = mkEnableOption "MangoHud overlay" // {default = prg.gaming.enable;};
  };
}
</file>

<file path="modules/options/usrEnv/programs/launchers.nix">
{lib, ...}: let
  inherit (lib.options) mkEnableOption;
in {
  options.modules.usrEnv.programs.launchers = {
    anyrun.enable = mkEnableOption "anyrun application launcher";
    rofi.enable = mkEnableOption "rofi application launcher";
    tofi.enable = mkEnableOption "tofi application launcher";
  };
}
</file>

<file path="modules/options/usrEnv/programs/lockers.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.types) package;
  inherit (lib.options) mkOption mkEnableOption;

  cfg = config.modules.usrEnv.programs.screenlock;
  pkg =
    if cfg.gtklock.enable
    then pkgs.gtklock
    else pkgs.swaylock-effects;
in {
  options.modules.usrEnv.programs.screenlock = {
    gtklock.enable = mkEnableOption "gtklock screenlocker";
    swaylock.enable = mkEnableOption "swaylock screenlocker";

    package = mkOption {
      type = package;
      default = pkg;
      readOnly = true;
      description = "The screenlocker package";
    };
  };
}
</file>

<file path="modules/options/usrEnv/programs/media.nix">
{
  inputs',
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.options) mkOption mkEnableOption literalExpression;
  inherit (lib.types) bool listOf package;
in {
  options.modules.usrEnv.programs.media = {
    addDefaultPackages = mkOption {
      type = bool;
      default = true;
      description = ''
        Whether to enable the default list of media-related packages ranging from audio taggers
        to video editors.
      '';
    };

    extraPackages = mkOption {
      type = listOf package;
      default = [];
      description = ''
        Additional packages that will be appended to media related packages.
      '';
    };

    ncmpcpp.enable = mkEnableOption "ncmpcpp TUI music player";

    beets.enable =
      mkEnableOption ''
        beets media library system.


        Will be enabled automatically if  {option}`config.modules.usrEnv.services.mpd.enabled`
        is set to true
      ''
      // {default = config.modules.usrEnv.services.media.mpd.enable;};

    mpv = {
      enable = mkEnableOption "mpv media player";
      scripts = mkOption {
        type = listOf package;
        description = "A list of MPV scripts that will be enabled";
        example = literalExpression ''[ pkgs.mpvScripts.cutter ]'';
        default = with pkgs.mpvScripts; [
          # from nixpkgs
          cutter # cut and automatically concat videos
          mpris # MPRIS plugin
          thumbnail # OSC seekbar thumbnails
          thumbfast # on-the-fly thumbnailer
          sponsorblock # skip sponsored segments
          uosc # proximity UI
          quality-menu # ytdl-format quality menu
          seekTo # seek to specific pos.

          # from nyxexprs
          # inputs'.nyxexprs.packages.mpv-history # save a history of played files with timestamps
        ];
      };
    };
  };
}
</file>

<file path="modules/options/usrEnv/services/default.nix">
{
  imports = [
    ./media.nix
  ];
}
</file>

<file path="modules/options/usrEnv/services/media.nix">
{lib, ...}: let
  inherit (lib.options) mkEnableOption;
in {
  options.modules.usrEnv.services.media = {
    mpd.enable = mkEnableOption "mpd service";
  };
}
</file>

<file path="modules/options/usrEnv/brightness.nix">
{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.options) mkOption;
  inherit (lib.types) ints bool enum package;

  cfg = config.modules.usrEnv.brightness;
in {
  options.modules.usrEnv.brightness = {
    enable = mkOption {
      type = bool;
      default = false;
      description = ''
        Enable brightness management with systemd.
      '';
    };

    package = mkOption {
      type = package;
      default = pkgs.writeShellApplication {
        name = "set-system-brightness";
        runtimeInputs = with pkgs; [brightnessctl];
        text = "brightnessctl set ${cfg.value}";
      };
    };

    value = mkOption {
      type = ints.between 0 100;
      default = 85; # try to save some battery on laptops
      description = ''
        The screen brightness that will be set once the graphical target is reached.
      '';
    };

    service = {
      type = mkOption {
        type = enum ["oneshot" "simple"];
        default = "oneshot";
        description = ''
          The type of the service to be used for setting brightness on graphical session start.
        '';
      };

      target = mkOption {
        type = enum ["graphical-session.target" "multi-user.target"];
        default = "graphical-session.target";
        description = ''
          The target that the systemd-brightnessd service will be bound to.

          This effectively sets the `after` attribute in the serviceConfig
        '';
      };
    };
  };
}
</file>

<file path="modules/options/usrEnv/desktop.nix">
{
  inputs',
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib.options) mkOption;
  inherit (lib.types) bool enum package;

  cfg = config.modules.usrEnv;
  sys = config.modules.system;
in {
  options.modules.usrEnv = {
    desktop = mkOption {
      type = enum ["none" "Hyprland" "sway" "awesomewm" "i3"];
      default = "none";
      description = ''
        The desktop environment to be used.
      '';
    };

    desktops = {
      hyprland = {
        enable = mkOption {
          type = bool;
          default = cfg.desktop == "Hyprland";
          description = ''
            Whether to enable Hyprland wayland compositor.

            Will be enabled automatically when `modules.usrEnv.desktop`
            is set to "Hyprland".

          '';
        };

        package = mkOption {
          type = package;
          default = inputs'.hyprland.packages.hyprland;
          description = ''
            The Hyprland package to be used.
          '';
        };
      };

      sway = {
        enable = mkOption {
          type = bool;
          default = cfg.desktop == "sway";
          description = ''
            Whether to enable Sway wayland compositor.

            Will be enabled automatically when `modules.usrEnv.desktop`
            is set to "sway".
          '';
        };

        package = mkOption {
          type = package;
          default = pkgs.sway;
          description = ''
            The Sway package to be used.
          '';
        };
      };

      awesomwm.enable = mkOption {
        type = bool;
        default = cfg.desktop == "awesomewm";
        description = ''
          Whether to enable Awesome window manager

          Will be enabled automatically when `modules.usrEnv.desktop`
          is set to "awesomewm".
        '';
      };

      i3 = {
        enable = mkOption {
          type = bool;
          default = cfg.desktop == "i3";
          description = ''
            Whether to enable i3 window manager

            Will be enabled automatically when `modules.usrEnv.desktop`
            is set to "i3".
          '';
        };

        package = mkOption {
          type = package;
          default = pkgs.i3;
          description = ''
            The i3 package to be used.
          '';
        };
      };
    };

    useHomeManager = mkOption {
      type = bool;
      default = true;
      description = ''
        Whether to enable the usage of home-manager for user home
        management. My home-manager module will map the list of users to
        their home directories inside the `homes/` directory in the
        repository root.

        ::: {.warning}
        Username via `modules.system.mainUser` must be set if
        this option is enabled.
        :::
      '';
    };
  };

  config = {
    assertions = [
      {
        assertion = cfg.useHomeManager -> sys.mainUser != null;
        message = "modules.system.mainUser must be set while modules.usrEnv.useHomeManager is enabled";
      }
    ];
  };
}
</file>

<file path="modules/options/usrEnv/module.nix">
{
  imports = [
    ./programs
    ./services

    ./brightness.nix
    ./desktop.nix
  ];
}
</file>

<file path="modules/options/README.md">
```nix
./docs # internal module system documentation and linking
./device # device-specific declarations, hardware-specific
./meta # internal read-only system manifests for easy access to system details
./profiles # profiles allow the system to batch enable programs without hassle
./system # system-level declarations, software-specific
./theme # theme packages and configurations
./usrEnv # user environment, such as main system user or
```
</file>

<file path="parts/apps/build-all-hosts/app.nix">
{pkgs}: {
  type = "app";
  program =
    pkgs.writers.writePython3Bin "build-all-hosts" {
      flakeIgnore = ["E501"];
    } ''
      import subprocess
      import json

      command = [
          "nix",
          "flake",
          "show",
          "--all-systems",
          "--json"
      ]

      output = subprocess.run(
          command,
          capture_output=True,
          text=True
      )

      data = json.loads(output.stdout)
      configurations = data.get("nixosConfigurations", {}).keys()

      for configuration in configurations:
          subprocess.run(["${pkgs.nixos-rebuild}/bin/nixos-rebuild", "build", "--flake", f".#{configuration}"])
    '';
}
</file>

<file path="parts/apps/check-restart/app.nix">
{pkgs}: {
  type = "app";
  program = pkgs.writeShellApplication {
    name = "check-kernel-variation";
    text = ''
      booted="$(readlink -f /run/booted-system/kernel)"
      current="$(readlink -f /run/current-system/kernel)"

      booted_kernel=$(basename "$booted")
      current_kernel=$(basename "$current")

      if [[ "$booted_kernel" != "$current_kernel" ]]; then
          echo "Restart required!"
          echo "Old: $booted_kernel"
          echo "New: $current_kernel"
          exit 1
      else
          echo "System is clean..."
      fi
    '';
  };
}
</file>

<file path="parts/apps/check-store-errors/app.nix">
{pkgs}: {
  type = "app";
  program = pkgs.writeShellApplication {
    name = "check-store-errors";
    text = ''
      while nix flake check --no-build |& grep "is not valid" > /tmp/invalid; do
      	path=$(awk -F\' '{print $2}' < /tmp/invalid)
      	echo "Repairing $path"
      	sudo nix-store --repair-path "$path" >/dev/null
      done
    '';
  };
}
</file>

<file path="parts/apps/mount-local-disks/app.nix">
{pkgs}: {
  type = "app";
  program = pkgs.writeShellApplication {
    name = "mount-local-disks";
    text = ''
      # display help message if no arguments are provided
      if [ $# -eq 0 ]; then
          echo "Usage: $0 <hostname>"
          echo "  <hostname>    The hostname to retrieve the NixOS configuration for."
          exit 1
      fi

      # set the hostname from the first argument
      hostname="$1"
      filesystemsJson=$(nix eval --json .#nixosConfigurations."$hostname".config.fileSystems)

      mount_filesystem() {
          local mount_point="$1"
          local device="$2"
          local fs_type="$3"
          local options="$4"

          echo "mounting $device at $mount_point with options $options"
          mkdir -p "$mount_point"
          mount -t "$fs_type" -o "$options" "$device" "$mount_point"
      }

      # unmount all previously mounted filesystems
      umount -R /mnt || true

      # parse and apply filesystem configurations
      echo "$filesystemsJson" | jq -c 'to_entries[]' | while read -r entry; do
          mount_point=$(echo "$entry" | jq -r '.key')
          device=$(echo "$entry" | jq -r '.value.device')
          fs_type=$(echo "$entry" | jq -r '.value.fsType')
          options=$(echo "$entry" | jq -r '.value.options // [] | join(",")')

          mount_filesystem "$mount_point" "$device" "$fs_type" "$options"
      done
    '';
  };
}
</file>

<file path="parts/apps/prefetch-url-sha256/app.nix">
{pkgs}: {
  type = "app";
  program = pkgs.writeScriptBin "prefetch-url-sha256" ''
    hash=$(nix-prefetch-url "$1")
    nix hash to-sri --type sha256 $hash
  '';
}
</file>

<file path="parts/apps/upgrade-postgresql/app.nix">
{pkgs}: {
  type = "app";
  program = let
    oldPostgres = pkgs.postgresql_15;
    newPostgres = pkgs.postgresql_16;

    dataDir = "/srv/storage/postgresql";
  in
    pkgs.writeShellApplication {
      name = "nix-flake-upgrade-postgresql";
      text = ''
        if [ ! -d "${dataDir}" ]; then
          echo "Data directory does not exist! Bailing."
          exit 1
        fi

        if pgrep postgres; then
          echo "Please exit all postgres services and stop postgres!"
          systemctl list-dependencies postgresql.service --reverse
          exit 1
        fi

        export OLDDATA="${dataDir}"/"${oldPostgres.psqlSchema}"
        export NEWDATA="${dataDir}"/"${newPostgres.psqlSchema}"

        if [ "$NEWDATA" == "$OLDDATA" ]; then
          echo "Nothing to upgrade!"
          exit 1
        fi

        export OLDBIN="${oldPostgres}/bin"
        export NEWBIN="${newPostgres}/bin"


        install -d -m 0700 -o postgres -g postgres "$NEWDATA"
        cd "$NEWDATA"

        su - postgres -c "$NEWBIN/initdb -D $NEWDATA"
        su - postgres -c "$NEWBIN/pg_upgrade \
          --old-datadir $OLDDATA --new-datadir $NEWDATA \
          --old-bindir $OLDBIN --new-bindir $NEWBIN \
          $@"
      '';
    };
}
</file>

<file path="parts/apps/default.nix">
{
  perSystem = {pkgs, ...}: let
    callApps = path: import (path + /app.nix) {inherit pkgs;};
  in {
    apps = {
      prefetch-url-sha256 = callApps ./prefetch-url-sha256;
      build-all-hosts = callApps ./build-all-hosts;
      check-restart = callApps ./check-restart;
      mount-local-disks = callApps ./mount-local-disks;
      upgrade-postgresql = callApps ./upgrade-postgresql;
      check-store-errors = callApps ./check-store-errors;
    };
  };
}
</file>

<file path="parts/checks/default.nix">
{self, ...}: {
  perSystem = {pkgs, ...}: {
    checks = {
      nix-fmt = pkgs.runCommand "nix-fmt-check" {} ''
        ${pkgs.alejandra}/bin/alejandra --check ${self} < /dev/null | tee $out
      '';
    };
  };
}
</file>

<file path="parts/lib/aliases.nix">
_: let
  # this is a forced SSL template for Nginx
  # returns the attribute set with our desired settings
  sslTemplate = {
    forceSSL = true;
    enableACME = true;
  };

  common = {
    shellColors = ''
      # Reset colors
      CO='\033[0m'

      # Colors
      RED='\033[0;31m'
      GREEN='\033[0;32m'
      YELLOW='\033[0;33m'
      BLUE='\033[0;34m'
      PURPLE='\033[0;35m'
      CYAN='\033[0;36m'
      WHITE='\033[0;37m'

      # Bold colors
      BBLACK='\033[1;30m'
      BRED='\033[1;31m'
      BGREEN='\033[1;32m'
      BYELLOW='\033[1;33m'
      BBLUE='\033[1;34m'
      BPURPLE='\033[1;35m'
      BCYAN='\033[1;36m'
      BWHITE='\033[1;37m'
    '';
  };
in {
  inherit sslTemplate common;
}
</file>

<file path="parts/lib/builders.nix">
{
  inputs,
  lib,
  ...
}: let
  # inherit self from inputs
  inherit (inputs) self nixpkgs;
  inherit (lib.lists) singleton concatLists;
  inherit (lib.modules) mkDefault;
  inherit (lib.attrsets) recursiveUpdate;

  # shorthand alias to `lib.nixosSystem`
  # `lib.nixosSystem` is a shallow wrapper around `lib.evalModules` that passes
  # a few specialArgs and modules to bootstrap a working NixOS system. This is
  # done implicitly in the wrapper and normally we would like to avoid using it
  # however using `evalModules` to evaluate a system closure breaks e.g. the
  # `documentation.nixos.enable` option which evaluates the module tree internally
  # in which case `baseModules` will be missing
  mkSystem = lib.nixosSystem;

  # global module path for nixos modules
  # while using nixosSystem, this will be set as a specialArgs internally
  modulesPath = "${nixpkgs}/nixos/modules";

  # mkNixosSystem is a convenient wrapper around lib.nixosSystem (which itself is a wrapper around lib.evalModules)
  # that allows us to abstract host creation and configuration with necessary modules and specialArgs pre-defined
  # or properly overridden compared to their nixpkgs default. This allows us to swiftly bootstrap a new system
  # when (not if) a new system is added to `hosts/default.nix` with minimum lines of code rewritten each time.
  # Ultimately this defines specialArgs we need and lazily merges any args and modules the host may choose
  # to pass to the builder.
  mkNixosSystem = {
    withSystem,
    system,
    hostname,
    ...
  } @ args:
    withSystem system ({
      inputs',
      self',
      ...
    }:
      mkSystem {
        # specialArgs
        specialArgs = recursiveUpdate {
          inherit (self) keys;
          inherit lib modulesPath;
          inherit inputs self inputs' self';
        } (args.specialArgs or {});

        # Modules
        modules = concatLists [
          (singleton {
            networking.hostName = args.hostname;
            nixpkgs = {
              hostPlatform = mkDefault args.system;
              flake.source = nixpkgs.outPath;
            };

            # set baseModules in the place of nixos/lib/eval-config.nix's default argument
            # _module.args.baseModules = import "${modulesPath}/module-list.nix";
          })

          # if host needs additional modules, append them
          (args.modules or [])
        ];
      });

  # mkIso is should be a set that extends mkSystem with necessary modules
  # to create an Iso image
  # we do not use mkNixosSystem because it overcomplicates things, an ISO does not require what we get in return for those complications
  mkNixosIso = {
    modules,
    system,
    hostname,
    ...
  } @ args:
    mkSystem {
      specialArgs = {inherit inputs lib self;} // args.specialArgs or {};
      modules = concatLists [
        [
          # provides options for modifying the ISO image
          "${nixpkgs}/nixos/modules/installer/cd-dvd/iso-image.nix"

          # bootstrap channels with the ISO image to avoid fetching them during installation
          "${nixpkgs}/nixos/modules/installer/cd-dvd/channel.nix"

          # make sure our installer can detect and interact with all hardware that is supported in Nixpkgs
          # this loads basically every hardware related kernel module
          "${nixpkgs}/nixos/modules/profiles/all-hardware.nix"
        ]

        (singleton {
          networking.hostName = args.hostname;
          nixpkgs = {
            hostPlatform = mkDefault args.system;
            flake.source = nixpkgs.outPath;
          };
        })

        (args.modules or [])
      ];
    };

  mkRaspi4Image = {
    modules,
    system,
    ...
  } @ args:
    mkSystem {
      specialArgs = {inherit inputs lib self;} // args.specialArgs or {};
      modules = concatLists [
        # get an installer profile from nixpkgs to base the Isos off of
        [
          "${nixpkgs}/nixos/modules/installer/sd-card/sd-image-raspberrypi.nix"
          inputs.nixos-hardware.nixosModules.raspberry-pi-4
        ]

        (singleton {
          networking.hostName = args.hostname;
          nixpkgs = {
            hostPlatform = mkDefault args.system;
            flake.source = nixpkgs.outPath;
          };
        })

        (args.modules or [])
      ];
    };
in {
  inherit mkSystem mkNixosSystem mkNixosIso mkRaspi4Image;

  # mkSDImage was previously used explicitly for building Raspi4 images, but it's good
  # to have a distinction. I will make mkSDImage its own function in the future.
  mkSDImage = lib.warn "mkSDImage is deprecated, use mkRaspi4Image instead" mkRaspi4Image;
}
</file>

<file path="parts/lib/ci.nix">
# Modified from https://github.com/nix-community/nix-github-actions
# available under the MIT license.
{lib, ...}: let
  inherit (builtins) map isList;
  inherit (lib.attrsets) attrValues mapAttrs attrNames;
  inherit (lib.lists) flatten singleton;

  githubPlatforms = {
    "x86_64-linux" = "ubuntu-latest";
    "x86_64-darwin" = "macos-12";
    "aarch64-darwin" = "macos-14";
  };

  # Return a GitHub Actions matrix from a package set shaped like
  # the Flake attribute packages/checks.
  mkGithubMatrix = {
    checks, # Takes an attrset shaped like { x86_64-linux = { hello = pkgs.hello; }; }
    attrPrefix ? "githubActions.checks",
    platforms ? githubPlatforms,
  }: {
    inherit checks;
    matrix.include = flatten (attrValues (
      mapAttrs
      (
        system: pkgs:
          map
          (attr: {
            os = let
              targetHost = platforms.${system};
            in
              if isList targetHost
              then targetHost
              else singleton targetHost;

            attr =
              if attrPrefix != ""
              then "${attrPrefix}.${system}.\"${attr}\""
              else "${system}.\"${attr}\"";
          })
          (attrNames pkgs)
      )
      checks
    ));
  };
in {
  inherit mkGithubMatrix;
}
</file>

<file path="parts/lib/conversion.nix">
{lib, ...}: let
  inherit (builtins) fromJSON readFile;
  inherit (lib.meta) getExe;

  /*
    *
  Converts a YAML file to a JSON representation using the `yj` tool.

  # Inputs

  `pkgs`
  : A set of Nix packages, must include `yj`.

  `file`
  : A path to the YAML file to be converted.

  # Type

  ```
  fromYAML :: { pkgs: pkgs } -> file: string -> JSON
  ```
  */

  fromYAML = pkgs: file: let
    converted-json = pkgs.runCommand "yaml-converted.json" {} ''
      ${getExe pkgs.yj} < ${file} > $out
    '';
  in
    fromJSON (readFile converted-json);
in {
  inherit fromYAML;
}
</file>

<file path="parts/lib/dag.nix">
# Adjusted from https://gitlab.com/rycee/nur-expressions/blob/b34e2e548da574c7bd4da14d1779c95b62349a3a/lib/dag.nix (MIT)
# A generalization of Nixpkgs's `strings-with-deps.nix`.
#
# The main differences from the Nixpkgs version are
#
#  - not specific to strings, i.e., any payload is OK,
#
#  - the addition of the function `entryBefore` indicating a
#    "wanted by" relationship.
{lib, ...}: let
  inherit (lib) mkOption filterAttrs mapAttrsToList toposort mapAttrs any types;

  types' =
    types
    // {
      dagOf = subType:
        types.attrsOf (types.submodule {
          options = {
            data = mkOption {
              type = subType;
              description = "Entry value.";
            };

            before = mkOption {
              type = types.listOf types.str;
              default = [];
              description = "Entries to guarantee before.";
            };

            after = mkOption {
              type = types.listOf types.str;
              default = [];
              description = "Entries to guarantee after.";
            };
          };
        });
    };

  dag = {
    # Takes an attribute set containing entries built by
    # entryAnywhere, entryAfter, and entryBefore to a
    # topologically sorted list of entries.
    #
    # Internally this function uses the `toposort` function in
    # `<nixpkgs/lib/lists.nix>` and its value is accordingly.
    #
    # Specifically, the result on success is
    #
    #    { result = [{name = ?; data = ?;} …] }
    #
    # For example
    #
    #    nix-repl> topoSort {
    #                a = entryAnywhere "1";
    #                b = entryAfter ["a" "c"] "2";
    #                c = entryBefore ["d"] "3";
    #                d = entryBefore ["e"] "4";
    #                e = entryAnywhere "5";
    #              } == {
    #                result = [
    #                  { data = "1"; name = "a"; }
    #                  { data = "3"; name = "c"; }
    #                  { data = "2"; name = "b"; }
    #                  { data = "4"; name = "d"; }
    #                  { data = "5"; name = "e"; }
    #                ];
    #              }
    #    true
    #
    # And the result on error is
    #
    #    {
    #      cycle = [ {after = ?; name = ?; data = ?} … ];
    #      loops = [ {after = ?; name = ?; data = ?} … ];
    #    }
    #
    # For example
    #
    #    nix-repl> topoSort {
    #                a = entryAnywhere "1";
    #                b = entryAfter ["a" "c"] "2";
    #                c = entryAfter ["d"] "3";
    #                d = entryAfter ["b"] "4";
    #                e = entryAnywhere "5";
    #              } == {
    #                cycle = [
    #                  { after = ["a" "c"]; data = "2"; name = "b"; }
    #                  { after = ["d"]; data = "3"; name = "c"; }
    #                  { after = ["b"]; data = "4"; name = "d"; }
    #                ];
    #                loops = [
    #                  { after = ["a" "c"]; data = "2"; name = "b"; }
    #                ];
    #              } == {}
    #    true
    topoSort = dag: let
      dagBefore = dag: name:
        mapAttrsToList (n: v: n) (
          filterAttrs (n: v: any (a: a == name) v.before) dag
        );
      normalizedDag =
        mapAttrs (n: v: {
          name = n;
          data = v.data;
          after = v.after ++ dagBefore dag n;
        })
        dag;
      before = a: b: any (c: a.name == c) b.after;
      sorted = toposort before (mapAttrsToList (n: v: v) normalizedDag);
    in
      if sorted ? result
      then {result = map (v: {inherit (v) name data;}) sorted.result;}
      else sorted;

    # Create a DAG entry with no particular dependency information.
    entryAnywhere = data: {
      inherit data;
      before = [];
      after = [];
    };

    # Ordering of after and before flipped from the original
    entryBetween = after: before: data: {
      inherit data before after;
    };

    entryAfter = after: data: {
      inherit data after;
      before = [];
    };

    entryBefore = before: data: {
      inherit data before;
      after = [];
    };
  };
in {
  inherit (dag) entryBefore entryBetween entryAfter entryAnywhere topoSort;
  inherit (types') dagOf;
}
</file>

<file path="parts/lib/default.nix">
{inputs, ...}: let
  inherit (inputs.nixpkgs) lib;

  # This defines the custom library and its functions. What happens below is that we extend `nixpkgs.lib` with
  # my own set of functions, designed to be used within this repository.
  # You will come to realize that this is an ugly solution. The lib directory and the contents of this file
  # are frustratingly convoluted, and lib.extend cannot handle merging parent attributes (e.g self.modules
  # and super.modules will override each other, and not merge) so we cannot use the same names as nixpkgs.
  # This is a problem, as I want to use the same names as nixpkgs, but with my own functions. However there
  # is no clear solution to this problem, so we make all custom functions available under
  #  1. self.extendedLib, which is a set containing all custom parent attributes
  #  2. self.lib, which is the extended library.
  # There are technically no limitations to this approach, but if you want to avoid using shorthand aliases
  # to provided function, you would need to do something like `lib.extendedLib.aliases.foo` instead of
  # `lib.aliases.foo`, which is kinda annoying.
  nyxLib = self: let
    inherit (self.trivial) functionArgs;
    inherit (self.attrsets) filterAttrs mapAttrs recursiveUpdate;

    # the below function is by far the most cursed I've put in my configuration
    # if you are, for whatever reason, copying my configuration - PLEASE omit this
    # and do your imports manually
    # credits go to @nrabulinski
    callLibs = path: let
      func = import path;
      args = functionArgs func;
      requiredArgs = filterAttrs (_: val: !val) args;
      defaultArgs = recursiveUpdate (mapAttrs (_: _: null) requiredArgs) {
        inherit inputs;
        lib = self;
      };
      functor = {__functor = _: attrs: func (recursiveUpdate defaultArgs attrs);};
    in
      (func defaultArgs) // functor;
  in {
    extendedLib = {
      # Aliases, or rather, templates containing commonly used strings or sets
      # across multiple parts of the configuration. One example for this is the nginx
      # SSL template, which is used practically for every service that faces
      # the internet.
      aliases = callLibs ./aliases.nix;

      # System builders and similar functions. Generally, those are abstractions around functions
      # found in nixpkgs, such as nixosSystem or evalModules, that simplify host creation.
      builders = callLibs ./builders.nix;

      # Helpers for converting data formats to and from other formats. This is a
      # very broad category, so anything could go here in theory.
      conversions = callLibs ./conversions.nix;

      # Utilities for working with GitHub or/and Forgejo workflows. So far, it
      # is an adaptation of nix-github-actions to suit my needs.
      ci = callLibs ./ci.nix;

      # DAG library is a modified version of the one found in
      # rycee's NUR repository
      dag = callLibs ./dag.nix;

      # Functions for working with deployment tools, such as deploy-rs
      deploy = callLibs ./deploy.nix;

      # Helpers for working with the firewall, which is currently nftables. The
      # below library contains helpers for building nftables chains and tables
      # from nix attribute sets.
      firewall = callLibs ./firewall.nix {inherit (self.extendedLib) dag;};

      # Functions for working with filesystems. In its current state, fs library
      # contains only a single function, which is mkBtrfs, a helper for creating
      # a btrfs filesystem with my preferred options.
      fs = callLibs ./fs.nix;

      # Checks and assertions for validating hardware capabilities of any given
      # host. Generally wraps around pkgs.stdenv.hostPlatform, but with additional
      # checks for validating host architecture and so on.
      hardware = callLibs ./hardware.nix;

      # An assortment of miscellaneous functions
      # that don't fit anywhere else.
      misc = callLibs ./misc.nix;

      # Module builders and utilities for the custom module structure found in this
      # repository.
      modules = callLibs ./modules.nix;

      # Functions for working with systemd sockets and their namespacing features.
      # This is kinda WIP, and is not used anywhere yet. Could be omitted if desired.
      namespacing = callLibs ./namespacing.nix;

      # Helpers for networking operations.
      networking = callLibs ./networking.nix;

      # Utilities for working with system secrets
      secrets = callLibs ./secrets.nix;

      # Helpers for working with SSH or SSHD configurations.
      ssh = callLibs ./ssh.nix;

      # Functions for working with systemd services. Includes an utility for passing
      # common hardening options, or creating services with well known targets, such
      # as graphical-session.target
      systemd = callLibs ./systemd.nix;

      # Various assertions for verifying system features.
      validators = callLibs ./validators.nix;

      # Utilities for working with styling options, i.e., themes
      themes = callLibs ./themes.nix;

      # XDG user directories and templates.
      # xdg = callLibs ./xdg.nix;
    };

    # A shorthand alias for the xdg templates used by nixos and home-manager.
    # This is certainly a weird approach, but I do not know how to handle this
    # in a better way.
    xdgTemplate = ./xdg.nix;

    # Get individual functions from the parent attributes
    inherit (self.extendedLib.aliases) sslTemplate common;
    inherit (self.extendedLib.builders) mkSystem mkNixosSystem mkNixosIso mkSDImage mkRaspi4Image;
    inherit (self.extendedLib.ci) mkGithubMatrix;
    inherit (self.extendedLib.dag) entryBefore entryBetween entryAfter entryAnywhere topoSort dagOf;
    inherit (self.extendedLib.deploy) mkNode;
    inherit (self.extendedLib.firewall) mkTable mkRuleset mkIngressChain mkPrerouteChain mkInputChain mkForwardChain mkOutputChain mkPostrouteChain;
    inherit (self.extendedLib.fs) mkBtrfs;
    inherit (self.extendedLib.hardware) isx86Linux primaryMonitor;
    inherit (self.extendedLib.misc) filterNixFiles importNixFiles boolToNum fetchKeys containsStrings indexOf intListToStringList;
    inherit (self.extendedLib.modules) mkService mkModuleTree mkModuleTree';
    inherit (self.extendedLib.namespacing) makeSocketNsPhysical makeServiceNsPhysical unRestrictNamespaces;
    inherit (self.extendedLib.networking) isValidIPv4;
    inherit (self.extendedLib.ssh) mkPubkeyFor;
    inherit (self.extendedLib.secrets) mkAgenixSecret;
    inherit (self.extendedLib.systemd) hardenService mkGraphicalService mkHyprlandService;
    inherit (self.extendedLib.themes) serializeTheme compileSCSS;
    inherit (self.extendedLib.validators) ifTheyExist ifGroupsExist isAcceptedDevice isWayland ifOneEnabled;
  };

  # Merge layers of libraries into one as a subject of convenience
  # and easy access.
  extensions = lib.composeManyExtensions [
    (_: _: inputs.nixpkgs.lib)
    (_: _: inputs.flake-parts.lib)
    (_: _: inputs.nvf.lib)
  ];

  # Extend default library
  extendedLibrary = (lib.makeExtensible nyxLib).extend extensions;
in {
  perSystem = {
    # Set the `lib` arg of the flake as the extended lib. If I am right, this should
    # override the previous argument (i.e. the original nixpkgs.lib, provided by flake-parts
    # as a reasonable default) with my own, which is the same nixpkgs library, but actually extended
    # with my own custom functions.
    _module.args.lib = extendedLibrary;
  };

  flake = {
    # Also set `lib` as a flake output, which allows for it to be referenced outside
    # the scope of this flake. This is useful for when I want to refer to my extended
    # library from outside this flake, or if someone wants to access my functions
    # but that rarely happens, Ctrl+C and Ctrl+V is the developer way it seems.
    lib = extendedLibrary;
  };
}
</file>

<file path="parts/lib/deploy.nix">
{inputs, ...}: let
  mkNode = name: config: let
    inherit (config.meta) system;
    deployLib = inputs.deploy-rs.lib.${system};
  in {
    hostname = "${name}.notashelf.notashelf.dev";
    sshOpts = ["-p" "30"];
    skipChecks = true;

    # We are currently currently only a single profile system
    profilesOrder = ["system"];
    profiles.system = {
      sshUser = "notashelf";
      user = "notashelf";
      path = deployLib.activate.nixos config;
    };
  };
in {
  inherit mkNode;
}
</file>

<file path="parts/lib/firewall.nix">
{
  lib,
  dag,
  ...
}: let
  inherit (builtins) length head;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.strings) optionalString concatMapStringsSep concatStringsSep;
  inherit (lib.attrsets) attrNames filterAttrs mapAttrsToList;
  inherit (lib.lists) concatLists;
  inherit (lib.types) nullOr enum either oneOf coercedTo listOf str submodule port;
  inherit (dag) dagOf topoSort;

  mkTable = desc: body:
    mkOption {
      default = {};
      description = "Containers for chains, sets, and other stateful objects.";
      type = submodule ({config, ...}: {
        options =
          {
            enable = mkEnableOption desc;
            objects = mkOption {
              type = listOf str;
              description = "Objects associated with this table.";
              default = [];
            };
          }
          // body;

        config = let
          buildChainDag = chain:
            concatMapStringsSep "\n" ({
              name,
              data,
            }: let
              protocol =
                if data.protocol == null
                then ""
                else data.protocol;
              field =
                if data.field == null
                then ""
                else data.field;
              inherit (data) policy;
              values = map toString data.value;
              value =
                if data.value == null
                then ""
                else
                  (
                    if length data.value == 1
                    then head values
                    else "{ ${concatStringsSep ", " values} }"
                  );
            in ''
              ${protocol} ${field} ${value} ${policy} comment ${name}
            '') ((topoSort chain).result or (throw "Cycle in DAG"));

          buildChain = chainType: chain:
            mapAttrsToList (chainName: chainDag: ''
              chain ${chainName} {
                type ${chainType} hook ${chainName} priority 0;

                ${buildChainDag chainDag}
              }
            '') (filterAttrs (_: g: length (attrNames g) > 0) chain);
        in {
          objects = let
            chains = concatLists [
              (
                if config ? filter
                then buildChain "filter" config.filter
                else []
              )
              (
                if config ? nat
                then buildChain "nat" config.nat
                else []
              )
              (
                if config ? route
                then buildChain "route" config.route
                else []
              )
            ];
          in
            chains;
        };
      });
    };

  mkChain = _: description:
    mkOption {
      inherit description;
      default = {};
      type = dagOf (submodule {
        options = {
          protocol = mkOption {
            default = null;
            description = "Protocol to match.";
            type = nullOr (either (enum [
                "ether"
                "vlan"
                "arp"
                "ip"
                "icmp"
                "igmp"
                "ip6"
                "icmpv6"
                "tcp"
                "udp"
                "udplite"
                "sctp"
                "dccp"
                "ah"
                "esp"
                "comp"
              ])
              str);
          };

          field = mkOption {
            default = null;
            description = "Field value to match.";
            type = nullOr (enum [
              "dport"
              "sport"
              "daddr"
              "saddr"
              "type"
              "state"
              "iifname"
              "pkttype"
            ]);
          };

          value = mkOption {
            default = null;
            description = "Associated value.";
            type = let
              valueType = oneOf [port str];
            in
              nullOr (coercedTo valueType (value: [value]) (listOf valueType));
          };

          policy = mkOption {
            description = "What to do with matching packets.";
            type = enum [
              "accept"
              "reject"
              "drop"
              "log"
            ];
          };
        };
      });
    };

  mkRuleset = ruleset:
    concatStringsSep "\n" (mapAttrsToList (name: table:
      optionalString (length table.objects > 0) ''
        table ${name} nixos {
          ${concatStringsSep "\n" table.objects}
        }
      '')
    ruleset);

  mkIngressChain = mkChain "Process all packets before they enter the system";
  mkPrerouteChain = mkChain "Process all packets entering the system";
  mkInputChain = mkChain "Process packets delivered to the local system";
  mkForwardChain = mkChain "Process packets forwarded to a different host";
  mkOutputChain = mkChain "Process packets sent by local processes";
  mkPostrouteChain = mkChain "Process all packets leaving the system";
in {
  inherit mkTable mkRuleset mkIngressChain mkPrerouteChain mkInputChain mkForwardChain mkOutputChain mkPostrouteChain;
}
</file>

<file path="parts/lib/fs.nix">
_: let
  mkBtrfs = list: list + ["compress=zstd" "noatime"];
in {
  inherit mkBtrfs;
}
</file>

<file path="parts/lib/hardware.nix">
_: let
  # check if the host platform is linux and x86
  # (isx86Linux pkgs) -> true
  isx86Linux = pkgs: with pkgs.stdenv; hostPlatform.isLinux && hostPlatform.isx86;

  # assume the first monitor in the list of monitors is primary
  # get its name from the list of monitors
  # `primaryMonitor osConfig` -> "DP-1"
  primaryMonitor = config: builtins.elemAt config.modules.device.monitors 0;
in {
  inherit isx86Linux primaryMonitor;
}
</file>

<file path="parts/lib/misc.nix">
{lib, ...}: let
  inherit (lib) lists mapAttrsToList filterAttrs hasSuffix;

  # filter files that have the .nix suffix
  filterNixFiles = k: v: v == "regular" && hasSuffix ".nix" k;

  # import files that are selected by filterNixFiles
  importNixFiles = path:
    (lists.forEach (mapAttrsToList (name: _: path + ("/" + name))
        (filterAttrs filterNixFiles (builtins.readDir path))))
    import;

  # return an int (1/0) based on boolean value
  # `boolToNum true` -> 1
  boolToNum = bool:
    if bool
    then 1
    else 0;

  # convert a list of integers to a list of string
  # `intListToStringList [1 2 3]` -> ["1" "2" "3"]
  intListToStringList = list: map (toString list);

  # a basic function to fetch a specified user's public keys from github .keys url
  # `fetchKeys "username` -> "ssh-rsa AAAA...== username@hostname"
  fetchKeys = username: (builtins.fetchurl "https://github.com/${username}.keys");

  # a helper function that checks if a list contains a list of given strings
  # `containsStrings { targetStrings = ["foo" "bar"]; list = ["foo" "bar" "baz"]; }` -> true
  containsStrings = {
    list,
    targetStrings,
  }:
    builtins.all (s: builtins.any (x: x == s) list) targetStrings;

  # indexOf is a function that returns the index of an element in a list
  # `indexOf ["foo" "bar" "baz"] "bar"` -> 1
  indexOf = list: elem: let
    f = f: i:
      if i == (builtins.length list)
      then null
      else if (builtins.elemAt list i) == elem
      then i
      else f f (i + 1);
  in
    f f 0;
in {
  inherit filterNixFiles importNixFiles boolToNum fetchKeys containsStrings indexOf intListToStringList;
}
</file>

<file path="parts/lib/modules.nix">
{lib, ...}: let
  inherit (builtins) filter map toString elem;
  inherit (lib.filesystem) listFilesRecursive;
  inherit (lib.strings) hasSuffix;
  inherit (lib.options) mkOption mkEnableOption;
  inherit (lib.types) str int;

  # `mkModuleTree` is used to recursively import all Nix file in a given directory, assuming the
  # given directory to be the module root, where rest of the modules are to be imported. This
  # retains a sense of explicitness in the module tree, and allows for a more organized module
  # imports, discarding the vague `default.nix` name for directories that are *modules*.
  mkModuleTree = {
    path,
    ignoredPaths ? [./default.nix],
  }:
    filter (hasSuffix ".nix") (
      map toString (
        # List all files in the given path, and filter out paths that are in
        # the ignoredPaths list
        filter (path: !elem path ignoredPaths) (listFilesRecursive path)
      )
    );

  # A variant of mkModuleTree that provides more granular control over the files that are imported.
  # While `mkModuleTree` imports all Nix files in the given directory, `mkModuleTree'` will look
  # for a specific
  mkModuleTree' = {
    path,
    ignoredPaths ? [],
  }: (
    # Two conditions fill satisfy filter here:
    #  - The path should end with a module.nix, indicating
    #   that it is in fact a module file.
    #  - The path is not contained in the ignoredPaths list.
    # If we cannot satisfy both of the conditions, then the path will be ignored
    filter (hasSuffix "module.nix") (
      map toString (
        filter (path: !elem path ignoredPaths) (listFilesRecursive path)
      )
    )
  );

  # The `mkService` function takes a few arguments to generate
  # a module for a service without repeating the same options
  # over and over: every online service needs a host and a port.
  # I can't exactly tell you why, but if I am to be honest
  # this is actually a horrendous abstraction
  mkService = {
    name,
    type ? "", # type being an empty string means it can be skipped, omitted
    host ? "127.0.0.1", # default to listening only on localhost
    port ? 0, # default port should be a stub
    extraOptions ? {}, # used to define additional modules
  }: {
    enable = mkEnableOption "${name} ${type} service";
    settings =
      {
        host = mkOption {
          type = str;
          default = host;
          description = "The host ${name} will listen on";
        };

        port = mkOption {
          type = int;
          default = port;
          description = "The port ${name} will listen on";
        };
      }
      // extraOptions;
  };
in {
  inherit mkService mkModuleTree mkModuleTree';
}
</file>

<file path="parts/lib/namespacing.nix">
_: let
  makeServiceNsPhysical = name: {
    systemd.services."${name}".serviceConfig.NetworkNamespacePath = "/var/run/netns/physical";
  };
  makeSocketNsPhysical = name: {
    systemd.sockets."${name}".socketConfig.NetworkNamespacePath = "/var/run/netns/physical";
  };
  unRestrictNamespaces = name: {
    systemd.sockets."${name}".socketConfig.RestrictNamespaces = "~net";
  };
in {
  inherit makeSocketNsPhysical makeServiceNsPhysical unRestrictNamespaces;
}
</file>

<file path="parts/lib/networking.nix">
_: let
  inherit (builtins) match toInt splitString length all;
  # Check if a string represents a number within the range 0-255, a.k.a an IPv4 octet
  isValidOctet = n: match "[0-9]{1,3}" n != null && (toInt n <= 255);

  # Main function to check if a string is a valid IPv4 address
  isValidIPv4 = ip: let
    parts = splitString "." ip;
  in
    length parts == 4 && all isValidOctet parts;
in {
  inherit isValidIPv4;
}
</file>

<file path="parts/lib/secrets.nix">
{
  inputs,
  lib,
  ...
}: let
  inherit (inputs) self;
  inherit (lib.modules) mkIf;

  # mkAgenixSecret is an abstraction around agenix secret files
  # that allows us to enable secrets conditionally, and dynamically
  # while also propagating secure defaults. Unless explicitly
  # overridden, the secret will be owned by root, and have mode 400.
  # The file argument is mandatory, and should be relative to
  # ${self}/secrets to find the secret.
  mkAgenixSecret = enableCondition: {
    file,
    owner ? "root",
    group ? "root",
    mode ? "400",
  }:
    mkIf enableCondition {
      file = "${self}/secrets/${file}";
      inherit group owner mode;
    };
in {
  inherit mkAgenixSecret;
}
</file>

<file path="parts/lib/ssh.nix">
{lib, ...}: let
  inherit (lib.lists) singleton;

  # <https://github.com/NuschtOS/nixos-modules/blob/933e4dce6ad0e159526fa08649f880ecb3c6d937/lib/ssh.nix>
  mkPubkeyFor = name: type: publicKey: {
    "${name}-${type}" = {
      extraHostNames = singleton name;
      publicKey = "${type} ${publicKey}";
    };
  };
in {
  inherit mkPubkeyFor;
}
</file>

<file path="parts/lib/systemd.nix">
{lib, ...}: let
  inherit (lib.options) mkOptionDefault;
  inherit (lib.attrsets) mapAttrs recursiveUpdate;

  # make a service that is a part of the graphical session target
  mkGraphicalService = recursiveUpdate {
    Unit.PartOf = ["graphical-session.target"];
    Unit.After = ["graphical-session.target"];
    Install.WantedBy = ["graphical-session.target"];
  };

  # make a service that is a part of the hyprland session target
  mkHyprlandService = recursiveUpdate {
    Unit.PartOf = ["graphical-session.target"];
    Unit.After = ["graphical-session.target"];
    Install.WantedBy = ["hyprland-session.target"];
  };

  hardenService = attrs:
    attrs
    // (mapAttrs (_: mkOptionDefault) {
      AmbientCapabilities = "";
      CapabilityBoundingSet = "";
      LockPersonality = true;
      MemoryDenyWriteExecute = true;
      NoNewPrivileges = true;
      PrivateDevices = true;
      PrivateMounts = true;
      PrivateTmp = true;
      ProcSubset = "pid";
      ProtectClock = true;
      ProtectControlGroups = true;
      ProtectHome = true;
      ProtectHostname = true;
      ProtectKernelLogs = true;
      ProtectKernelModules = true;
      ProtectKernelTunables = true;
      ProtectProc = "invisible";
      ProtectSystem = "strict";
      RemoveIPC = true;
      RestrictAddressFamilies = ["AF_UNIX" "AF_INET" "AF_INET6"];
      RestrictNamespaces = true;
      RestrictRealtime = true;
      RestrictSUIDSGID = true;
      SystemCallArchitectures = "native";
      SystemCallErrorNumber = "EPERM";
      SystemCallFilter = [
        "@system-service"
        # Route-chain and OpenJ9 requires @resources calls
        "~@clock @cpu-emulation @debug @module @mount @obsolete @privileged @raw-io @reboot @swap"
      ];
    });
in {
  inherit hardenService mkGraphicalService mkHyprlandService;
}
</file>

<file path="parts/lib/themes.nix">
{lib, ...}: let
  inherit (lib.strings) toLower replaceStrings;

  # serializeTheme "serializes" a theme name literal to fit uniform
  # theme "slug" format. This is used in my internal theming module to
  # identify themes by "Theme Name" and "theme-name" interchangeably.
  # "A String With Whitespaces" -> "a-string-with-whitespaces"
  serializeTheme = inputString: toLower (replaceStrings [" "] ["-"] inputString);

  # Function that takes a theme name and a source file and compiles it to CSS
  # compileSCSS "theme-name" "path/to/theme.scss" -> "$out/theme-name.css"
  # Adapted from <https://github.com/spikespaz/dotfiles>
  compileSCSS = pkgs: {
    name,
    source,
    args ? "-t expanded",
  }: let
    storePath = pkgs.runCommandLocal "compile-scss-${name}" {} ''
      mkdir -p $out
      ${lib.getExe pkgs.sassc} ${args} "${source}" > $out/"${name}".css
    '';
  in
    storePath + "/${name}.css";
in {
  inherit serializeTheme compileSCSS;
}
</file>

<file path="parts/lib/validators.nix">
{lib, ...}: let
  # a function that will append a list of groups if they exist in config.users.groups
  ifTheyExist = config: groups: builtins.filter (group: builtins.hasAttr group config.users.groups) groups;

  # a function that returns a boolean based on whether or not the groups exist
  ifGroupsExist = config: groups: lib.any (group: builtins.hasAttr group config.users.groups) groups;

  # convenience function check if the declared device type is of an accepted type
  # takes config and a list of accepted device types
  # `isAcceptedDevice osConfig ["foo" "bar"];`
  isAcceptedDevice = conf: list: builtins.elem conf.modules.device.type list;

  # assert if the device is wayland-ready by checking sys.video and env.isWayland options
  # `(lib.isWayland config)` where config is in scope
  # `isWayland osConfig` -> true
  isWayland = conf: conf.modules.system.video.enable && conf.modules.usrEnv.isWayland;

  # ifOneEnabled takes a parent option and 3 child options and checks if at least one of them is enabled
  # `ifOneEnabled config.modules.services "service1" "service2" "service3"`
  ifOneEnabled = cfg: a: b: c: (cfg.a || cfg.b || cfg.c);
in {
  inherit ifTheyExist ifGroupsExist isAcceptedDevice isWayland ifOneEnabled;
}
</file>

<file path="parts/lib/xdg.nix">
system: let
  # copy paste done right
  XDG_CONFIG_HOME = "$HOME/.config";
  XDG_CACHE_HOME = "$HOME/.cache";
  XDG_DATA_HOME = "$HOME/.local/share";
  XDG_STATE_HOME = "$HOME/.local/state";
  XDG_BIN_HOME = "$HOME}/.local/bin";
  XDG_RUNTIME_DIR = "/run/user/$UID";
in {
  # global env
  glEnv = {
    inherit XDG_DATA_HOME XDG_CONFIG_HOME XDG_CACHE_HOME XDG_STATE_HOME XDG_RUNTIME_DIR XDG_BIN_HOME;
    PATH = ["$XDG_BIN_HOME"];
  };

  sysEnv = {
    # general programs
    CUDA_CACHE_PATH = "${XDG_CACHE_HOME}/nv";
    ERRFILE = "${XDG_CACHE_HOME}/X11/xsession-errors";
    GNUPGHOME = "${XDG_DATA_HOME}/gnupg";
    KDEHOME = "${XDG_CONFIG_HOME}/kde";
    LESSHISTFILE = "${XDG_DATA_HOME}/less/history";
    STEPPATH = "${XDG_DATA_HOME}/step";
    WAKATIME_HOME = "${XDG_DATA_HOME}/wakatime";
    XCOMPOSECACHE = "${XDG_CACHE_HOME}/X11/xcompose";
    INPUTRC = "${XDG_CONFIG_HOME}/readline/inputrc";
    PLATFORMIO_CORE_DIR = "${XDG_DATA_HOME}/platformio";
    WINEPREFIX = "${XDG_DATA_HOME}/wine";
    DOTNET_CLI_HOME = "${XDG_DATA_HOME}/dotnet";
    MPLAYER_HOME = "${XDG_CONFIG_HOME}/mplayer";
    SQLITE_HISTORY = "${XDG_CACHE_HOME}/sqlite_history";
    NBRC_PATH = "${XDG_CONFIG_HOME}/nbrc";
    NB_DIR = "${XDG_DATA_HOME}/nb";

    # programming languages/package managers/tools
    ANDROID_HOME = "${XDG_DATA_HOME}/android";
    ANDROID_USER_HOME = "${XDG_DATA_HOME}/android";
    DOCKER_CONFIG = "${XDG_CONFIG_HOME}/docker";
    GRADLE_USER_HOME = "${XDG_DATA_HOME}/gradle";
    IPYTHONDIR = "${XDG_CONFIG_HOME}/ipython";
    JUPYTER_CONFIG_DIR = "${XDG_CONFIG_HOME}/jupyter";
    GOPATH = "${XDG_DATA_HOME}/go";
    M2_HOME = "${XDG_DATA_HOME}/m2";
    _JAVA_OPTIONS = "-Djava.util.prefs.userRoot=${XDG_CONFIG_HOME}/java";
    CARGO_HOME = "${XDG_DATA_HOME}/cargo";
    NODE_REPL_HISTORY = "${XDG_DATA_HOME}/node_repl_history";
    NPM_CONFIG_CACHE = "${XDG_CACHE_HOME}/npm";
    NPM_CONFIG_TMP = "${XDG_RUNTIME_DIR}/npm";
    NPM_CONFIG_USERCONFIG = "${XDG_CONFIG_HOME}/npm/config";
    PYTHONSTARTUP =
      if system == "nixos"
      then "/etc/pythonrc"
      else "${XDG_CONFIG_HOME}/python/pythonrc";
  };

  npmrc.text = ''
    prefix=''${XDG_DATA_HOME}/npm
    cache=''${XDG_CACHE_HOME}/npm
    init-module=''${XDG_CONFIG_HOME}/npm/config/npm-init.js
  '';

  pythonrc.text =
    /*
    python
    */
    ''
      import os
      import atexit
      import readline
      from pathlib import Path

      if readline.get_current_history_length() == 0:

          state_home = os.environ.get("XDG_STATE_HOME")
          if state_home is None:
              state_home = Path.home() / ".local" / "state"
          else:
              state_home = Path(state_home)

          history_path = state_home / "python_history"
          if history_path.is_dir():
              raise OSError(f"'{history_path}' cannot be a directory")

          history = str(history_path)

          try:
              readline.read_history_file(history)
          except OSError: # Non existent
              pass

          def write_history():
              try:
                  readline.write_history_file(history)
              except OSError:
                  pass

          atexit.register(write_history)
    '';
}
</file>

<file path="parts/modules/default.nix">
{self, ...}: let
  mkFlakeModule = path:
    if builtins.isPath path
    then self + path
    else builtins.throw "${path} is not a real path! Are you stupid?";
in {
  flake = {
    # set of modules exposed by my flake to be consumed by others
    # those can be imported by adding this flake as an input and then importing the nixosModules.<moduleName>
    # i.e imports = [ inputs.nyx.nixosModules.steam-compat ]; or modules = [ inputs.nyx.nixosModules.steam-compat ];
    nixosModules = {
      # extends the steam module from nixpkgs/nixos to add a STEAM_COMPAT_TOOLS option
      # moved to nix-gaming
      # steam-compat = /modules/extra/shared/nixos/steam;

      # a module for the comma tool that wraps it with nix-index and disabled the command-not-found integration
      comma-rewrapped = mkFlakeModule /modules/extra/shared/nixos/comma;

      # an open source implementation of wakatime server
      wakapi = mkFlakeModule /modules/extra/shared/nixos/wakapi;

      # we do not want to provide a default module
      default = builtins.throw "There is no default module, sorry!";
    };

    homeManagerModules = {
      # now available in home-manager
      # xplr = mkService /modules/extra/shared/home-manager/xplr;

      # a home-baked module for gtklock
      # allows definning extra modules and the stylesheet
      # FIXME: gtklock is currently broken thanks to the deprecation of the necessary wayland protocol
      gtklock = mkFlakeModule /modules/extra/shared/home-manager/gtklock;

      vifm = mkFlakeModule /modules/extra/shared/home-manager/vifm;

      transience = mkFlakeModule /modules/extra/shared/home-manager/transience;

      # again, we do not want to provide a default module
      default = builtins.throw "There is no default module, sorry!";
    };
  };
}
</file>

<file path="parts/npins/default.nix">
# Generated by npins. Do not modify; will be overwritten regularly
let
  data = builtins.fromJSON (builtins.readFile ./sources.json);
  version = data.version;

  mkSource = spec:
    assert spec ? type; let
      path =
        if spec.type == "Git"
        then mkGitSource spec
        else if spec.type == "GitRelease"
        then mkGitSource spec
        else if spec.type == "PyPi"
        then mkPyPiSource spec
        else if spec.type == "Channel"
        then mkChannelSource spec
        else builtins.throw "Unknown source type ${spec.type}";
    in
      spec // {outPath = path;};

  mkGitSource = {
    repository,
    revision,
    url ? null,
    hash,
    branch ? null,
    ...
  }:
    assert repository ? type;
    # At the moment, either it is a plain git repository (which has an url), or it is a GitHub/GitLab repository
    # In the latter case, there we will always be an url to the tarball
      if url != null
      then
        (builtins.fetchTarball {
          inherit url;
          sha256 = hash; # FIXME: check nix version & use SRI hashes
        })
      else
        assert repository.type == "Git"; let
          urlToName = url: rev: let
            matched = builtins.match "^.*/([^/]*)(\\.git)?$" repository.url;

            short = builtins.substring 0 7 rev;

            appendShort =
              if (builtins.match "[a-f0-9]*" rev) != null
              then "-${short}"
              else "";
          in "${
            if matched == null
            then "source"
            else builtins.head matched
          }${appendShort}";
          name = urlToName repository.url revision;
        in
          builtins.fetchGit {
            url = repository.url;
            rev = revision;
            inherit name;
            # hash = hash;
          };

  mkPyPiSource = {
    url,
    hash,
    ...
  }:
    builtins.fetchurl {
      inherit url;
      sha256 = hash;
    };

  mkChannelSource = {
    url,
    hash,
    ...
  }:
    builtins.fetchTarball {
      inherit url;
      sha256 = hash;
    };
in
  if version == 3
  then builtins.mapAttrs (_: mkSource) data.pins
  else throw "Unsupported format version ${toString version} in sources.json. Try running `npins upgrade`"
</file>

<file path="parts/npins/sources.json">
{
  "pins": {
    "discord": {
      "type": "Git",
      "repository": {
        "type": "GitHub",
        "owner": "catppuccin",
        "repo": "discord"
      },
      "branch": "main",
      "revision": "c34b767d222ddba4345a858cfdb513fd44e3b0ec",
      "url": "https://github.com/catppuccin/discord/archive/c34b767d222ddba4345a858cfdb513fd44e3b0ec.tar.gz",
      "hash": "0j4fqyyq8ihqs8fxgg6wnankv8z1bh069c4qr2ybpcdxmcpds12r"
    },
    "hmts.nvim": {
      "type": "GitRelease",
      "repository": {
        "type": "GitHub",
        "owner": "calops",
        "repo": "hmts.nvim"
      },
      "pre_releases": false,
      "version_upper_bound": null,
      "release_prefix": null,
      "version": "v1.2.3",
      "revision": "ba1239972a1f56b94252d4f85a43e777ac419662",
      "url": "https://api.github.com/repos/calops/hmts.nvim/tarball/v1.2.3",
      "hash": "1n67k7kl2xz3zi75h1qb524nxlgvrgwr4ywsykqwz1k7dlkxh3ck"
    },
    "nixpkgs": {
      "type": "Channel",
      "name": "nixpkgs-unstable",
      "url": "https://releases.nixos.org/nixpkgs/nixpkgs-24.11pre660607.c3392ad349a5/nixexprs.tar.xz",
      "hash": "1g2p74w085252qbxjymrzzccd203bfwxh8sbcyvbzan6bgqfvwi1"
    },
    "slides.nvim": {
      "type": "GitRelease",
      "repository": {
        "type": "GitHub",
        "owner": "notashelf",
        "repo": "slides.nvim"
      },
      "pre_releases": false,
      "version_upper_bound": null,
      "release_prefix": null,
      "version": "v0.1.0",
      "revision": "768fde54ac9de657887b605ee93f11993b26c9c2",
      "url": "https://api.github.com/repos/notashelf/slides.nvim/tarball/v0.1.0",
      "hash": "19pzmwpjdsmyy9ygk6ln1i18qihdffp6dgx4vvccyvvz3shabvhx"
    },
    "smart-splits.nvim": {
      "type": "GitRelease",
      "repository": {
        "type": "GitHub",
        "owner": "mrjones2014",
        "repo": "smart-splits.nvim"
      },
      "pre_releases": false,
      "version_upper_bound": null,
      "release_prefix": null,
      "version": "v1.5.0",
      "revision": "66fda3a601a5b4c679656f15eb6ddd613c8d3216",
      "url": "https://api.github.com/repos/mrjones2014/smart-splits.nvim/tarball/v1.5.0",
      "hash": "0cvprwag3wbzraai1yn424yan0y0awazxnh2kksa0v08c2rjdn4f"
    }
  },
  "version": 3
}
</file>

<file path="parts/pkgs/packages/nicksfetch/patches/0001-nicksfetch.patch">
diff --git a/neofetch b/neofetch
index 48b96d21..a2270c9a 100755
--- a/neofetch
+++ b/neofetch
@@ -46,7 +46,7 @@ LC_ALL=C
 LANG=C
 
 # Fix issues with gsettings.
-export GIO_EXTRA_MODULES=/usr/lib/x86_64-linux-gnu/gio/modules/
+[[ -z $GIO_EXTRA_MODULES ]] && export GIO_EXTRA_MODULES=/usr/lib/x86_64-linux-gnu/gio/modules/
 
 # Neofetch default config.
 read -rd '' config <<'EOF'
@@ -999,6 +999,13 @@ get_distro() {
                     *) distro="OS Elbrus $(< /etc/mcst_version)"
                 esac
 
+            elif [[ -f /etc/NIXOS ]]; then
+                case $distro_shorthand in
+                    on) distro="Nick's OS $(nixos-version | awk '{print substr($1,0,5),$2}')" ;;
+                    tiny) distro="NixOS" ;;
+                    *) distro="Nick's OS $(nixos-version)" ;;
+                esac
+
             elif type -p pveversion >/dev/null; then
                 case $distro_shorthand in
                     on|tiny) distro="Proxmox VE" ;;
@@ -8951,29 +8958,38 @@ EOF
         "nixos_old"*)
             set_colors 4 6
             read -rd '' ascii_data <<'EOF'
-${c1}          ::::.    ${c2}':::::     ::::'
-${c1}          ':::::    ${c2}':::::.  ::::'
-${c1}            :::::     ${c2}'::::.:::::
-${c1}      .......:::::..... ${c2}::::::::
-${c1}     ::::::::::::::::::. ${c2}::::::    ${c1}::::.
-    ::::::::::::::::::::: ${c2}:::::.  ${c1}.::::'
-${c2}           .....           ::::' ${c1}:::::'
-${c2}          :::::            '::' ${c1}:::::'
-${c2} ........:::::               ' ${c1}:::::::::::.
-${c2}:::::::::::::                 ${c1}:::::::::::::
-${c2} ::::::::::: ${c1}..              ${c1}:::::
-${c2}     .::::: ${c1}.:::            ${c1}:::::
-${c2}    .:::::  ${c1}:::::          ${c1}'''''    ${c2}.....
-    :::::   ${c1}':::::.  ${c2}......:::::::::::::'
-     :::     ${c1}::::::. ${c2}':::::::::::::::::'
-${c1}            .:::::::: ${c2}'::::::::::
-${c1}           .::::''::::.     ${c2}'::::.
-${c1}          .::::'   ::::.     ${c2}'::::.
-${c1}         .::::      ::::      ${c2}'::::.
-EOF
-        ;;
-
-        "NixOS"*)
+${c1}              ____       ${c2}_______        ____
+${c1}             /####\      ${c2}\######\      /####\
+${c1}             ######\      ${c2}\######\    /#####/
+${c1}             \######\      ${c2}\######\  /#####/
+${c1}              \######\      ${c2}\######\/#####/    ${c1}/\
+${c1}               \######\      ${c2}\###########/    ${c1}/##\
+${c1}        ________\######\______${c2}\#########/    ${c1}/####\
+${c1}       /#######################${c2}\#######/    ${c1}/######
+${c1}      /#########################${c2}\######\   ${c1}/######/
+${c1}     /###########################${c2}\######\ ${c1}/######/
+${c1}     ¯¯¯¯¯¯¯¯¯¯¯¯${c2}/######/${c1}¯¯¯¯¯¯¯¯¯${c2}\######${c1}/######/
+${c2}                /######/           ${c2}\####${c1}/######/________
+${c2}  _____________/######/             ${c2}\##${c1}/################\
+${c2} /###################/               ${c2}\${c1}/##################\
+${c2} \##################/${c1}\               /###################/
+${c2}  \################/${c1}##\             /######/¯¯¯¯¯¯¯¯¯¯¯¯¯
+${c2}   ¯¯¯¯¯¯¯¯/######/${c1}####\           /######/
+${c2}          /######/${c1}######\${c2}_________${c1}/######/${c2}____________
+${c2}         /######/ ${c1}\######\${c2}###########################/
+${c2}        /######/   ${c1}\######\${c2}#########################/
+${c2}        ######/    ${c1}/#######\${c2}#######################/
+${c2}        \####/    ${c1}/#########\${c2}¯¯¯¯¯¯\######\¯¯¯¯¯¯¯¯
+${c2}         \##/    ${c1}/###########\${c2}      \######\
+${c2}          \/    ${c1}/#####/\######\${c2}      \######\
+${c1}               ${c1}/#####/  \######\${c2}      \######\
+${c1}              ${c1}/#####/    \######\${c2}      \######
+${c1}              ${c1}\####/      \######\${c2}      \####/
+${c1}               ${c1}¯¯¯¯        ¯¯¯¯¯¯¯${c2}       ¯¯¯¯
+EOF
+        ;;
+
+        "Nicks OS"*)
             set_colors 4 6
             read -rd '' ascii_data <<'EOF'
 ${c1}          ▗▄▄▄       ${c2}▗▄▄▄▄    ▄▄▄▖
</file>

<file path="parts/pkgs/packages/nicksfetch/package.nix">
{
  lib,
  stdenvNoCC,
  fetchFromGitHub,
  bash,
  makeWrapper,
  pciutils,
  x11Support ? true,
  ueberzug,
}: let
  inherit (builtins) placeholder;
  inherit (lib.strings) makeBinPath;
  inherit (lib.lists) optional;
in
  stdenvNoCC.mkDerivation {
    pname = "nicksfetch";
    version = "unstable-2021-12-10";

    src = fetchFromGitHub {
      owner = "dylanaraps";
      repo = "neofetch";
      rev = "ccd5d9f52609bbdcd5d8fa78c4fdb0f12954125f";
      sha256 = "sha256-9MoX6ykqvd2iB0VrZCfhSyhtztMpBTukeKejfAWYW1w=";
    };

    patches = [./patches/0001-nicksfetch.patch];

    outputs = ["out" "man"];

    strictDeps = true;
    buildInputs = [bash];
    nativeBuildInputs = [makeWrapper];

    postPatch = ''
      patchShebangs --host neofetch
      substituteInPlace \
        --replace "neofetch" "nicksfetch"
    '';

    postInstall = ''
      wrapProgram $out/bin/neofetch \
        --prefix PATH : ${makeBinPath ([pciutils] ++ optional x11Support ueberzug)}
    '';

    makeFlags = [
      "PREFIX=${placeholder "out"}"
      "SYSCONFDIR=${placeholder "out"}/etc"
    ];

    meta = {
      description = "A";
      homepage = "https://github.com/dylanaraps/neofetch";
      license = lib.licenses.mit;
      platforms = lib.platforms.all;
      maintainers = with lib.maintainers; [NotAShelf];
      mainProgram = "neofetch";
    };
  }
</file>

<file path="parts/pkgs/packages/plymouth-themes/package.nix">
{
  lib,
  stdenv,
  fetchFromGitHub,
  pack ? 2,
  theme ? "green_blocks",
  ...
}:
stdenv.mkDerivation rec {
  pname = "plymouth-themes";
  version = "1.0.0";

  strictDeps = true;

  src = fetchFromGitHub {
    owner = "adi1090x";
    repo = "plymouth-themes";
    rev = "bf2f570bee8e84c5c20caac353cbe1d811a4745f";
    sha256 = "sha256-VNGvA8ujwjpC2rTVZKrXni2GjfiZk7AgAn4ZB4Baj2k=";
  };

  configurePhase = ''
    runHook preConfigure
    mkdir -p $out/share/plymouth/themes
    runHook postConfigure
  '';

  installPhase = ''
    runHook preInstall
    cp -r ./pack_${toString pack}/${theme} $out/share/plymouth/themes
    sed -i 's;/usr/share;${placeholder "out"}/share;g' \
      $out/share/plymouth/themes/${theme}/${theme}.plymouth
    runHook postInstall
  '';

  meta = {
    description = "A collection of plymouth themes ported from Android.";
    inherit (src.meta) homepage;
    license = lib.licenses.gpl3;
    platforms = lib.platforms.linux;
  };
}
</file>

<file path="parts/pkgs/packages/schizofox-startpage/src/.eslintrc.js">
module.exports = {
    env: {
        es2021: true,
    },
    extends: "eslint:recommended",
    overrides: [],
    parserOptions: {
        ecmaVersion: "latest",
        sourceType: "module",
    },
    rules: {
        indent: ["error", 4],
        "linebreak-style": ["error", "unix"],
        quotes: ["error", "double"],
        semi: ["error", "always"],
    },
};
</file>

<file path="parts/pkgs/packages/schizofox-startpage/src/index.html">
<html>
<head>
	<!--<link rel="shortcut icon" href="img\opera-multi-size.ico">-->
	<link rel="stylesheet" type="text/css" href="style.css">
    <title>Startpage</title>
</head>
<body>
<div id=stripe>
<div id="Title">notashelf@nyx ~ $ > ls</div>
	<input
		id="searchbox"
		placeholder="Options: | -a | -h | -m | -w | -y |"
		type="text"
		autofocus="true"
		autocomplete="true">
	</input>
<div id=mainframe>
	<div id=linkblock style="background-image:url(assets/planet.png)">
		<ul>
			<!-- General -->
			<li><a href="https://google.com">> Google</a></li>
			<li><a href="https://youtube.com">> Youtube</a></li>
			<li><a href="https://monkeytype.com/">> Monkeytype</a></li>
		</ul>
	</div>
	<div id=linkblock style="background-image:url(assets/flowers.png);">
		<ul>
			<!-- Social -->
			<li><a href="https://twitter.com/">> Twitter</a></li>
			<li><a href="https://web.telegram.org">> Telegram</a></li>
		</ul>
	</div>
	<div id=linkblock style="background-image:url(assets/logs.png);">
		<ul>
			<!-- Reddit -->
			<li><a href="https://www.reddit.com/r/android">> r/android</a></li>
			<li><a href="https://www.reddit.com/r/sysadmin">> r/sysadmin</a></li>
			<li><a href="https://www.reddit.com/r/linux">> r/linux</a></li>
			<li><a href="https://www.reddit.com/r/unixporn">> r/unixporn</a></li>
			<li><a href="https://www.reddit.com/r/hyprland">> r/hyprland</a></li>
		</ul>
	</div>
	<div id=linkblock style="background-image:url(assets/blossom.png);">
		<ul>
			<!-- 4chan -->
			<li><a href="https://www.4chan.org/a/">> /a/</a></li>
			<li><a href="https://www.4chan.org/ck/">> /ck/</a></li>
			<li><a href="https://www.4chan.org/g/">> /g/</a></li>
			<li><a href="https://www.4chan.org/w/">> /w/</a></li>
			<li><a href="https://www.4chan.org/wg/">> /wg/</a></li>
		</ul>
	</div>
	<div id=linkblock style="background-image:url(assets/malachite.png);">
		<ul>
			<!-- Dev -->
			<li><a href="https://github.com">> Github</a></li>
			<li><a href="http://forum.xda-developers.com">> XDA Developers</a></li>
			<li><a href="https://www.archlinux.org/">> Archwiki</a></li>
			<li><a href="https://go.dev/doc/">> Golang Docs</a></li>
			<li><a href="https://crates.io/">> Crate Registry</a></li>

		</ul>
	</div>
	<div id=linkblock style="background-image:url(assets/sway.png);">
		<!-- Nix -->
		<ul>
			<li>
				<a href="https://nixos.org/manual/nixos/unstable/">> NixOS Manual</a>
			</li>
			<li>
				<a href="https://nixos.org/manual/nixpkgs/ustable/">> Nixpkgs Manual</a>
			</li>
			<li>
				<a href="https://nixos.org/manual/nix/unstable/">> Nix Manual</a>
			</li>
			<li>
				<a href="https://noogle.dev/">> noogle</a>
			</li>
		</ul>
	</div>
</div>
</div>
<div id=footer>
	<a href="secondary.html">o</a>
</div>
</body>
<script src="search.js" type="text/javascript"></script>
</html>
</file>

<file path="parts/pkgs/packages/schizofox-startpage/src/README.md">
# Adding a New Search Provider

## Choose a Unique Identifier

First, decide on a unique identifier for your search provider. This can be a
letter, symbol, or combination thereof, such as `-a`, `!a`, `.a`, `/a`, etc.
Ensure that your chosen identifier does not conflict with existing ones in the
script.

## Modify the Switch Statement

Locate the switch statement within the `search` function. You'll be inserting a
new case block right before the `default:` case. Here's a template for the new
case block:

```javascript
case "-identifier":           // replace "-identifier" with your chosen identifier
    query = query.substr(3);  // Adjust the number inside substr() if your identifier is longer
    // replace the URL with your search provider's URL
    window.location = "https://example.com/search?" + query.replaceChars(" ", "%20");
    break;
```

Make sure to replace `-identifier` with your chosen identifier and adjust the
`substr()` argument if necessary. Also, make sure to replace the example URL
with the actual search URL of your provider.

<!-- deno-fmt-ignore-start -->

> [!NOTE]
> Pay close attention to how the query parameters are structured in the URL.

<!-- deno-fmt-ignore-end -->

## Adjusting the Substring Index

If your chosen identifier is longer than two characters, you'll need to adjust
the argument passed to `substr()` accordingly. The general rule is `n + 1`,
where `n` is the length of your identifier. This will ensure that the entire
identifier and the space following it are removed from the query string.

## Additional Notes

- When determining the search URL for your provider, conduct a few test searches
  on their website. Look for patterns in the URL that indicate how queries are
  passed. You _might_ run into weird edge cases.
</file>

<file path="parts/pkgs/packages/schizofox-startpage/src/search.js">
String.prototype.replaceChars = function (char, replacement) {
    return this.split(char).join(replacement);
};

const searchHandlers = {
    "-y": (query) =>
        `https://www.youtube.com/results?search_query=${query.replaceChars(" ", "+")}`,
    "-w": (query) =>
        `https://en.wikipedia.org/w/index.php?search=${query.replaceChars(" ", "%20")}`,
    "-m": (query) =>
        `http://www.wolframalpha.com/input/?i=${query.replaceChars("+", "%2B")}`,
    "-h": (query) =>
        `http://alpha.wallhaven.cc/search?q=${query}&categories=111&purity=100&resolutions=1920x1080&sorting=relevance&order=desc`,
    default: (query) =>
        `https://search.notashelf.dev/search?q=${query.replaceChars(" ", "+")}&categories=general`,
};

function search(query) {
    const searchPrefix = query.substring(0, 2);
    const handler = searchHandlers[searchPrefix] || searchHandlers["default"];
    window.location = handler(query.substring(3));
}

window.onload = function () {
    const searchInput = document.getElementById("searchbox");
    if (searchInput) {
        searchInput.addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                // Using event.key instead of event.keyCode
                search(this.value);
            }
        });
    }
};
</file>

<file path="parts/pkgs/packages/schizofox-startpage/src/style.css">
body,
#Title,
#searchbox,
#linkblock,
ul,
a:link,
a:visited,
a:hover,
a:active,
a:focus,
#footer a:link,
#footer a:visited,
#footer a:hover,
#footer a:active,
#footer a:focus {
    color: #cdd6f4;
}

body {
    background-color: #11111b;
}

#Title,
#searchbox,
#linkblock {
    font-family: "Malgun Gothic", "Roboto Slab", "Lato", sans-serif;
}

#Title {
    text-align: center;
    margin-top: 75px;
}

#searchbox {
    width: 500px;
    height: 4%;
    border: none;
    border-radius: 2px;
    outline: none;
    padding-left: 15px;
    text-align: left;
    background-color: #1e1e2e;
    font-size: 15px;
    display: block;
    margin: auto;
    margin-top: 50px;
}

#stripe {
    width: 100%;
    vertical-align: middle;
}

#mainframe {
    text-align: center;
    position: absolute;
    top: 25%;
    left: 16%;
    right: 11%;
}

#footer {
    position: absolute;
    bottom: 0;
    right: 0;
    text-align: right;
    padding: 10px;
    font-size: 30%;
}

#linkblock {
    width: 20%;
    height: 140px;
    margin: 30px 30px 40px 25px;
    padding: 0 1px 5px 67px;
    background-position: top 0px left 0px;
    background-repeat: no-repeat;
    display: inline-block;
    vertical-align: top;
    border-left: 3px solid #181825;
    transition: 0.5s;
}

ul {
    list-style-type: none;
    padding-left: 0;
}

a:link,
a:visited,
a:hover,
a:active,
a:focus {
    text-decoration: none;
    font-weight: normal;
}

a:hover {
    color: #b4befe;
}

#footer a:link,
#footer a:visited,
#footer a:hover,
#footer a:active,
#footer a:focus {
    color: #101010;
}
</file>

<file path="parts/pkgs/packages/schizofox-startpage/package.nix">
{
  lib,
  stdenvNoCC,
}: let
  name = "schizofox-startpage";
  version = "0-2024-07-10-unstable";
in
  stdenvNoCC.mkDerivation {
    inherit name version;
    src = builtins.path {
      path = ./src;
      name = "${name}-${version}";
    };

    dontBuild = true;
    installPhase = ''
      runHook preInstall
      mkdir -p $out
      cp -rv ./* $out
      runHook postInstall
    '';

    meta = {
      description = "My personal startpage";
      license = lib.licenses.gpl3Only;
      maintainers = [lib.maintainers.NotAShelf];
    };
  }
</file>

<file path="parts/pkgs/default.nix">
{inputs, ...}: {
  imports = [inputs.flake-parts.flakeModules.easyOverlay];
  perSystem = {
    config,
    pkgs,
    lib,
    ...
  }: {
    overlayAttrs = config.packages;
    packages = lib.packagesFromDirectoryRecursive {
      inherit (pkgs) callPackage;
      directory = ./packages;
    };
  };
}
</file>

<file path="parts/pre-commit/hooks/exiftool.nix">
{
  perSystem = {
    pkgs,
    lib,
    ...
  }: let
    inherit (import ../utils.nix {inherit pkgs lib;}) mkHook;
    inherit (lib.strings) concatStringsSep;

    # https://jade.fyi/blog/pre-commit-exif-safety/
    exiftoolArgs = [
      "-all="
      "--icc_profile:all"
      "-tagsfromfile"
      "@"
      "-orientation"
      "-overwrite_original"
    ];
  in {
    pre-commit.settings = {
      hooks.exiftool = mkHook "exiftool" {
        enable = true;
        types = ["image"];
        entry = "${pkgs.exiftool}/bin/exiftool ${concatStringsSep " " exiftoolArgs}";
      };
    };
  };
}
</file>

<file path="parts/pre-commit/hooks/git-cliff.nix">
{
  perSystem = {
    pkgs,
    lib,
    ...
  }: let
    inherit (import ../utils.nix {inherit pkgs lib;}) mkHook;

    git-cliff-config = pkgs.writeTextFile {
      name = "cliff.toml";
      text = ''
         [changelog]
         # changelog header
         header = """
         # Changelog\n
         """
         # template for the changelog body
         # https://keats.github.io/tera/docs/#introduction
         body = """
         {% if version -%}
             ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
         {% else -%}
             ## [Unreleased]
         {% endif -%}
         {% for group, commits in commits | group_by(attribute="group") %}
             ### {{ group }}
             {% for commit in commits %}
                 - {{ commit.message }}\
             {% endfor %}
         {% endfor %}\n
         """
         # template for the changelog footer
         footer = """
          This changelog has been generated automatically using the custom git-cliff hook for
          [git-hooks.nix](https://github.com/cachix/git-hooks.nix)
         """

         # remove the leading and trailing whitespace from the templates
         trim = true

         [git]
         # parse the commits based on https://www.conventionalcommits.org
         conventional_commits = false

        # filter out the commits that are not conventional
         filter_unconventional = false

        # process each line of a commit as an individual commit
         split_commits = false

        # regex for parsing and grouping commits
         commit_parsers = [
           { message = "^.*: add", group = "New" },
           { message = "^.*: support", group = "New" },
           { message = "^test", group = "New" },
           { message = "^fix", group = "New" },
           { message = "^.*: fix", group = "New" },
           { message = "^.*", group = "Changed" },
           { message = "^.*: remove", group = "Removed" },
           { message = "^.*: delete", group = "Removed" },
         ]

         # protect breaking changes from being skipped due to matching a skipping commit_parser
         protect_breaking_commits = false

         # filter out the commits that are not matched by commit parsers
         filter_commits = true

         # regex for matching git tags
         tag_pattern = "v[0-9].*"

         # regex for skipping tags
         skip_tags = "v0.1.0-beta.1"

         # regex for ignoring tags
         ignore_tags = ""

         # sort the tags topologically
         topo_order = false

         # sort the commits inside sections by oldest/newest order
         sort_commits = "newest"
      '';
    };

    git-cliff-entry = pkgs.writeShellScriptBin "git-cliff" ''
      ${pkgs.git-cliff}/bin/git-cliff \
      --output CHANGELOG.md \
      --config ${git-cliff-config.outPath}
    '';
  in {
    pre-commit.settings = {
      hooks.git-cliff = mkHook "git-cliff" {
        enable = true;
        excludes = ["CHANGELOG.md"];
        language = "system";
        pass_filenames = false;
        entry = "${git-cliff-entry}/bin/git-cliff";
      };
    };
  };
}
</file>

<file path="parts/pre-commit/hooks/prettier.nix">
{
  perSystem = {
    pkgs,
    lib,
    ...
  }: let
    inherit (import ../utils.nix {inherit pkgs lib;}) mkHook;
  in {
    pre-commit.settings = {
      hooks.prettier = mkHook "prettier" {
        enable = true;
        settings = {
          binPath = "${pkgs.prettierd}/bin/prettierd";
          write = true;
        };
      };
    };
  };
}
</file>

<file path="parts/pre-commit/hooks/typos.nix">
{
  perSystem = {
    pkgs,
    lib,
    ...
  }: let
    inherit (lib.lists) concatLists;
    inherit (import ../utils.nix {inherit pkgs lib;}) toTOML mkHook;

    typosConfig = toTOML "config.toml" {
      default.extend-words = {
        "ags" = "ags";
        "thumbnailers" = "thumbnailers";
        "flate" = "flate";
        "noice" = "noice";
        "Pn" = "Pn";
        "nitch" = "nitch";
        "fo" = "fo";
        "muh" = "muh";
        "HDA" = "HDA";
        "CROS" = "CROS";
        "ba" = "ba";
      };
    };
  in {
    pre-commit.settings.hooks.typos = let
      ignoredFiles = [
        "CHANGELOG.md"
        "source.json"
        "keys.nix"
        "autocmds.lua"
      ];

      ignoredPatterns = [
        "r'.+\.zsh$'"
        "r'.+\.age$'"
      ];

      excludedFiles = concatLists [ignoredFiles ignoredPatterns];
    in
      mkHook "typos" {
        enable = true;
        excludes = excludedFiles;
        settings = {
          configPath = typosConfig.outPath;
        };
      };
  };
}
</file>

<file path="parts/pre-commit/default.nix">
{inputs, ...}: {
  imports = [
    inputs.git-hooks.flakeModule

    ./hooks/exiftool.nix
    ./hooks/prettier.nix
    ./hooks/typos.nix

    # Disabled hooks
    # ./hooks/git-cliff.nix
  ];

  perSystem = {
    inputs',
    pkgs,
    lib,
    ...
  }: let
    inherit (import ./utils.nix {inherit pkgs lib;}) excludes mkHook;
  in {
    pre-commit = {
      check.enable = true;

      settings = {
        # inherit the global exclude list
        inherit excludes;

        # hooks that we want to enable
        hooks = {
          luacheck = mkHook "luacheck" {enable = true;};
          treefmt = mkHook "treefmt" {enable = true;};

          alejandra = mkHook "Alejandra" {
            enable = true;
            package = inputs'.nyxexprs.packages.alejandra-custom;
          };

          actionlint = mkHook "actionlint" {
            enable = true;
            files = "^.github/workflows/"; # only trigger in .github/workflows
          };

          lychee = mkHook "lychee" {
            enable = true;
            excludes = ["^(?!.*\.md$).*"]; # ignore non-markdown
          };

          editorconfig-checker = mkHook "editorconfig" {
            enable = false;
            always_run = true;
          };
        };
      };
    };
  };
}
</file>

<file path="parts/pre-commit/utils.nix">
{
  pkgs,
  lib,
  ...
}: let
  inherit (lib.attrsets) recursiveUpdate;

  # Files to be ignored by all hooks.
  excludes = ["LICENSE" "flake.lock" "\.svg$" "\.age$" "\.sh$"];

  # Helper function to generate TOML configuration for pre-commit hooks
  # that read TOML configurations.
  toTOML = name: (pkgs.formats.toml {}).generate "${name}";

  # Recursively updates a hook configuration set with the preset
  # configuration options.
  presetConfigFor = name: {
    inherit excludes;
    description = "pre-commit hook for ${name}";
    fail_fast = true; # running hooks if this hook fails
    verbose = true;
  };

  # Note: hookConfig should be *after* presetConfig to allow overriding
  # preset defaults. If this list is flipped, values present in presetConfig
  # will override hookConfig.
  mkHook = name: hookConfig: recursiveUpdate (presetConfigFor name) hookConfig;
in {
  inherit toTOML excludes mkHook;
}
</file>

<file path="parts/templates/c/src/main.cpp">
#include <iostream>

int main() {
  std::cout << "Hello, World!";

  return 0;
}
</file>

<file path="parts/templates/c/.editorconfig">
root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true

[*.c]
ident_style = space
ident_size = 4

[Makefile*]
ident_style = tab
ident_size = 4
</file>

<file path="parts/templates/c/.gitignore">
# ignore build artifacts
result
build
</file>

<file path="parts/templates/c/default.nix">
{clangStdenv}:
clangStdenv.mkDerivation {
  pname = "sample-c-cpp";
  version = "0.0.1";

  src = ./.;

  makeFlags = ["PREFIX=$(out)"];
}
</file>

<file path="parts/templates/c/flake.nix">
{
  description = "C/C++ Project Template";
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = {
    self,
    nixpkgs,
    ...
  }: let
    systems = ["x86_64-linux" "aarch64-linux"];
    forEachSystem = nixpkgs.lib.genAttrs systems;

    pkgsForEach = nixpkgs.legacyPackages;
  in {
    packages = forEachSystem (system: {
      default = pkgsForEach.${system}.callPackage ./default.nix {};
    });

    devShells = forEachSystem (system: {
      default = pkgsForEach.${system}.callPackage ./shell.nix {};
    });
  };
}
</file>

<file path="parts/templates/c/Makefile">
PREFIX ?= /usr/local # this is overridden by the derivation makeFlags
BIN_DIR ?= $(PREFIX)/bin


TARGET_EXEC ?= foo-bar
BUILD_DIR ?= ./build
SRC_DIRS ?= ./src

SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c)
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
DEPS := $(OBJS:.o=.d)

INC_DIRS := $(shell find $(SRC_DIRS) -type d)
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

CPPFLAGS ?= $(INC_FLAGS) -MMD -MP

$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	$(CXX) $(OBJS) -o $@ $(LDFLAGS)

# c source
$(BUILD_DIR)/%.c.o: %.c
	mkdir -p $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# c++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
	mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

.PHONY: clean install run

clean:
	rm -r $(BUILD_DIR)

install: $(BUILD_DIR)/$(TARGET_EXEC)
	install -Dt $(BIN_DIR) $<

run: $(BUILD_DIR)/$(TARGET_EXEC)
	./$<

-include $(DEPS)
</file>

<file path="parts/templates/c/shell.nix">
{
  callPackage,
  clang-tools,
  gnumake,
  cmake,
  bear,
  libcxx,
  cppcheck,
  llvm,
  gdb,
  glm,
  SDL2,
  SDL2_gfx,
}: let
  mainPkg = callPackage ./default.nix {};
in
  mainPkg.overrideAttrs (oa: {
    nativeBuildInputs =
      [
        clang-tools # fix headers not found
        gnumake # builder
        cmake # another builder
        bear # bear.
        libcxx # stdlib for cpp
        cppcheck # static analysis
        llvm.lldb # debugger
        gdb # another debugger
        llvm.libstdcxxClang # LSP and compiler
        llvm.libcxx # stdlib for C++
        # libs
        glm
        SDL2
        SDL2_gfx
      ]
      ++ (oa.nativeBuildInputs or []);
  })
</file>

<file path="parts/templates/go/cmd/main.go">
package main

import "fmt"

func main() {
	fmt.Println("Hello, World!")
}
</file>

<file path="parts/templates/go/.envrc">
use flake
</file>

<file path="parts/templates/go/default.nix">
{buildGoModule}:
buildGoModule {
  pname = "sample-go";
  version = "0.0.1";

  src = ./.;

  vendorHash = "";

  ldflags = ["-s" "-w"];
}
</file>

<file path="parts/templates/go/flake.nix">
{
  description = "Golang Project Template";
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = {
    self,
    nixpkgs,
  }: let
    systems = ["x86_64-linux" "aarch64-linux"];
    forEachSystem = nixpkgs.lib.genAttrs systems;

    pkgsForEach = nixpkgs.legacyPackages;
  in rec {
    packages = forEachSystem (system: {
      default = pkgsForEach.${system}.callPackage ./default.nix {};
    });

    devShells = forEachSystem (system: {
      default = pkgsForEach.${system}.callPackage ./shell.nix {};
    });

    hydraJobs = packages;
  };
}
</file>

<file path="parts/templates/go/shell.nix">
{
  callPackage,
  go,
  gopls,
  delve,
}: let
  mainPkg = callPackage ./default.nix {};
in
  mainPkg.overrideAttrs (oa: {
    nativeBuildInputs =
      [
        delve
        go
        gopls
      ]
      ++ (oa.nativeBuildInputs or []);
  })
</file>

<file path="parts/templates/node/src/index.ts">
console.log("Hello world!");
</file>

<file path="parts/templates/node/.gitignore">
result
build
node_modules
</file>

<file path="parts/templates/node/default.nix">
{
  lib,
  buildNpmPackage,
}:
buildNpmPackage {
  pname = "foo-bar";
  version = "0.1.0";

  src = ./.;

  npmDepsHash = lib.fakeSha256;
}
</file>

<file path="parts/templates/node/flake.nix">
{
  description = "NodeJS Project Template";
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = {
    self,
    nixpkgs,
  }: let
    systems = ["x86_64-linux" "aarch64-linux"];
    forEachSystem = nixpkgs.lib.genAttrs systems;

    pkgsForEach = nixpkgs.legacyPackages;
  in rec {
    packages = forEachSystem (system: {
      default = pkgsForEach.${system}.callPackage ./default.nix {};
    });

    devShells = forEachSystem (system: {
      default = pkgsForEach.${system}.callPackage ./shell.nix {};
    });

    hydraJobs = packages;
  };
}
</file>

<file path="parts/templates/node/package.json">
{
	"name": "sample-nodejs",
	"version": "0.0.1",
	"description": "Sample node program",
	"bin": {
		"sample-node": "build/index.js"
	},
	"scripts": {
		"build": "tsc",
		"start": "npm run build && node build/index.js"
	},
	"author": "NotAShelf",
	"license": "MIT",
	"devDependencies": {
		"@types/node": "^20.1.2",
		"typescript": "^5.0.4",
		"typescript-language-server": "^3.3.2"
	}
}
</file>

<file path="parts/templates/node/shell.nix">
{
  callPackage,
  writeShellScriptBin,
  eslint_d,
  prettierd,
}: let
  mainPkg = callPackage ./default.nix {};
  mkNpxAlias = name: writeShellScriptBin name "npx ${name} \"$@\"";
in
  mainPkg.overrideAttrs (oa: {
    nativeBuildInputs =
      [
        eslint_d
        prettierd
        (mkNpxAlias "tsc")
        (mkNpxAlias "tsserver")
      ]
      ++ (oa.nativeBuildInputs or []);

    shellHook = ''
      eslint_d start # start eslint daemon
      eslint_d status # inform user about eslint daemon status
    '';
  })
</file>

<file path="parts/templates/node/tsconfig.json">
{
	"compilerOptions": {
		"target": "es2016",
		"lib": ["es6"],
		"module": "commonjs",
		"rootDir": "src",
		"resolveJsonModule": true,
		"allowJs": true,
		"outDir": "build",
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"strict": true,
		"noImplicitAny": true,
		"skipLibCheck": true
	}
}
</file>

<file path="parts/templates/python/.envrc">
use flake . --builders ""
</file>

<file path="parts/templates/python/default.nix">
{
  lib,
  python3Packages,
  doCheck ? false,
  ...
}:
python3Packages.buildPythonApplication {
  pname = "sample-python-project";
  version = "0.0.1";

  src = ./.;

  propagatedBuildInputs = with python3Packages; [];

  nativeCheckInputs = [
    python3Packages.pytest
  ];

  checkPhase = lib.optionals doCheck ''
    runHook preCheck
    pytest
    runHook postCheck
  '';
}
</file>

<file path="parts/templates/python/flake.nix">
{
  description = "Python Project Template";
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = {
    self,
    nixpkgs,
  }: let
    systems = ["x86_64-linux" "aarch64-linux"];
    forEachSystem = nixpkgs.lib.genAttrs systems;

    pkgsForEach = nixpkgs.legacyPackages;
  in rec {
    packages = forEachSystem (system: {
      default = pkgsForEach.${system}.callPackage ./default.nix {};
    });

    devShells = forEachSystem (system: {
      default = pkgsForEach.${system}.callPackage ./shell.nix {};
    });

    hydraJobs = packages;
  };
}
</file>

<file path="parts/templates/python/shell.nix">
{
  callPackage,
  mkShellNoCC,
  python3,
  ...
}: let
  defaultPackage = callPackage ./default.nix;
in
  mkShellNoCC {
    packages = [
      (python3.withPackages defaultPackage.propagatedBuildInputs)
    ];
  }
</file>

<file path="parts/templates/rust/src/main.rs">
fn main() {
    println!("Hello, world!");
}
</file>

<file path="parts/templates/rust/Cargo.toml">
[package]
name = "sample-rust"
version = "0.0.1"
license = "MIT"
edition = "2021"
</file>

<file path="parts/templates/rust/default.nix">
{rustPlatform}:
rustPlatform.buildRustPackage {
  pname = "sample-rust";
  version = "0.0.1";

  src = ./.;
  cargoLock.lockFile = ./Cargo.lock;
}
</file>

<file path="parts/templates/rust/flake.nix">
{
  description = "Rust Project Template";
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = {
    self,
    nixpkgs,
  }: let
    systems = ["x86_64-linux" "aarch64-linux"];
    forEachSystem = nixpkgs.lib.genAttrs systems;

    pkgsForEach = nixpkgs.legacyPackages;
  in rec {
    packages = forEachSystem (system: {
      default = pkgsForEach.${system}.callPackage ./default.nix {};
    });

    devShells = forEachSystem (system: {
      default = pkgsForEach.${system}.callPackage ./shell.nix {};
    });

    hydraJobs = packages;
  };
}
</file>

<file path="parts/templates/rust/shell.nix">
{
  callPackage,
  rust-analyzer,
  rustfmt,
  clippy,
  cargo,
}: let
  mainPkg = callPackage ./default.nix {};
in
  mainPkg.overrideAttrs (oa: {
    nativeBuildInputs =
      [
        # Additional rust tooling
        rust-analyzer
        rustfmt
        clippy
        cargo
      ]
      ++ (oa.nativeBuildInputs or []);
  })
</file>

<file path="parts/templates/default.nix">
_: {
  flake.templates = {
    c = {
      path = ./c; # C/C++
      description = "Development environment for C/C++";
    };

    rust = {
      path = ./rust; # Rust
      description = "Development environment for Rust";
    };

    node = {
      path = ./node; # NodeJS
      description = "Development environment for NodeJS";
    };

    go = {
      path = ./go; # golang
      description = "Development environment for Golang";
    };
  };
}
</file>

<file path="parts/args.nix">
{inputs, ...}: let
  # Add `pins` to self so that the flake may refer it freely by accessing
  # `pins` in an argset (e.g. `{pkgs, lib, pins, ...}`).
  # Pinned sources can be updated via `npins update` in `flake/`
  # which will automatically bump all sources in the `npins`
  # directory relatvie to this file.
  pinnedSources = import ./npins;

  # Add a collection of SSH keys to the keys so that
  #  1. My public keys are more easily obtainable from outside
  #  2. It's easy to share key names and values internally especially
  #  for setting them for users, services, etc.
  publicKeys = import ./keys.nix;
in {
  perSystem = {
    config,
    system,
    ...
  }: {
    # Configure nixpkgs locally and expose it as <flakeRef>.legacyPackages.
    # This will then be consumed to override flake-parts' pkgs argument
    # to make sure pkgs instances in flake-parts modules are all referring
    # to the same configuration instance - this one.
    legacyPackages = import inputs.nixpkgs {
      inherit system;
      config = {
        allowUnfree = true;
        allowUnsupportedSystem = true;
      };

      overlays = [inputs.self.overlays.default];
    };

    _module.args = {
      # Pass `pins` and `keys` to flake-parts' module args. This allows
      # parts of the module system to refer to them in a more concise
      # way than importing them directly.
      pins = pinnedSources;
      keys = publicKeys;

      # Unify all instances of nixpkgs into a single `pkgs` set
      # Wthat includes our own overlays within `perSystem`. This
      # is not done by flake-parts, so we do it ourselves.
      # See:
      #  <https://github.com/hercules-ci/flake-parts/issues/106#issuecomment-1399041045>
      pkgs = config.legacyPackages;
    };
  };

  flake = {
    pins = pinnedSources;
    keys = publicKeys;
  };
}
</file>

<file path="parts/ci.nix">
{self, ...}: let
  inherit (self) lib;
  inherit (lib) mkGithubMatrix;
  inherit (lib.attrsets) getAttrs filterAttrs;
in {
  flake.githubActions = mkGithubMatrix {
    checks = getAttrs ["x86_64-linux"] (
      filterAttrs (name: _: name != "present") self.packages
    );
  };
}
</file>

<file path="parts/default.nix">
{
  # Explicitly import "parts" of a flake to compose it modularly. This
  # allows me to import each part to construct the "final flake" instead
  # of declaring everything from a single, convoluted file.
  # By convention, things that would usually go to flake.nix should
  # have its own file in the `flake/` directory.
  imports = [
    ./apps # "Runnables" exposed by the flake, used with `nix run .#<appName`
    ./checks # Checks that will be built when `nix flake check is run`
    ./lib # Extensible extended library built on top of `nixpkgs.lib`
    ./modules # NixOS and Home-Manager modules provided by the flake
    ./pkgs # Per-system packages exposed by the flake
    ./pre-commit # Pre-commit hooks, to be ran before changes are committed.
    ./templates # Templates for initiating flakes with `nix flake init -t ...`

    ./args.nix # Args for the flake, consumed or propagated to parts by flake-parts
    ./ci.nix # GitHub actions matrices generated via Nix
    ./deployments.nix # deploy-rs configurations for active hosts
    ./hydra.nix # Hydra build jobs to be evaluated on each commit
    ./fmt.nix # Formatter configurations via Treefmt
    ./iso-images.nix # Build recipes for local installation media
    ./shell.nix # devShells exposed by the flake
  ];
}
</file>

<file path="parts/deployments.nix">
{
  self,
  lib,
  ...
}: let
  inherit (lib) mkNode;
  inherit (lib.lists) elem;
  inherit (lib.attrsets) mapAttrs filterAttrs;

  includedNodes = ["enyo" "helios"];
  finalNodes = mapAttrs mkNode (filterAttrs (name: _: elem name includedNodes) self.nixosConfigurations);
in {
  flake.deploy = {
    autoRollback = true;
    magicRollback = true;
    nodes = finalNodes;
  };

  perSystem = {
    inputs',
    system,
    pkgs,
    ...
  }: {
    # evaluation of deployChecks is slow
    # checks = mapAttrs (_: deployLib: deployLib.deployChecks self.deploy) inputs.deploy-rs.lib;

    apps.deploy = {
      type = "app";
      program = pkgs.writeShellScriptBin "deploy" ''
        local system=$1;

        echo "Deploying to $system...";
        ${inputs'.deploy-rs.packages.deploy-rs}/bin/deploy --skip-checks $system
      '';
    };
  };
}
</file>

<file path="parts/fmt.nix">
{inputs, ...}: {
  imports = [inputs.treefmt-nix.flakeModule];
  perSystem = {
    inputs',
    config,
    pkgs,
    lib,
    ...
  }: {
    # Provide a formatter package for `nix fmt`. Setting this
    # to `config.treefmt.build.wrapper` will use the treefmt
    # package wrapped with my desired configuration.
    formatter = config.treefmt.build.wrapper;

    treefmt = {
      projectRootFile = "flake.nix";
      enableDefaultExcludes = true;

      settings = {
        global.excludes = ["*.age" "*.envrc" "parts/templates" "*/sources.json"];
        formatter.yamlfmt = {
          includes = [".github/workflows/*.{yaml,yml}"];
          excludes = ["*/.eslintrc.yml" "*/pnpm-lock.yaml"];
        };
      };

      # Most often than not, most of those checks will not run on baremetal. Which
      # means that we can afford to be generous with what formatters we provide.
      programs = {
        taplo.enable = true;
        yamlfmt = {
          enable = true;
          package = let
            # This is, from what I can tell, is the only way to be able to
            # pass a config file to formatters in treefmt. Horrible, HORRIBLE
            # design choice.
            config = pkgs.writeText "yamlfmt-config.yaml" (builtins.toJSON {
              line_ending = "lf"; # no windows compat, sorry
              formatter = {
                type = "basic";
                retain_line_breaks = true;
              };
            });
          in
            # Write a script that calls for yamlfmt with the custom config
            # written to the file in store.
            pkgs.writeShellScriptBin "yamlfmt-custom-config" ''
              ${lib.getExe pkgs.yamlfmt} -conf ${config.outPath}
            '';
        };

        alejandra = {
          enable = true;
          package = inputs'.nyxexprs.packages.alejandra-custom;
        };

        shellcheck.enable = true; # cannot be configured, errors on basic bash convention

        prettier = {
          enable = true;
          package = pkgs.prettierd;
          settings.editorconfig = true;
        };

        shfmt = {
          enable = true;
          # https://flake.parts/options/treefmt-nix.html#opt-perSystem.treefmt.programs.shfmt.indent_size
          indent_size = 2; # set to 0 to use tabs
        };
      };
    };
  };
}
</file>

<file path="parts/hydra.nix">
{
  self,
  lib,
  ...
}: let
  inherit (builtins) mapAttrs;
  inherit (lib.trivial) const;
  inherit (lib.attrsets) mapAttrs' foldlAttrs filterAttrs recursiveUpdate nameValuePair;

  toHydraJob =
    foldlAttrs
    (jobset: system: attrs:
      recursiveUpdate jobset
      (mapAttrs (const (drv: {${system} = drv;}))
        (filterAttrs (name: const (name != "default")) attrs)))
    {};

  # This is a simple-ish way to generate a flake that has a jobset for each
  # nixosConfiguration available in the schema. Very costy though.
  configJobs = mapAttrs' (name: config: nameValuePair "nixos-${name}" config.config.system.build.toplevel) self.nixosConfigurations;
in {
  flake.hydraJobs = {
    packages = toHydraJob self.packages;
    checks = toHydraJob self.checks;

    # FIXME: opensnitch uses an IFD, which is disallowed in hydraJobs.
    # inherit configJobs;
  };
}
</file>

<file path="parts/iso-images.nix">
{
  inputs,
  self,
  ...
}: let
  installerModule = "${inputs.nixpkgs}/nixos/modules/installer/sd-card/sd-image-aarch64-new-kernel-no-zfs-installer.nix";
in {
  # ISO images based on available hosts. We avoid basing ISO images
  # on active (i.e. desktop) hosts as they likely have secrets set up.
  # Images below are designed specifically to be used as live media
  # and can be built with `nix build .#images.<hostname>`
  # alternatively hosts can be built with `nix build .#nixosConfigurations.hostName.config.system.build.isoImage`
  flake.images = let
    gaea = self.nixosConfigurations."gaea";
    erebus = self.nixosConfigurations."erebus";
    atlas = self.nixosConfigurations."atlas".extendModules {modules = [installerModule];};
  in {
    # Installation iso
    gaea = gaea.config.system.build.isoImage;

    # air-gapped VM
    erebus = erebus.config.system.build.isoImage;

    # Raspberry Pi 400
    atlas = atlas.config.system.build.sdImage;
  };
}
</file>

<file path="parts/keys.nix">
let
  inherit (builtins) attrValues concatLists foldl' map;

  # Users
  users = {
    notashelf = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIABG2T60uEoq4qTZtAZfSBPtlqWs2b4V4O+EptQ6S/ru";
  };

  # Hosts
  machines = {
    helios = ["ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB8XojSEerAwKwXUPIZASZ5sXPPT7v/26ONQcH9zIFK+"];
    enyo = ["ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG+rKLdFg8Riw1SbwHLbKxGDf+NaOZQPc4ElEN/ra6eu"];
    hermes = ["ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEPShBrtrNRNaYUtIWhn0RHDr759mMcfZjqjJRAfCnWU"];
    icarus = ["ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHWh3pRk2edQkELicwkYFVGKy90sFlluECfTasjCQr1m"];
    leto = ["ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCvw6R8RS6e1tpf5rnFMv+xWQsNk082wRlwTaaFKmIrx0iotP1nE5Tux+uKhx1u71se3LwtzvxvaAcZgqnowq1tZWCeqDWcz7uanDogsmjc+vS54P//gmhWAeAX9ClHIdFBpZSc1+R+aKws9KjJQBOUZi9/07f77AjmxbSDMVeCv5mMF++WjKlE8oJKaa2lLyhxeF5mr2GoNfCkF7FknTrX+mZ6EqW3g0FHHbhqCim4fdTZUberja/W4m2UwWXewgfTUVNowONB8035/BWbBwnxK8i2f2cqdXqF1SVN5SK14Bq7etIc0lJVmLcPz+R6kZPWu6NBF0D92eGBozdzCuJWy/NO/Y6G5Y2tSdFAkkTlpJPM4PA4pQP2XHuohgYOceMtDb4N75ZC10uNiDR/DnwVIa1dzjFQ1ZMfgZ94EwGd9Vy0oklQGrbkAXHA+DPFnc3PTuRUyMgOavI2RxIgYT8LQYWpxc0wGRiBXY/CqbaKSWERxxSlu4Js/0MfRq0GVyxAqE1Lg6C4oodXB4a6j/0/nF4jWLMxVTx3LH4hljV9o1JKbf3sApv9gUoF4Kwv3dv19iJhjcQLF9gKV8qCeIRC5Dp6cV0XI/IhmAMp5rCOVBqIUxYPWJBZYCatxS3gwVGqQPo/X6OLx35C5N5IVRVYd+D59s1crKTDvkZpGH1zOw=="];
  };

  # Shorthand aliases for various collections of host keys
  servers = concatLists (map (host: machines.${host}) ["helios" "icarus" "leto"]);
  workstations = concatLists (map (host: machines.${host}) ["enyo" "hermes" "icarus"]);

  all = foldl' (a: b: concatLists [a b]) [users.notashelf] (attrValues machines);
in {
  inherit (users) notashelf;
  inherit (machines) helios enyo hermes icarus leto;
  inherit servers workstations all;

  # Additional utilities
  mkGlobal = list: concatLists [list users.notashelf];
}
</file>

<file path="parts/shell.nix">
{
  perSystem = {
    inputs',
    config,
    pkgs,
    ...
  }: {
    devShells.default = pkgs.mkShellNoCC {
      name = "nyx";
      meta.description = ''
        The default development shell for my NixOS configuration
      '';

      # Set up pre-commit hooks when user enters the shell.
      shellHook = ''
        ${config.pre-commit.installationScript}
      '';

      # Tell Direnv to shut up.
      DIRENV_LOG_FORMAT = "";

      # Receive packages from treefmt's configured devShell.
      inputsFrom = [config.treefmt.build.devShell];
      packages = [
        # Packages provided by flake inputs
        inputs'.agenix.packages.default # agenix CLI for secrets management
        inputs'.deploy-rs.packages.default # deploy-rs CLI for easy deployments

        # Packages provided by flake-parts modules
        config.treefmt.build.wrapper # Quick formatting tree-wide with `treefmt`

        # Packages from nixpkgs, for Nix, Flakes or local tools.
        pkgs.git # flakes require Git to be installed, since this repo is version controlled
        pkgs.nodejs # building ags and configuring eslint_d will require nodejs
      ];
    };
  };
}
</file>

<file path=".editorconfig">
root = true

[*]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 4
insert_final_newline = true
tab_width = 4
trim_trailing_whitespace = true

[*.md]
indent_style = space
indent_size = 2
trim_trailing_whitespace = false

[*.lua]
indent_style = space
indent_size = 2

[*.{nix,sh,yml,yaml}]
indent_style = space
indent_size = 2
tab_width = 2

[*.{js,ts,lock,diff,patch,age}]
indent_style = unset
indent_size = unset
insert_final_newline = unset
trim_trailing_whitespace = unset
end_of_line = unset
</file>

<file path=".envrc">
if ! has nix_direnv_version || ! nix_direnv_version 3.0.5; then
    source_url "https://raw.githubusercontent.com/nix-community/nix-direnv/3.0.5/direnvrc" "sha256-RuwIS+QKFj/T9M2TFXScjBsLR6V3A17YVoEW/Q6AZ1w="
fi


# Watch flake.nix for changes.
watch_file flake.nix

# Watch parts of the directory for changes. This is
# useful for tracking a flake-parts composed flake
# that spans across multiple directories, as seen
# below.
watch_dir parts
watch_dir hosts

# Disable builders for trivial flake actions, such as direnv reload.
# Helps us reduce overhead introduced by a redundant network request.
if ! use flake . --substituters "https://cache.nixos.org" --builders ""; then
  echo "Default shell could not be loaded." >&2
fi
</file>

<file path=".git-blame-ignore-revs">
# Run this command to always ignore formatting commits in `git blame`
# git config blame.ignoreRevsFile .git-blame-ignore-revs
# See:
#  <https://www.stefanjudis.com/today-i-learned/how-to-exclude-commits-from-git-blame/>

# Rotation 2024-06-28
555a82b90b938505f8baeadc0ff0fd4aed375904

# Rotation 2024-07-04
1cd075607c254f11e3ca5fad7618d63631113913

# Treefmt 2024-07-10
753ff04878caefbad421d3d0fbeff9cf7f8c9309
</file>

<file path=".gitattributes">
# Always use LF line endings so that if a repo is accessed
# in Unix via a file share from Windows, the scripts will
# work as expected.
*.sh text eol=lf

# Don't diff churn.
*.envrc
*.git-blame-ignore-revs
*.lock -diff
*LICENSE -diff

# Try to get markdown files to be treated as markdown
# by linguist - ** prefix is for all subdirectories.
*.md linguist-detectable
*.md linguist-language=Markdown

# Age encrypted secrets should be treated as binaries
# as a layer of obscurity. Though, this is not at all
# a guarantee of any security.
*.age binary
*.age linguist-detectable=false
*.age linguist-documentation=false

# luacheckrc is lua, tell Git to treat it as such.
.luacheckrc linguist-detectable
.luacheckrc linguist-language=Lua

# Git Configuration files
*.gitattributes linguist-detectable=false
*.gitattributes linguist-documentation=false
*.gitignore linguist-detectable=false
*.gitignore linguist-documentation=false
*.editorconfig linguist-detectable=false
*.editorconfig linguist-documentation=false
</file>

<file path=".gitignore">
# Ignore nix stuff
result
.direnv/

# Ignore VM stuff
*.qcow2

# Ignore pre-commit config
.pre-commit-config.yaml
</file>

<file path=".luacheckrc">
std = "min"
files["**/neovim/**/*.lua"] = {
	read_globals = {
		vim = {
			fields = {
				api = {
					other_fields = true,
					read_only = true,
				},
				cmd = {
					other_fields = true,
					read_only = true,
				},
				defer_fn = {
					read_only = true,
				},
				diagnostic = {
					other_fields = true,
					read_only = true,
				},
				fn = {
					other_fields = true,
					read_only = true,
				},
				fs = {
					other_fields = true,
					read_only = true,
				},
				g = {
					other_fields = true,
					read_only = false,
				},
				keymap = {
					other_fields = true,
					read_only = true,
				},
				loop = {
					other_fields = true,
					read_only = true,
				},
				lsp = {
					fields = {
						handlers = {
							other_fields = true,
							read_only = false,
						}
					},
					other_fields = true,
					read_only = true,
				},
				notify = {
					read_only = false,
				},
				o = {
					other_fields = true,
					read_only = false,
				},
				opt = {
					other_fields = true,
					read_only = false,
				},
				v = {
					other_fields = true,
					read_only = true,
				},
			},
		},
	},
}
</file>

<file path=".luarc.json">
{
	"$schema": "https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json",
	"diagnostics": {
		"diagnostics.globals": ["vim"],
		"groupFileStatus": { "strict": "Opened", "strong": "Opened" },
		"groupSeverity": { "strong": "Warning", "strict": "Warning" },
		"unusedLocalExclude": ["_*"],
		"disable": ["luadoc-miss-see-name"]
	}
}
</file>

<file path=".neoconf.json">
{
	"neodev": {
		"library": {
			"enabled": true,
			"plugins": ["neoconf.nvim", "nvim-lspconfig", "plenary.nvim"]
		}
	},
	"neoconf": {
		"plugins": {
			"lua_ls": {
				"enabled": true
			}
		}
	},
	"lspconfig": {
		"sumneko_lua": {}
	}
}
</file>

<file path="flake.lock">
{
  "nodes": {
    "agenix": {
      "inputs": {
        "darwin": [],
        "home-manager": [
          "home-manager"
        ],
        "nixpkgs": [
          "nixpkgs-small"
        ],
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1720546205,
        "narHash": "sha256-boCXsjYVxDviyzoEyAk624600f3ZBo/DKtUdvMTpbGY=",
        "owner": "ryantm",
        "repo": "agenix",
        "rev": "de96bd907d5fbc3b14fc33ad37d1b9a3cb15edc6",
        "type": "github"
      },
      "original": {
        "owner": "ryantm",
        "repo": "agenix",
        "type": "github"
      }
    },
    "ags": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ],
        "systems": "systems_2"
      },
      "locked": {
        "lastModified": 1721306136,
        "narHash": "sha256-VKPsIGf3/a+RONBipx4lEE4LXG2sdMNkWQu22LNQItg=",
        "owner": "Aylur",
        "repo": "ags",
        "rev": "344ea72cd3b8d4911f362fec34bce7d8fb37028c",
        "type": "github"
      },
      "original": {
        "owner": "Aylur",
        "repo": "ags",
        "type": "github"
      }
    },
    "anyrun": {
      "inputs": {
        "flake-parts": "flake-parts",
        "nixpkgs": "nixpkgs",
        "systems": "systems_3"
      },
      "locked": {
        "lastModified": 1721135360,
        "narHash": "sha256-ZhSA0e45UxiOAjEVqkym/aULh0Dt+KHJLNda7bjx9UI=",
        "owner": "anyrun-org",
        "repo": "anyrun",
        "rev": "c6101a31a80b51e32e96f6a77616b609770172e0",
        "type": "github"
      },
      "original": {
        "owner": "anyrun-org",
        "repo": "anyrun",
        "type": "github"
      }
    },
    "anyrun-nixos-options": {
      "inputs": {
        "flake-parts": [
          "flake-parts"
        ],
        "nixpkgs": "nixpkgs_2"
      },
      "locked": {
        "lastModified": 1704902043,
        "narHash": "sha256-YL5ANmzWJAe3IhsuqTccxZIdkQX0tYt9dt9oNw0QwAY=",
        "owner": "n3oney",
        "repo": "anyrun-nixos-options",
        "rev": "aed824957538e65dc3bea414aadbe5e2de611f49",
        "type": "github"
      },
      "original": {
        "owner": "n3oney",
        "repo": "anyrun-nixos-options",
        "type": "github"
      }
    },
    "aquamarine": {
      "inputs": {
        "hyprutils": [
          "hyprland",
          "hyprutils"
        ],
        "hyprwayland-scanner": [
          "hyprland",
          "hyprwayland-scanner"
        ],
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721571743,
        "narHash": "sha256-hat7wggtDISBJD8kTo5MTrT+IsY/Ha2MwgjmqqijoCA=",
        "owner": "hyprwm",
        "repo": "aquamarine",
        "rev": "601f6cf95cbe4fef02dc7faf34bba58566c914e9",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "aquamarine",
        "type": "github"
      }
    },
    "atticd": {
      "inputs": {
        "crane": "crane",
        "flake-compat": "flake-compat",
        "flake-utils": "flake-utils",
        "nixpkgs": [
          "nixpkgs-small"
        ],
        "nixpkgs-stable": "nixpkgs-stable"
      },
      "locked": {
        "lastModified": 1720542474,
        "narHash": "sha256-aKjJ/4l2I9+wNGTaOGRsuS3M1+IoTibqgEMPDikXm04=",
        "owner": "zhaofengli",
        "repo": "attic",
        "rev": "6139576a3ce6bb992e0f6c3022528ec233e45f00",
        "type": "github"
      },
      "original": {
        "owner": "zhaofengli",
        "repo": "attic",
        "type": "github"
      }
    },
    "blobs": {
      "flake": false,
      "locked": {
        "lastModified": 1604995301,
        "narHash": "sha256-wcLzgLec6SGJA8fx1OEN1yV/Py5b+U5iyYpksUY/yLw=",
        "owner": "simple-nixos-mailserver",
        "repo": "blobs",
        "rev": "2cccdf1ca48316f2cfd1c9a0017e8de5a7156265",
        "type": "gitlab"
      },
      "original": {
        "owner": "simple-nixos-mailserver",
        "repo": "blobs",
        "type": "gitlab"
      }
    },
    "crane": {
      "inputs": {
        "nixpkgs": [
          "atticd",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1717025063,
        "narHash": "sha256-dIubLa56W9sNNz0e8jGxrX3CAkPXsq7snuFA/Ie6dn8=",
        "owner": "ipetkov",
        "repo": "crane",
        "rev": "480dff0be03dac0e51a8dfc26e882b0d123a450e",
        "type": "github"
      },
      "original": {
        "owner": "ipetkov",
        "repo": "crane",
        "type": "github"
      }
    },
    "crane_2": {
      "inputs": {
        "nixpkgs": [
          "lanzaboote",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1718730147,
        "narHash": "sha256-QmD6B6FYpuoCqu6ZuPJH896ItNquDkn0ulQlOn4ykN8=",
        "owner": "ipetkov",
        "repo": "crane",
        "rev": "32c21c29b034d0a93fdb2379d6fabc40fc3d0e6c",
        "type": "github"
      },
      "original": {
        "owner": "ipetkov",
        "repo": "crane",
        "type": "github"
      }
    },
    "crane_3": {
      "inputs": {
        "nixpkgs": [
          "schizofox",
          "searx-randomizer",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1701386725,
        "narHash": "sha256-w4aBlMYh9Y8co1V80m5LzEKMijUJ7CBTq209WbqVwUU=",
        "owner": "ipetkov",
        "repo": "crane",
        "rev": "8b9bad9b30bd7a9ed08782e64846b7485f9d0a38",
        "type": "github"
      },
      "original": {
        "owner": "ipetkov",
        "repo": "crane",
        "type": "github"
      }
    },
    "deploy-rs": {
      "inputs": {
        "flake-compat": [
          "flake-compat"
        ],
        "nixpkgs": [
          "nixpkgs-small"
        ],
        "utils": [
          "flake-utils"
        ]
      },
      "locked": {
        "lastModified": 1718194053,
        "narHash": "sha256-FaGrf7qwZ99ehPJCAwgvNY5sLCqQ3GDiE/6uLhxxwSY=",
        "owner": "serokell",
        "repo": "deploy-rs",
        "rev": "3867348fa92bc892eba5d9ddb2d7a97b9e127a8a",
        "type": "github"
      },
      "original": {
        "owner": "serokell",
        "repo": "deploy-rs",
        "type": "github"
      }
    },
    "flake-compat": {
      "flake": false,
      "locked": {
        "lastModified": 1673956053,
        "narHash": "sha256-4gtG9iQuiKITOjNQQeQIpoIB6b16fm+504Ch3sNKLd8=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "35bb57c0c8d8b62bbfd284272c928ceb64ddbde9",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_2": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_3": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_4": {
      "flake": false,
      "locked": {
        "lastModified": 1673956053,
        "narHash": "sha256-4gtG9iQuiKITOjNQQeQIpoIB6b16fm+504Ch3sNKLd8=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "35bb57c0c8d8b62bbfd284272c928ceb64ddbde9",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_5": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_6": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_7": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_8": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-parts": {
      "inputs": {
        "nixpkgs-lib": [
          "anyrun",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1717285511,
        "narHash": "sha256-iKzJcpdXih14qYVcZ9QC9XuZYnPc6T8YImb6dX166kw=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "2a55567fcf15b1b1c7ed712a2c6fadaec7412ea8",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "type": "github"
      }
    },
    "flake-parts_2": {
      "inputs": {
        "nixpkgs-lib": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1719994518,
        "narHash": "sha256-pQMhCCHyQGRzdfAkdJ4cIWiw+JNuWsTX7f0ZYSyz0VY=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "9227223f6d922fee3c7b190b2cc238a99527bbb7",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "type": "github"
      }
    },
    "flake-parts_3": {
      "inputs": {
        "nixpkgs-lib": [
          "lanzaboote",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1717285511,
        "narHash": "sha256-iKzJcpdXih14qYVcZ9QC9XuZYnPc6T8YImb6dX166kw=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "2a55567fcf15b1b1c7ed712a2c6fadaec7412ea8",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "type": "github"
      }
    },
    "flake-parts_4": {
      "inputs": {
        "nixpkgs-lib": [
          "neovim-nightly",
          "hercules-ci-effects",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1712014858,
        "narHash": "sha256-sB4SWl2lX95bExY2gMFG5HIzvva5AVMJd4Igm+GpZNw=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "9126214d0a59633752a136528f5f3b9aa8565b7d",
        "type": "github"
      },
      "original": {
        "id": "flake-parts",
        "type": "indirect"
      }
    },
    "flake-parts_5": {
      "inputs": {
        "nixpkgs-lib": "nixpkgs-lib"
      },
      "locked": {
        "lastModified": 1719994518,
        "narHash": "sha256-pQMhCCHyQGRzdfAkdJ4cIWiw+JNuWsTX7f0ZYSyz0VY=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "9227223f6d922fee3c7b190b2cc238a99527bbb7",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "type": "github"
      }
    },
    "flake-parts_6": {
      "inputs": {
        "nixpkgs-lib": "nixpkgs-lib_2"
      },
      "locked": {
        "lastModified": 1698882062,
        "narHash": "sha256-HkhafUayIqxXyHH1X8d9RDl1M2CkFgZLjKD3MzabiEo=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "8c9fa2545007b49a5db5f650ae91f227672c3877",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "type": "github"
      }
    },
    "flake-utils": {
      "locked": {
        "lastModified": 1667395993,
        "narHash": "sha256-nuEHfE/LcWyuSWnS8t12N1wc105Qtau+/OdUAjtQ0rA=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "5aed5285a952e0b949eb3ba02c12fa4fcfef535f",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_2": {
      "inputs": {
        "systems": [
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1710146030,
        "narHash": "sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "b1d9ab70662946ef0850d488da1c9019f3a9752a",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_3": {
      "inputs": {
        "systems": "systems_6"
      },
      "locked": {
        "lastModified": 1710146030,
        "narHash": "sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "b1d9ab70662946ef0850d488da1c9019f3a9752a",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_4": {
      "locked": {
        "lastModified": 1659877975,
        "narHash": "sha256-zllb8aq3YO3h8B/U0/J1WBgAL8EX5yWf5pMj3G0NAmc=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "c0e246b9b83f637f4681389ecabcb2681b4f3af0",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "git-hooks": {
      "inputs": {
        "flake-compat": [
          "flake-compat"
        ],
        "gitignore": "gitignore",
        "nixpkgs": [
          "nixpkgs-small"
        ],
        "nixpkgs-stable": "nixpkgs-stable_2"
      },
      "locked": {
        "lastModified": 1721042469,
        "narHash": "sha256-6FPUl7HVtvRHCCBQne7Ylp4p+dpP3P/OYuzjztZ4s70=",
        "owner": "cachix",
        "repo": "git-hooks.nix",
        "rev": "f451c19376071a90d8c58ab1a953c6e9840527fd",
        "type": "github"
      },
      "original": {
        "owner": "cachix",
        "repo": "git-hooks.nix",
        "type": "github"
      }
    },
    "gitignore": {
      "inputs": {
        "nixpkgs": [
          "git-hooks",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1709087332,
        "narHash": "sha256-HG2cCnktfHsKV0s4XW83gU3F57gaTljL9KNSuG6bnQs=",
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "rev": "637db329424fd7e46cf4185293b9cc8c88c95394",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "type": "github"
      }
    },
    "gitignore_2": {
      "inputs": {
        "nixpkgs": [
          "lanzaboote",
          "pre-commit-hooks-nix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1709087332,
        "narHash": "sha256-HG2cCnktfHsKV0s4XW83gU3F57gaTljL9KNSuG6bnQs=",
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "rev": "637db329424fd7e46cf4185293b9cc8c88c95394",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "type": "github"
      }
    },
    "hercules-ci-effects": {
      "inputs": {
        "flake-parts": "flake-parts_4",
        "nixpkgs": [
          "neovim-nightly",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1719226092,
        "narHash": "sha256-YNkUMcCUCpnULp40g+svYsaH1RbSEj6s4WdZY/SHe38=",
        "owner": "hercules-ci",
        "repo": "hercules-ci-effects",
        "rev": "11e4b8dc112e2f485d7c97e1cee77f9958f498f5",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "hercules-ci-effects",
        "type": "github"
      }
    },
    "hercules-ci-effects_2": {
      "inputs": {
        "flake-parts": [
          "nixpak",
          "flake-parts"
        ],
        "nixpkgs": [
          "nixpak",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1719226092,
        "narHash": "sha256-YNkUMcCUCpnULp40g+svYsaH1RbSEj6s4WdZY/SHe38=",
        "owner": "hercules-ci",
        "repo": "hercules-ci-effects",
        "rev": "11e4b8dc112e2f485d7c97e1cee77f9958f498f5",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "hercules-ci-effects",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1721534365,
        "narHash": "sha256-XpZOkaSJKdOsz1wU6JfO59Rx2fqtcarQ0y6ndIOKNpI=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "635563f245309ef5320f80c7ebcb89b2398d2949",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "home-manager_2": {
      "inputs": {
        "nixpkgs": [
          "schizofox",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1717097707,
        "narHash": "sha256-HC5vJ3oYsjwsCaSbkIPv80e4ebJpNvFKQTBOGlHvjLs=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "0eb314b4f0ba337e88123e0b1e57ef58346aafd9",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "hyprcursor": {
      "inputs": {
        "hyprlang": [
          "hyprland",
          "hyprlang"
        ],
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721330371,
        "narHash": "sha256-aYlHTWylczLt6ERJyg6E66Y/XSCbVL7leVcRuJmVbpI=",
        "owner": "hyprwm",
        "repo": "hyprcursor",
        "rev": "4493a972b48f9c3014befbbf381ed5fff91a65dc",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprcursor",
        "type": "github"
      }
    },
    "hyprland": {
      "inputs": {
        "aquamarine": "aquamarine",
        "hyprcursor": "hyprcursor",
        "hyprlang": "hyprlang",
        "hyprutils": "hyprutils",
        "hyprwayland-scanner": "hyprwayland-scanner",
        "nixpkgs": "nixpkgs_3",
        "systems": "systems_4",
        "xdph": "xdph"
      },
      "locked": {
        "lastModified": 1721598736,
        "narHash": "sha256-mNqXUKZA8WrCcFAUp+EgHJFmRi9ZYevW6Jeczuq0DUs=",
        "ref": "refs/heads/main",
        "rev": "672bf1f8670b200da57e2f6de4e9ed7efd8c98fc",
        "revCount": 4949,
        "submodules": true,
        "type": "git",
        "url": "https://github.com/hyprwm/Hyprland"
      },
      "original": {
        "submodules": true,
        "type": "git",
        "url": "https://github.com/hyprwm/Hyprland"
      }
    },
    "hyprland-contrib": {
      "inputs": {
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1720709712,
        "narHash": "sha256-78j/cY+AXoMIqqiNc1vWx237EPfpERAcYsb57ABUbwQ=",
        "owner": "hyprwm",
        "repo": "contrib",
        "rev": "65d42dcbfde2229a75ccdb195c318dfe241f9ade",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "contrib",
        "type": "github"
      }
    },
    "hyprland-plugins": {
      "inputs": {
        "hyprland": [
          "hyprland"
        ],
        "nixpkgs": [
          "hyprland-plugins",
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland-plugins",
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721562040,
        "narHash": "sha256-QZLxukJlbHG6lsxF5goaXSPRKStkdrhgPyHy1m8F1Ro=",
        "owner": "hyprwm",
        "repo": "hyprland-plugins",
        "rev": "1ce5b7a046a53c06d33dea79ea63c1e1fce377f8",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprland-plugins",
        "type": "github"
      }
    },
    "hyprland-protocols": {
      "inputs": {
        "nixpkgs": [
          "hyprland",
          "xdph",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "xdph",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1718746314,
        "narHash": "sha256-HUklK5u86w2Yh9dOkk4FdsL8eehcOZ95jPhLixGDRQY=",
        "owner": "hyprwm",
        "repo": "hyprland-protocols",
        "rev": "1b61f0093afff20ab44d88ad707aed8bf2215290",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprland-protocols",
        "type": "github"
      }
    },
    "hyprland-protocols_2": {
      "inputs": {
        "nixpkgs": [
          "xdg-portal-hyprland",
          "nixpkgs"
        ],
        "systems": [
          "xdg-portal-hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1718746314,
        "narHash": "sha256-HUklK5u86w2Yh9dOkk4FdsL8eehcOZ95jPhLixGDRQY=",
        "owner": "hyprwm",
        "repo": "hyprland-protocols",
        "rev": "1b61f0093afff20ab44d88ad707aed8bf2215290",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprland-protocols",
        "type": "github"
      }
    },
    "hyprlang": {
      "inputs": {
        "hyprutils": [
          "hyprland",
          "hyprutils"
        ],
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721324361,
        "narHash": "sha256-BiJKO0IIdnSwHQBSrEJlKlFr753urkLE48wtt0UhNG4=",
        "owner": "hyprwm",
        "repo": "hyprlang",
        "rev": "adbefbf49664a6c2c8bf36b6487fd31e3eb68086",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprlang",
        "type": "github"
      }
    },
    "hyprlang_2": {
      "inputs": {
        "hyprutils": "hyprutils_4",
        "nixpkgs": [
          "xdg-portal-hyprland",
          "nixpkgs"
        ],
        "systems": "systems_10"
      },
      "locked": {
        "lastModified": 1717881852,
        "narHash": "sha256-XeeVoKHQgfKuXoP6q90sUqKyl7EYy3ol2dVZGM+Jj94=",
        "owner": "hyprwm",
        "repo": "hyprlang",
        "rev": "ec6938c66253429192274d612912649a0cfe4d28",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprlang",
        "type": "github"
      }
    },
    "hyprpaper": {
      "inputs": {
        "hyprlang": [
          "hyprland",
          "hyprlang"
        ],
        "hyprutils": "hyprutils_2",
        "hyprwayland-scanner": "hyprwayland-scanner_2",
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721324981,
        "narHash": "sha256-vUWLwuRt+lrZH5fWRxM9ECrV+HKilUhhdT6l+colZTo=",
        "owner": "hyprwm",
        "repo": "hyprpaper",
        "rev": "87791c0a9914f3f88d5fae48f0149835dc32f364",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprpaper",
        "type": "github"
      }
    },
    "hyprpicker": {
      "inputs": {
        "hyprutils": "hyprutils_3",
        "nixpkgs": "nixpkgs_4",
        "systems": "systems_5"
      },
      "locked": {
        "lastModified": 1721325711,
        "narHash": "sha256-Mgd6nCSfhCt/TQayTmeatl2fiOB0nR4wERzwZUygapw=",
        "owner": "hyprwm",
        "repo": "hyprpicker",
        "rev": "c36676ad0c08312ee07f061e210991f0176d6747",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprpicker",
        "type": "github"
      }
    },
    "hyprutils": {
      "inputs": {
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721324102,
        "narHash": "sha256-WAZ0X6yJW1hFG6otkHBfyJDKRpNP5stsRqdEuHrFRpk=",
        "owner": "hyprwm",
        "repo": "hyprutils",
        "rev": "962582a090bc233c4de9d9897f46794280288989",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprutils",
        "type": "github"
      }
    },
    "hyprutils_2": {
      "inputs": {
        "nixpkgs": [
          "hyprpaper",
          "nixpkgs"
        ],
        "systems": [
          "hyprpaper",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721324102,
        "narHash": "sha256-WAZ0X6yJW1hFG6otkHBfyJDKRpNP5stsRqdEuHrFRpk=",
        "owner": "hyprwm",
        "repo": "hyprutils",
        "rev": "962582a090bc233c4de9d9897f46794280288989",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprutils",
        "type": "github"
      }
    },
    "hyprutils_3": {
      "inputs": {
        "nixpkgs": [
          "hyprpicker",
          "nixpkgs"
        ],
        "systems": [
          "hyprpicker",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721324102,
        "narHash": "sha256-WAZ0X6yJW1hFG6otkHBfyJDKRpNP5stsRqdEuHrFRpk=",
        "owner": "hyprwm",
        "repo": "hyprutils",
        "rev": "962582a090bc233c4de9d9897f46794280288989",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprutils",
        "type": "github"
      }
    },
    "hyprutils_4": {
      "inputs": {
        "nixpkgs": [
          "xdg-portal-hyprland",
          "hyprlang",
          "nixpkgs"
        ],
        "systems": [
          "xdg-portal-hyprland",
          "hyprlang",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1717881334,
        "narHash": "sha256-a0inRgJhPL6v9v7RPM/rx1kbXdfe3xJA1c9z0ZkYnh4=",
        "owner": "hyprwm",
        "repo": "hyprutils",
        "rev": "0693f9398ab693d89c9a0aa3b3d062dd61b7a60e",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprutils",
        "type": "github"
      }
    },
    "hyprwayland-scanner": {
      "inputs": {
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721324119,
        "narHash": "sha256-SOOqIT27/X792+vsLSeFdrNTF+OSRp5qXv6Te+fb2Qg=",
        "owner": "hyprwm",
        "repo": "hyprwayland-scanner",
        "rev": "a048a6cb015340bd82f97c1f40a4b595ca85cc30",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprwayland-scanner",
        "type": "github"
      }
    },
    "hyprwayland-scanner_2": {
      "inputs": {
        "nixpkgs": [
          "hyprpaper",
          "nixpkgs"
        ],
        "systems": [
          "hyprpaper",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721324119,
        "narHash": "sha256-SOOqIT27/X792+vsLSeFdrNTF+OSRp5qXv6Te+fb2Qg=",
        "owner": "hyprwm",
        "repo": "hyprwayland-scanner",
        "rev": "a048a6cb015340bd82f97c1f40a4b595ca85cc30",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprwayland-scanner",
        "type": "github"
      }
    },
    "impermanence": {
      "locked": {
        "lastModified": 1719091691,
        "narHash": "sha256-AxaLX5cBEcGtE02PeGsfscSb/fWMnyS7zMWBXQWDKbE=",
        "owner": "nix-community",
        "repo": "impermanence",
        "rev": "23c1f06316b67cb5dabdfe2973da3785cfe9c34a",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "impermanence",
        "type": "github"
      }
    },
    "lanzaboote": {
      "inputs": {
        "crane": "crane_2",
        "flake-compat": [
          "flake-compat"
        ],
        "flake-parts": "flake-parts_3",
        "nixpkgs": [
          "nixpkgs"
        ],
        "pre-commit-hooks-nix": "pre-commit-hooks-nix",
        "rust-overlay": "rust-overlay"
      },
      "locked": {
        "lastModified": 1721581642,
        "narHash": "sha256-Bd9ujkwkxwAYCnYKEKeY1fjsvD4vyiFjFS20Lxr/FD4=",
        "owner": "nix-community",
        "repo": "lanzaboote",
        "rev": "f3b4ade14392861388265e949b7007a8b62e21dc",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "lanzaboote",
        "type": "github"
      }
    },
    "mnw": {
      "locked": {
        "lastModified": 1721440413,
        "narHash": "sha256-PF/FbgCUZ6mQrKp28G2YoVDlSThBy8AxIT9d2Ju3kTY=",
        "owner": "Gerg-L",
        "repo": "mnw",
        "rev": "4ea225024677e7c3a96080af8624fd3aa5dfa1b6",
        "type": "github"
      },
      "original": {
        "owner": "Gerg-L",
        "repo": "mnw",
        "type": "github"
      }
    },
    "naersk": {
      "inputs": {
        "nixpkgs": [
          "nvf",
          "rnix-lsp",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1655042882,
        "narHash": "sha256-9BX8Fuez5YJlN7cdPO63InoyBy7dm3VlJkkmTt6fS1A=",
        "owner": "nix-community",
        "repo": "naersk",
        "rev": "cddffb5aa211f50c4b8750adbec0bbbdfb26bb9f",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "naersk",
        "type": "github"
      }
    },
    "ndg": {
      "inputs": {
        "flake-parts": [
          "flake-parts"
        ],
        "nixpkgs": [
          "nixpkgs-small"
        ]
      },
      "locked": {
        "lastModified": 1714652907,
        "narHash": "sha256-IhxT+suDaKbCjD8gSosFE1HeCkQRQg8s4y9QfBLnfWU=",
        "owner": "feel-co",
        "repo": "ndg",
        "rev": "f04f28063601e61019e52402a0159de7c87bf931",
        "type": "github"
      },
      "original": {
        "owner": "feel-co",
        "repo": "ndg",
        "type": "github"
      }
    },
    "neovim-nightly": {
      "inputs": {
        "flake-compat": "flake-compat_3",
        "flake-parts": [
          "flake-parts"
        ],
        "git-hooks": [
          "git-hooks"
        ],
        "hercules-ci-effects": "hercules-ci-effects",
        "neovim-src": "neovim-src",
        "nixpkgs": [
          "nixpkgs-small"
        ]
      },
      "locked": {
        "lastModified": 1721628736,
        "narHash": "sha256-dIm/veBiLpclmij7FFXo6+23Swxxdj2nDPTMM3RzuYc=",
        "owner": "nix-community",
        "repo": "neovim-nightly-overlay",
        "rev": "464172e98eecf9a8079a9a381ffb75789d8c0e5e",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "neovim-nightly-overlay",
        "type": "github"
      }
    },
    "neovim-src": {
      "flake": false,
      "locked": {
        "lastModified": 1721572156,
        "narHash": "sha256-DyPWvLGftJ0kyrAtlInrztgJHZeB1kK317Icd9iRJKs=",
        "owner": "neovim",
        "repo": "neovim",
        "rev": "7381f0a1d517474dcf8d8d019cbda430ce4bff23",
        "type": "github"
      },
      "original": {
        "owner": "neovim",
        "repo": "neovim",
        "type": "github"
      }
    },
    "nh": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs-small"
        ]
      },
      "locked": {
        "lastModified": 1721151247,
        "narHash": "sha256-m6LmfrUMpt1ZUX3eqB7Gp+ZV6sAWPqkATwZNvA7Bj9U=",
        "owner": "viperML",
        "repo": "nh",
        "rev": "168c7ceea2b8d6208cf32de9eb8effa9c008b40d",
        "type": "github"
      },
      "original": {
        "owner": "viperML",
        "repo": "nh",
        "type": "github"
      }
    },
    "nil": {
      "inputs": {
        "flake-utils": "flake-utils_3",
        "nixpkgs": [
          "nixpkgs-small"
        ],
        "rust-overlay": [
          "rust-overlay"
        ]
      },
      "locked": {
        "lastModified": 1717086091,
        "narHash": "sha256-GmsEQa4HZeMfec37LZnwG/Lt/XmqFLXsjv5QWojeNiM=",
        "owner": "oxalica",
        "repo": "nil",
        "rev": "ab3ddb8f063774cf7e22eb610f5ecfdb77309f3c",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "nil",
        "type": "github"
      }
    },
    "nix-index-db": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs-small"
        ]
      },
      "locked": {
        "lastModified": 1721531260,
        "narHash": "sha256-O72uxk4gYFQDwNkoBioyrR3GK9EReZmexCStBaORMW8=",
        "owner": "nix-community",
        "repo": "nix-index-database",
        "rev": "b6db9fd8dc59bb2ccb403f76d16ba8bbc1d5263d",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "nix-index-database",
        "type": "github"
      }
    },
    "nixfmt": {
      "flake": false,
      "locked": {
        "lastModified": 1721314519,
        "narHash": "sha256-cmgmVWjNkXBOt3r5bzuVLk/+xv4TzcvcQ16W8kOmx90=",
        "owner": "nixos",
        "repo": "nixfmt",
        "rev": "e819b2d0f9173f0c73d2e1fb4bc5155362046653",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "repo": "nixfmt",
        "type": "github"
      }
    },
    "nixos-hardware": {
      "locked": {
        "lastModified": 1721413321,
        "narHash": "sha256-0GdiQScDceUrVGbxYpV819LHesK3szHOhJ09e6sgES4=",
        "owner": "nixos",
        "repo": "nixos-hardware",
        "rev": "ab165a8a6cd12781d76fe9cbccb9e975d0fb634f",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "repo": "nixos-hardware",
        "type": "github"
      }
    },
    "nixpak": {
      "inputs": {
        "flake-parts": [
          "flake-parts"
        ],
        "hercules-ci-effects": "hercules-ci-effects_2",
        "nixpkgs": [
          "nixpkgs-small"
        ]
      },
      "locked": {
        "lastModified": 1721269342,
        "narHash": "sha256-Bf5OeiLODAmL3gHtW1iPsK1eCFb42xm4IKs10TdxbVw=",
        "owner": "nixpak",
        "repo": "nixpak",
        "rev": "434d2e5065ad672857b72df35205a3fed544f508",
        "type": "github"
      },
      "original": {
        "owner": "nixpak",
        "repo": "nixpak",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1717196966,
        "narHash": "sha256-yZKhxVIKd2lsbOqYd5iDoUIwsRZFqE87smE2Vzf6Ck0=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "57610d2f8f0937f39dbd72251e9614b1561942d8",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-24_05": {
      "locked": {
        "lastModified": 1717144377,
        "narHash": "sha256-F/TKWETwB5RaR8owkPPi+SPJh83AQsm6KrQAlJ8v/uA=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "805a384895c696f802a9bf5bf4720f37385df547",
        "type": "github"
      },
      "original": {
        "id": "nixpkgs",
        "ref": "nixos-24.05",
        "type": "indirect"
      }
    },
    "nixpkgs-lib": {
      "locked": {
        "lastModified": 1719876945,
        "narHash": "sha256-Fm2rDDs86sHy0/1jxTOKB1118Q0O3Uc7EC0iXvXKpbI=",
        "type": "tarball",
        "url": "https://github.com/NixOS/nixpkgs/archive/5daf0514482af3f97abaefc78a6606365c9108e2.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://github.com/NixOS/nixpkgs/archive/5daf0514482af3f97abaefc78a6606365c9108e2.tar.gz"
      }
    },
    "nixpkgs-lib_2": {
      "locked": {
        "dir": "lib",
        "lastModified": 1698611440,
        "narHash": "sha256-jPjHjrerhYDy3q9+s5EAsuhyhuknNfowY6yt6pjn9pc=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "0cbe9f69c234a7700596e943bfae7ef27a31b735",
        "type": "github"
      },
      "original": {
        "dir": "lib",
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-small": {
      "locked": {
        "lastModified": 1721615467,
        "narHash": "sha256-/foTRkSnMwwS3BeVlUNenyIPehCyDgovOPmz5tL6OkQ=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "176e4e9d36742841406578db792d3278ef6974c7",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable-small",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1711460390,
        "narHash": "sha256-akSgjDZL6pVHEfSE6sz1DNSXuYX6hq+P/1Z5IoYWs7E=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "44733514b72e732bd49f5511bd0203dea9b9a434",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-23.11",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable_2": {
      "locked": {
        "lastModified": 1720386169,
        "narHash": "sha256-NGKVY4PjzwAa4upkGtAMz1npHGoRzWotlSnVlqI40mo=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "194846768975b7ad2c4988bdb82572c00222c0d7",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-24.05",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable_3": {
      "locked": {
        "lastModified": 1718447546,
        "narHash": "sha256-JHuXsrC9pr4kA4n7LuuPfWFJUVlDBVJ1TXDVpHEuUgM=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "842253bf992c3a7157b67600c2857193f126563a",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-23.11",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_2": {
      "locked": {
        "lastModified": 1690031011,
        "narHash": "sha256-kzK0P4Smt7CL53YCdZCBbt9uBFFhE0iNvCki20etAf4=",
        "path": "/nix/store/gxw5rlp29swdpgz26vhaqzy21b9pxrim-source",
        "rev": "12303c652b881435065a98729eb7278313041e49",
        "type": "path"
      },
      "original": {
        "id": "nixpkgs",
        "type": "indirect"
      }
    },
    "nixpkgs_3": {
      "locked": {
        "lastModified": 1721379653,
        "narHash": "sha256-8MUgifkJ7lkZs3u99UDZMB4kbOxvMEXQZ31FO3SopZ0=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_4": {
      "locked": {
        "lastModified": 1721138476,
        "narHash": "sha256-+W5eZOhhemLQxelojLxETfbFbc19NWawsXBlapYpqIA=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "ad0b5eed1b6031efaed382844806550c3dcb4206",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_5": {
      "locked": {
        "lastModified": 1721379653,
        "narHash": "sha256-8MUgifkJ7lkZs3u99UDZMB4kbOxvMEXQZ31FO3SopZ0=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_6": {
      "locked": {
        "lastModified": 1656753965,
        "narHash": "sha256-BCrB3l0qpJokOnIVc3g2lHiGhnjUi0MoXiw6t1o8H1E=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "0ea7a8f1b939d74e5df8af9a8f7342097cdf69eb",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_7": {
      "locked": {
        "lastModified": 1702350026,
        "narHash": "sha256-A+GNZFZdfl4JdDphYKBJ5Ef1HOiFsP18vQe9mqjmUis=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "9463103069725474698139ab10f17a9d125da859",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-23.05",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_8": {
      "locked": {
        "lastModified": 1721379653,
        "narHash": "sha256-8MUgifkJ7lkZs3u99UDZMB4kbOxvMEXQZ31FO3SopZ0=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_9": {
      "locked": {
        "lastModified": 1720031269,
        "narHash": "sha256-rwz8NJZV+387rnWpTYcXaRNvzUSnnF9aHONoJIYmiUQ=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "9f4128e00b0ae8ec65918efeba59db998750ead6",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nmd": {
      "flake": false,
      "locked": {
        "lastModified": 1705050560,
        "narHash": "sha256-x3zzcdvhJpodsmdjqB4t5mkVW22V3wqHLOun0KRBzUI=",
        "owner": "~rycee",
        "repo": "nmd",
        "rev": "66d9334933119c36f91a78d565c152a4fdc8d3d3",
        "type": "sourcehut"
      },
      "original": {
        "owner": "~rycee",
        "repo": "nmd",
        "type": "sourcehut"
      }
    },
    "nvf": {
      "inputs": {
        "flake-parts": [
          "flake-parts"
        ],
        "flake-utils": [
          "flake-utils"
        ],
        "mnw": "mnw",
        "nil": [
          "nil"
        ],
        "nixpkgs": [
          "nixpkgs"
        ],
        "nmd": "nmd",
        "plugin-alpha-nvim": "plugin-alpha-nvim",
        "plugin-bufdelete-nvim": "plugin-bufdelete-nvim",
        "plugin-catppuccin": "plugin-catppuccin",
        "plugin-ccc": "plugin-ccc",
        "plugin-cellular-automaton": "plugin-cellular-automaton",
        "plugin-chatgpt": "plugin-chatgpt",
        "plugin-cheatsheet-nvim": "plugin-cheatsheet-nvim",
        "plugin-cinnamon-nvim": "plugin-cinnamon-nvim",
        "plugin-cmp-buffer": "plugin-cmp-buffer",
        "plugin-cmp-nvim-lsp": "plugin-cmp-nvim-lsp",
        "plugin-cmp-path": "plugin-cmp-path",
        "plugin-cmp-treesitter": "plugin-cmp-treesitter",
        "plugin-cmp-vsnip": "plugin-cmp-vsnip",
        "plugin-codewindow-nvim": "plugin-codewindow-nvim",
        "plugin-comment-nvim": "plugin-comment-nvim",
        "plugin-copilot-cmp": "plugin-copilot-cmp",
        "plugin-copilot-lua": "plugin-copilot-lua",
        "plugin-crates-nvim": "plugin-crates-nvim",
        "plugin-dashboard-nvim": "plugin-dashboard-nvim",
        "plugin-diffview-nvim": "plugin-diffview-nvim",
        "plugin-dracula": "plugin-dracula",
        "plugin-dressing-nvim": "plugin-dressing-nvim",
        "plugin-elixir-tools": "plugin-elixir-tools",
        "plugin-fidget-nvim": "plugin-fidget-nvim",
        "plugin-flutter-tools": "plugin-flutter-tools",
        "plugin-gesture-nvim": "plugin-gesture-nvim",
        "plugin-gitsigns-nvim": "plugin-gitsigns-nvim",
        "plugin-glow-nvim": "plugin-glow-nvim",
        "plugin-gruvbox": "plugin-gruvbox",
        "plugin-highlight-undo": "plugin-highlight-undo",
        "plugin-hop-nvim": "plugin-hop-nvim",
        "plugin-icon-picker-nvim": "plugin-icon-picker-nvim",
        "plugin-image-nvim": "plugin-image-nvim",
        "plugin-indent-blankline": "plugin-indent-blankline",
        "plugin-leap-nvim": "plugin-leap-nvim",
        "plugin-lsp-lines": "plugin-lsp-lines",
        "plugin-lsp-signature": "plugin-lsp-signature",
        "plugin-lspkind": "plugin-lspkind",
        "plugin-lspsaga": "plugin-lspsaga",
        "plugin-lualine": "plugin-lualine",
        "plugin-mind-nvim": "plugin-mind-nvim",
        "plugin-minimap-vim": "plugin-minimap-vim",
        "plugin-modes-nvim": "plugin-modes-nvim",
        "plugin-neo-tree-nvim": "plugin-neo-tree-nvim",
        "plugin-neocord": "plugin-neocord",
        "plugin-neodev-nvim": "plugin-neodev-nvim",
        "plugin-noice-nvim": "plugin-noice-nvim",
        "plugin-none-ls": "plugin-none-ls",
        "plugin-nui-nvim": "plugin-nui-nvim",
        "plugin-nvim-autopairs": "plugin-nvim-autopairs",
        "plugin-nvim-bufferline-lua": "plugin-nvim-bufferline-lua",
        "plugin-nvim-cmp": "plugin-nvim-cmp",
        "plugin-nvim-code-action-menu": "plugin-nvim-code-action-menu",
        "plugin-nvim-colorizer-lua": "plugin-nvim-colorizer-lua",
        "plugin-nvim-cursorline": "plugin-nvim-cursorline",
        "plugin-nvim-dap": "plugin-nvim-dap",
        "plugin-nvim-dap-go": "plugin-nvim-dap-go",
        "plugin-nvim-dap-ui": "plugin-nvim-dap-ui",
        "plugin-nvim-docs-view": "plugin-nvim-docs-view",
        "plugin-nvim-lightbulb": "plugin-nvim-lightbulb",
        "plugin-nvim-lspconfig": "plugin-nvim-lspconfig",
        "plugin-nvim-navbuddy": "plugin-nvim-navbuddy",
        "plugin-nvim-navic": "plugin-nvim-navic",
        "plugin-nvim-neoclip": "plugin-nvim-neoclip",
        "plugin-nvim-nio": "plugin-nvim-nio",
        "plugin-nvim-notify": "plugin-nvim-notify",
        "plugin-nvim-session-manager": "plugin-nvim-session-manager",
        "plugin-nvim-surround": "plugin-nvim-surround",
        "plugin-nvim-tree-lua": "plugin-nvim-tree-lua",
        "plugin-nvim-treesitter-context": "plugin-nvim-treesitter-context",
        "plugin-nvim-ts-autotag": "plugin-nvim-ts-autotag",
        "plugin-nvim-web-devicons": "plugin-nvim-web-devicons",
        "plugin-obsidian-nvim": "plugin-obsidian-nvim",
        "plugin-onedark": "plugin-onedark",
        "plugin-orgmode-nvim": "plugin-orgmode-nvim",
        "plugin-oxocarbon": "plugin-oxocarbon",
        "plugin-plenary-nvim": "plugin-plenary-nvim",
        "plugin-project-nvim": "plugin-project-nvim",
        "plugin-registers": "plugin-registers",
        "plugin-rose-pine": "plugin-rose-pine",
        "plugin-rustaceanvim": "plugin-rustaceanvim",
        "plugin-scrollbar-nvim": "plugin-scrollbar-nvim",
        "plugin-smartcolumn": "plugin-smartcolumn",
        "plugin-sqls-nvim": "plugin-sqls-nvim",
        "plugin-tabular": "plugin-tabular",
        "plugin-telescope": "plugin-telescope",
        "plugin-todo-comments": "plugin-todo-comments",
        "plugin-toggleterm-nvim": "plugin-toggleterm-nvim",
        "plugin-tokyonight": "plugin-tokyonight",
        "plugin-trouble": "plugin-trouble",
        "plugin-ts-error-translator": "plugin-ts-error-translator",
        "plugin-vim-dirtytalk": "plugin-vim-dirtytalk",
        "plugin-vim-fugitive": "plugin-vim-fugitive",
        "plugin-vim-illuminate": "plugin-vim-illuminate",
        "plugin-vim-markdown": "plugin-vim-markdown",
        "plugin-vim-repeat": "plugin-vim-repeat",
        "plugin-vim-startify": "plugin-vim-startify",
        "plugin-vim-vsnip": "plugin-vim-vsnip",
        "plugin-which-key": "plugin-which-key",
        "rnix-lsp": "rnix-lsp",
        "systems": "systems_7",
        "zig": "zig"
      },
      "locked": {
        "lastModified": 1721576265,
        "narHash": "sha256-lhiPcedidJ4NBAupM38602juxWuV8O6Z4esmICD0My4=",
        "owner": "NotAShelf",
        "repo": "nvf",
        "rev": "589b86d3781c2fba8d4d11698d127708aaaa663f",
        "type": "github"
      },
      "original": {
        "owner": "NotAShelf",
        "repo": "nvf",
        "type": "github"
      }
    },
    "nyxexprs": {
      "inputs": {
        "flake-compat": "flake-compat_5",
        "flake-parts": "flake-parts_5",
        "nixpkgs": "nixpkgs_8",
        "systems": [
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1721611615,
        "narHash": "sha256-Iwb5MBvQYLs+GUY3zrZprQiTGqp8UxCHH4jPXPR/np4=",
        "owner": "NotAShelf",
        "repo": "nyxexprs",
        "rev": "16aa8e000049d862acb3bbbc98028a9a723d7dcd",
        "type": "github"
      },
      "original": {
        "owner": "NotAShelf",
        "repo": "nyxexprs",
        "type": "github"
      }
    },
    "plugin-alpha-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1708891191,
        "narHash": "sha256-kTVPKZ/e1us/uHfSwFwR38lFYN8EotJq2jKz6xm/eqg=",
        "owner": "goolord",
        "repo": "alpha-nvim",
        "rev": "41283fb402713fc8b327e60907f74e46166f4cfd",
        "type": "github"
      },
      "original": {
        "owner": "goolord",
        "repo": "alpha-nvim",
        "type": "github"
      }
    },
    "plugin-bufdelete-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1708814161,
        "narHash": "sha256-ljUNfmpImtxFCS19HC9kFlaLlqaPDltKtnx1+/6Y33U=",
        "owner": "famiu",
        "repo": "bufdelete.nvim",
        "rev": "f6bcea78afb3060b198125256f897040538bcb81",
        "type": "github"
      },
      "original": {
        "owner": "famiu",
        "repo": "bufdelete.nvim",
        "type": "github"
      }
    },
    "plugin-catppuccin": {
      "flake": false,
      "locked": {
        "lastModified": 1716704960,
        "narHash": "sha256-UDPS+1o8FQGkfqiG4GX4DNUI2pU5hIvagmfnWTKDb44=",
        "owner": "catppuccin",
        "repo": "nvim",
        "rev": "5215ea59df6d0a7e27da9a5cd1165e06d1b04cbe",
        "type": "github"
      },
      "original": {
        "owner": "catppuccin",
        "repo": "nvim",
        "type": "github"
      }
    },
    "plugin-ccc": {
      "flake": false,
      "locked": {
        "lastModified": 1714299582,
        "narHash": "sha256-QRq9hQF5vLnOTzQGbOWC2ykMdMsQDlDlb6XC17dJG7Q=",
        "owner": "uga-rosa",
        "repo": "ccc.nvim",
        "rev": "f388f1981d222967c741fe9927edf9ba5fa3bcbe",
        "type": "github"
      },
      "original": {
        "owner": "uga-rosa",
        "repo": "ccc.nvim",
        "type": "github"
      }
    },
    "plugin-cellular-automaton": {
      "flake": false,
      "locked": {
        "lastModified": 1693589931,
        "narHash": "sha256-szbd6m7hH7NFI0UzjWF83xkpSJeUWCbn9c+O8F8S/Fg=",
        "owner": "Eandrju",
        "repo": "cellular-automaton.nvim",
        "rev": "b7d056dab963b5d3f2c560d92937cb51db61cb5b",
        "type": "github"
      },
      "original": {
        "owner": "Eandrju",
        "repo": "cellular-automaton.nvim",
        "type": "github"
      }
    },
    "plugin-chatgpt": {
      "flake": false,
      "locked": {
        "lastModified": 1709721561,
        "narHash": "sha256-vD3NEsYmPRWlxBSOxyIMIQiJXQXxx0hhsw4zIxxXB3o=",
        "owner": "jackMort",
        "repo": "ChatGPT.nvim",
        "rev": "df53728e05129278d6ea26271ec086aa013bed90",
        "type": "github"
      },
      "original": {
        "owner": "jackMort",
        "repo": "ChatGPT.nvim",
        "type": "github"
      }
    },
    "plugin-cheatsheet-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1640255456,
        "narHash": "sha256-TYkGB7cON2t4GwMaR9H1MDG2j3btBv2AR37ade8kqTY=",
        "owner": "sudormrfbin",
        "repo": "cheatsheet.nvim",
        "rev": "9716f9aaa94dd1fd6ce59b5aae0e5f25e2a463ef",
        "type": "github"
      },
      "original": {
        "owner": "sudormrfbin",
        "repo": "cheatsheet.nvim",
        "type": "github"
      }
    },
    "plugin-cinnamon-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1714107684,
        "narHash": "sha256-cMP9WRZzevxaWgpILyDh1JwNukm3Jl3JKJYPT2HnFns=",
        "owner": "declancm",
        "repo": "cinnamon.nvim",
        "rev": "a011e84b624cd7b609ea928237505d31b987748a",
        "type": "github"
      },
      "original": {
        "owner": "declancm",
        "repo": "cinnamon.nvim",
        "type": "github"
      }
    },
    "plugin-cmp-buffer": {
      "flake": false,
      "locked": {
        "lastModified": 1660101488,
        "narHash": "sha256-dG4U7MtnXThoa/PD+qFtCt76MQ14V1wX8GMYcvxEnbM=",
        "owner": "hrsh7th",
        "repo": "cmp-buffer",
        "rev": "3022dbc9166796b644a841a02de8dd1cc1d311fa",
        "type": "github"
      },
      "original": {
        "owner": "hrsh7th",
        "repo": "cmp-buffer",
        "type": "github"
      }
    },
    "plugin-cmp-nvim-lsp": {
      "flake": false,
      "locked": {
        "lastModified": 1715931395,
        "narHash": "sha256-CT1+Z4XJBVsl/RqvJeGmyitD6x7So0ylXvvef5jh7I8=",
        "owner": "hrsh7th",
        "repo": "cmp-nvim-lsp",
        "rev": "39e2eda76828d88b773cc27a3f61d2ad782c922d",
        "type": "github"
      },
      "original": {
        "owner": "hrsh7th",
        "repo": "cmp-nvim-lsp",
        "type": "github"
      }
    },
    "plugin-cmp-path": {
      "flake": false,
      "locked": {
        "lastModified": 1664784283,
        "narHash": "sha256-thppiiV3wjIaZnAXmsh7j3DUc6ceSCvGzviwFUnoPaI=",
        "owner": "hrsh7th",
        "repo": "cmp-path",
        "rev": "91ff86cd9c29299a64f968ebb45846c485725f23",
        "type": "github"
      },
      "original": {
        "owner": "hrsh7th",
        "repo": "cmp-path",
        "type": "github"
      }
    },
    "plugin-cmp-treesitter": {
      "flake": false,
      "locked": {
        "lastModified": 1715596479,
        "narHash": "sha256-8WAk9S+/7vSz7bVHdEzjbKUokU144fvnByIeJ1gAWhU=",
        "owner": "ray-x",
        "repo": "cmp-treesitter",
        "rev": "958fcfa0d8ce46d215e19cc3992c542f576c4123",
        "type": "github"
      },
      "original": {
        "owner": "ray-x",
        "repo": "cmp-treesitter",
        "type": "github"
      }
    },
    "plugin-cmp-vsnip": {
      "flake": false,
      "locked": {
        "lastModified": 1669100283,
        "narHash": "sha256-2mkN03noOr5vBvRbSb35xZKorSH+8savQNZtgM9+QcM=",
        "owner": "hrsh7th",
        "repo": "cmp-vsnip",
        "rev": "989a8a73c44e926199bfd05fa7a516d51f2d2752",
        "type": "github"
      },
      "original": {
        "owner": "hrsh7th",
        "repo": "cmp-vsnip",
        "type": "github"
      }
    },
    "plugin-codewindow-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1695487629,
        "narHash": "sha256-/u2Zjbd9m3/iJU3I3HzFzXWxuvoycwJoIq7UFeHNtKM=",
        "owner": "gorbit99",
        "repo": "codewindow.nvim",
        "rev": "8c8f5ff66e123491c946c04848d744fcdc7cac6c",
        "type": "github"
      },
      "original": {
        "owner": "gorbit99",
        "repo": "codewindow.nvim",
        "type": "github"
      }
    },
    "plugin-comment-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1691409559,
        "narHash": "sha256-+dF1ZombrlO6nQggufSb0igXW5zwU++o0W/5ZA07cdc=",
        "owner": "numToStr",
        "repo": "Comment.nvim",
        "rev": "0236521ea582747b58869cb72f70ccfa967d2e89",
        "type": "github"
      },
      "original": {
        "owner": "numToStr",
        "repo": "Comment.nvim",
        "type": "github"
      }
    },
    "plugin-copilot-cmp": {
      "flake": false,
      "locked": {
        "lastModified": 1694286652,
        "narHash": "sha256-srgNohm/aJpswNJ5+T7p+zi9Jinp9e5FA8/wdk6VRiY=",
        "owner": "zbirenbaum",
        "repo": "copilot-cmp",
        "rev": "72fbaa03695779f8349be3ac54fa8bd77eed3ee3",
        "type": "github"
      },
      "original": {
        "owner": "zbirenbaum",
        "repo": "copilot-cmp",
        "type": "github"
      }
    },
    "plugin-copilot-lua": {
      "flake": false,
      "locked": {
        "lastModified": 1709095198,
        "narHash": "sha256-JX3sdsnOnjkY7r9fCtC2oauo0PXF3SQ+SHUo8ifBvAc=",
        "owner": "zbirenbaum",
        "repo": "copilot.lua",
        "rev": "f7612f5af4a7d7615babf43ab1e67a2d790c13a6",
        "type": "github"
      },
      "original": {
        "owner": "zbirenbaum",
        "repo": "copilot.lua",
        "type": "github"
      }
    },
    "plugin-crates-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1715690194,
        "narHash": "sha256-R1y1OIep4tcFd4mhylZ/A2zdwOmEQtCzuVBOBYu0qUI=",
        "owner": "Saecki",
        "repo": "crates.nvim",
        "rev": "d556c00d60c9421c913ee54ff690df2a34f6264e",
        "type": "github"
      },
      "original": {
        "owner": "Saecki",
        "repo": "crates.nvim",
        "type": "github"
      }
    },
    "plugin-dashboard-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1715952164,
        "narHash": "sha256-mLQHRzt9vUJLOO15+u7EaE2FGzIm1Ba7fqwdu5zaTYA=",
        "owner": "glepnir",
        "repo": "dashboard-nvim",
        "rev": "5182c09ac8085dc73b78ad0ea9f5479c9a866fc4",
        "type": "github"
      },
      "original": {
        "owner": "glepnir",
        "repo": "dashboard-nvim",
        "type": "github"
      }
    },
    "plugin-diffview-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716569036,
        "narHash": "sha256-sCrswSN/ERirije4hukg81t+X8sVG6EnG8SPK/P1Bts=",
        "owner": "sindrets",
        "repo": "diffview.nvim",
        "rev": "1ec7b56b959dab18f7030f541c33ae60e18a6f88",
        "type": "github"
      },
      "original": {
        "owner": "sindrets",
        "repo": "diffview.nvim",
        "type": "github"
      }
    },
    "plugin-dracula": {
      "flake": false,
      "locked": {
        "lastModified": 1708834650,
        "narHash": "sha256-I3rtbJYv1D+kniOLL9hmTF3ucp/qSNewnO2GmYAERko=",
        "owner": "Mofiqul",
        "repo": "dracula.nvim",
        "rev": "8d8bddb8814c3e7e62d80dda65a9876f97eb699c",
        "type": "github"
      },
      "original": {
        "owner": "Mofiqul",
        "repo": "dracula.nvim",
        "type": "github"
      }
    },
    "plugin-dressing-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716410905,
        "narHash": "sha256-AXY1+nA6Q/kWbuwOAqwVdd3QrjkHGVdVMHShvSIfLwM=",
        "owner": "stevearc",
        "repo": "dressing.nvim",
        "rev": "3c38ac861e1b8d4077ff46a779cde17330b29f3a",
        "type": "github"
      },
      "original": {
        "owner": "stevearc",
        "repo": "dressing.nvim",
        "type": "github"
      }
    },
    "plugin-elixir-tools": {
      "flake": false,
      "locked": {
        "lastModified": 1716478469,
        "narHash": "sha256-ESL/H/l5Yarcuo3MjBplKwox8E6CBxvWrpciyJeaES0=",
        "owner": "elixir-tools",
        "repo": "elixir-tools.nvim",
        "rev": "815cf0b0aab0421f8490199c0dd7442d22a7c1b7",
        "type": "github"
      },
      "original": {
        "owner": "elixir-tools",
        "repo": "elixir-tools.nvim",
        "type": "github"
      }
    },
    "plugin-fidget-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716093309,
        "narHash": "sha256-Gpk/G0ByOAIE8uX4Xr94CvAjJBSJMEOwBuvrhmYYGsg=",
        "owner": "j-hui",
        "repo": "fidget.nvim",
        "rev": "ef99df04a1c53a453602421bc0f756997edc8289",
        "type": "github"
      },
      "original": {
        "owner": "j-hui",
        "repo": "fidget.nvim",
        "type": "github"
      }
    },
    "plugin-flutter-tools": {
      "flake": false,
      "locked": {
        "lastModified": 1716114535,
        "narHash": "sha256-dRcWCqFHtDMOEGjKji3lxYQZKBhlhss/i51pX6FZxuI=",
        "owner": "akinsho",
        "repo": "flutter-tools.nvim",
        "rev": "990a1349c29f7d474a0cd51355aba773ccc9deea",
        "type": "github"
      },
      "original": {
        "owner": "akinsho",
        "repo": "flutter-tools.nvim",
        "type": "github"
      }
    },
    "plugin-gesture-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1715776261,
        "narHash": "sha256-XgF5BTKR5IiELNqYDvOPIGMw3HtkyNd3K5SOGfYFizY=",
        "owner": "notomo",
        "repo": "gesture.nvim",
        "rev": "3750313a40a752629e3e90f3c3e591969fdab388",
        "type": "github"
      },
      "original": {
        "owner": "notomo",
        "repo": "gesture.nvim",
        "type": "github"
      }
    },
    "plugin-gitsigns-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716453598,
        "narHash": "sha256-TTC3uvRsq4v6PBdS/3YAGpyhVt0w3/SGkPE3fu1zW94=",
        "owner": "lewis6991",
        "repo": "gitsigns.nvim",
        "rev": "cdfcd9d39d23c46ae9a040de2c6a8b8bf868746e",
        "type": "github"
      },
      "original": {
        "owner": "lewis6991",
        "repo": "gitsigns.nvim",
        "type": "github"
      }
    },
    "plugin-glow-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1703345545,
        "narHash": "sha256-GsNcASzVvY0066kak2nvUY5luzanoBclqcUOsODww8g=",
        "owner": "ellisonleao",
        "repo": "glow.nvim",
        "rev": "238070a686c1da3bccccf1079700eb4b5e19aea4",
        "type": "github"
      },
      "original": {
        "owner": "ellisonleao",
        "repo": "glow.nvim",
        "type": "github"
      }
    },
    "plugin-gruvbox": {
      "flake": false,
      "locked": {
        "lastModified": 1716072809,
        "narHash": "sha256-BLhZGijGF03UFiyMJ66C1ZLDRqAo1C80ekHcBm1PGoY=",
        "owner": "ellisonleao",
        "repo": "gruvbox.nvim",
        "rev": "96a8ec336fb48a11cefbd57508888361431aac26",
        "type": "github"
      },
      "original": {
        "owner": "ellisonleao",
        "repo": "gruvbox.nvim",
        "type": "github"
      }
    },
    "plugin-highlight-undo": {
      "flake": false,
      "locked": {
        "lastModified": 1714982601,
        "narHash": "sha256-yGw1SxcUmGQxqKhMb2SJAai07g+rOpEJy2CqIX2h9dM=",
        "owner": "tzachar",
        "repo": "highlight-undo.nvim",
        "rev": "1ea1c79372d7d93c88fd97543880927b7635e3d2",
        "type": "github"
      },
      "original": {
        "owner": "tzachar",
        "repo": "highlight-undo.nvim",
        "type": "github"
      }
    },
    "plugin-hop-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1694283445,
        "narHash": "sha256-SnuFeD/lrMxKtpBRPgIwdG0kVF7BWe02PiV7URVDASI=",
        "owner": "phaazon",
        "repo": "hop.nvim",
        "rev": "1a1eceafe54b5081eae4cb91c723abd1d450f34b",
        "type": "github"
      },
      "original": {
        "owner": "phaazon",
        "repo": "hop.nvim",
        "type": "github"
      }
    },
    "plugin-icon-picker-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1704321319,
        "narHash": "sha256-VZKsVeSmPR3AA8267Mtd5sSTZl2CAqnbgqceCptgp4w=",
        "owner": "ziontee113",
        "repo": "icon-picker.nvim",
        "rev": "3ee9a0ea9feeef08ae35e40c8be6a2fa2c20f2d3",
        "type": "github"
      },
      "original": {
        "owner": "ziontee113",
        "repo": "icon-picker.nvim",
        "type": "github"
      }
    },
    "plugin-image-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716308282,
        "narHash": "sha256-6nFzUchDQIvaTOv4lZ10q66m/ntU3dgVnlfBRodW+0Y=",
        "owner": "3rd",
        "repo": "image.nvim",
        "rev": "2a618c86d9f8fd9f7895d12b55ec2f31fd14fa05",
        "type": "github"
      },
      "original": {
        "owner": "3rd",
        "repo": "image.nvim",
        "type": "github"
      }
    },
    "plugin-indent-blankline": {
      "flake": false,
      "locked": {
        "lastModified": 1716449809,
        "narHash": "sha256-K5y0UQAXc0N6+1kqncX2eClpvZb7jlg7GhSerHQVZX0=",
        "owner": "lukas-reineke",
        "repo": "indent-blankline.nvim",
        "rev": "d98f537c3492e87b6dc6c2e3f66ac517528f406f",
        "type": "github"
      },
      "original": {
        "owner": "lukas-reineke",
        "repo": "indent-blankline.nvim",
        "type": "github"
      }
    },
    "plugin-leap-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716207448,
        "narHash": "sha256-O/wN5v8GhlEECBIhJQvWhKcpQrqT7J+BNkd/fIh0TIQ=",
        "owner": "ggandor",
        "repo": "leap.nvim",
        "rev": "8f4d3ab9fe5c906c5745150191831c5ee0a427a0",
        "type": "github"
      },
      "original": {
        "owner": "ggandor",
        "repo": "leap.nvim",
        "type": "github"
      }
    },
    "plugin-lsp-lines": {
      "flake": false,
      "locked": {
        "lastModified": 1716108775,
        "narHash": "sha256-QsvmPOer7JgO7Y+N/iaNJD7Kmy69gnlV4CeyaQesNvA=",
        "owner": "~whynothugo",
        "repo": "lsp_lines.nvim",
        "rev": "7d9e2748b61bff6ebba6e30adbc7173ccf21c055",
        "type": "sourcehut"
      },
      "original": {
        "owner": "~whynothugo",
        "repo": "lsp_lines.nvim",
        "type": "sourcehut"
      }
    },
    "plugin-lsp-signature": {
      "flake": false,
      "locked": {
        "lastModified": 1716637798,
        "narHash": "sha256-4Abo4HGwzZtqEHcS9lsQdw+Dsn7tkQoeq5QyfTEEwnA=",
        "owner": "ray-x",
        "repo": "lsp_signature.nvim",
        "rev": "529e8861d0410389f0163a5e5c2199d4a4ef5bf6",
        "type": "github"
      },
      "original": {
        "owner": "ray-x",
        "repo": "lsp_signature.nvim",
        "type": "github"
      }
    },
    "plugin-lspkind": {
      "flake": false,
      "locked": {
        "lastModified": 1704982040,
        "narHash": "sha256-/QLdBU/Zwmkw1NGuLBD48tvrmIP9d9WHhgcLEQgRTWo=",
        "owner": "onsails",
        "repo": "lspkind-nvim",
        "rev": "1735dd5a5054c1fb7feaf8e8658dbab925f4f0cf",
        "type": "github"
      },
      "original": {
        "owner": "onsails",
        "repo": "lspkind-nvim",
        "type": "github"
      }
    },
    "plugin-lspsaga": {
      "flake": false,
      "locked": {
        "lastModified": 1670360222,
        "narHash": "sha256-7ENInq3LAPPTdm0Fb7klOc630j8m4LRj1kLZZFYLh68=",
        "owner": "tami5",
        "repo": "lspsaga.nvim",
        "rev": "5faeec9f2508d2d49a66c0ac0d191096b4e3fa81",
        "type": "github"
      },
      "original": {
        "owner": "tami5",
        "repo": "lspsaga.nvim",
        "type": "github"
      }
    },
    "plugin-lualine": {
      "flake": false,
      "locked": {
        "lastModified": 1712310396,
        "narHash": "sha256-WcH2dWdRDgMkwBQhcgT+Z/ArMdm+VbRhmQftx4t2kNI=",
        "owner": "hoob3rt",
        "repo": "lualine.nvim",
        "rev": "0a5a66803c7407767b799067986b4dc3036e1983",
        "type": "github"
      },
      "original": {
        "owner": "hoob3rt",
        "repo": "lualine.nvim",
        "type": "github"
      }
    },
    "plugin-mind-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1679526071,
        "narHash": "sha256-JIhAhQYGLLRucwlhzfckQYU5qjqbHtNH52JlGS5a79w=",
        "owner": "phaazon",
        "repo": "mind.nvim",
        "rev": "002137dd7cf97865ebd01b6a260209d2daf2da66",
        "type": "github"
      },
      "original": {
        "owner": "phaazon",
        "repo": "mind.nvim",
        "type": "github"
      }
    },
    "plugin-minimap-vim": {
      "flake": false,
      "locked": {
        "lastModified": 1710689313,
        "narHash": "sha256-GR8VAHla5HWry1TAZQv0Xp7iG256vIGeQcBGMxyt310=",
        "owner": "wfxr",
        "repo": "minimap.vim",
        "rev": "395378137e6180762d5b963ca9ad5ac2db5d3283",
        "type": "github"
      },
      "original": {
        "owner": "wfxr",
        "repo": "minimap.vim",
        "type": "github"
      }
    },
    "plugin-modes-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1702245923,
        "narHash": "sha256-Kd2hf5obrPvCVLtRcFjLd75byyrB2o3uYCSEMW6IeCc=",
        "owner": "mvllow",
        "repo": "modes.nvim",
        "rev": "4035a46aaabe43faf1b54740575af9dd5bb03809",
        "type": "github"
      },
      "original": {
        "owner": "mvllow",
        "repo": "modes.nvim",
        "type": "github"
      }
    },
    "plugin-neo-tree-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1713050882,
        "narHash": "sha256-cZwOVpdMT0NCtp6Ha592QA2RzKVS6LhXXcjfDBCQ+0k=",
        "owner": "nvim-neo-tree",
        "repo": "neo-tree.nvim",
        "rev": "22e566aeb075c94f670f34077e05ba95190dfb4a",
        "type": "github"
      },
      "original": {
        "owner": "nvim-neo-tree",
        "repo": "neo-tree.nvim",
        "type": "github"
      }
    },
    "plugin-neocord": {
      "flake": false,
      "locked": {
        "lastModified": 1713923379,
        "narHash": "sha256-oVWdnQlgXIMzMiybMq7yR/WfEW+Fm5RmhWx0RWprlfQ=",
        "owner": "IogaMaster",
        "repo": "neocord",
        "rev": "aa7a58023166533da83ca7b11c0d2569e45d7381",
        "type": "github"
      },
      "original": {
        "owner": "IogaMaster",
        "repo": "neocord",
        "type": "github"
      }
    },
    "plugin-neodev-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1711715247,
        "narHash": "sha256-mAJOMVN7/xO7ykVNAeTeX+z2A/7yB8zdqlEKHL6Pb74=",
        "owner": "folke",
        "repo": "neodev.nvim",
        "rev": "ce9a2e8eaba5649b553529c5498acb43a6c317cd",
        "type": "github"
      },
      "original": {
        "owner": "folke",
        "repo": "neodev.nvim",
        "type": "github"
      }
    },
    "plugin-noice-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716502618,
        "narHash": "sha256-GrgFjVDIQcCfg5qyO6FnhlGUCrz6rwAFh81yZXUJra4=",
        "owner": "folke",
        "repo": "noice.nvim",
        "rev": "f119045f38792ad5311e5f9be7a879e4c1a95fe0",
        "type": "github"
      },
      "original": {
        "owner": "folke",
        "repo": "noice.nvim",
        "type": "github"
      }
    },
    "plugin-none-ls": {
      "flake": false,
      "locked": {
        "lastModified": 1708525772,
        "narHash": "sha256-VCDUKiy9C3Bu9suf2bI6XSis1+j01oFC3GFPyQxi74c=",
        "owner": "nvimtools",
        "repo": "none-ls.nvim",
        "rev": "bb680d752cec37949faca7a1f509e2fe67ab418a",
        "type": "github"
      },
      "original": {
        "owner": "nvimtools",
        "repo": "none-ls.nvim",
        "rev": "bb680d752cec37949faca7a1f509e2fe67ab418a",
        "type": "github"
      }
    },
    "plugin-nui-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716019714,
        "narHash": "sha256-JRVVRT1CZZTjr58L+gAer7eCg9/fMdAD0YD5ljNwl0Q=",
        "owner": "MunifTanjim",
        "repo": "nui.nvim",
        "rev": "b1b3dcd6ed8f355c78bad3d395ff645be5f8b6ae",
        "type": "github"
      },
      "original": {
        "owner": "MunifTanjim",
        "repo": "nui.nvim",
        "type": "github"
      }
    },
    "plugin-nvim-autopairs": {
      "flake": false,
      "locked": {
        "lastModified": 1716158088,
        "narHash": "sha256-YEAqjlzVrS/VLrkwGo3L7cNOE1LuyLYlBtkR2HA5oVk=",
        "owner": "windwp",
        "repo": "nvim-autopairs",
        "rev": "c15de7e7981f1111642e7e53799e1211d4606cb9",
        "type": "github"
      },
      "original": {
        "owner": "windwp",
        "repo": "nvim-autopairs",
        "type": "github"
      }
    },
    "plugin-nvim-bufferline-lua": {
      "flake": false,
      "locked": {
        "lastModified": 1716555412,
        "narHash": "sha256-8PCkY1zrlMrPGnQOb7MjqDXNlkeX46jrT4ScIL+MOwM=",
        "owner": "akinsho",
        "repo": "nvim-bufferline.lua",
        "rev": "99337f63f0a3c3ab9519f3d1da7618ca4f91cffe",
        "type": "github"
      },
      "original": {
        "owner": "akinsho",
        "repo": "nvim-bufferline.lua",
        "type": "github"
      }
    },
    "plugin-nvim-cmp": {
      "flake": false,
      "locked": {
        "lastModified": 1715954188,
        "narHash": "sha256-GhXfnWqpXFVM7Yi9+qEXHfA6LIMILcMG9pP4VYXuptE=",
        "owner": "hrsh7th",
        "repo": "nvim-cmp",
        "rev": "5260e5e8ecadaf13e6b82cf867a909f54e15fd07",
        "type": "github"
      },
      "original": {
        "owner": "hrsh7th",
        "repo": "nvim-cmp",
        "type": "github"
      }
    },
    "plugin-nvim-code-action-menu": {
      "flake": false,
      "locked": {
        "lastModified": 1702287297,
        "narHash": "sha256-pY+aP9iBuJhvDZzVEsOHZmnfaq3vUP7TfKEEQrj+Mo8=",
        "owner": "weilbith",
        "repo": "nvim-code-action-menu",
        "rev": "8c7672a4b04d3cc4edd2c484d05b660a9cb34a1b",
        "type": "github"
      },
      "original": {
        "owner": "weilbith",
        "repo": "nvim-code-action-menu",
        "type": "github"
      }
    },
    "plugin-nvim-colorizer-lua": {
      "flake": false,
      "locked": {
        "lastModified": 1703321305,
        "narHash": "sha256-oKvFN2K+ASlPNwj2rhptR/ErYgo6XKBPhXSZotDdCP0=",
        "owner": "NvChad",
        "repo": "nvim-colorizer.lua",
        "rev": "85855b38011114929f4058efc97af1059ab3e41d",
        "type": "github"
      },
      "original": {
        "owner": "NvChad",
        "repo": "nvim-colorizer.lua",
        "type": "github"
      }
    },
    "plugin-nvim-cursorline": {
      "flake": false,
      "locked": {
        "lastModified": 1650034925,
        "narHash": "sha256-Uhw65p1KBjs8KsVOmTzuiu3XKclxBob8AVdWEt30C/8=",
        "owner": "yamatsum",
        "repo": "nvim-cursorline",
        "rev": "804f0023692653b2b2368462d67d2a87056947f9",
        "type": "github"
      },
      "original": {
        "owner": "yamatsum",
        "repo": "nvim-cursorline",
        "type": "github"
      }
    },
    "plugin-nvim-dap": {
      "flake": false,
      "locked": {
        "lastModified": 1716747841,
        "narHash": "sha256-uzivFy0ZNLxAXDqkYNrNy1SSHPRrGv3OLVCNCRDiikU=",
        "owner": "mfussenegger",
        "repo": "nvim-dap",
        "rev": "922ebc75c2fa9305e36402fbd8c984c8638770a0",
        "type": "github"
      },
      "original": {
        "owner": "mfussenegger",
        "repo": "nvim-dap",
        "type": "github"
      }
    },
    "plugin-nvim-dap-go": {
      "flake": false,
      "locked": {
        "lastModified": 1716775637,
        "narHash": "sha256-B8A+ven18YgePLxAN3Q/j5NFb0FeTHCQak1uzaNDX9c=",
        "owner": "leoluz",
        "repo": "nvim-dap-go",
        "rev": "a0c5a2b991d7e9304a9a032cf177e22a4b0acda1",
        "type": "github"
      },
      "original": {
        "owner": "leoluz",
        "repo": "nvim-dap-go",
        "type": "github"
      }
    },
    "plugin-nvim-dap-ui": {
      "flake": false,
      "locked": {
        "lastModified": 1716237606,
        "narHash": "sha256-paiyLNzqUq9G3U8qn8yl1AjHJzTTa17exA05QO09nGA=",
        "owner": "rcarriga",
        "repo": "nvim-dap-ui",
        "rev": "334cf3038c4756e6ab999cbac67c847fb654c190",
        "type": "github"
      },
      "original": {
        "owner": "rcarriga",
        "repo": "nvim-dap-ui",
        "type": "github"
      }
    },
    "plugin-nvim-docs-view": {
      "flake": false,
      "locked": {
        "lastModified": 1705711563,
        "narHash": "sha256-N5PrJKhF6pHkel4EyAllNdEYQRninfSyaAXPbuAiD+s=",
        "owner": "amrbashir",
        "repo": "nvim-docs-view",
        "rev": "78d88bca16f32a430572758677f9246f6d7f7b94",
        "type": "github"
      },
      "original": {
        "owner": "amrbashir",
        "repo": "nvim-docs-view",
        "type": "github"
      }
    },
    "plugin-nvim-lightbulb": {
      "flake": false,
      "locked": {
        "lastModified": 1689887436,
        "narHash": "sha256-Meoop66jINllnxN6aohuPmU7DEjn64FMq/b8zuy9FEQ=",
        "owner": "kosayoda",
        "repo": "nvim-lightbulb",
        "rev": "8f00b89dd1b1dbde16872bee5fbcee2e58c9b8e9",
        "type": "github"
      },
      "original": {
        "owner": "kosayoda",
        "repo": "nvim-lightbulb",
        "type": "github"
      }
    },
    "plugin-nvim-lspconfig": {
      "flake": false,
      "locked": {
        "lastModified": 1716498901,
        "narHash": "sha256-PMMqPDnq4Q8gWeKQ2WPE+pOf1R1G61wJ+bAWkHpQlzE=",
        "owner": "neovim",
        "repo": "nvim-lspconfig",
        "rev": "b972e7154bc94ab4ecdbb38c8edbccac36f83996",
        "type": "github"
      },
      "original": {
        "owner": "neovim",
        "repo": "nvim-lspconfig",
        "type": "github"
      }
    },
    "plugin-nvim-navbuddy": {
      "flake": false,
      "locked": {
        "lastModified": 1716111817,
        "narHash": "sha256-sZ1M27qNbLMHKR4Zu0NfJoBcQxJbhmW7Cx74Acirlww=",
        "owner": "SmiteshP",
        "repo": "nvim-navbuddy",
        "rev": "f22bac988f2dd073601d75ba39ea5636ab6e38cb",
        "type": "github"
      },
      "original": {
        "owner": "SmiteshP",
        "repo": "nvim-navbuddy",
        "type": "github"
      }
    },
    "plugin-nvim-navic": {
      "flake": false,
      "locked": {
        "lastModified": 1701345631,
        "narHash": "sha256-0p5n/V8Jlj9XyxV/fuMwsbQ7oV5m9H2GqZZEA/njxCQ=",
        "owner": "SmiteshP",
        "repo": "nvim-navic",
        "rev": "8649f694d3e76ee10c19255dece6411c29206a54",
        "type": "github"
      },
      "original": {
        "owner": "SmiteshP",
        "repo": "nvim-navic",
        "type": "github"
      }
    },
    "plugin-nvim-neoclip": {
      "flake": false,
      "locked": {
        "lastModified": 1701664728,
        "narHash": "sha256-QtqLKdrDGzIiSEo3DZtv0C7wx3KlrcyePoIYdvH6vpk=",
        "owner": "AckslD",
        "repo": "nvim-neoclip.lua",
        "rev": "798cd0592a81c185465db3a091a0ff8a21af60fd",
        "type": "github"
      },
      "original": {
        "owner": "AckslD",
        "repo": "nvim-neoclip.lua",
        "type": "github"
      }
    },
    "plugin-nvim-nio": {
      "flake": false,
      "locked": {
        "lastModified": 1716391538,
        "narHash": "sha256-UffuTu7mF96LHk0MQRNrsgDyo1QWa/1i5eJKjZkuG8k=",
        "owner": "nvim-neotest",
        "repo": "nvim-nio",
        "rev": "632024157d01e8bc48fd7df6a7de8ffe3fdd4f3a",
        "type": "github"
      },
      "original": {
        "owner": "nvim-neotest",
        "repo": "nvim-nio",
        "type": "github"
      }
    },
    "plugin-nvim-notify": {
      "flake": false,
      "locked": {
        "lastModified": 1715959703,
        "narHash": "sha256-wxyHwL/uFdp6w32CVHgSOWkzRrIRuFvWh+J2401RAAA=",
        "owner": "rcarriga",
        "repo": "nvim-notify",
        "rev": "d333b6f167900f6d9d42a59005d82919830626bf",
        "type": "github"
      },
      "original": {
        "owner": "rcarriga",
        "repo": "nvim-notify",
        "type": "github"
      }
    },
    "plugin-nvim-session-manager": {
      "flake": false,
      "locked": {
        "lastModified": 1716560093,
        "narHash": "sha256-A6oHIg8PG84L7QIRpo9WXKzMq4EUe92jQIxObOxpFmg=",
        "owner": "Shatur",
        "repo": "neovim-session-manager",
        "rev": "b552ee8667037be5d0291229279a35af25e515fb",
        "type": "github"
      },
      "original": {
        "owner": "Shatur",
        "repo": "neovim-session-manager",
        "type": "github"
      }
    },
    "plugin-nvim-surround": {
      "flake": false,
      "locked": {
        "lastModified": 1715892699,
        "narHash": "sha256-Mg60htwXPqNKu+JnexKiKF3Huvr7pBNdvc6f3Kt2FRA=",
        "owner": "kylechui",
        "repo": "nvim-surround",
        "rev": "79aaa42da1f698ed31bcbe7f83081f69dca7ba17",
        "type": "github"
      },
      "original": {
        "owner": "kylechui",
        "repo": "nvim-surround",
        "type": "github"
      }
    },
    "plugin-nvim-tree-lua": {
      "flake": false,
      "locked": {
        "lastModified": 1716687243,
        "narHash": "sha256-E6J9d0LJMK+Owj/iWbGVZBiVL/NI1xd5P0NNQpUmXj4=",
        "owner": "nvim-tree",
        "repo": "nvim-tree.lua",
        "rev": "517e4fbb9ef3c0986da7047f44b4b91a2400f93c",
        "type": "github"
      },
      "original": {
        "owner": "nvim-tree",
        "repo": "nvim-tree.lua",
        "type": "github"
      }
    },
    "plugin-nvim-treesitter-context": {
      "flake": false,
      "locked": {
        "lastModified": 1716388265,
        "narHash": "sha256-EY5Si6t7LXcxOP3ubGAAMd3lgbeaCOCIybSKi1Ucx98=",
        "owner": "nvim-treesitter",
        "repo": "nvim-treesitter-context",
        "rev": "f62bfe19e0fbc13ae95649dfb3cf22f4ff85b683",
        "type": "github"
      },
      "original": {
        "owner": "nvim-treesitter",
        "repo": "nvim-treesitter-context",
        "type": "github"
      }
    },
    "plugin-nvim-ts-autotag": {
      "flake": false,
      "locked": {
        "lastModified": 1716420040,
        "narHash": "sha256-gy6OVR2iH361XMDDo0dqxJsAxo+5nXr3wP42pieeCUg=",
        "owner": "windwp",
        "repo": "nvim-ts-autotag",
        "rev": "8ae54b90e36ef1fc5267214b30c2cbff71525fe4",
        "type": "github"
      },
      "original": {
        "owner": "windwp",
        "repo": "nvim-ts-autotag",
        "type": "github"
      }
    },
    "plugin-nvim-web-devicons": {
      "flake": false,
      "locked": {
        "lastModified": 1716609001,
        "narHash": "sha256-fmbsnNVZ6nBorBILwPfEgcDDWZCkh9YZH/aC343FxP4=",
        "owner": "nvim-tree",
        "repo": "nvim-web-devicons",
        "rev": "b77921fdc44833c994fdb389d658ccbce5490c16",
        "type": "github"
      },
      "original": {
        "owner": "nvim-tree",
        "repo": "nvim-web-devicons",
        "type": "github"
      }
    },
    "plugin-obsidian-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716489161,
        "narHash": "sha256-R7q3PmDMYQtDTE1JZgQtvArBq55MnvNdcChOsuivSCo=",
        "owner": "epwalsh",
        "repo": "obsidian.nvim",
        "rev": "0890a3f4e1711d98b5aa78bf40d2c5b81ef3c39f",
        "type": "github"
      },
      "original": {
        "owner": "epwalsh",
        "repo": "obsidian.nvim",
        "type": "github"
      }
    },
    "plugin-onedark": {
      "flake": false,
      "locked": {
        "lastModified": 1715454207,
        "narHash": "sha256-GERMsVNELbeRrKsiPeSKcwNI+bH4C79koTBRtRMGqvc=",
        "owner": "navarasu",
        "repo": "onedark.nvim",
        "rev": "8e4b79b0e6495ddf29552178eceba1e147e6cecf",
        "type": "github"
      },
      "original": {
        "owner": "navarasu",
        "repo": "onedark.nvim",
        "type": "github"
      }
    },
    "plugin-orgmode-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716750850,
        "narHash": "sha256-3xsdklkUuJwUzUieZT6eGIgDZUdVEGeyhxxUe99TOAA=",
        "owner": "nvim-orgmode",
        "repo": "orgmode",
        "rev": "cb3c9bf6caf3411af88a9a1a0b7eb9be57b9741c",
        "type": "github"
      },
      "original": {
        "owner": "nvim-orgmode",
        "repo": "orgmode",
        "type": "github"
      }
    },
    "plugin-oxocarbon": {
      "flake": false,
      "locked": {
        "lastModified": 1701119822,
        "narHash": "sha256-++JALLPklok9VY2ChOddTYDvDNVadmCeB98jCAJYCZ0=",
        "owner": "nyoom-engineering",
        "repo": "oxocarbon.nvim",
        "rev": "c5846d10cbe4131cc5e32c6d00beaf59cb60f6a2",
        "type": "github"
      },
      "original": {
        "owner": "nyoom-engineering",
        "repo": "oxocarbon.nvim",
        "type": "github"
      }
    },
    "plugin-plenary-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716230027,
        "narHash": "sha256-5Jf2mWFVDofXBcXLbMa417mqlEPWLA+cQIZH/vNEV1g=",
        "owner": "nvim-lua",
        "repo": "plenary.nvim",
        "rev": "a3e3bc82a3f95c5ed0d7201546d5d2c19b20d683",
        "type": "github"
      },
      "original": {
        "owner": "nvim-lua",
        "repo": "plenary.nvim",
        "type": "github"
      }
    },
    "plugin-project-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1680567592,
        "narHash": "sha256-avV3wMiDbraxW4mqlEsKy0oeewaRj9Q33K8NzWoaptU=",
        "owner": "ahmedkhalf",
        "repo": "project.nvim",
        "rev": "8c6bad7d22eef1b71144b401c9f74ed01526a4fb",
        "type": "github"
      },
      "original": {
        "owner": "ahmedkhalf",
        "repo": "project.nvim",
        "type": "github"
      }
    },
    "plugin-registers": {
      "flake": false,
      "locked": {
        "lastModified": 1703954003,
        "narHash": "sha256-/MwIOR7H6ZkH/uLZOcMgg9XOWQB0yYYonbSKl51bXzo=",
        "owner": "tversteeg",
        "repo": "registers.nvim",
        "rev": "22bb98f93a423252fffeb3531f7bc12a3e07b63f",
        "type": "github"
      },
      "original": {
        "owner": "tversteeg",
        "repo": "registers.nvim",
        "type": "github"
      }
    },
    "plugin-rose-pine": {
      "flake": false,
      "locked": {
        "lastModified": 1716691958,
        "narHash": "sha256-mpBx0R9tR4KrOMO9J0gg2aOeHtiU9zK8xoa7Ebkx0n8=",
        "owner": "rose-pine",
        "repo": "neovim",
        "rev": "87aa437172357ad8f916942bca249ceadc6c68b1",
        "type": "github"
      },
      "original": {
        "owner": "rose-pine",
        "repo": "neovim",
        "type": "github"
      }
    },
    "plugin-rustaceanvim": {
      "flake": false,
      "locked": {
        "lastModified": 1720595685,
        "narHash": "sha256-Mx8pB9ECjFpbfmZPuXfpwoE5pUZ363M53f27ht7MBmA=",
        "owner": "mrcjkb",
        "repo": "rustaceanvim",
        "rev": "047f9c9d8cd2861745eb9de6c1570ee0875aa795",
        "type": "github"
      },
      "original": {
        "owner": "mrcjkb",
        "repo": "rustaceanvim",
        "type": "github"
      }
    },
    "plugin-scrollbar-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1684886154,
        "narHash": "sha256-zLBexSxQCn9HPY04a9w/UCJP1F5ShI2X12I9xE9H0cM=",
        "owner": "petertriho",
        "repo": "nvim-scrollbar",
        "rev": "35f99d559041c7c0eff3a41f9093581ceea534e8",
        "type": "github"
      },
      "original": {
        "owner": "petertriho",
        "repo": "nvim-scrollbar",
        "type": "github"
      }
    },
    "plugin-smartcolumn": {
      "flake": false,
      "locked": {
        "lastModified": 1710067624,
        "narHash": "sha256-DHIeDNUF9n9s14GVeojIwc5QUPwJMYYl3gRvhvO/rdE=",
        "owner": "m4xshen",
        "repo": "smartcolumn.nvim",
        "rev": "cefb17be095ad5526030a21bb2a80553cae09127",
        "type": "github"
      },
      "original": {
        "owner": "m4xshen",
        "repo": "smartcolumn.nvim",
        "type": "github"
      }
    },
    "plugin-sqls-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1684697500,
        "narHash": "sha256-jKFut6NZAf/eIeIkY7/2EsjsIhvZQKCKAJzeQ6XSr0s=",
        "owner": "nanotee",
        "repo": "sqls.nvim",
        "rev": "4b1274b5b44c48ce784aac23747192f5d9d26207",
        "type": "github"
      },
      "original": {
        "owner": "nanotee",
        "repo": "sqls.nvim",
        "type": "github"
      }
    },
    "plugin-tabular": {
      "flake": false,
      "locked": {
        "lastModified": 1550598128,
        "narHash": "sha256-irolBA/m3YIaezl+90h5G+xUOpad+3u44uJqDs4JCUs=",
        "owner": "godlygeek",
        "repo": "tabular",
        "rev": "339091ac4dd1f17e225fe7d57b48aff55f99b23a",
        "type": "github"
      },
      "original": {
        "owner": "godlygeek",
        "repo": "tabular",
        "type": "github"
      }
    },
    "plugin-telescope": {
      "flake": false,
      "locked": {
        "lastModified": 1716732931,
        "narHash": "sha256-JXdpKfrSvrzpTqy+g9Bg85/vIDTUZfDr+ZhxH8wJDxA=",
        "owner": "nvim-telescope",
        "repo": "telescope.nvim",
        "rev": "349660c0d35da06459ee8589af77de2086b652ce",
        "type": "github"
      },
      "original": {
        "owner": "nvim-telescope",
        "repo": "telescope.nvim",
        "type": "github"
      }
    },
    "plugin-todo-comments": {
      "flake": false,
      "locked": {
        "lastModified": 1716400082,
        "narHash": "sha256-ZJp0emoHogSdhXPIH74MH4CznxhCmMbO243dqxAZMJo=",
        "owner": "folke",
        "repo": "todo-comments.nvim",
        "rev": "e1549807066947818113a7d7ed48f637e49620d3",
        "type": "github"
      },
      "original": {
        "owner": "folke",
        "repo": "todo-comments.nvim",
        "type": "github"
      }
    },
    "plugin-toggleterm-nvim": {
      "flake": false,
      "locked": {
        "lastModified": 1716115307,
        "narHash": "sha256-h82zisizLm0FOt4l8lzgC/spFk3R5Gx25A5YgULwW8U=",
        "owner": "akinsho",
        "repo": "toggleterm.nvim",
        "rev": "fee58a0473fd92b28c34f8f724e4918b15ba30a3",
        "type": "github"
      },
      "original": {
        "owner": "akinsho",
        "repo": "toggleterm.nvim",
        "type": "github"
      }
    },
    "plugin-tokyonight": {
      "flake": false,
      "locked": {
        "lastModified": 1716732360,
        "narHash": "sha256-ZWxK0q8kUYHOk+ykH1m4901trnuHN8O9hkOZR6HdC+Y=",
        "owner": "folke",
        "repo": "tokyonight.nvim",
        "rev": "0fae425aaab04a5f97666bd431b96f2f19c36935",
        "type": "github"
      },
      "original": {
        "owner": "folke",
        "repo": "tokyonight.nvim",
        "type": "github"
      }
    },
    "plugin-trouble": {
      "flake": false,
      "locked": {
        "lastModified": 1716133735,
        "narHash": "sha256-D3dqI4NRgEG4BCDLQ3ci9lgYxt90XyWDQXlk4/uuR6M=",
        "owner": "folke",
        "repo": "trouble.nvim",
        "rev": "a8264a65a0b894832ea642844f5b7c30112c458f",
        "type": "github"
      },
      "original": {
        "owner": "folke",
        "repo": "trouble.nvim",
        "type": "github"
      }
    },
    "plugin-ts-error-translator": {
      "flake": false,
      "locked": {
        "lastModified": 1712269172,
        "narHash": "sha256-NJ0qfKvkwZ/0GolAeATlQLyQ7nGN6Z6q3uRqI+73wPk=",
        "owner": "dmmulroy",
        "repo": "ts-error-translator.nvim",
        "rev": "11ae55b28bde02663b5f983f59b0e3fd9c4e845b",
        "type": "github"
      },
      "original": {
        "owner": "dmmulroy",
        "repo": "ts-error-translator.nvim",
        "type": "github"
      }
    },
    "plugin-vim-dirtytalk": {
      "flake": false,
      "locked": {
        "lastModified": 1713047519,
        "narHash": "sha256-azU5jkv/fD/qDDyCU1bPNXOH6rmbDauG9jDNrtIXc0Y=",
        "owner": "psliwka",
        "repo": "vim-dirtytalk",
        "rev": "aa57ba902b04341a04ff97214360f56856493583",
        "type": "github"
      },
      "original": {
        "owner": "psliwka",
        "repo": "vim-dirtytalk",
        "type": "github"
      }
    },
    "plugin-vim-fugitive": {
      "flake": false,
      "locked": {
        "lastModified": 1716130336,
        "narHash": "sha256-nyNtb3nsS/zFdSNRyXabcGIabAwgivJIUFB2c62vXmA=",
        "owner": "tpope",
        "repo": "vim-fugitive",
        "rev": "4f59455d2388e113bd510e85b310d15b9228ca0d",
        "type": "github"
      },
      "original": {
        "owner": "tpope",
        "repo": "vim-fugitive",
        "type": "github"
      }
    },
    "plugin-vim-illuminate": {
      "flake": false,
      "locked": {
        "lastModified": 1715960194,
        "narHash": "sha256-DdJzTHxoOv+vjFymETa2MgXpM/qDwvZjpoo1W8OOBj0=",
        "owner": "RRethy",
        "repo": "vim-illuminate",
        "rev": "5eeb7951fc630682c322e88a9bbdae5c224ff0aa",
        "type": "github"
      },
      "original": {
        "owner": "RRethy",
        "repo": "vim-illuminate",
        "type": "github"
      }
    },
    "plugin-vim-markdown": {
      "flake": false,
      "locked": {
        "lastModified": 1709279705,
        "narHash": "sha256-eKwWdyvMZ7FV3FvOtqWVD7pulXNnhbEEjHq7MYg1woU=",
        "owner": "preservim",
        "repo": "vim-markdown",
        "rev": "a657e697376909c41475a686eeef7fc7a4972d94",
        "type": "github"
      },
      "original": {
        "owner": "preservim",
        "repo": "vim-markdown",
        "type": "github"
      }
    },
    "plugin-vim-repeat": {
      "flake": false,
      "locked": {
        "lastModified": 1611544268,
        "narHash": "sha256-8rfZa3uKXB3TRCqaDHZ6DfzNbm7WaYnLvmTNzYtnKHg=",
        "owner": "tpope",
        "repo": "vim-repeat",
        "rev": "24afe922e6a05891756ecf331f39a1f6743d3d5a",
        "type": "github"
      },
      "original": {
        "owner": "tpope",
        "repo": "vim-repeat",
        "type": "github"
      }
    },
    "plugin-vim-startify": {
      "flake": false,
      "locked": {
        "lastModified": 1695213983,
        "narHash": "sha256-W5N/Dqxf9hSXEEJsrEkXInFwBXNBJe9Dzx9TVS12mPk=",
        "owner": "mhinz",
        "repo": "vim-startify",
        "rev": "4e089dffdad46f3f5593f34362d530e8fe823dcf",
        "type": "github"
      },
      "original": {
        "owner": "mhinz",
        "repo": "vim-startify",
        "type": "github"
      }
    },
    "plugin-vim-vsnip": {
      "flake": false,
      "locked": {
        "lastModified": 1704937299,
        "narHash": "sha256-gvm6z4pgSULBVPukewRyjwxZ0vZgreQWbG/0kOB1QBo=",
        "owner": "hrsh7th",
        "repo": "vim-vsnip",
        "rev": "02a8e79295c9733434aab4e0e2b8c4b7cea9f3a9",
        "type": "github"
      },
      "original": {
        "owner": "hrsh7th",
        "repo": "vim-vsnip",
        "type": "github"
      }
    },
    "plugin-which-key": {
      "flake": false,
      "locked": {
        "lastModified": 1697801635,
        "narHash": "sha256-uvghPj/teWrRMm09Gh8iQ/LV2nYJw0lmoiZK6L4+1cY=",
        "owner": "folke",
        "repo": "which-key.nvim",
        "rev": "4433e5ec9a507e5097571ed55c02ea9658fb268a",
        "type": "github"
      },
      "original": {
        "owner": "folke",
        "repo": "which-key.nvim",
        "type": "github"
      }
    },
    "pre-commit-hooks-nix": {
      "inputs": {
        "flake-compat": [
          "lanzaboote",
          "flake-compat"
        ],
        "gitignore": "gitignore_2",
        "nixpkgs": [
          "lanzaboote",
          "nixpkgs"
        ],
        "nixpkgs-stable": "nixpkgs-stable_3"
      },
      "locked": {
        "lastModified": 1718879355,
        "narHash": "sha256-RTyqP4fBX2MdhNuMP+fnR3lIwbdtXhyj7w7fwtvgspc=",
        "owner": "cachix",
        "repo": "pre-commit-hooks.nix",
        "rev": "8cd35b9496d21a6c55164d8547d9d5280162b07a",
        "type": "github"
      },
      "original": {
        "owner": "cachix",
        "repo": "pre-commit-hooks.nix",
        "type": "github"
      }
    },
    "rnix-lsp": {
      "inputs": {
        "naersk": "naersk",
        "nixpkgs": "nixpkgs_6",
        "utils": "utils"
      },
      "locked": {
        "lastModified": 1669555118,
        "narHash": "sha256-F0s0m62S5bHNVWNHLZD6SeHiLrsDx98VQbRjDyIu+qQ=",
        "owner": "nix-community",
        "repo": "rnix-lsp",
        "rev": "95d40673fe43642e2e1144341e86d0036abd95d9",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "rnix-lsp",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "agenix": "agenix",
        "ags": "ags",
        "anyrun": "anyrun",
        "anyrun-nixos-options": "anyrun-nixos-options",
        "atticd": "atticd",
        "deploy-rs": "deploy-rs",
        "flake-compat": "flake-compat_2",
        "flake-parts": "flake-parts_2",
        "flake-utils": "flake-utils_2",
        "git-hooks": "git-hooks",
        "home-manager": "home-manager",
        "hyprland": "hyprland",
        "hyprland-contrib": "hyprland-contrib",
        "hyprland-plugins": "hyprland-plugins",
        "hyprpaper": "hyprpaper",
        "hyprpicker": "hyprpicker",
        "impermanence": "impermanence",
        "lanzaboote": "lanzaboote",
        "ndg": "ndg",
        "neovim-nightly": "neovim-nightly",
        "nh": "nh",
        "nil": "nil",
        "nix-index-db": "nix-index-db",
        "nixfmt": "nixfmt",
        "nixos-hardware": "nixos-hardware",
        "nixpak": "nixpak",
        "nixpkgs": "nixpkgs_5",
        "nixpkgs-small": "nixpkgs-small",
        "nvf": "nvf",
        "nyxexprs": "nyxexprs",
        "rust-overlay": "rust-overlay_2",
        "schizofox": "schizofox",
        "simple-nixos-mailserver": "simple-nixos-mailserver",
        "spicetify": "spicetify",
        "systems": "systems_9",
        "treefmt-nix": "treefmt-nix",
        "wallpkgs": "wallpkgs",
        "xdg-portal-hyprland": "xdg-portal-hyprland"
      }
    },
    "rust-overlay": {
      "inputs": {
        "nixpkgs": [
          "lanzaboote",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1719109180,
        "narHash": "sha256-96dwGCV2yQxDozDATqbsM3YU0ft3Isw3cwVDO/eNCv8=",
        "owner": "oxalica",
        "repo": "rust-overlay",
        "rev": "5fc5f3a0d7eabf7db86851e6423f9d7fbceaf89d",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "rust-overlay",
        "type": "github"
      }
    },
    "rust-overlay_2": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs-small"
        ]
      },
      "locked": {
        "lastModified": 1721614891,
        "narHash": "sha256-1yGOh8w/yhWAZ2NJR9N/shQ1tx2n9fmGe0XrDE00i9U=",
        "owner": "oxalica",
        "repo": "rust-overlay",
        "rev": "424a759557ed4c01cf9dbbf79a714150d64a90ad",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "rust-overlay",
        "type": "github"
      }
    },
    "schizofox": {
      "inputs": {
        "flake-compat": "flake-compat_6",
        "flake-parts": [
          "flake-parts"
        ],
        "home-manager": "home-manager_2",
        "nixpak": [
          "nixpak"
        ],
        "nixpkgs": [
          "nixpkgs-small"
        ],
        "searx-randomizer": "searx-randomizer",
        "systems": "systems_8"
      },
      "locked": {
        "lastModified": 1719058240,
        "narHash": "sha256-pprpeDB/mvINS5m5FIOq/1I0xpBvO8l7FyWNmmO0Ir0=",
        "owner": "schizofox",
        "repo": "schizofox",
        "rev": "becff9b92a28c3cd6e6a215da7f5f56883d3a304",
        "type": "github"
      },
      "original": {
        "owner": "schizofox",
        "repo": "schizofox",
        "type": "github"
      }
    },
    "searx-randomizer": {
      "inputs": {
        "crane": "crane_3",
        "flake-parts": "flake-parts_6",
        "nixpkgs": [
          "schizofox",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1704412376,
        "narHash": "sha256-Ap/AudJxCYBDWYy0lyqP0/FZYJCibL7jKkoj6hp1WS0=",
        "owner": "schizofox",
        "repo": "searx-randomizer",
        "rev": "c36a473732ba6b4f6024ac1c181631cf4d542b17",
        "type": "github"
      },
      "original": {
        "owner": "schizofox",
        "repo": "searx-randomizer",
        "type": "github"
      }
    },
    "simple-nixos-mailserver": {
      "inputs": {
        "blobs": "blobs",
        "flake-compat": "flake-compat_7",
        "nixpkgs": [
          "nixpkgs-small"
        ],
        "nixpkgs-24_05": "nixpkgs-24_05"
      },
      "locked": {
        "lastModified": 1721121314,
        "narHash": "sha256-zwc7YXga/1ppaZMWFreZykXtFwBgXodxUZiUx969r+g=",
        "owner": "simple-nixos-mailserver",
        "repo": "nixos-mailserver",
        "rev": "059b50b2e729729ea00c6831124d3837c494f3d5",
        "type": "gitlab"
      },
      "original": {
        "owner": "simple-nixos-mailserver",
        "ref": "master",
        "repo": "nixos-mailserver",
        "type": "gitlab"
      }
    },
    "spicetify": {
      "inputs": {
        "flake-compat": "flake-compat_8",
        "nixpkgs": [
          "nixpkgs-small"
        ]
      },
      "locked": {
        "lastModified": 1721535083,
        "narHash": "sha256-t50dw2gAU7WjAs9fxKiKGKPmZdOCWE0fR+g0S2lFd2c=",
        "owner": "gerg-l",
        "repo": "spicetify-nix",
        "rev": "cc7056ff1b0a83b66abc130872e3d8fd88c3f30c",
        "type": "github"
      },
      "original": {
        "owner": "gerg-l",
        "repo": "spicetify-nix",
        "type": "github"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_10": {
      "locked": {
        "lastModified": 1689347949,
        "narHash": "sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=",
        "owner": "nix-systems",
        "repo": "default-linux",
        "rev": "31732fcf5e8fea42e59c2488ad31a0e651500f68",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default-linux",
        "type": "github"
      }
    },
    "systems_11": {
      "locked": {
        "lastModified": 1689347949,
        "narHash": "sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=",
        "owner": "nix-systems",
        "repo": "default-linux",
        "rev": "31732fcf5e8fea42e59c2488ad31a0e651500f68",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default-linux",
        "type": "github"
      }
    },
    "systems_2": {
      "locked": {
        "lastModified": 1689347949,
        "narHash": "sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=",
        "owner": "nix-systems",
        "repo": "default-linux",
        "rev": "31732fcf5e8fea42e59c2488ad31a0e651500f68",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default-linux",
        "type": "github"
      }
    },
    "systems_3": {
      "locked": {
        "lastModified": 1689347949,
        "narHash": "sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=",
        "owner": "nix-systems",
        "repo": "default-linux",
        "rev": "31732fcf5e8fea42e59c2488ad31a0e651500f68",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default-linux",
        "type": "github"
      }
    },
    "systems_4": {
      "locked": {
        "lastModified": 1689347949,
        "narHash": "sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=",
        "owner": "nix-systems",
        "repo": "default-linux",
        "rev": "31732fcf5e8fea42e59c2488ad31a0e651500f68",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default-linux",
        "type": "github"
      }
    },
    "systems_5": {
      "locked": {
        "lastModified": 1689347949,
        "narHash": "sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=",
        "owner": "nix-systems",
        "repo": "default-linux",
        "rev": "31732fcf5e8fea42e59c2488ad31a0e651500f68",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default-linux",
        "type": "github"
      }
    },
    "systems_6": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_7": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_8": {
      "locked": {
        "lastModified": 1689347949,
        "narHash": "sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=",
        "owner": "nix-systems",
        "repo": "default-linux",
        "rev": "31732fcf5e8fea42e59c2488ad31a0e651500f68",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default-linux",
        "type": "github"
      }
    },
    "systems_9": {
      "locked": {
        "lastModified": 1689347949,
        "narHash": "sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=",
        "owner": "nix-systems",
        "repo": "default-linux",
        "rev": "31732fcf5e8fea42e59c2488ad31a0e651500f68",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default-linux",
        "type": "github"
      }
    },
    "treefmt-nix": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs-small"
        ]
      },
      "locked": {
        "lastModified": 1721458737,
        "narHash": "sha256-wNXLQ/ATs1S4Opg1PmuNoJ+Wamqj93rgZYV3Di7kxkg=",
        "owner": "numtide",
        "repo": "treefmt-nix",
        "rev": "888bfb10a9b091d9ed2f5f8064de8d488f7b7c97",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "treefmt-nix",
        "type": "github"
      }
    },
    "utils": {
      "locked": {
        "lastModified": 1656928814,
        "narHash": "sha256-RIFfgBuKz6Hp89yRr7+NR5tzIAbn52h8vT6vXkYjZoM=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "7e2a3b3dfd9af950a856d66b0a7d01e3c18aa249",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "wallpkgs": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs-small"
        ]
      },
      "locked": {
        "lastModified": 1691155724,
        "narHash": "sha256-eKauqoDqQPkWwXn/2rIK7HJJdE+/9NQTtV1RHtt32Aw=",
        "owner": "NotAShelf",
        "repo": "wallpkgs",
        "rev": "13e36d84d62ec43a7b1e21b84a42e8d5b4e718ee",
        "type": "github"
      },
      "original": {
        "owner": "NotAShelf",
        "repo": "wallpkgs",
        "type": "github"
      }
    },
    "xdg-portal-hyprland": {
      "inputs": {
        "hyprland-protocols": "hyprland-protocols_2",
        "hyprlang": "hyprlang_2",
        "nixpkgs": "nixpkgs_9",
        "systems": "systems_11"
      },
      "locked": {
        "lastModified": 1720194466,
        "narHash": "sha256-Rizg9efi6ue95zOp0MeIV2ZedNo+5U9G2l6yirgBUnA=",
        "owner": "hyprwm",
        "repo": "xdg-desktop-portal-hyprland",
        "rev": "b9b97e5ba23fe7bd5fa4df54696102e8aa863cf6",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "xdg-desktop-portal-hyprland",
        "type": "github"
      }
    },
    "xdph": {
      "inputs": {
        "hyprland-protocols": "hyprland-protocols",
        "hyprlang": [
          "hyprland",
          "hyprlang"
        ],
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1720194466,
        "narHash": "sha256-Rizg9efi6ue95zOp0MeIV2ZedNo+5U9G2l6yirgBUnA=",
        "owner": "hyprwm",
        "repo": "xdg-desktop-portal-hyprland",
        "rev": "b9b97e5ba23fe7bd5fa4df54696102e8aa863cf6",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "xdg-desktop-portal-hyprland",
        "type": "github"
      }
    },
    "zig": {
      "inputs": {
        "flake-compat": "flake-compat_4",
        "flake-utils": "flake-utils_4",
        "nixpkgs": "nixpkgs_7"
      },
      "locked": {
        "lastModified": 1716725305,
        "narHash": "sha256-LIz08gALt2wlutGXAEhNroEoIuPV5ePQB8LI4WzXcy8=",
        "owner": "mitchellh",
        "repo": "zig-overlay",
        "rev": "93b02a697561ecd438cfa5779727b5a1c300cb4c",
        "type": "github"
      },
      "original": {
        "owner": "mitchellh",
        "repo": "zig-overlay",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}
</file>

<file path="flake.nix">
{
  # https://github.com/NotAShelf/nyx
  description = "My vastly overengineered monorepo for everything NixOS";

  outputs = inputs:
    inputs.flake-parts.lib.mkFlake {inherit inputs;} {
      # Systems for which attributes of perSystem will be built. As
      # a rule of thumb, only systems provided by available hosts
      # should go in this list. More systems will increase evaluation
      # duration.
      systems = import inputs.systems;

      imports = [
        ./parts # Parts of the flake that are used to construct the final flake.
        ./hosts # Entrypoint for host configurations of my systems.
      ];
    };

  inputs = {
    # global, so they can be `.follow`ed
    systems.url = "github:nix-systems/default-linux";

    # We build against NixOS unstable, because stable takes way too long to get things into
    # more versions with or without pinned branches can be added if deemed necessary
    # stable? Never heard of her.
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    nixpkgs-small.url = "github:NixOS/nixpkgs/nixos-unstable-small"; # moves faster, has less packages

    # Sometimes nixpkgs breaks something I need, pin a working commit when that occurs
    # nixpkgs-pinned.url = "github:NixOS/nixpkgs/b610c60e23e0583cdc1997c54badfd32592d3d3e";

    # Powered by
    flake-parts = {
      url = "github:hercules-ci/flake-parts";
      inputs.nixpkgs-lib.follows = "nixpkgs";
    };

    # Home Manager
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Ever wanted nix error messages to be even more cryptic?
    # Try flake-utils today! (Devs I beg you please stop)
    flake-utils = {
      url = "github:numtide/flake-utils";
      inputs.systems.follows = "systems";
    };

    # Repo for hardware-specific NixOS modules
    nixos-hardware.url = "github:nixos/nixos-hardware";

    # Nix wrapper for building and testing my system
    nh = {
      url = "github:viperML/nh";
      inputs.nixpkgs.follows = "nixpkgs-small";
    };

    # multi-profile Nix-flake deploy
    deploy-rs = {
      url = "github:serokell/deploy-rs";
      inputs = {
        nixpkgs.follows = "nixpkgs-small";
        utils.follows = "flake-utils";
        flake-compat.follows = "flake-compat";
      };
    };

    # Documentation generation for module options
    ndg = {
      url = "github:feel-co/ndg";
      inputs = {
        flake-parts.follows = "flake-parts";
        nixpkgs.follows = "nixpkgs-small";
      };
    };

    # A tree-wide formatter
    treefmt-nix = {
      url = "github:numtide/treefmt-nix";
      inputs.nixpkgs.follows = "nixpkgs-small";
    };

    nixfmt = {
      url = "github:nixos/nixfmt";
      flake = false;
    };

    # I *dare you* to guess what this does
    # come on, try
    git-hooks = {
      url = "github:cachix/git-hooks.nix";
      inputs = {
        nixpkgs.follows = "nixpkgs-small";
        flake-compat.follows = "flake-compat";
      };
    };

    # Sandbox wrappers for programs
    nixpak = {
      url = "github:nixpak/nixpak";
      inputs = {
        nixpkgs.follows = "nixpkgs-small";
        flake-parts.follows = "flake-parts";
      };
    };

    # This exists, I guess
    flake-compat = {
      url = "github:edolstra/flake-compat";
      flake = false;
    };

    # Impermanence
    # doesn't offer much above properly used symlinks
    # but it *is* convenient
    impermanence.url = "github:nix-community/impermanence";

    # Secure-boot support on nixos
    # the interface iss still shaky and I would recommend
    # avoiding on production systems for now
    lanzaboote = {
      url = "github:nix-community/lanzaboote";
      inputs = {
        nixpkgs.follows = "nixpkgs";
        flake-compat.follows = "flake-compat";
      };
    };

    # nix-index database
    nix-index-db = {
      url = "github:nix-community/nix-index-database";
      inputs.nixpkgs.follows = "nixpkgs-small";
    };

    atticd = {
      url = "github:zhaofengli/attic";
      inputs.nixpkgs.follows = "nixpkgs-small";
    };

    # Secrets management
    agenix = {
      url = "github:ryantm/agenix";
      inputs = {
        nixpkgs.follows = "nixpkgs-small";
        home-manager.follows = "home-manager";
        darwin.follows = "";
      };
    };

    # Rust overlay
    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs = {
        nixpkgs.follows = "nixpkgs-small";
      };
    };

    # Nix Language server
    nil = {
      url = "github:oxalica/nil";
      inputs = {
        nixpkgs.follows = "nixpkgs-small";
        rust-overlay.follows = "rust-overlay";
      };
    };

    # Nightly builds of Neovim, built from the latest
    # revision. Usually breaks most plugins, but worth
    # keeping for when it actually works.
    neovim-nightly = {
      url = "github:nix-community/neovim-nightly-overlay";
      inputs = {
        nixpkgs.follows = "nixpkgs-small";
        flake-parts.follows = "flake-parts";
        git-hooks.follows = "git-hooks";
      };
    };

    # Personal collection of packages and modules
    # that are too unstable or too personal for nyxexprs.
    nyxexprs = {
      url = "github:NotAShelf/nyxexprs";
      inputs.systems.follows = "systems";
    };

    # An extensible Neovim configuration wrapper.
    nvf = {
      url = "github:NotAShelf/nvf";
      inputs = {
        nixpkgs.follows = "nixpkgs";
        nil.follows = "nil";
        flake-utils.follows = "flake-utils";
        flake-parts.follows = "flake-parts";
      };
    };

    # Use my own wallpapers repository to provide various
    # wallpapers as nix packages. This has storage usage
    # implications as those wallpapers will be kept in the
    # store even though they are not used.
    wallpkgs = {
      url = "github:NotAShelf/wallpkgs";
      inputs.nixpkgs.follows = "nixpkgs-small";
    };

    # anyrun program launcher
    anyrun.url = "github:anyrun-org/anyrun";
    anyrun-nixos-options = {
      url = "github:n3oney/anyrun-nixos-options";
      inputs = {
        flake-parts.follows = "flake-parts";
      };
    };

    # Aylur's gtk shell (ags)
    ags = {
      url = "github:Aylur/ags";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Nix flake for easy Spicetify configuration.
    # Includes themes, apps and more.
    spicetify = {
      url = "github:gerg-l/spicetify-nix";
      inputs.nixpkgs.follows = "nixpkgs-small";
    };

    # Schizophrenic Firefox configuration
    schizofox = {
      url = "github:schizofox/schizofox";
      inputs = {
        nixpkgs.follows = "nixpkgs-small";
        flake-parts.follows = "flake-parts";
        nixpak.follows = "nixpak";
      };
    };

    # Mailserver on nixos
    simple-nixos-mailserver = {
      url = "gitlab:simple-nixos-mailserver/nixos-mailserver/master";
      inputs.nixpkgs.follows = "nixpkgs-small";
    };

    # Hyprland & Hyprland Contrib repos
    # to be able to use the binary cache, we should avoid
    # overriding the nixpkgs input - as the resulting hash would
    # mismatch if packages are built against different versions
    # of the same depended packages.
    hyprland.url = "git+https://github.com/hyprwm/Hyprland?submodules=1";
    xdg-portal-hyprland.url = "github:hyprwm/xdg-desktop-portal-hyprland";
    hyprpicker.url = "github:hyprwm/hyprpicker";

    hyprpaper = {
      url = "github:hyprwm/hyprpaper";
      inputs = {
        hyprlang.follows = "hyprland/hyprlang";
        nixpkgs.follows = "hyprland/nixpkgs";
        systems.follows = "hyprland/systems";
      };
    };

    hyprland-contrib = {
      url = "github:hyprwm/contrib";
      inputs.nixpkgs.follows = "hyprland/nixpkgs";
    };

    hyprland-plugins = {
      url = "github:hyprwm/hyprland-plugins";
      inputs.hyprland.follows = "hyprland";
    };
  };
}
</file>

<file path="LICENSE">
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.
</file>

<file path="README.md">
<h1 id="header" align="center">
  <img src=".github/assets/nix-snowflake-colours.svg" width="128px" height="128px" />
  <br>
  Nýx
</h1>

<!-- deno-fmt-ignore-start -->

> [!NOTE]
> This repository, as of 5th of August 2024, has been abandoned. I will no
> longer be maintaining my system configuration in a public location. I am
> leaving this repository at its latest state at the time of removal for your
> convenience, as I owe it to _many_ people in the Nix community, however, I
> will not provide support of any kind. If you are curious about why I have
> decided to archive this repository, please read the commit message.
>
> Special thanks to everyone who was nice enough to adhere to my license.
> Countless hours (it's far past the hundreds of hours range) has been poured in
> this repository in the hopes of making a good public resource, however, it is
> apparently very hard for some people to understand the value of credit in open
> source. While I'm not going to name any names, some of you will know who it
> is. Because it's _quite_ obvious despite what they may think.
>
> You can go through the thousands of lines of Nix I've written, borrow what you
> need. I would appreciate the credit (it's really not too hard to give) but at
> this point I do not care. Keep in mind that things may be broken because 1.
> this is a personal configuration and 2. it is abandoned but I expect fully
> copy-pasted sections in typical NixOS fashion.
>
> So long, and thanks for all the fish.

<!-- deno-fmt-ignore-end -->

<div align="center">
   My over-engineered NixOS flake: Desktops, laptops, servers and everything
   else that can run an OS.<br/>
</div>

<div align="center">
  <br/>
  <a href="#preface">Preface</a><br/>
  <a href="#high-level-overview">Overview</a> | <a href="#host-specifications">Hosts</a> | <a href="docs/installing.md">Installation</a> <br/>
  <a href="#credits--special-thanks-to">Credits</a> | <a href="#license">License</a> <br/>
  <a href="#cool-resources">Helpful Resources</a>
  <br/>
</div>

<p id="preview" align="center">
  <br/>
  <img src=".github/assets/desktop_preview_wide.png" alt="Desktop Preview" />
  <br/>
  Screenshot last updated <b>2024-03-19</b>
</p>

## Preface

Before you proceed, I would like to direct your attention to the
[credits](#credits) section below, where I pay tribute to the individuals who
have contributed to this project. Whether through code references, suggestions,
bug reports, or simply moral support, they have my most sincere gratitude.

### Disclaimer

[resources section]: #cool-resources
[nix blog]: https://blog.notashelf.dev
[license]: #license

<!-- deno-fmt-ignore-start -->

> [!CAUTION]
> As I constantly tinker and adjust my configuration, **nothing in
> this repository (including the README and overview sections) should be
> considered final**. Expect frequent changes, possibly on a daily basis, and
> quite likely in a half-broken state. This is my personal configuration, not a
> framework, so I make no promises of stability or support. If something breaks,
> it will be your responsibility.
>
> It is also worth noting that almost all configurations in this repository
> contain age-encrypted secrets. This means they **cannot** be built or
> replicated successfully unless you know how to revert age encryption. If you
> do, please let me know!
>
> There is a [resources section] that I strongly encourage you to check out,
> which you can use to start building your own configuration. I also document
> some of my experiences in my [nix blog] for your convenience. Feel free to
> dissect this configuration and borrow bits that interest you, but _please_
> respect my [license] while doing so!
>
> Do not be fooled by the extensive documentation effort that has gone into this
> project. I invite you to explore the modules and countless lines of Nix I have
> written, but I strongly advise against attempting to boot any of these
> configurations unless you are me.
>
> To reiterate: **this is not a public framework**, and **you should not try to
> run this configuration**, or rip off specific bits. It will cause you much
> pain and suffering, in addition to robbing you of the joys of learning
> something by yourself. By copying me, you would have to learn my specific
> design choices _on top of Nix/NixOS_, whereas you could create something that
> suits your own needs in a shorter time span.

<!-- deno-fmt-ignore-end -->

## High Level Overview

This is a high level overview of this monorepo, containing configurations for
**all** of my machines that are currently running NixOS, or have ran NixOS at
some point in time. You will find below a list of my hosts and their
specifications, accompanied by a somewhat maintained list of features of this
configuration and my design considerations.

### Repo Structure

[flake schemas]: https://determinate.systems/posts/flake-schemas
[Home-Manager]: https://github.com/nix-community/home-manager

- [`flake.nix`](flake.nix) Ground zero of my system configuration. Declaring
  entry points
- [`docs`](docs)The documentation for my flake repository
  - [`cheatsheet`](docs/cheatsheet.md) Useful tips that are hard to memorize,
    but easy to write down
  - [`installing`](docs/installing.md) Non-exhaustive Nix/NixOS tips
- [`parts/`](parts) Individual parts of my flake, powered by flake-parts
  - [`apps`](parts/apps) Basic executables for maintenance jobs
  - [`checks`](parts/checks) Additional checks to build on `nix flake check`
  - [`lib`](parts/lib) Personal library of functions and utilities
  - [`modules`](parts/modules) NixOS/Home-manager modules provided by my flake
    for both internal and public use
  - [`npins`](parts/npins) Additional pinned dependencies, managed via `npins`
  - [`pkgs`](parts/pkgs) Packages exported by my flake
  - [`pre-commit`](parts/pre-commit) pre-commit hooks via `git-hooks.nix`
  - [`templates`](parts/templates) Templates for initializing new flakes.
    Provides some language-specific flakes
  - [`args.nix`](parts/args.nix) Common arguments that will be shared across, or
    exposed by the flake
  - [`deployments.nix`](parts/deployments.nix) Host setups for deploy-rs,
    currently a work in progress
  - [`fmt.nix`](parts/fmt.nix) Various formatting options for `nix fmt` and
    friends
  - [`iso-images.nix`](parts/iso-images.nix) Configurations for my home-built
    iso images, to be exposed in the flake schema
  - [`keys.nix`](parts/keys.nix) My public keys to be shared across the flake
  - [`shell.nix`](parts/shell.nix) Local devShell configurations
- [`homes`](homes) My personalized [Home-Manager] configurations.
- [`hosts`](hosts) Per-host configurations that contain machine specific
  instructions and setups
- [`modules`](modules) Modularized NixOS configurations
  - [`core`](modules/core) The core module that all systems depend on
    - [`common`](modules/core/common) Module configurations shared between all
      hosts (except installers)
    - [`profiles`](modules/core/profiles) Pluggable internal module system, for
      providing overrides based on host declarations (e.g. purpose)
    - [`roles`](modules/core/roles) A profile-like system that work through
      imports and ship predefined configurations
  - [`extra`](modules/extra) Extra modules that are rarely imported
    - [`shared`](modules/extra/shared) Modules that are both shared for outside
      consumption, and imported by the flake itself
    - [`exported`](modules/extra/exported) Modules that are strictly for outside
      consumption and are not imported by the flake itself
  - [`options`](modules/options) Definitions of module options used by common
    modules
    - [`meta`](modules/options/meta) Internal, read-only module that defines
      host capabilities based on other options
    - [`device`](modules/options/device) Hardware capabilities of the host
    - [`documentation`](modules/options/docs) Local module system documentation
    - [`system`](modules/options/system) OS-wide configurations for generic
      software and firmware on system level
    - [`style`](modules/options/style) Active style configurations ranging from
      QT theme to shell colors or icons
    - [`usrEnv`](modules/options/usrEnv) userspace exclusive configurations.
      E.g. lockscreen or package sets
- [`secrets`](secrets) Agenix secrets

### Notable Features

[theme options]: modules/options/style
[profiles]: modules/core/profiles
[wallpkgs]: https://github.com/notashelf/wallpkgs
[flake-parts]: https://flake.parts
[impermanence]: https://github.com/nix-community/impermanence

- **Flakes enabled** - leans heavily into flake-exclusive features of Nix
- **All-in-one** - Servers, desktops, laptops, virtual machines and anything you
  can think of. Managed in one place.
  - **Sane Defaults** - The modules attempt to bring the most sane defaults,
    while providing per-host toggles for conflicting choices.
  - **Flexible Modules** - Both Home-manager and NixOS modules allow users to
    retrieve NixOS or home-manager configurations from anywhere.
  - **Extensive Configuration** - Most desktop programs are configured out of
    the box and shared across hosts, with override options for per-host
    controls.
  - **Custom extended library** - An extended library for functions that help
    organize my system.
- **Shared Configurations** - Reduces re-used boilerplate code by sharing
  modules and profiles across hosts.
- **Fully Modular** - Utilizes NixOS' module system to avoid hard-coding any of
  the options.
  - **Profiles & Roles** - Provide serialized configuration sets and pluggables
    for easily changing large portions of configurations with less options and
    minimal imports.
  - **Detached Homes** - Home-manager configurations are able to be detached for
    non-NixOS usage.
  - **Modularized Flake Design** - With the help of [flake-parts], the flake is
    fully modular: keeping my `flake.nix` cleaner than ever.
  - **Declarative Themes** - Using my [theme options], [profiles] and
    [wallpkgs]. Everything theming is handled inside the flake.
  - **Tree-wide formatting** - Format files in any language with the help of
    devshells and treefmt-nix modules for flake-parts.
- **Declarative nftables firewall** - Flexible and over-engineered[^1]
  `nftables` table/chain builder abstraction for easy firewall setups.
- **Personal Installation Media** - Personalized ISO images for system
  installation and recovery.
- **Secrets Management** - Manage secrets through Agenix.
- **Opt-in Impermanence** - On-demand ephemeral root using BTRFS rollbacks and
  [impermanence].
- **Encryption Ready** - Supports and actively utilizes full disk encryption.
- **Wayland First** - Leaves Xorg in the past where it belongs. Everything is
  configured around Wayland, with Xorg only as a fallback.
- **Custom Xanmod Kernel** with a wide variety of patches to strip unneeded
  modules, and to provide platform specific optimizations for my desktop.

### Rules/Design Considerations

Most of those rules, so to speak, are quite obvious. However they are noted down
as a favor to potential contributors, and to potential observers who wish to
make sense of certain decisions that are made.

<!-- deno-fmt-ignore-start -->

[hosts directory]: hosts/README.md

> [!NOTE]
> Notes on host-specific design rules and considerations have been moved
> to the [hosts directory].

<!-- deno-fmt-ignore-end -->

- A commit should always be scoped/labeled. For example, while modifying a file
  in `hosts/enyo`, the commit would begin with `hosts/enyo:` followed by the
  description of the change.
- **alejandra** is the only Nix formatter that shall be used within this
  repository. nixfmt and nixpkgs-fmt both advertise ugly and confusing diffs,
  which I dislike. Some of Alejandra's quirks (e.g. lists) can be avoided with
  minor additions to the code.
- Backwards imports **should** be avoided wherever applicable.
- The repository should remain modular, and enabled options must **never**
  create inconsistencies or incompatibilities between hosts. In case of an
  unavoidable incompatibility, the issue must be documented. If possible,
  trigger conditions for incompatibilities must be avoided via assertions.
- Host-exclusive condition must **always** be placed in the host's own
  directory. Hosts **must** advertise their capabilities and features in
  `hosts/<hostname>/modules`
- `with lib;` **must** be avoided at all costs. Same goes for `with builtins;`
  which follows the same confusing pattern as `with lib;`. In some cases, `with`
  scopes may be accepted but only on the condition that the scope is narrow.
  - While accessing standard library functions, the call to library must be
    explicit. An example to this would be: `inherit (lib.modules) mkIf;` instead
    of repeating `lib.mkIf` or `lib.modules.mkIf` every time it is used.
  - `with pkgs;` _is_ fine, however its scope must be kept small. The biggest
    scope in which it shall be allowed is the smallest scope possible, e.g.,
    `environment.systemPackages = with pkgs; [ ];`. Anything larger than that
    should be avoided at all costs.

### Goals/Non-goals

#### Goals

I have a bunch of goals that I wish to accomplish by, and while working on this
repository. Those goals are:

- Provide _everything_ - we would like to provide modules, packages, system and
  home configurations all in one place
- Modularity - we would like to _never_ compromise on modularity, and two hosts
  of different purposes must _never_ conflict.
- Purity - `--impure` flag is a no-go.
- Documentation - anything that has been done should be documented. Best-effort
  not guaranteed.

#### Non-goals

- Full reproducibility - we contain secrets, therefore the setup is not fully
  reproducible.
- Compatibility - I do not intend to provide any kind of backwards compatibility
  for older Nix versions, or varying Nix forks.
- Replicability - this configuration does not aim to, and will not serve as a
  framework. I make no guarantees of replicability.
- Support - take a wild guess.
- Stability - see above.

## Host Specifications

<!-- deno-fmt-ignore-start -->

> [!WARNING]
> This section may be out of date as I constantly add, remove or re-purpose my
> hosts across a single network. Hostnames are assigned on a per-host basiis and
> are permanent, type and arch on another hand are subject to change.

<!-- deno-fmt-ignore-end -->

| Name         | Description                                                                                       |  Type   |     Arch      |
| :----------- | :------------------------------------------------------------------------------------------------ | :-----: | :-----------: |
| `enyo`       | Day-to-day desktop workstation boasting a full AMD system.                                        | Desktop | x86_64-linux  |
| `prometheus` | HP Pavilion with a a GTX 1050 and i7-7700hq                                                       | Laptop  | x86_64-linux  |
| `epimetheus` | Twin of prometheus, features full disk encryption in addition to everything prometheus provides   | Laptop  | x86_64-linux  |
| `hermes`     | HP Pavilion with a Ryzen 7 7730U, and my main portable workstation. Used on-the-go                | Laptop  | x86_64-linux  |
| `icarus`     | My 2014 Lenovo Yoga Ideapad that acts as a portable server, used for testing hardware limitations | Laptop  | x86_64-linux  |
| `helios`     | Hetzner Cloud VPS for non-critical infrastructure                                                 | Server  | x86_64-linux  |
| `selene`     | Alternative Hetzner Cloud VPS to be used as an aarch64-linux builder                              | Server  | aarch64-linux |
| `atlas`      | Proof of concept server host that is used by my Raspberry Pi 400                                  | Server  | aarch64-linux |
| `artemis`    | VM host for testing basic NixOS concepts. Previously targeted aarch64-linux                       |   VM    | x86_64-linux  |
| `apollon`    | VM host for testing networked services, generally used on servers                                 |   VM    | x86_64-linux  |
| `leto`       | VM host running medium-priority infrastructure inside a virtualized root server                   |   VM    | x86_64-linux  |
| `gaea`       | Custom live media, used as an installer                                                           |   ISO   | x86_64-linux  |
| `erebus`     | Air-gapped virtual machine/live-iso configuration for sensitive jobs                              |   ISO   | x86_64-linux  |

## Credits & Special Thanks

[atrocious abstractions]: parts/lib/builders.nix

My most sincere thanks go to [@fufexan](https://github.com/fufexan) for
convincing me to use NixOS and sticking around to answer my most stupid and
deranged questions, as well as my [atrocious abstractions]. Without his help, I
would not be able to stand where I do.

I also wish to extend my thanks to [@sioodmy](https://github.com/sioodmy) which
my configuration was initially based on. Though layouts and files have since
changed, the core principals and ideas remain. The simplicity of his
configuration flake allowed me to take a foothold in the Nix world.

Last but not least, I thank [@NobbZ](https://github.com/NobbZ) and
[@tejing1](https://github.com/tejing1) for their endless patience, critique and
willingness to show around the Nix ecosystem when I needed it the most. Many
pitfalls were avoided with their help, and many steps were taken forward with
their assistance.

### Awesome People

I got inspired by, and owe a lot to those folks

[sioodmy](https://github.com/sioodmy) - [fufexan](https://github.com/fufexan) -
[NobbZ](https://github.com/NobbZ) - [ViperML](https://github.com/viperML) -
[spikespaz](https://github.com/spikespaz) -
[hlissner](https://github.com/hlissner) -
[Max Headroom](https://github.com/max-privatevoid) -
[Lily Foster](https://github.com/lilyinstarlight)

... and surely there are more, but I tend to forget. Nevertheless, I extend my
thanks to all of those people and any others that I might have forgotten.

### Anti-credits

Pretend I haven't credited those people (but I will, because they are equally
awesome and I appreciate them)

[gerg-l (bald frog)](https://github.com/gerg-l) -
[eclairevoyant](https://github.com/eclairevoyant/) -
[FrothyMarrow](https://github.com/frothymarrow) -
[adamcstephens](https://github.com/adamcstephens) -
[nrabulinski](https://github.com/nrabulinski) -

### Honorable Mentions

Some of the cool people I have interacted with in the past and believe deserve a
shoutout for their support or companionship. I appreciate you all. :)

### The [wires gang](https://github.com/wires-org)

[fsnkty](https://github.com/fsnkty) - [lychee](https://github.com/itslychee) -
[germanbread](https://github.com/GermanBread) -
[marshmallow](https://github.com/mrshmllow/) -
[Zacc](https://github.com/zedseven) - [Michaili](https://github.com/MichailiK) -
[Sako](https://github.com/Sakooooo)

### Hyprland Community

[vaxry](https://github.com/vaxerski) -
[Vagahbond](https://github.com/Vagahbond) -
[jacekpoz](https://github.com/jacekpoz) -
[Raidenovich](https://github.com/raidenovich) -
[n3oney](https://github.com/n3oney) -

## Cool Resources

Resource that helped shape and improve this configuration, or resources that I
strongly recommend that you read in no particular order. Note that reading _any_
of those resources would be preferable to going through my config to learn.

### Official Manuals

As silly as manuals split over three different pages may sound, I encourage
everyone (including experts) to read those for comprehensive notes on
**packaging**, **program specific quirks & overrides** and other "pro-tips" on
Nix, Nixpkgs and NixOS.

You are invited to read about the module system in the NixOS manual before you
look into your own NixOS configuration.

- [Nix Manual](https://nix.dev/manual/nix)
- [NixOS Manual](https://nixos.org/manual/nixos/stable/)
- [Nixpkgs Manual](https://nixos.org/manual/nixpkgs/stable/)

### Interactive Pages

- [Tour of Nix](https://nixcloud.io/tour/?id=introduction/nix)
- [Noogle](https://noogle.dev)
- [NixOS package search](https://search.nixos.org/packages)
- [NixOS option search](https://search.nixos.org/options?)
- [Home-Manager option search](https://home-manager-options.extranix.com/)

### Readings

#### Blogs

Likely opinionated blog resources on Nix or Nix-centric processes. Nix knowledge
is best transferred via blogs on personal experience.

- [Astrid's blog](https://astrid.tech/t/nixos/)
- [Jade Lovelace's blog](https://jade.fyi/)
- [Xe Iaso's blog](https://xeiaso.net/blog)
- [viper's blog](https://ayats.org/)
- [Solène's blog](https://dataswamp.org/~solene)
- [Zimbatm's blog](https://zimbatm.com/notes)
- [Farid Zakaria's Blog](https://fzakaria.com/)
- [My own blog](https://blog.notashelf.dev)

#### Guides & Other Resources

Additional resources that you might want to check out before you begin your Nix
journey properly.

- [Zero to Nix](https://zero-to-nix.com/)
- [Nix Pills](https://nixos.org/guides/nix-pills/)
- [A list of Nix library functions and builtins](https://teu5us.github.io/nix-lib.html)

### Software

Software that helped this configuration become what it is, or software I find
interesting

**Linux**

- [Hyprland](https://github.com/hyprwm/Hyprland)
- [ags](https://github.com/aylur/ags)

**Nix/NixOS**

- [nix-super](https://github.com/privatevoid-net/nix-super)
- [Lix](https://lix.systems/about)
- [Agenix](https://github.com/ryantm/agenix)
- [nh](https://github.com/viperML/nh)

Projects I have made to use in this repository, or otherwise cool software that
are used in this repository that I have contributed to, or would like to
endorse.

- [nyxexprs](https://github.com/notashelf/nyxexprs) - my personal package
  collection
- [nvf](https://github.com/notashelf/nvf) - highly modular Neovim configuration
  framework for Nix/NixOS
- [schizofox](https://github.com/schizofox/schizofox) - hardened Firefox
  configuration for the delusional and the paranoid
- [ndg](https://github.com/feel-co/ndg) - a module documentation framework for
  Nix projects.

Additionally, take a look at my [personal blog](https://blog.notashelf.dev) for
my notes on Linux, and specifically challenging or tedious processes on Nix and
NixOS. Some of my notes have also been left in [the docs directory](docs/).

## License

<!-- Nobody reads those, why do I even bother... -->

Unless explicitly stated otherwise, all code and documentation found within in
this repository is licensed under the [GPLv3](LICENSE), or should you prefer,
under any later version of the GPL released by the FSF. Documentation and any
"creative" writing found in Markdown pages remain under the
[CC BY License](docs/LICENSE).

<!-- deno-fmt-ignore-start -->

The licenses entail that you must include a copyright notice inside your
repository, and disclose changes where applicable.

<!-- deno-fmt-ignore-end -->

All code here (excluding secrets) are available _for your convenience_ and _at
my own expense_ as I choose to keep my entire system configuration public. I
believe it is in Nix and NixOS community spirit to learn from and share code
with other NixOS users. As such if you are directly copying a section of my
configuration, please include a copyright notice at the top of the file you
import the code, or as a small comment above the section you have copied.

I cannot, _in any shape or form_ enforce my license on you, but I would like you
to know that I _really_ appreciate those who are kind enough to leave a link to
my configuration and uphold my license properly. Please do not be one of those
people who copy my commits without proper credit, as it is the only thing I can
ask for my efforts. Those who were kind and diligent enough to follow my
license, a _very_ big thank you.

<div align="right">
  <a href="#readme">Back to the Top</a>
  <br/>
</div>

[^1]:
    I speak of "over-engineering" not as a flaw, but as a trait that can properly
    describe the time and effort that this repository has taken. After 700+ recorded
    hours and 4500+ commits, that is the only word that can describe this project.
</file>

<file path="shell.nix">
# Make `nix-shell` consistent with `nix develop` for when I don't want to use Direnv
(builtins.getFlake ("git+file://" + toString ./.)).devShells.${builtins.currentSystem}.default
</file>

<file path="statix.toml">
ignore = ['.direnv', 'flake/npins']
</file>

<file path="stylua.toml">
column_width = 120
line_endings = "Unix"
indent_width = 2
indent_type = "Spaces"
quote_style = "AutoPreferSingle"
call_parentheses = "Always"
</file>

</files>
